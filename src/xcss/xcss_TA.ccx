// File Automatically Generated by MakeTA
// DO NOT EDIT


#include <ta/typea.h>
#include <ta/typea_constr.h>
#include <css/basic_types.h>
#include <css/c_ptr_types.h>
#include <css/ta_css.h>
#include <xcss.h>
#include "xcss_TA_type.h"
#include "xcss_TA_inst.h"


// Types

TypeDef TA_XCssEvent("XCssEvent", " represents events", 
	"", "", "", sizeof(XCssEvent), (void**)&TAI_XCssEvent, 1, 0, 0,1);
TypeDef TA_taList_XCssEvent_("taList_XCssEvent_", " ", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(taList<XCssEvent>), (void**)&TAI_taList_XCssEvent_, 0, 0, 0,1);
TypeDef TA_const_XCssEvent("const_XCssEvent", 1, 0, 0, 0,1);
TypeDef TA_const_XCssEvent_ref("const_XCssEvent_ref", 1, 0, 1, 0,1);
TypeDef TA_XCssEvent_List("XCssEvent_List", " ", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(XCssEvent_List), (void**)&TAI_XCssEvent_List, 0, 0, 0,1);
TypeDef TA_const_XCssEvent_List("const_XCssEvent_List", 1, 0, 0, 0,1);
TypeDef TA_const_XCssEvent_List_ref("const_XCssEvent_List_ref", 1, 0, 1, 0,1);
TypeDef TA_XCss("XCss", " makes an interface available in X (actually IV)", 
	"", "", "", sizeof(XCss), (void**)&TAI_XCss, 1, 0, 0,1);
TypeDef TA_const_XCss("const_XCss", 1, 0, 0, 0,1);
TypeDef TA_const_XCss_ref("const_XCss_ref", 1, 0, 1, 0,1);

// Instances

XCssEvent*		 TAI_XCssEvent=NULL;
taList<XCssEvent>*		 TAI_taList_XCssEvent_=NULL;
  static cssEl* cssElCFun_taList_XCssEvent__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<XCssEvent>*)ths)->MoveBefore((XCssEvent*)(void*)*arg[1], (XCssEvent*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_XCssEvent__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<XCssEvent>*)ths)->MoveAfter((XCssEvent*)(void*)*arg[1], (XCssEvent*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_XCssEvent__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<XCssEvent>*)ths)->SafeEl((int)*arg[1]), 1, &TA_XCssEvent);
    return rval;}
  static cssEl* cssElCFun_taList_XCssEvent__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<XCssEvent>*)ths)->FastEl((int)*arg[1]), 1, &TA_XCssEvent);
    return rval;}
  static cssEl* cssElCFun_taList_XCssEvent__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<XCssEvent>*)ths)->DefaultEl(), 1, &TA_XCssEvent);
    return rval;}
  static cssEl* cssElCFun_taList_XCssEvent__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<XCssEvent>*)ths)->Edit_El((XCssEvent*)(void*)*arg[1]), 1, &TA_XCssEvent);
    return rval;}
  static cssEl* cssElCFun_taList_XCssEvent__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<XCssEvent>*)ths)->FindName((const char*)*arg[1]), 1, &TA_XCssEvent);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<XCssEvent>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_XCssEvent);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_XCssEvent__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<XCssEvent>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_XCssEvent);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<XCssEvent>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_XCssEvent);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_XCssEvent__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<XCssEvent>*)ths)->Pop(), 1, &TA_XCssEvent);
    return rval;}
  static cssEl* cssElCFun_taList_XCssEvent__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<XCssEvent>*)ths)->Peek(), 1, &TA_XCssEvent);
    return rval;}
  static cssEl* cssElCFun_taList_XCssEvent__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<XCssEvent>*)ths)->AddUniqNameOld((XCssEvent*)(void*)*arg[1]), 1, &TA_XCssEvent);
    return rval;}
  static cssEl* cssElCFun_taList_XCssEvent__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<XCssEvent>*)ths)->LinkUniqNameOld((XCssEvent*)(void*)*arg[1]), 1, &TA_XCssEvent);
    return rval;}
XCssEvent_List*		 TAI_XCssEvent_List=NULL;
XCss*		 TAI_XCss=NULL;
  static cssEl* cssElCFun_XCss_Size_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->Size((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_XCss_PSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->PSize((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_XCss_Width_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((XCss*)ths)->Width());
    return rval;}
  static cssEl* cssElCFun_XCss_Height_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((XCss*)ths)->Height());
    return rval;}
  static cssEl* cssElCFun_XCss_PWidth_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((XCss*)ths)->PWidth());
    return rval;}
  static cssEl* cssElCFun_XCss_PHeight_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((XCss*)ths)->PHeight());
    return rval;}
  static cssEl* cssElCFun_XCss_ToPixels_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((XCss*)ths)->ToPixels((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_XCss_ToCoord_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((XCss*)ths)->ToCoord((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_XCss_ToPixelsCoord_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((XCss*)ths)->ToPixelsCoord((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_XCss_PushTransform_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->PushTransform();
    return rval;}
  static cssEl* cssElCFun_XCss_PopTransform_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->PopTransform();
    return rval;}
  static cssEl* cssElCFun_XCss_Scale_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->Scale((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_XCss_Translate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->Translate((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_XCss_Rotate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->Rotate((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_XCss_NewPath_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->NewPath();
    return rval;}
  static cssEl* cssElCFun_XCss_MoveTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->MoveTo((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_XCss_LineTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->LineTo((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_XCss_CurveTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->CurveTo((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6]);
    return rval;}
  static cssEl* cssElCFun_XCss_ClosePath_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->ClosePath();
    return rval;}
  static cssEl* cssElCFun_XCss_Stroke_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->Stroke();
    return rval;}
  static cssEl* cssElCFun_XCss_Line_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->Line((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_XCss_Rect_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->Rect((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_XCss_EllipsePath_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->EllipsePath((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_XCss_Circle_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->Circle((float)*arg[1], (float)*arg[2], (float)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_XCss_Ellipse_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->Ellipse((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_XCss_Fill_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->Fill();
    return rval;}
  static cssEl* cssElCFun_XCss_FillRect_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->FillRect((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_XCss_FillWindow_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->FillWindow();
    return rval;}
  static cssEl* cssElCFun_XCss_FillCircle_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->FillCircle((float)*arg[1], (float)*arg[2], (float)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_XCss_FillEllipse_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->FillEllipse((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_XCss_Character_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->Character((long)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_XCss_TextLeft_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((XCss*)ths)->TextLeft((const char*)*arg[1], (float)*arg[2], (float)*arg[3]);}
    if(na == 4) {
      ((XCss*)ths)->TextLeft((const char*)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_XCss_TextCenter_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((XCss*)ths)->TextCenter((const char*)*arg[1], (float)*arg[2], (float)*arg[3]);}
    if(na == 4) {
      ((XCss*)ths)->TextCenter((const char*)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_XCss_TextRight_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((XCss*)ths)->TextRight((const char*)*arg[1], (float)*arg[2], (float)*arg[3]);}
    if(na == 4) {
      ((XCss*)ths)->TextRight((const char*)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_XCss_Beep_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->Beep();
    return rval;}
  static cssEl* cssElCFun_XCss_BlankPointer_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->BlankPointer();
    return rval;}
  static cssEl* cssElCFun_XCss_UnBlankPointer_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->UnBlankPointer();
    return rval;}
  static cssEl* cssElCFun_XCss_ClipRect_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->ClipRect((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_XCss_FrontBuffer_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->FrontBuffer();
    return rval;}
  static cssEl* cssElCFun_XCss_BackBuffer_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->BackBuffer();
    return rval;}
  static cssEl* cssElCFun_XCss_DamageAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->DamageAll();
    return rval;}
  static cssEl* cssElCFun_XCss_PenColorRGBA_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->PenColorRGBA((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_XCss_PenColorName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->PenColorName((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_XCss_FillColorRGBA_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->FillColorRGBA((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_XCss_FillColorName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->FillColorName((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_XCss_BrushWidth_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->BrushWidth((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_XCss_FontName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->FontName((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_XCss_CreateWindow_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->CreateWindow();
    return rval;}
  static cssEl* cssElCFun_XCss_TimeMs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((XCss*)ths)->TimeMs());
    return rval;}
  static cssEl* cssElCFun_XCss_WaitTime_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->WaitTime((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_XCss_WaitEventTime_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->WaitEventTime((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_XCss_WaitEvent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->WaitEvent();
    return rval;}
  static cssEl* cssElCFun_XCss_DumpJPEG_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((XCss*)ths)->DumpJPEG((const char*)*arg[1]);
    return rval;}

// Type Data

static EnumDef_data TA_XCssEvent_EventType[]={
  {"UNDEFINED","","",0},
  {"MOTION","","",1},
  {"DOWN","","",2},
  {"UP","","",3},
  {"KEY","","",4},
  {"OTHER_EVENT","","",5},
  NULL};
static EnumDef_data TA_XCssEvent_Button[]={
  {"NONE","","",0},
  {"ANY","","",1},
  {"LEFT","","",2},
  {"MIDDLE","","",3},
  {"RIGHT","","",4},
  {"OTHER_BUTTON","","",5},
  NULL};
static EnumDef_data TA_XCssEvent_CtrlType[]={
  {"NO_CTRL","","",0},
  {"CTRL","","",1},
  {"META","","",2},
  {"SHIFT","","",4},
  {"CAPSLOCK","","",8},
  {"LEFT_BUT","","",16},
  {"MIDDLE_BUT","","",32},
  {"RIGHT_BUT","","",64},
  NULL};
static int XCssEvent::* TA_XCssEvent_MbrOff;
static MemberDef_data TA_XCssEvent_MemberDef[]={
  {&TA_unsigned_long,NULL,"time","","","",
    *((ta_memb_ptr*)&(TA_XCssEvent_MbrOff=(int XCssEvent::*)(&XCssEvent::time))),0,NULL,0},
  {NULL,"::EventType","type","","","",
    *((ta_memb_ptr*)&(TA_XCssEvent_MbrOff=(int XCssEvent::*)(&XCssEvent::type))),0,NULL,0},
  {&TA_FloatTwoDCoord,NULL,"pointer","","","",
    *((ta_memb_ptr*)&(TA_XCssEvent_MbrOff=(int XCssEvent::*)(&XCssEvent::pointer))),0,NULL,0},
  {NULL,"::Button","button","","","",
    *((ta_memb_ptr*)&(TA_XCssEvent_MbrOff=(int XCssEvent::*)(&XCssEvent::button))),0,NULL,0},
  {&TA_int,NULL,"keycode","","","",
    *((ta_memb_ptr*)&(TA_XCssEvent_MbrOff=(int XCssEvent::*)(&XCssEvent::keycode))),0,NULL,0},
  {&TA_int,NULL,"keysym","","","",
    *((ta_memb_ptr*)&(TA_XCssEvent_MbrOff=(int XCssEvent::*)(&XCssEvent::keysym))),0,NULL,0},
  {&TA_int,NULL,"ctrl","","","",
    *((ta_memb_ptr*)&(TA_XCssEvent_MbrOff=(int XCssEvent::*)(&XCssEvent::ctrl))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taList_XCssEvent__MoveBefore_MethArgs[]={
  {NULL,"::XCssEvent_ptr","trg",""},
  {NULL,"::XCssEvent_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_XCssEvent__MoveAfter_MethArgs[]={
  {NULL,"::XCssEvent_ptr","trg",""},
  {NULL,"::XCssEvent_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_XCssEvent__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_XCssEvent__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_XCssEvent__Edit_El_MethArgs[]={
  {NULL,"::XCssEvent_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_XCssEvent__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_XCssEvent__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_XCssEvent__AddUniqNameOld_MethArgs[]={
  {NULL,"::XCssEvent_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_XCssEvent__LinkUniqNameOld_MethArgs[]={
  {NULL,"::XCssEvent_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_XCssEvent__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_XCssEvent__MoveBefore_stub,TA_taList_XCssEvent__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_XCssEvent__MoveAfter_stub,TA_taList_XCssEvent__MoveAfter_MethArgs},
  {NULL,"::XCssEvent_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_XCssEvent__SafeEl_stub,TA_taList_XCssEvent__SafeEl_MethArgs},
  {NULL,"::XCssEvent_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_XCssEvent__FastEl_stub,TA_taList_XCssEvent__FastEl_MethArgs},
  {NULL,"::XCssEvent_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_XCssEvent__DefaultEl_stub,NULL},
  {NULL,"::XCssEvent_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_XCssEvent__Edit_El_stub,TA_taList_XCssEvent__Edit_El_MethArgs},
  {NULL,"::XCssEvent_ptr","FindName"," Find element with given name (item_nm) ","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_XCssEvent__FindName_stub,TA_taList_XCssEvent__FindName_MethArgs},
  {NULL,"::XCssEvent_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_XCssEvent__FindType_stub,TA_taList_XCssEvent__FindType_MethArgs},
  {NULL,"::XCssEvent_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_XCssEvent__Pop_stub,NULL},
  {NULL,"::XCssEvent_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_XCssEvent__Peek_stub,NULL},
  {NULL,"::XCssEvent_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_XCssEvent__AddUniqNameOld_stub,TA_taList_XCssEvent__AddUniqNameOld_MethArgs},
  {NULL,"::XCssEvent_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_XCssEvent__LinkUniqNameOld_stub,TA_taList_XCssEvent__LinkUniqNameOld_MethArgs},
  NULL};
static EnumDef_data TA_XCss_EventFilter[]={
  {"NO_EVENTS","","",0},
  {"PRESS","","",1},
  {"RELEASE","","",2},
  {"KEY","","",4},
  NULL};
static int XCss::* TA_XCss_MbrOff;
static MemberDef_data TA_XCss_MemberDef[]={
  {&TA_FloatTwoDCoord,NULL,"win_geom"," geometry of the overall window","","",
    *((ta_memb_ptr*)&(TA_XCss_MbrOff=(int XCss::*)(&XCss::win_geom))),0,NULL,0},
  {&TA_int,NULL,"ev_filter"," events to process","","",
    *((ta_memb_ptr*)&(TA_XCss_MbrOff=(int XCss::*)(&XCss::ev_filter))),0,NULL,0},
  {&TA_XCssEvent_List,NULL,"events"," list of events","","",
    *((ta_memb_ptr*)&(TA_XCss_MbrOff=(int XCss::*)(&XCss::events))),0,NULL,0},
  NULL};
static MethodArgs_data TA_XCss_Size_MethArgs[]={
  {&TA_float,NULL,"width",""},
  {&TA_float,NULL,"height",""},
  NULL};
static MethodArgs_data TA_XCss_PSize_MethArgs[]={
  {&TA_int,NULL,"width",""},
  {&TA_int,NULL,"height",""},
  NULL};
static MethodArgs_data TA_XCss_ToPixels_MethArgs[]={
  {&TA_float,NULL,"coord",""},
  NULL};
static MethodArgs_data TA_XCss_ToCoord_MethArgs[]={
  {&TA_int,NULL,"pix",""},
  NULL};
static MethodArgs_data TA_XCss_ToPixelsCoord_MethArgs[]={
  {&TA_float,NULL,"coord",""},
  NULL};
static MethodArgs_data TA_XCss_Scale_MethArgs[]={
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"y",""},
  NULL};
static MethodArgs_data TA_XCss_Translate_MethArgs[]={
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"y",""},
  NULL};
static MethodArgs_data TA_XCss_Rotate_MethArgs[]={
  {&TA_float,NULL,"angle",""},
  NULL};
static MethodArgs_data TA_XCss_MoveTo_MethArgs[]={
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"y",""},
  NULL};
static MethodArgs_data TA_XCss_LineTo_MethArgs[]={
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"y",""},
  NULL};
static MethodArgs_data TA_XCss_CurveTo_MethArgs[]={
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"y",""},
  {&TA_float,NULL,"x1",""},
  {&TA_float,NULL,"y1",""},
  {&TA_float,NULL,"x2",""},
  {&TA_float,NULL,"y2",""},
  NULL};
static MethodArgs_data TA_XCss_Line_MethArgs[]={
  {&TA_float,NULL,"x1",""},
  {&TA_float,NULL,"y1",""},
  {&TA_float,NULL,"x2",""},
  {&TA_float,NULL,"y2",""},
  NULL};
static MethodArgs_data TA_XCss_Rect_MethArgs[]={
  {&TA_float,NULL,"l",""},
  {&TA_float,NULL,"b",""},
  {&TA_float,NULL,"r",""},
  {&TA_float,NULL,"t",""},
  NULL};
static MethodArgs_data TA_XCss_EllipsePath_MethArgs[]={
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"y",""},
  {&TA_float,NULL,"rx",""},
  {&TA_float,NULL,"ry",""},
  NULL};
static MethodArgs_data TA_XCss_Circle_MethArgs[]={
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"y",""},
  {&TA_float,NULL,"r",""},
  NULL};
static MethodArgs_data TA_XCss_Ellipse_MethArgs[]={
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"y",""},
  {&TA_float,NULL,"rx",""},
  {&TA_float,NULL,"ry",""},
  NULL};
static MethodArgs_data TA_XCss_FillRect_MethArgs[]={
  {&TA_float,NULL,"l",""},
  {&TA_float,NULL,"b",""},
  {&TA_float,NULL,"r",""},
  {&TA_float,NULL,"t",""},
  NULL};
static MethodArgs_data TA_XCss_FillCircle_MethArgs[]={
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"y",""},
  {&TA_float,NULL,"r",""},
  NULL};
static MethodArgs_data TA_XCss_FillEllipse_MethArgs[]={
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"y",""},
  {&TA_float,NULL,"rx",""},
  {&TA_float,NULL,"ry",""},
  NULL};
static MethodArgs_data TA_XCss_Character_MethArgs[]={
  {&TA_long,NULL,"ch",""},
  {&TA_float,NULL,"width",""},
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"y",""},
  NULL};
static MethodArgs_data TA_XCss_TextLeft_MethArgs[]={
  {&TA_const_char_ptr,NULL,"txt",""},
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"y",""},
  {&TA_float,NULL,"space"," 1.05f"},
  NULL};
static MethodArgs_data TA_XCss_TextCenter_MethArgs[]={
  {&TA_const_char_ptr,NULL,"txt",""},
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"y",""},
  {&TA_float,NULL,"space"," 1.05f"},
  NULL};
static MethodArgs_data TA_XCss_TextRight_MethArgs[]={
  {&TA_const_char_ptr,NULL,"txt",""},
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"y",""},
  {&TA_float,NULL,"space"," 1.05f"},
  NULL};
static MethodArgs_data TA_XCss_ClipRect_MethArgs[]={
  {&TA_float,NULL,"l",""},
  {&TA_float,NULL,"b",""},
  {&TA_float,NULL,"r",""},
  {&TA_float,NULL,"t",""},
  NULL};
static MethodArgs_data TA_XCss_PenColorRGBA_MethArgs[]={
  {&TA_float,NULL,"r",""},
  {&TA_float,NULL,"g",""},
  {&TA_float,NULL,"b",""},
  {&TA_float,NULL,"a",""},
  NULL};
static MethodArgs_data TA_XCss_PenColorName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"name",""},
  NULL};
static MethodArgs_data TA_XCss_FillColorRGBA_MethArgs[]={
  {&TA_float,NULL,"r",""},
  {&TA_float,NULL,"g",""},
  {&TA_float,NULL,"b",""},
  {&TA_float,NULL,"a",""},
  NULL};
static MethodArgs_data TA_XCss_FillColorName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"name",""},
  NULL};
static MethodArgs_data TA_XCss_BrushWidth_MethArgs[]={
  {&TA_float,NULL,"width",""},
  NULL};
static MethodArgs_data TA_XCss_FontName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"font_spec",""},
  NULL};
static MethodArgs_data TA_XCss_WaitTime_MethArgs[]={
  {&TA_int,NULL,"ms",""},
  NULL};
static MethodArgs_data TA_XCss_WaitEventTime_MethArgs[]={
  {&TA_int,NULL,"ms",""},
  NULL};
static MethodArgs_data TA_XCss_DumpJPEG_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fname",""},
  NULL};
static MethodDef_data TA_XCss_MethodDef[]={
  {&TA_void,NULL,"Size","","","",
    0,2,-1,0,NULL,cssElCFun_XCss_Size_stub,TA_XCss_Size_MethArgs},
  {&TA_void,NULL,"PSize","","","",
    0,2,-1,0,NULL,cssElCFun_XCss_PSize_stub,TA_XCss_PSize_MethArgs},
  {&TA_float,NULL,"Width","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_Width_stub,NULL},
  {&TA_float,NULL,"Height","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_Height_stub,NULL},
  {&TA_int,NULL,"PWidth","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_PWidth_stub,NULL},
  {&TA_int,NULL,"PHeight","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_PHeight_stub,NULL},
  {&TA_int,NULL,"ToPixels","","","",
    0,1,-1,0,NULL,cssElCFun_XCss_ToPixels_stub,TA_XCss_ToPixels_MethArgs},
  {&TA_float,NULL,"ToCoord","","","",
    0,1,-1,0,NULL,cssElCFun_XCss_ToCoord_stub,TA_XCss_ToCoord_MethArgs},
  {&TA_float,NULL,"ToPixelsCoord","","","",
    0,1,-1,0,NULL,cssElCFun_XCss_ToPixelsCoord_stub,TA_XCss_ToPixelsCoord_MethArgs},
  {&TA_void,NULL,"PushTransform","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_PushTransform_stub,NULL},
  {&TA_void,NULL,"PopTransform","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_PopTransform_stub,NULL},
  {&TA_void,NULL,"Scale","","","",
    0,2,-1,0,NULL,cssElCFun_XCss_Scale_stub,TA_XCss_Scale_MethArgs},
  {&TA_void,NULL,"Translate","","","",
    0,2,-1,0,NULL,cssElCFun_XCss_Translate_stub,TA_XCss_Translate_MethArgs},
  {&TA_void,NULL,"Rotate","","","",
    0,1,-1,0,NULL,cssElCFun_XCss_Rotate_stub,TA_XCss_Rotate_MethArgs},
  {&TA_void,NULL,"NewPath","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_NewPath_stub,NULL},
  {&TA_void,NULL,"MoveTo","","","",
    0,2,-1,0,NULL,cssElCFun_XCss_MoveTo_stub,TA_XCss_MoveTo_MethArgs},
  {&TA_void,NULL,"LineTo","","","",
    0,2,-1,0,NULL,cssElCFun_XCss_LineTo_stub,TA_XCss_LineTo_MethArgs},
  {&TA_void,NULL,"CurveTo","","","",
    0,6,-1,0,NULL,cssElCFun_XCss_CurveTo_stub,TA_XCss_CurveTo_MethArgs},
  {&TA_void,NULL,"ClosePath","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_ClosePath_stub,NULL},
  {&TA_void,NULL,"Stroke","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_Stroke_stub,NULL},
  {&TA_void,NULL,"Line","","","",
    0,4,-1,0,NULL,cssElCFun_XCss_Line_stub,TA_XCss_Line_MethArgs},
  {&TA_void,NULL,"Rect","","","",
    0,4,-1,0,NULL,cssElCFun_XCss_Rect_stub,TA_XCss_Rect_MethArgs},
  {&TA_void,NULL,"EllipsePath","","","",
    0,4,-1,0,NULL,cssElCFun_XCss_EllipsePath_stub,TA_XCss_EllipsePath_MethArgs},
  {&TA_void,NULL,"Circle","","","",
    0,3,-1,0,NULL,cssElCFun_XCss_Circle_stub,TA_XCss_Circle_MethArgs},
  {&TA_void,NULL,"Ellipse","","","",
    0,4,-1,0,NULL,cssElCFun_XCss_Ellipse_stub,TA_XCss_Ellipse_MethArgs},
  {&TA_void,NULL,"Fill","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_Fill_stub,NULL},
  {&TA_void,NULL,"FillRect","","","",
    0,4,-1,0,NULL,cssElCFun_XCss_FillRect_stub,TA_XCss_FillRect_MethArgs},
  {&TA_void,NULL,"FillWindow","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_FillWindow_stub,NULL},
  {&TA_void,NULL,"FillCircle","","","",
    0,3,-1,0,NULL,cssElCFun_XCss_FillCircle_stub,TA_XCss_FillCircle_MethArgs},
  {&TA_void,NULL,"FillEllipse","","","",
    0,4,-1,0,NULL,cssElCFun_XCss_FillEllipse_stub,TA_XCss_FillEllipse_MethArgs},
  {&TA_void,NULL,"Character","","","",
    0,4,-1,0,NULL,cssElCFun_XCss_Character_stub,TA_XCss_Character_MethArgs},
  {&TA_void,NULL,"TextLeft","","","",
    0,4,3,0,NULL,cssElCFun_XCss_TextLeft_stub,TA_XCss_TextLeft_MethArgs},
  {&TA_void,NULL,"TextCenter","","","",
    0,4,3,0,NULL,cssElCFun_XCss_TextCenter_stub,TA_XCss_TextCenter_MethArgs},
  {&TA_void,NULL,"TextRight","","","",
    0,4,3,0,NULL,cssElCFun_XCss_TextRight_stub,TA_XCss_TextRight_MethArgs},
  {&TA_void,NULL,"Beep","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_Beep_stub,NULL},
  {&TA_void,NULL,"BlankPointer","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_BlankPointer_stub,NULL},
  {&TA_void,NULL,"UnBlankPointer","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_UnBlankPointer_stub,NULL},
  {&TA_void,NULL,"ClipRect","","","",
    0,4,-1,0,NULL,cssElCFun_XCss_ClipRect_stub,TA_XCss_ClipRect_MethArgs},
  {&TA_void,NULL,"FrontBuffer","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_FrontBuffer_stub,NULL},
  {&TA_void,NULL,"BackBuffer","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_BackBuffer_stub,NULL},
  {&TA_void,NULL,"DamageAll","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_DamageAll_stub,NULL},
  {&TA_void,NULL,"PenColorRGBA","","","",
    0,4,-1,0,NULL,cssElCFun_XCss_PenColorRGBA_stub,TA_XCss_PenColorRGBA_MethArgs},
  {&TA_void,NULL,"PenColorName","","","",
    0,1,-1,0,NULL,cssElCFun_XCss_PenColorName_stub,TA_XCss_PenColorName_MethArgs},
  {&TA_void,NULL,"FillColorRGBA","","","",
    0,4,-1,0,NULL,cssElCFun_XCss_FillColorRGBA_stub,TA_XCss_FillColorRGBA_MethArgs},
  {&TA_void,NULL,"FillColorName","","","",
    0,1,-1,0,NULL,cssElCFun_XCss_FillColorName_stub,TA_XCss_FillColorName_MethArgs},
  {&TA_void,NULL,"BrushWidth","","","",
    0,1,-1,0,NULL,cssElCFun_XCss_BrushWidth_stub,TA_XCss_BrushWidth_MethArgs},
  {&TA_void,NULL,"FontName","","","",
    0,1,-1,0,NULL,cssElCFun_XCss_FontName_stub,TA_XCss_FontName_MethArgs},
  {&TA_void,NULL,"CreateWindow","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_CreateWindow_stub,NULL},
  {&TA_long,NULL,"TimeMs","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_TimeMs_stub,NULL},
  {&TA_void,NULL,"WaitTime","","","",
    0,1,-1,0,NULL,cssElCFun_XCss_WaitTime_stub,TA_XCss_WaitTime_MethArgs},
  {&TA_void,NULL,"WaitEventTime","","","",
    0,1,-1,0,NULL,cssElCFun_XCss_WaitEventTime_stub,TA_XCss_WaitEventTime_MethArgs},
  {&TA_void,NULL,"WaitEvent","","","",
    0,0,-1,0,NULL,cssElCFun_XCss_WaitEvent_stub,NULL},
  {&TA_void,NULL,"DumpJPEG","","","",
    0,1,-1,0,NULL,cssElCFun_XCss_DumpJPEG_stub,TA_XCss_DumpJPEG_MethArgs},
  NULL};

// Init Function


static bool ta_Init_xcss_done = false;

void ta_Init_xcss() {
  TypeDef* sbt;

  if(ta_Init_xcss_done) return;
  ta_Init_xcss_done = true;

  ta_Init_ta();
  ta_Init_ta_misc();

  taMisc::in_init = true;

  taMisc::types.Add(&TA_XCssEvent);
    TAI_XCssEvent = new XCssEvent;
    TA_XCssEvent.AddParFormal(&TA_class);
    TA_XCssEvent.AddParCache(&TA_taBase);
    TA_XCssEvent.AddClassPar(&TA_taBase,0);
    tac_AddEnum(TA_XCssEvent, "EventType", "", "", "", "", TA_XCssEvent_EventType);
    tac_AddEnum(TA_XCssEvent, "Button", "", "", "", "", TA_XCssEvent_Button);
    tac_AddEnum(TA_XCssEvent, "CtrlType", "", "", "", "", TA_XCssEvent_CtrlType);
    tac_AddMembers(TA_XCssEvent,TA_XCssEvent_MemberDef);
  taMisc::types.Add(&TA_taList_XCssEvent_);
    TAI_taList_XCssEvent_ = new taList<XCssEvent>;
    TA_taList_XCssEvent_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_XCssEvent_.AddParCache(&TA_taBase);
    TA_taList_XCssEvent_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_XCssEvent_.sub_types.Add(sbt);
    sbt = new TypeDef("XCssEvent_ptr", 1, 1, 0);
    sbt->AddParents(&TA_XCssEvent);
    TA_taList_XCssEvent_.sub_types.Add(sbt);
    tac_AddMethods(TA_taList_XCssEvent_,TA_taList_XCssEvent__MethodDef);
  taMisc::types.Add(&TA_const_XCssEvent);
    TA_const_XCssEvent.AddParents(&TA_const, &TA_XCssEvent);
  taMisc::types.Add(&TA_const_XCssEvent_ref);
    TA_const_XCssEvent_ref.AddParents(&TA_const_XCssEvent);
  taMisc::types.Add(&TA_XCssEvent_List);
    TAI_XCssEvent_List = new XCssEvent_List;
    TA_XCssEvent_List.AddParFormal(&TA_class);
    TA_XCssEvent_List.AddParCache(&TA_taBase);
    TA_XCssEvent_List.AddClassPar(&TA_taList_XCssEvent_,0);
  taMisc::types.Add(&TA_const_XCssEvent_List);
    TA_const_XCssEvent_List.AddParents(&TA_const, &TA_XCssEvent_List);
  taMisc::types.Add(&TA_const_XCssEvent_List_ref);
    TA_const_XCssEvent_List_ref.AddParents(&TA_const_XCssEvent_List);
  taMisc::types.Add(&TA_XCss);
    TAI_XCss = new XCss;
    TA_XCss.AddParFormal(&TA_class);
    TA_XCss.AddParCache(&TA_taBase);
    TA_XCss.AddClassPar(&TA_taNBase,0);
    tac_AddEnum(TA_XCss, "EventFilter", "", "", "", "", TA_XCss_EventFilter);
    tac_AddMembers(TA_XCss,TA_XCss_MemberDef);
    tac_AddMethods(TA_XCss,TA_XCss_MethodDef);
  taMisc::types.Add(&TA_const_XCss);
    TA_const_XCss.AddParents(&TA_const, &TA_XCss);
  taMisc::types.Add(&TA_const_XCss_ref);
    TA_const_XCss_ref.AddParents(&TA_const_XCss);


  taMisc::in_init = false;
} 
