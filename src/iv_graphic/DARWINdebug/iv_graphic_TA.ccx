// File Automatically Generated by MakeTA
// DO NOT EDIT


#include <ta/typea.h>
#include <ta/typea_constr.h>
#include <graphic.h>
#include <graphic_text.h>
#include <graphic_viewer.h>
#include "iv_graphic_TA_type.h"
#include "iv_graphic_TA_inst.h"


// Types

TypeDef TA_GlyphViewer("GlyphViewer", " ", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(GlyphViewer), (void**)0, 0, 0, 0,1);
TypeDef TA_Tool("Tool", " ", 
	"NO_MEMBERS NO_CSS ", "NO_MEMBERS NO_CSS ", "", sizeof(Tool), (void**)0, 0, 0, 0,1);
TypeDef TA_Tool_ref("Tool_ref", 1, 0, 1, 0,1);
TypeDef TA_const_ivBrush_ptr("const_ivBrush_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_ivFont_ptr("const_ivFont_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivCoord_ptr("ivCoord_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivCoord_ptr_ref("ivCoord_ptr_ref", 1, 1, 1, 0,1);
TypeDef TA_PointObj_ref("PointObj_ref", 1, 0, 1, 0,1);
TypeDef TA_BoxObj_ref("BoxObj_ref", 1, 0, 1, 0,1);
TypeDef TA_const_ivCoord("const_ivCoord", 1, 0, 0, 0,1);
TypeDef TA_const_ivCoord_ptr("const_ivCoord_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_ivCoord_ptr_ref("const_ivCoord_ptr_ref", 1, 1, 1, 0,1);
TypeDef TA_Graphic("Graphic", " ", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(Graphic), (void**)0, 0, 0, 0,1);
TypeDef TA_PolyGraphic("PolyGraphic", "", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(PolyGraphic), (void**)0, 0, 0, 0,1);
TypeDef TA_Graphic_ref("Graphic_ref", 1, 0, 1, 0,1);
TypeDef TA_Graphic_ptr("Graphic_ptr", 1, 1, 0, 0,1);
TypeDef TA_GlyphViewer_ptr("GlyphViewer_ptr", 1, 1, 0, 0,1);
TypeDef TA_GraphicMaster("GraphicMaster", "", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(GraphicMaster), (void**)0, 0, 0, 0,1);
TypeDef TA_Line("Line", "", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(Line), (void**)0, 0, 0, 0,1);
TypeDef TA_Rectangle("Rectangle", "", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(Rectangle), (void**)0, 0, 0, 0,1);
TypeDef TA_Circle("Circle", "", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(Circle), (void**)0, 0, 0, 0,1);
TypeDef TA_Ellipse("Ellipse", "", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(Ellipse), (void**)0, 0, 0, 0,1);
TypeDef TA_Open_BSpline("Open_BSpline", "", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(Open_BSpline), (void**)0, 0, 0, 0,1);
TypeDef TA_Open_BSpline_ptr("Open_BSpline_ptr", 1, 1, 0, 0,1);
TypeDef TA_Closed_BSpline("Closed_BSpline", "", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(Closed_BSpline), (void**)0, 0, 0, 0,1);
TypeDef TA_Polyline("Polyline", "", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(Polyline), (void**)0, 0, 0, 0,1);
TypeDef TA_Closed_BSpline_ptr("Closed_BSpline_ptr", 1, 1, 0, 0,1);
TypeDef TA_Polygon("Polygon", "", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(Polygon), (void**)0, 0, 0, 0,1);
TypeDef TA_Text("Text", "", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(Text), (void**)0, 0, 0, 0,1);
TypeDef TA_Xform("Xform", " interviews transformer class", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(Xform), (void**)&TAI_Xform, 0, 0, 0,1);
TypeDef TA_taList_Xform_("taList_Xform_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<Xform>), (void**)&TAI_taList_Xform_, 0, 0, 0,1);
TypeDef TA_const_Xform("const_Xform", 1, 0, 0, 0,1);
TypeDef TA_const_Xform_ref("const_Xform_ref", 1, 0, 1, 0,1);
TypeDef TA_Xform_List("Xform_List", "", 
	"", "", "", sizeof(Xform_List), (void**)&TAI_Xform_List, 0, 0, 0,1);
TypeDef TA_GraphicMaster_ptr("GraphicMaster_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_Xform_List("const_Xform_List", 1, 0, 0, 0,1);
TypeDef TA_const_Xform_List_ref("const_Xform_List_ref", 1, 0, 1, 0,1);
TypeDef TA_NoScale_Text_G("NoScale_Text_G", "", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(NoScale_Text_G), (void**)0, 0, 0, 0,1);
TypeDef TA_ivAllocation_ref("ivAllocation_ref", 1, 0, 1, 0,1);
TypeDef TA_ivCursor_ptr("ivCursor_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivCursor("ivCursor", 1, 0, 0, 0,1);
TypeDef TA_ToolState_ptr("ToolState_ptr", 1, 1, 0, 0,1);
TypeDef TA_ToolState("ToolState", 1, 0, 0, 0,1);
TypeDef TA_ivTransformer_ptr("ivTransformer_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivTransformer_ref("ivTransformer_ref", 1, 0, 1, 0,1);
TypeDef TA_Alignment("Alignment", 1, 0, 0, 0,1);
TypeDef TA_DynamicLabel_ptr("DynamicLabel_ptr", 1, 1, 0, 0,1);
TypeDef TA_DynamicLabel("DynamicLabel", 1, 0, 0, 0,1);

// Instances

Xform*		 TAI_Xform=NULL;
taList<Xform>*		 TAI_taList_Xform_=NULL;
Xform_List*		 TAI_Xform_List=NULL;

// Type Data

static int Xform::* TA_Xform_MbrOff;
static MemberDef_data TA_Xform_MemberDef[]={
  {&TA_float,NULL,"a00","","","",
    *((ta_memb_ptr*)&(TA_Xform_MbrOff=(int Xform::*)(&Xform::a00))),0,NULL,0},
  {&TA_float,NULL,"a01","","","",
    *((ta_memb_ptr*)&(TA_Xform_MbrOff=(int Xform::*)(&Xform::a01))),0,NULL,0},
  {&TA_float,NULL,"a10","","","",
    *((ta_memb_ptr*)&(TA_Xform_MbrOff=(int Xform::*)(&Xform::a10))),0,NULL,0},
  {&TA_float,NULL,"a11","","","",
    *((ta_memb_ptr*)&(TA_Xform_MbrOff=(int Xform::*)(&Xform::a11))),0,NULL,0},
  {&TA_float,NULL,"a20","","","",
    *((ta_memb_ptr*)&(TA_Xform_MbrOff=(int Xform::*)(&Xform::a20))),0,NULL,0},
  {&TA_float,NULL,"a21","","","",
    *((ta_memb_ptr*)&(TA_Xform_MbrOff=(int Xform::*)(&Xform::a21))),0,NULL,0},
  NULL};
static MethodDef_data TA_Xform_MethodDef[]={
  {&TA_ivTransformer_ptr,NULL,"transformer","","","",
    0,0,-1,0,NULL,NULL,NULL},
  NULL};
static MethodArgs_data TA_taList_Xform__MoveBefore_MethArgs[]={
  {NULL,"::Xform_ptr","trg",""},
  {NULL,"::Xform_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_Xform__MoveAfter_MethArgs[]={
  {NULL,"::Xform_ptr","trg",""},
  {NULL,"::Xform_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_Xform__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_Xform__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_Xform__Edit_El_MethArgs[]={
  {NULL,"::Xform_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_Xform__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_Xform__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_Xform__AddUniqNameOld_MethArgs[]={
  {NULL,"::Xform_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_Xform__LinkUniqNameOld_MethArgs[]={
  {NULL,"::Xform_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_Xform__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,NULL,TA_taList_Xform__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,NULL,TA_taList_Xform__MoveAfter_MethArgs},
  {NULL,"::Xform_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,NULL,TA_taList_Xform__SafeEl_MethArgs},
  {NULL,"::Xform_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,NULL,TA_taList_Xform__FastEl_MethArgs},
  {NULL,"::Xform_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,NULL,NULL},
  {NULL,"::Xform_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,NULL,TA_taList_Xform__Edit_El_MethArgs},
  {NULL,"::Xform_ptr","FindName"," Find element with given name (item_nm) ","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,NULL,TA_taList_Xform__FindName_MethArgs},
  {NULL,"::Xform_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,NULL,TA_taList_Xform__FindType_MethArgs},
  {NULL,"::Xform_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,NULL,NULL},
  {NULL,"::Xform_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,NULL,NULL},
  {NULL,"::Xform_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,NULL,TA_taList_Xform__AddUniqNameOld_MethArgs},
  {NULL,"::Xform_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,NULL,TA_taList_Xform__LinkUniqNameOld_MethArgs},
  NULL};

// Init Function


static bool ta_Init_iv_graphic_done = false;

void ta_Init_iv_graphic() {
  TypeDef* sbt;

  if(ta_Init_iv_graphic_done) return;
  ta_Init_iv_graphic_done = true;

  ta_Init_ta();

  taMisc::in_init = true;

  taMisc::types.Add(&TA_GlyphViewer);
    TA_GlyphViewer.AddParFormal(&TA_class);
    TA_GlyphViewer.AddClassPar(&TA_ivInputHandler,0);
  taMisc::types.Add(&TA_Tool);
    TA_Tool.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_Tool_ref);
    TA_Tool_ref.AddParents(&TA_Tool);
  taMisc::types.Add(&TA_const_ivBrush_ptr);
  taMisc::types.Add(&TA_const_ivFont_ptr);
  taMisc::types.Add(&TA_ivCoord_ptr);
    TA_ivCoord_ptr.AddParents(&TA_ivCoord);
  taMisc::types.Add(&TA_ivCoord_ptr_ref);
    TA_ivCoord_ptr_ref.AddParents(&TA_ivCoord_ptr);
  taMisc::types.Add(&TA_PointObj_ref);
  taMisc::types.Add(&TA_BoxObj_ref);
  taMisc::types.Add(&TA_const_ivCoord);
    TA_const_ivCoord.AddParents(&TA_const, &TA_ivCoord);
  taMisc::types.Add(&TA_const_ivCoord_ptr);
    TA_const_ivCoord_ptr.AddParents(&TA_const_ivCoord);
  taMisc::types.Add(&TA_const_ivCoord_ptr_ref);
    TA_const_ivCoord_ptr_ref.AddParents(&TA_const_ivCoord_ptr);
  taMisc::types.Add(&TA_Graphic);
    TA_Graphic.AddParFormal(&TA_class);
    TA_Graphic.AddClassPar(&TA_ivGlyph,0);
  taMisc::types.Add(&TA_PolyGraphic);
    TA_PolyGraphic.AddParFormal(&TA_class);
    TA_PolyGraphic.AddClassPar(&TA_Graphic,0);
  taMisc::types.Add(&TA_Graphic_ref);
    TA_Graphic_ref.AddParents(&TA_Graphic);
  taMisc::types.Add(&TA_Graphic_ptr);
    TA_Graphic_ptr.AddParents(&TA_Graphic);
  taMisc::types.Add(&TA_GlyphViewer_ptr);
    TA_GlyphViewer_ptr.AddParents(&TA_GlyphViewer);
  taMisc::types.Add(&TA_GraphicMaster);
    TA_GraphicMaster.AddParFormal(&TA_class);
    TA_GraphicMaster.AddClassPar(&TA_PolyGraphic,0);
  taMisc::types.Add(&TA_Line);
    TA_Line.AddParFormal(&TA_class);
    TA_Line.AddClassPar(&TA_Graphic,0);
  taMisc::types.Add(&TA_Rectangle);
    TA_Rectangle.AddParFormal(&TA_class);
    TA_Rectangle.AddClassPar(&TA_Graphic,0);
  taMisc::types.Add(&TA_Circle);
    TA_Circle.AddParFormal(&TA_class);
    TA_Circle.AddClassPar(&TA_Graphic,0);
  taMisc::types.Add(&TA_Ellipse);
    TA_Ellipse.AddParFormal(&TA_class);
    TA_Ellipse.AddClassPar(&TA_Graphic,0);
  taMisc::types.Add(&TA_Open_BSpline);
    TA_Open_BSpline.AddParFormal(&TA_class);
    TA_Open_BSpline.AddClassPar(&TA_Graphic,0);
  taMisc::types.Add(&TA_Open_BSpline_ptr);
    TA_Open_BSpline_ptr.AddParents(&TA_Open_BSpline);
  taMisc::types.Add(&TA_Closed_BSpline);
    TA_Closed_BSpline.AddParFormal(&TA_class);
    TA_Closed_BSpline.AddClassPar(&TA_Graphic,0);
  taMisc::types.Add(&TA_Polyline);
    TA_Polyline.AddParFormal(&TA_class);
    TA_Polyline.AddClassPar(&TA_Graphic,0);
  taMisc::types.Add(&TA_Closed_BSpline_ptr);
    TA_Closed_BSpline_ptr.AddParents(&TA_Closed_BSpline);
  taMisc::types.Add(&TA_Polygon);
    TA_Polygon.AddParFormal(&TA_class);
    TA_Polygon.AddClassPar(&TA_Graphic,0);
  taMisc::types.Add(&TA_Text);
    TA_Text.AddParFormal(&TA_class);
    TA_Text.AddClassPar(&TA_Graphic,0);
  taMisc::types.Add(&TA_Xform);
    TAI_Xform = new Xform;
    TA_Xform.AddParFormal(&TA_class);
    TA_Xform.AddParCache(&TA_taBase);
    TA_Xform.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_Xform,TA_Xform_MemberDef);
    tac_AddMethods(TA_Xform,TA_Xform_MethodDef);
  taMisc::types.Add(&TA_taList_Xform_);
    TAI_taList_Xform_ = new taList<Xform>;
    TA_taList_Xform_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_Xform_.AddParCache(&TA_taBase);
    TA_taList_Xform_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_Xform_.sub_types.Add(sbt);
    sbt = new TypeDef("Xform_ptr", 1, 1, 0);
    sbt->AddParents(&TA_Xform);
    TA_taList_Xform_.sub_types.Add(sbt);
    tac_AddMethods(TA_taList_Xform_,TA_taList_Xform__MethodDef);
  taMisc::types.Add(&TA_const_Xform);
    TA_const_Xform.AddParents(&TA_const, &TA_Xform);
  taMisc::types.Add(&TA_const_Xform_ref);
    TA_const_Xform_ref.AddParents(&TA_const_Xform);
  taMisc::types.Add(&TA_Xform_List);
    TAI_Xform_List = new Xform_List;
    TA_Xform_List.AddParFormal(&TA_class);
    TA_Xform_List.AddParCache(&TA_taBase);
    TA_Xform_List.AddClassPar(&TA_taList_Xform_,0);
  taMisc::types.Add(&TA_GraphicMaster_ptr);
    TA_GraphicMaster_ptr.AddParents(&TA_GraphicMaster);
  taMisc::types.Add(&TA_const_Xform_List);
    TA_const_Xform_List.AddParents(&TA_const, &TA_Xform_List);
  taMisc::types.Add(&TA_const_Xform_List_ref);
    TA_const_Xform_List_ref.AddParents(&TA_const_Xform_List);
  taMisc::types.Add(&TA_NoScale_Text_G);
    TA_NoScale_Text_G.AddParFormal(&TA_class);
    TA_NoScale_Text_G.AddClassPar(&TA_Graphic,0);
  taMisc::types.Add(&TA_ivAllocation_ref);
    TA_ivAllocation_ref.AddParents(&TA_ivAllocation);
  taMisc::types.Add(&TA_ivCursor_ptr);
    TA_ivCursor_ptr.AddParents(&TA_ivCursor);
  taMisc::types.Add(&TA_ivCursor);
    TA_ivCursor.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ToolState_ptr);
    TA_ToolState_ptr.AddParents(&TA_ToolState);
  taMisc::types.Add(&TA_ToolState);
    TA_ToolState.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivTransformer_ptr);
    TA_ivTransformer_ptr.AddParents(&TA_ivTransformer);
  taMisc::types.Add(&TA_ivTransformer_ref);
    TA_ivTransformer_ref.AddParents(&TA_ivTransformer);
  taMisc::types.Add(&TA_Alignment);
    TA_Alignment.AddParFormal(&TA_enum);
  taMisc::types.Add(&TA_DynamicLabel_ptr);
    TA_DynamicLabel_ptr.AddParents(&TA_DynamicLabel);
  taMisc::types.Add(&TA_DynamicLabel);
    TA_DynamicLabel.AddParFormal(&TA_class);
    TA_DynamicLabel.AddParents(&TA_ivGlyph);


  taMisc::in_init = false;
} 
