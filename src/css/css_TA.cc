// File Automatically Generated by MakeTA
// DO NOT EDIT


#include <ta/typea.h>
#include <ta/typea_constr.h>
#include <css/basic_types.h>
#include <css/c_ptr_types.h>
#include <css/ta_css.h>
#include "css_TA_type.h"
#include "css_TA_inst.h"


// Types

TypeDef TA_void("void", 1, 0, 0, 0,1);
TypeDef TA_int("int", 1, 0, 0, 0,1);
TypeDef TA_short("short", 1, 0, 0, 0,1);
TypeDef TA_long("long", 1, 0, 0, 0,1);
TypeDef TA_char("char", 1, 0, 0, 0,1);
TypeDef TA_unsigned("unsigned", 1, 0, 0, 0,1);
TypeDef TA_signed("signed", 1, 0, 0, 0,1);
TypeDef TA_float("float", 1, 0, 0, 0,1);
TypeDef TA_double("double", 1, 0, 0, 0,1);
TypeDef TA_bool("bool", 1, 0, 0, 0,1);
TypeDef TA_const("const", 1, 0, 0, 0,1);
TypeDef TA_enum("enum", 1, 0, 0, 1,1);
TypeDef TA_struct("struct", 1, 0, 0, 1,1);
TypeDef TA_union("union", 1, 0, 0, 1,1);
TypeDef TA_class("class", 1, 0, 0, 1,1);
TypeDef TA_template("template", 1, 0, 0, 1,1);
TypeDef TA_templ_inst("templ_inst", 1, 0, 0, 1,1);
TypeDef TA_ta_array("ta_array", 1, 0, 0, 1,1);
TypeDef TA_taBase("taBase", " Base type for all type-aware classes", 
	"", "", "", sizeof(taBase), (void**)0, 0, 0, 0,1);
TypeDef TA_taRegFun("taRegFun", 1, 0, 0, 0,1);
TypeDef TA_TypeDef("TypeDef", 1, 0, 0, 0,1);
TypeDef TA_MemberDef("MemberDef", 1, 0, 0, 0,1);
TypeDef TA_taString("taString", "", 
	"", "", "", sizeof(taString), (void**)0, 0, 0, 0,1);
TypeDef TA_taSubString("taSubString", "", 
	"", "", "", sizeof(taSubString), (void**)0, 0, 0, 0,1);
TypeDef TA_void_ptr("void_ptr", 1, 1, 0, 1,1);

// Instances


// Type Data


// Init Function


static bool ta_Init_css_done = false;

void ta_Init_css() {
  TypeDef* sbt;

  if(ta_Init_css_done) return;
  ta_Init_css_done = true;


  taMisc::in_init = true;

  taMisc::types.Add(&TA_void);
  taMisc::types.Add(&TA_int);
  taMisc::types.Add(&TA_short);
  taMisc::types.Add(&TA_long);
  taMisc::types.Add(&TA_char);
  taMisc::types.Add(&TA_unsigned);
  taMisc::types.Add(&TA_signed);
  taMisc::types.Add(&TA_float);
  taMisc::types.Add(&TA_double);
  taMisc::types.Add(&TA_bool);
  taMisc::types.Add(&TA_const);
  taMisc::types.Add(&TA_enum);
  taMisc::types.Add(&TA_struct);
  taMisc::types.Add(&TA_union);
  taMisc::types.Add(&TA_class);
  taMisc::types.Add(&TA_template);
  taMisc::types.Add(&TA_templ_inst);
  taMisc::types.Add(&TA_ta_array);
  taMisc::types.Add(&TA_taBase);
    TA_taBase.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_TypeDef);
  taMisc::types.Add(&TA_MemberDef);
  taMisc::types.Add(&TA_taString);
    TA_taString.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taSubString);
    TA_taSubString.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_void_ptr);
    TA_void_ptr.AddParents(&TA_void);


  taMisc::in_init = false;
} 
