/* A Bison parser, made from /usr/local/pdp++/src/css/css_parse.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	CSS_PP_INCLUDE	257
# define	CSS_PP_DEFINE	258
# define	CSS_PP_UNDEF	259
# define	CSS_PP_IFDEF	260
# define	CSS_PP_IFNDEF	261
# define	CSS_PP_ELSE	262
# define	CSS_PP_ENDIF	263
# define	CSS_NUMBER	264
# define	CSS_STRING	265
# define	CSS_VAR	266
# define	CSS_FUN	267
# define	CSS_PTR	268
# define	CSS_PP_DEF	269
# define	CSS_NAME	270
# define	CSS_COMMENT	271
# define	CSS_TYPE	272
# define	CSS_PTRTYPE	273
# define	CSS_CLASS	274
# define	CSS_ENUM	275
# define	CSS_SCPTYPE	276
# define	CSS_WHILE	277
# define	CSS_DO	278
# define	CSS_IF	279
# define	CSS_ELSE	280
# define	CSS_SWITCH	281
# define	CSS_CASE	282
# define	CSS_DEFAULT	283
# define	CSS_RETURN	284
# define	CSS_BREAK	285
# define	CSS_CONTINUE	286
# define	CSS_FOR	287
# define	CSS_NEW	288
# define	CSS_DELETE	289
# define	CSS_COMMAND	290
# define	CSS_LIST	291
# define	CSS_EXIT	292
# define	CSS_ALIAS	293
# define	CSS_REMOVE	294
# define	CSS_STATUS	295
# define	CSS_TYPECMD	296
# define	CSS_CONT	297
# define	CSS_HELP	298
# define	CSS_EXTERN	299
# define	CSS_STATIC	300
# define	CSS_CONST	301
# define	CSS_PRIVATE	302
# define	CSS_PUBLIC	303
# define	CSS_PROTECTED	304
# define	CSS_VIRTUAL	305
# define	CSS_INLINE	306
# define	CSS_ASGN_ADD	307
# define	CSS_ASGN_SUB	308
# define	CSS_ASGN_MULT	309
# define	CSS_ASGN_DIV	310
# define	CSS_ASGN_MOD	311
# define	CSS_ASGN_LSHIFT	312
# define	CSS_ASGN_RSHIFT	313
# define	CSS_ASGN_AND	314
# define	CSS_ASGN_XOR	315
# define	CSS_ASGN_OR	316
# define	CSS_OR	317
# define	CSS_AND	318
# define	CSS_GT	319
# define	CSS_GE	320
# define	CSS_LT	321
# define	CSS_LE	322
# define	CSS_EQ	323
# define	CSS_NE	324
# define	CSS_LSHIFT	325
# define	CSS_RSHIFT	326
# define	CSS_UNARY	327
# define	CSS_PLUSPLUS	328
# define	CSS_MINMIN	329
# define	CSS_UNARYMINUS	330
# define	CSS_NOT	331
# define	CSS_POINTSAT	332
# define	CSS_SCOPER	333

#line 40 "/usr/local/pdp++/src/css/css_parse.y"


#include <css/machine.h>
#include <css/basic_types.h>
#include <css/c_ptr_types.h>
#include <css/css_builtin.h>
#include <css/ta_css.h>
#include <css/css_iv.h>
#include <sstream>

#if defined(SUN4) && !defined(__GNUG__) && !defined(SOLARIS)
#include <alloca.h>
#endif

#if defined(SGI) || defined(SGIdebug)
#include <alloca.h>
#endif

void yyerror(char* s);
/* int yyparse(); */
int yylex();

#define Code1(x) 	cssMisc::cur_top->Prog()->Code(x)
#define Code2(x,y) 	cssMisc::cur_top->Prog()->Code(x); cssMisc::cur_top->Prog()->Code(y)
#define Code3(x,y,z) 	cssMisc::cur_top->Prog()->Code(x); cssMisc::cur_top->Prog()->Code(y); cssMisc::cur_top->Prog()->Code(z)
#define Code4(w,x,y,z) 	cssMisc::cur_top->Prog()->Code(w); cssMisc::cur_top->Prog()->Code(x); cssMisc::cur_top->Prog()->Code(y); cssMisc::cur_top->Prog()->Code(z);


#line 72 "/usr/local/pdp++/src/css/css_parse.y"
#ifndef YYSTYPE
typedef struct {
  cssElPlusIVal el_ival;
  cssElPtr     	el;		/* for coding */
  int		ival;		/* for program indexes (progdx) and other ints */
  char*        	nm;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 1
#endif



#define	YYFINAL		529
#define	YYFLAG		-32768
#define	YYNTBASE	102

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 333 ? yytranslate[x] : 197)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
      96,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,    85,    72,     2,
      94,    98,    83,    81,    54,    82,    92,    84,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    67,    97,
       2,    55,     2,    66,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    95,     2,    99,    71,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    53,    70,   100,   101,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    68,    69,    73,
      74,    75,    76,    77,    78,    79,    80,    86,    87,    88,
      89,    90,    91,    93
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     1,     4,     8,    12,    15,    18,    21,    25,
      29,    31,    33,    35,    37,    39,    41,    43,    45,    48,
      51,    54,    57,    60,    63,    66,    69,    71,    73,    76,
      79,    83,    85,    87,    91,    97,   100,   104,   106,   110,
     114,   116,   119,   122,   125,   128,   131,   134,   135,   138,
     143,   145,   147,   149,   151,   153,   155,   160,   168,   175,
     182,   184,   187,   191,   198,   201,   204,   206,   208,   211,
     213,   216,   218,   220,   224,   233,   241,   246,   248,   252,
     254,   256,   258,   260,   262,   266,   268,   270,   273,   275,
     278,   280,   282,   284,   286,   289,   291,   293,   296,   299,
     302,   305,   307,   312,   319,   320,   322,   325,   329,   334,
     339,   345,   352,   355,   356,   358,   361,   366,   371,   376,
     382,   387,   390,   394,   397,   401,   404,   408,   412,   417,
     419,   423,   425,   429,   432,   435,   437,   441,   443,   445,
     448,   451,   454,   457,   460,   464,   468,   470,   473,   476,
     480,   482,   484,   487,   490,   493,   495,   497,   499,   502,
     504,   506,   508,   510,   513,   515,   517,   521,   526,   529,
     532,   534,   536,   538,   542,   545,   547,   549,   551,   558,
     560,   570,   581,   592,   604,   606,   609,   611,   616,   621,
     623,   628,   633,   637,   641,   643,   645,   649,   651,   653,
     655,   657,   659,   661,   665,   669,   673,   677,   681,   685,
     689,   693,   697,   701,   705,   709,   713,   719,   724,   728,
     734,   738,   742,   745,   748,   752,   756,   760,   764,   768,
     772,   778,   782,   786,   790,   794,   798,   802,   806,   810,
     814,   818,   821,   824,   827,   830,   833,   836,   841,   846,
     851,   853,   857,   859,   861,   863,   865,   867,   869,   871,
     873,   875,   877,   879,   882,   886,   889,   893,   897,   900,
     903,   907,   912,   917,   922,   926,   928,   930,   932,   934,
     936,   938,   940,   942,   944,   946,   948,   950,   952,   954,
     956,   958,   960,   962,   966,   968,   970,   971,   973,   977,
     979,   981
};
static const short yyrhs[] =
{
      -1,   102,    96,     0,   102,   105,   104,     0,   102,   111,
     104,     0,   102,   176,     0,   102,   113,     0,   102,   157,
       0,   102,     1,   104,     0,   102,    38,   104,     0,    97,
       0,    97,     0,    96,     0,   106,     0,   107,     0,   108,
       0,   109,     0,   110,     0,     3,    11,     0,     4,    16,
       0,     4,    15,     0,     5,    15,     0,     6,    16,     0,
       6,    15,     0,     7,    15,     0,     7,    16,     0,     8,
       0,     9,     0,    36,   112,     0,    42,   112,     0,    42,
     192,    18,     0,    43,     0,    37,     0,    37,   192,   190,
       0,    37,    94,   192,   190,    98,     0,    40,   112,     0,
      40,   192,    18,     0,    41,     0,    39,   180,   186,     0,
      39,   180,   180,     0,    44,     0,    44,   180,     0,    44,
      13,     0,    44,    39,     0,    44,    44,     0,    44,    19,
       0,    44,    18,     0,     0,   192,   190,     0,    94,   192,
     190,    98,     0,   114,     0,   115,     0,   116,     0,   119,
       0,   124,     0,   142,     0,   151,   149,   196,   103,     0,
     151,   186,    55,   192,   177,   196,   103,     0,   185,    55,
     192,   177,   196,   103,     0,   151,   186,   192,   117,   196,
     103,     0,   118,     0,   117,   118,     0,    95,   177,    99,
       0,   120,    53,   121,   100,   196,   103,     0,    21,   186,
       0,    21,    18,     0,    21,     0,   122,     0,   121,   122,
       0,   123,     0,   123,    54,     0,     1,     0,   186,     0,
     186,    55,    10,     0,    20,   125,    53,   141,   133,   100,
     196,   103,     0,    20,   125,    53,   141,   100,   196,   103,
       0,    20,   127,   196,   103,     0,   126,     0,   126,    67,
     128,     0,   186,     0,    18,     0,   186,     0,    18,     0,
     129,     0,   128,    54,   129,     0,   130,     0,   152,     0,
     131,   152,     0,   132,     0,   131,   132,     0,    49,     0,
      51,     0,    48,     0,   134,     0,   133,   134,     0,   135,
       0,   139,     0,   119,   141,     0,    49,    67,     0,    48,
      67,     0,    50,    67,     0,     1,     0,   151,   186,   103,
     141,     0,   151,   186,   136,   137,   103,   141,     0,     0,
     138,     0,   137,   138,     0,    95,    10,    99,     0,   140,
     145,   103,   141,     0,    18,   145,   103,   141,     0,   101,
      18,   145,   103,   141,     0,    51,   101,    18,   145,   103,
     141,     0,   151,   186,     0,     0,    17,     0,   141,    17,
       0,   143,   145,   196,   103,     0,   143,   145,   196,   174,
       0,   151,    13,   145,   103,     0,   151,    13,   145,   196,
     174,     0,   144,   145,   196,   175,     0,   151,   186,     0,
     151,   154,   186,     0,   154,    18,     0,   154,   101,    18,
       0,    94,    98,     0,    94,   146,    98,     0,    94,    98,
      47,     0,    94,   146,    98,    47,     0,   147,     0,   146,
      54,   147,     0,   148,     0,   148,    55,   179,     0,   151,
      16,     0,   151,    12,     0,   150,     0,   149,    54,   150,
       0,   186,     0,   152,     0,    45,   152,     0,    46,   152,
       0,    47,   152,     0,    51,   152,     0,    52,   152,     0,
      52,    51,   152,     0,    51,    52,   152,     0,   153,     0,
     153,   156,     0,   153,    72,     0,   153,   156,    72,     0,
      18,     0,    19,     0,   154,    22,     0,    18,    93,     0,
      19,    93,     0,    18,     0,    19,     0,    83,     0,   156,
      83,     0,   158,     0,   170,     0,   159,     0,   166,     0,
     177,   103,     0,   164,     0,   168,     0,    30,   192,   103,
       0,    30,   192,   177,   103,     0,    31,   103,     0,    32,
     103,     0,   162,     0,   160,     0,   174,     0,    28,   161,
      67,     0,    29,    67,     0,    10,     0,    11,     0,    12,
       0,   163,    94,   192,   177,    98,   174,     0,    27,     0,
     165,    94,   195,   177,   195,   196,    98,   157,   196,     0,
     165,    94,   195,   177,   195,   193,   196,    98,   157,   196,
       0,   165,    94,   193,   195,   177,   195,   196,    98,   157,
     196,     0,   165,    94,   193,   195,   177,   195,   193,   196,
      98,   157,   196,     0,    33,     0,   167,   157,     0,    24,
       0,   169,   173,   103,   196,     0,   169,   173,   157,   196,
       0,    23,     0,   171,   173,   158,   196,     0,   171,   173,
     170,   196,     0,   172,   158,   196,     0,   172,   170,   196,
       0,    25,     0,    26,     0,    94,   177,    98,     0,    53,
       0,    53,     0,   100,     0,   179,     0,   178,     0,   183,
       0,   177,    55,   177,     0,   177,    55,    53,     0,   177,
      56,   177,     0,   177,    57,   177,     0,   177,    58,   177,
       0,   177,    59,   177,     0,   177,    60,   177,     0,   177,
      61,   177,     0,   177,    62,   177,     0,   177,    63,   177,
       0,   177,    64,   177,     0,   177,    65,   177,     0,    34,
     192,   155,     0,    34,   192,   155,    94,    98,     0,    34,
     192,   155,   118,     0,    35,   192,   177,     0,    35,    95,
      99,   192,   177,     0,   177,    68,   177,     0,   177,    69,
     177,     0,    72,   177,     0,    83,   177,     0,   177,    73,
     177,     0,   177,    74,   177,     0,   177,    75,   177,     0,
     177,    76,   177,     0,   177,    77,   177,     0,   177,    78,
     177,     0,   177,    66,   177,    67,   177,     0,   177,    81,
     177,     0,   177,    82,   177,     0,   177,    83,   177,     0,
     177,    84,   177,     0,   177,    85,   177,     0,   177,    79,
     177,     0,   177,    80,   177,     0,   177,    72,   177,     0,
     177,    71,   177,     0,   177,    70,   177,     0,   177,    87,
       0,    87,   177,     0,   177,    88,     0,    88,   177,     0,
      82,   177,     0,    90,   177,     0,   177,    95,   177,    99,
       0,    94,   151,    98,   177,     0,   151,    94,   177,    98,
       0,   181,     0,    94,   177,    98,     0,    10,     0,    11,
       0,    12,     0,    14,     0,    36,     0,    37,     0,    40,
       0,    41,     0,    38,     0,    42,     0,    13,     0,   182,
      98,     0,   182,   190,    98,     0,    13,    94,     0,   178,
     187,   188,     0,   179,   187,   188,     0,    92,   188,     0,
     154,   188,     0,   184,    98,   196,     0,   184,   190,    98,
     196,     0,   178,   187,   188,    94,     0,   179,   187,   188,
      94,     0,   154,   188,    94,     0,    16,     0,    16,     0,
      10,     0,    11,     0,    12,     0,    14,     0,    13,     0,
      92,     0,    91,     0,    16,     0,    11,     0,   189,     0,
      12,     0,    14,     0,    13,     0,    19,     0,   180,     0,
     191,     0,   190,    54,   191,     0,   177,     0,    19,     0,
       0,   194,     0,   193,    54,   193,     0,   177,     0,    97,
       0,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   177,   178,   179,   180,   181,   184,   187,   188,   189,
     192,   195,   196,   199,   200,   201,   202,   203,   207,   214,
     216,   217,   220,   223,   224,   227,   230,   234,   245,   250,
     255,   260,   266,   272,   279,   286,   291,   296,   302,   306,
     308,   314,   321,   328,   335,   342,   349,   358,   359,   360,
     364,   365,   366,   367,   368,   369,   372,   382,   400,   419,
     435,   437,   440,   444,   451,   458,   465,   473,   474,   477,
     478,   479,   482,   499,   518,   523,   527,   532,   534,   537,
     544,   564,   570,   578,   579,   582,   592,   593,   596,   597,
     600,   601,   602,   605,   606,   609,   610,   611,   612,   613,
     614,   615,   618,   630,   646,   653,   655,   658,   663,   669,
     685,   702,   722,   743,   744,   745,   748,   754,   766,   774,
     792,   806,   819,   845,   866,   888,   889,   890,   891,   894,
     895,   898,   899,   904,   913,   923,   924,   931,   940,   941,
     942,   943,   945,   946,   947,   948,   951,   952,   958,   960,
     968,   969,   970,   981,   986,   990,   991,   994,   995,   998,
     999,  1002,  1003,  1006,  1007,  1008,  1009,  1010,  1011,  1012,
    1013,  1014,  1015,  1018,  1027,  1038,  1040,  1041,  1044,  1070,
    1074,  1081,  1088,  1095,  1102,  1108,  1111,  1116,  1127,  1132,
    1140,  1145,  1149,  1158,  1170,  1176,  1181,  1184,  1191,  1194,
    1203,  1204,  1207,  1209,  1210,  1220,  1221,  1222,  1223,  1224,
    1225,  1226,  1227,  1228,  1229,  1230,  1231,  1232,  1234,  1235,
    1236,  1237,  1238,  1239,  1240,  1241,  1242,  1243,  1244,  1245,
    1246,  1247,  1248,  1249,  1250,  1251,  1252,  1253,  1254,  1255,
    1256,  1257,  1258,  1259,  1260,  1261,  1262,  1263,  1264,  1270,
    1276,  1277,  1280,  1282,  1283,  1284,  1287,  1288,  1289,  1290,
    1291,  1292,  1295,  1297,  1298,  1313,  1328,  1330,  1338,  1339,
    1344,  1345,  1360,  1362,  1380,  1403,  1408,  1410,  1412,  1414,
    1418,  1422,  1428,  1429,  1432,  1435,  1436,  1441,  1442,  1443,
    1444,  1445,  1448,  1449,  1452,  1453,  1456,  1459,  1460,  1463,
    1466,  1469
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "CSS_PP_INCLUDE", "CSS_PP_DEFINE", 
  "CSS_PP_UNDEF", "CSS_PP_IFDEF", "CSS_PP_IFNDEF", "CSS_PP_ELSE", 
  "CSS_PP_ENDIF", "CSS_NUMBER", "CSS_STRING", "CSS_VAR", "CSS_FUN", 
  "CSS_PTR", "CSS_PP_DEF", "CSS_NAME", "CSS_COMMENT", "CSS_TYPE", 
  "CSS_PTRTYPE", "CSS_CLASS", "CSS_ENUM", "CSS_SCPTYPE", "CSS_WHILE", 
  "CSS_DO", "CSS_IF", "CSS_ELSE", "CSS_SWITCH", "CSS_CASE", "CSS_DEFAULT", 
  "CSS_RETURN", "CSS_BREAK", "CSS_CONTINUE", "CSS_FOR", "CSS_NEW", 
  "CSS_DELETE", "CSS_COMMAND", "CSS_LIST", "CSS_EXIT", "CSS_ALIAS", 
  "CSS_REMOVE", "CSS_STATUS", "CSS_TYPECMD", "CSS_CONT", "CSS_HELP", 
  "CSS_EXTERN", "CSS_STATIC", "CSS_CONST", "CSS_PRIVATE", "CSS_PUBLIC", 
  "CSS_PROTECTED", "CSS_VIRTUAL", "CSS_INLINE", "'{'", "','", "'='", 
  "CSS_ASGN_ADD", "CSS_ASGN_SUB", "CSS_ASGN_MULT", "CSS_ASGN_DIV", 
  "CSS_ASGN_MOD", "CSS_ASGN_LSHIFT", "CSS_ASGN_RSHIFT", "CSS_ASGN_AND", 
  "CSS_ASGN_XOR", "CSS_ASGN_OR", "'?'", "':'", "CSS_OR", "CSS_AND", "'|'", 
  "'^'", "'&'", "CSS_GT", "CSS_GE", "CSS_LT", "CSS_LE", "CSS_EQ", 
  "CSS_NE", "CSS_LSHIFT", "CSS_RSHIFT", "'+'", "'-'", "'*'", "'/'", "'%'", 
  "CSS_UNARY", "CSS_PLUSPLUS", "CSS_MINMIN", "CSS_UNARYMINUS", "CSS_NOT", 
  "CSS_POINTSAT", "'.'", "CSS_SCOPER", "'('", "'['", "'\\n'", "';'", 
  "')'", "']'", "'}'", "'~'", "toplev", "term", "crterm", "pproc", 
  "ppinclude", "ppdefine", "ppifdef", "ppelse", "ppendif", "command", 
  "cmd_args", "defn", "vardefn", "vardefin", "arraydefn", "arraydims", 
  "arraydim", "enumdefn", "enumname", "enums", "enumline", "enumitms", 
  "classdefn", "classhead", "classnm", "classfwd", "classinh", "classpar", 
  "classtyp", "inh_mods", "inh_mod", "membs", "membline", "membdefn", 
  "membardimstop", "membardims", "membardim", "methdefn", "methname", 
  "classcmt", "fundefn", "fundname", "methdname", "funargs", "arglist", 
  "argdefn", "subargdefn", "tynames", "tyname", "type", "type_el", 
  "typeorscp", "scopetype", "typeonly", "ptrs", "stmt", "noifstmt", 
  "nodostmt", "caseitem", "caseexpr", "switchblock", "switch", "forloop", 
  "for", "doloop", "do", "whiloop", "while", "ifstmt", "if", "else", 
  "cond", "bra", "mbr_bra", "ket", "expr", "comb_expr", "primitive", 
  "anycmd", "normfuncall", "normfun", "memb_expr", "membfun", "undefname", 
  "name", "getmemb", "membname", "membnms", "exprlist", "exprlsel", 
  "argstop", "stmtlist", "stmtel", "scend", "end", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   102,   102,   102,   102,   102,   102,   102,   102,   102,
     103,   104,   104,   105,   105,   105,   105,   105,   106,   107,
     107,   107,   108,   108,   108,   108,   109,   110,   111,   111,
     111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
     111,   111,   111,   111,   111,   111,   111,   112,   112,   112,
     113,   113,   113,   113,   113,   113,   114,   115,   115,   116,
     117,   117,   118,   119,   120,   120,   120,   121,   121,   122,
     122,   122,   123,   123,   124,   124,   124,   125,   125,   126,
     126,   127,   127,   128,   128,   129,   130,   130,   131,   131,
     132,   132,   132,   133,   133,   134,   134,   134,   134,   134,
     134,   134,   135,   135,   136,   137,   137,   138,   139,   139,
     139,   139,   140,   141,   141,   141,   142,   142,   142,   142,
     142,   143,   144,   144,   144,   145,   145,   145,   145,   146,
     146,   147,   147,   148,   148,   149,   149,   150,   151,   151,
     151,   151,   151,   151,   151,   151,   152,   152,   152,   152,
     153,   153,   153,   154,   154,   155,   155,   156,   156,   157,
     157,   158,   158,   159,   159,   159,   159,   159,   159,   159,
     159,   159,   159,   160,   160,   161,   161,   161,   162,   163,
     164,   164,   164,   164,   165,   166,   167,   168,   168,   169,
     170,   170,   170,   170,   171,   172,   173,   174,   175,   176,
     177,   177,   178,   178,   178,   178,   178,   178,   178,   178,
     178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
     178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
     178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
     178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
     178,   178,   179,   179,   179,   179,   180,   180,   180,   180,
     180,   180,   181,   181,   181,   182,   183,   183,   183,   183,
     183,   183,   184,   184,   184,   185,   186,   186,   186,   186,
     186,   186,   187,   187,   188,   188,   188,   189,   189,   189,
     189,   189,   190,   190,   191,   191,   192,   193,   193,   194,
     195,   196
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     0,     2,     3,     3,     2,     2,     2,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     2,     2,
       3,     1,     1,     3,     5,     2,     3,     1,     3,     3,
       1,     2,     2,     2,     2,     2,     2,     0,     2,     4,
       1,     1,     1,     1,     1,     1,     4,     7,     6,     6,
       1,     2,     3,     6,     2,     2,     1,     1,     2,     1,
       2,     1,     1,     3,     8,     7,     4,     1,     3,     1,
       1,     1,     1,     1,     3,     1,     1,     2,     1,     2,
       1,     1,     1,     1,     2,     1,     1,     2,     2,     2,
       2,     1,     4,     6,     0,     1,     2,     3,     4,     4,
       5,     6,     2,     0,     1,     2,     4,     4,     4,     5,
       4,     2,     3,     2,     3,     2,     3,     3,     4,     1,
       3,     1,     3,     2,     2,     1,     3,     1,     1,     2,
       2,     2,     2,     2,     3,     3,     1,     2,     2,     3,
       1,     1,     2,     2,     2,     1,     1,     1,     2,     1,
       1,     1,     1,     2,     1,     1,     3,     4,     2,     2,
       1,     1,     1,     3,     2,     1,     1,     1,     6,     1,
       9,    10,    10,    11,     1,     2,     1,     4,     4,     1,
       4,     4,     3,     3,     1,     1,     3,     1,     1,     1,
       1,     1,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     5,     4,     3,     5,
       3,     3,     2,     2,     3,     3,     3,     3,     3,     3,
       5,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     2,     2,     2,     2,     2,     2,     4,     4,     4,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     3,     2,     3,     3,     2,     2,
       3,     4,     4,     4,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     0,     1,     3,     1,
       1,     0
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       1,     0,     0,     0,     0,     0,     0,     0,    26,    27,
     252,   253,   254,   262,   255,   275,   150,   151,     0,    66,
     189,   186,   194,   195,   179,     0,     0,   296,     0,     0,
     184,   296,   296,   296,   296,     0,     0,   296,    37,   296,
      31,    40,     0,     0,     0,     0,     0,   197,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   199,     0,    13,
      14,    15,    16,    17,     0,     6,    50,    51,    52,    53,
       0,    54,    55,     0,     0,     0,   138,   146,     0,     7,
     159,   161,   171,   170,     0,   164,     0,   162,     0,   165,
       0,   160,     0,     0,   172,     5,     0,   201,   200,   250,
       0,   202,     0,     0,    12,    11,     8,    18,    20,    19,
      21,    23,    22,    24,    25,   265,   153,   154,   277,   278,
     279,   281,   280,   276,    80,     0,    77,   301,    79,    65,
      64,   175,   176,   177,     0,   174,     0,    10,   168,   169,
       0,     0,     0,   296,    28,     0,   296,     0,     9,   256,
     257,   260,   258,   259,   261,     0,    35,     0,    29,     0,
      42,    46,    45,    43,    44,    41,   139,     0,   140,   141,
       0,   142,     0,   143,     0,     0,   222,   245,   223,   242,
     244,   246,   285,   287,   289,   288,   284,   290,   291,   268,
     286,     0,     0,     3,     4,     0,     0,   301,   301,   281,
       0,     0,     0,   301,   135,     0,   137,   148,   157,   147,
     123,   152,     0,   269,   296,     0,   185,     0,     0,     0,
     301,   301,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   241,   243,     0,   163,   283,   282,     0,     0,
     295,   263,   294,     0,   292,   301,     0,   296,   113,     0,
       0,   173,   166,     0,   155,   156,   215,   296,   218,     0,
      48,     0,    33,    39,    38,   150,   150,   145,   144,     0,
     251,    71,     0,    67,    69,    72,   125,     0,   129,   131,
       0,     0,     0,   301,     0,     0,     0,   122,   296,     0,
     149,   158,   124,   274,     0,   300,   299,     0,   297,     0,
       0,   301,   301,   301,   301,   192,   193,   204,   203,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     220,   221,   240,   239,   238,   224,   225,   226,   227,   228,
     229,   236,   237,   231,   232,   233,   234,   235,     0,   266,
     267,     0,   264,   270,   301,     0,   114,     0,    92,    90,
      91,    78,    83,    85,     0,    88,    86,    76,   167,     0,
       0,   217,     0,     0,     0,   248,   301,    68,    70,     0,
     127,     0,   126,     0,   134,   133,   116,   117,   198,   120,
     118,     0,   249,   136,   137,    56,     0,   301,    60,     0,
       0,     0,     0,   196,   187,   188,   190,   191,     0,   247,
     272,   273,   293,   271,   301,   101,   115,   150,     0,     0,
       0,     0,   301,     0,   113,     0,    93,    95,    96,     0,
       0,     0,    89,    87,   216,     0,   219,    49,    34,     0,
      73,   130,   128,   132,   119,   301,    61,     0,     0,   298,
       0,   301,   230,     0,     0,    99,    98,   100,     0,     0,
       0,    97,   301,    94,     0,   104,    84,    62,    63,     0,
      59,   178,   301,   301,     0,    58,   113,     0,    75,     0,
       0,   113,   113,     0,    57,   301,     0,     0,     0,   109,
       0,   113,    74,   108,   102,     0,     0,   105,     0,     0,
       0,   301,   113,   110,     0,   113,   106,     0,   301,   301,
     180,   111,   107,   103,   301,   182,   181,   183,     0,     0
};

static const short yydefgoto[] =
{
       1,   138,   106,    58,    59,    60,    61,    62,    63,    64,
     144,    65,    66,    67,    68,   407,   381,   434,    70,   292,
     293,   294,    71,   125,   126,   127,   371,   372,   373,   374,
     375,   435,   436,   437,   493,   506,   507,   438,   439,   367,
      72,    73,    74,   197,   297,   298,   299,   203,   204,   174,
      76,    77,   175,   276,   209,    79,    80,    81,    82,   134,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,   218,    94,   399,    95,    96,    97,    98,   188,    99,
     100,   101,   102,   103,   295,   258,   213,   190,   280,   264,
     136,   317,   318,   319,   270
};

static const short yypact[] =
{
  -32768,   475,   133,    29,   132,    46,   221,   227,-32768,-32768,
  -32768,-32768,-32768,    18,-32768,-32768,    33,    36,   600,   769,
  -32768,-32768,-32768,-32768,-32768,   291,     7,-32768,    21,    21,
  -32768,-32768,     0,    73,   259,   133,   415,    73,-32768,    73,
  -32768,   611,   264,   264,   264,     3,    74,-32768,   997,   997,
     997,   997,   997,   997,   702,   997,-32768,-32768,   133,-32768,
  -32768,-32768,-32768,-32768,   133,-32768,-32768,-32768,-32768,-32768,
     119,-32768,-32768,    58,    58,    72,-32768,    -2,   146,-32768,
  -32768,-32768,-32768,-32768,    80,-32768,    82,-32768,   897,-32768,
      96,-32768,    96,   897,-32768,-32768,  1453,   198,   198,-32768,
     574,-32768,   588,   141,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   135,   192,   183,-32768,   158,-32768,
  -32768,-32768,-32768,-32768,   190,-32768,   743,-32768,-32768,-32768,
     296,   170,   997,-32768,-32768,  1047,-32768,  1047,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,   336,-32768,  1097,-32768,  1147,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   249,-32768,-32768,
     264,-32768,   264,-32768,   179,  1658,    68,   181,    68,    68,
      68,   181,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,   -61,  1277,-32768,-32768,   294,   266,-32768,-32768,    58,
      33,    36,   997,   268,-32768,   452,    51,-32768,-32768,    25,
  -32768,-32768,   316,   242,-32768,   809,-32768,   997,   677,   897,
  -32768,-32768,   947,   997,   997,   997,   997,   997,   997,   997,
     997,   997,   997,   997,   997,   997,   997,   997,   997,   997,
     997,   997,   997,   997,   997,   997,   997,   997,   997,   997,
     997,   997,-32768,-32768,   997,-32768,-32768,-32768,   702,   702,
      60,-32768,  1580,   -36,-32768,-32768,   -20,-32768,   326,   230,
      21,-32768,-32768,  1453,-32768,-32768,   238,-32768,    68,  1047,
     297,  1047,   297,-32768,-32768,    84,   248,-32768,-32768,   997,
  -32768,-32768,    40,-32768,   311,   308,   319,   -18,-32768,   312,
      99,   -22,   318,    21,  1321,   452,    21,-32768,-32768,   286,
  -32768,-32768,-32768,-32768,   997,-32768,  1580,     6,-32768,   997,
    1365,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1580,  1580,
    1580,  1580,  1580,  1580,  1580,  1580,  1580,  1580,  1580,  1539,
     729,   792,  1129,  1659,  1682,   456,   456,   456,   456,   456,
     456,   180,   180,   320,   320,    68,    68,    68,  1187,   288,
     290,  1047,-32768,-32768,-32768,   997,-32768,   531,-32768,-32768,
  -32768,   332,-32768,-32768,   230,-32768,-32768,-32768,-32768,   292,
     997,-32768,   997,     4,    19,    68,-32768,-32768,-32768,   379,
  -32768,   241,   347,   309,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,   344,-32768,-32768,-32768,-32768,   997,   286,-32768,  1409,
     997,   997,  1496,-32768,-32768,-32768,-32768,-32768,   997,-32768,
  -32768,-32768,-32768,-32768,  1580,-32768,-32768,   267,   331,   333,
     342,    20,-32768,   381,   326,   279,-32768,-32768,-32768,    58,
     452,   230,-32768,-32768,-32768,  1232,    68,-32768,-32768,    21,
  -32768,-32768,-32768,-32768,-32768,  1580,-32768,    21,   344,-32768,
    1496,   997,  1635,    21,    21,-32768,-32768,-32768,   392,    21,
      58,   397,-32768,-32768,    21,   -74,-32768,-32768,-32768,    21,
  -32768,-32768,   997,   362,   321,-32768,   326,    58,-32768,    21,
      21,   326,   326,   322,-32768,   362,   323,   328,   897,   397,
      21,   326,-32768,   397,   397,   414,    47,-32768,   329,   897,
     897,-32768,   326,   397,   330,   326,-32768,   897,-32768,-32768,
  -32768,   397,-32768,   397,-32768,-32768,-32768,-32768,   431,-32768
};

static const short yypgoto[] =
{
  -32768,   -29,    52,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
      59,-32768,-32768,-32768,-32768,-32768,  -293,   432,-32768,-32768,
     147,-32768,-32768,-32768,-32768,-32768,-32768,    17,-32768,-32768,
      69,-32768,     9,-32768,-32768,-32768,   -59,-32768,-32768,  -392,
  -32768,-32768,-32768,   -69,-32768,    76,-32768,-32768,   164,     2,
     -35,-32768,     1,-32768,-32768,   -87,   -80,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -78,-32768,
  -32768,   380,  -297,-32768,-32768,   -23,-32768,    81,   -17,-32768,
  -32768,-32768,-32768,-32768,    30,   375,   -19,-32768,   -88,   129,
      32,  -393,-32768,  -311,   -70
};


#define	YYLAST		1777


static const short yytable[] =
{
     139,   216,    78,    75,   397,   198,   411,   166,   168,   169,
     171,   173,   263,   220,   266,   221,   408,   459,   361,   155,
    -112,    16,    17,   137,   165,   176,   177,   178,   179,   180,
     181,    47,   192,   202,   361,   189,   391,   289,    16,    17,
     107,   291,   471,   167,   167,   167,   167,   167,   128,   130,
     118,   119,   120,   121,   122,   170,   123,   191,   361,   282,
     410,   110,   362,   140,   142,   145,   147,   255,   483,   157,
     207,   159,   170,   361,   135,   137,   205,   262,   364,   262,
     392,   208,   118,   119,   120,   199,   122,   148,   123,   495,
     200,   201,    16,    17,   499,   141,   156,   310,   158,   503,
     504,   461,   447,   315,   454,   206,   308,   272,   311,   513,
     193,   394,   115,   273,   456,   395,   194,   448,   137,   278,
     521,   468,   262,   523,   262,   172,   116,   301,   302,   117,
     303,   322,  -151,   306,   262,   287,   262,   288,   283,   323,
     386,   324,   505,  -151,   137,  -121,  -296,   108,   109,   482,
     325,   326,   196,   117,  -151,   252,   253,   182,   183,   184,
     185,   481,   186,   254,   210,   187,   202,   143,   211,   -47,
     -47,   167,   195,   167,   214,   279,   215,   116,   281,   304,
     -36,   -36,   149,   150,   151,   284,   152,   153,   154,   321,
     217,   383,   316,   384,   320,   363,   267,   167,   300,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   104,
     105,   358,   -82,   401,   376,   307,   111,   112,   309,   359,
     360,   377,   113,   114,   378,   268,   314,   212,    16,    17,
     269,   414,   415,   416,   417,   -81,   262,   271,   262,    16,
      17,   247,   248,   249,   250,   251,   385,   252,   253,   277,
     167,   211,   396,   202,   400,   254,   254,   405,   368,   369,
     425,   370,    16,    17,    16,    17,    42,    43,    44,   256,
     257,   409,    45,    46,   423,   291,   412,   427,    17,   365,
      19,   131,   132,   133,   118,   119,   120,   121,   122,   382,
     123,    42,    43,    44,   274,   275,   449,    45,    46,    10,
      11,    12,   305,    14,    42,    43,    44,   428,   429,   430,
     431,    46,   379,   380,   312,   404,   313,   457,   262,   443,
     406,   116,   424,   366,   -30,   -30,   118,   119,   120,   121,
     122,   361,   123,   146,   463,   -32,   -32,   445,   464,   446,
     116,   196,   469,   389,   296,   388,   390,   393,   167,   440,
     474,   398,   149,   150,   151,   167,   152,   153,   154,   472,
     433,   380,   420,   455,   421,   479,   441,   316,   460,   450,
     444,   484,   167,   300,   452,   462,   171,    47,   465,   470,
     466,   489,   490,   249,   250,   251,   376,   252,   253,   467,
     487,   511,   496,   497,   426,   254,   410,   505,   500,   498,
     478,   509,   518,   519,   514,   508,   510,   517,   480,   522,
     524,   529,   167,    69,   485,   486,   167,   440,   316,   387,
     488,   520,   167,   442,   473,   491,   492,   516,   525,   526,
     494,   149,   150,   151,   527,   152,   153,   154,   476,   316,
     501,   502,   118,   119,   120,   121,   122,   451,   123,   403,
     475,   512,   219,   259,   453,   528,     2,   515,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
     422,    15,     0,    16,    17,    18,    19,     0,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,     0,     0,     0,    45,    46,    47,     0,
       0,     0,   425,     0,     0,   245,   246,   247,   248,   249,
     250,   251,     0,   252,   253,     0,     0,    48,   426,   427,
      17,   254,    19,     0,     0,     0,     0,    49,    50,     0,
       0,     0,    51,    52,     0,    53,     0,    54,     0,    55,
       0,    56,     0,     0,     0,    57,    42,    43,    44,   428,
     429,   430,   431,    46,    10,    11,    12,    13,    14,     0,
       0,     0,    16,   260,     0,     0,     0,     0,    10,    11,
      12,    13,    14,     0,     0,     0,    16,   260,    31,    32,
     118,   119,   120,   121,   122,     0,   123,     0,   124,    42,
      43,    44,    31,    32,   160,    45,    46,     0,     0,   161,
     162,   432,   433,    42,    43,    44,     0,     0,     0,    45,
      46,     0,     0,     0,     0,     0,    48,   149,   150,   151,
     163,   152,   153,   154,     0,   164,    49,    50,     0,     0,
      48,    51,    52,     0,    53,     0,    54,     0,    55,     0,
      49,    50,   261,     0,     0,    51,    52,     0,    53,     0,
      54,     0,    55,     0,     0,     0,   265,    10,    11,    12,
      13,    14,     0,     0,     0,    16,    17,     0,     0,     0,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,   182,   183,   184,   185,     0,   186,     0,
       0,   187,    42,    43,    44,     0,     0,     0,    45,    46,
      47,     0,     0,     0,     0,     0,     0,     0,   149,   150,
     151,     0,   152,   153,   154,     0,     0,     0,     0,    48,
       0,     0,     0,    10,    11,    12,    13,    14,     0,    49,
      50,    16,    17,     0,    51,    52,     0,    53,     0,    54,
       0,    55,     0,     0,   137,     0,     0,    31,    32,   118,
     119,   120,   121,   122,     0,   123,     0,   129,    42,    43,
      44,     0,     0,     0,    45,    46,     0,     0,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,    48,   252,   253,     0,    10,
      11,    12,    13,    14,   254,    49,    50,    16,    17,     0,
      51,    52,     0,    53,     0,    54,     0,    55,     0,     0,
     137,     0,     0,    31,    32,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,     0,     0,     0,
      45,    46,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,     0,   252,
     253,    48,     0,     0,     0,     0,     0,   254,     0,     0,
       0,    49,    50,     0,     0,     0,    51,    52,     0,    53,
       0,    54,     0,    55,     0,     0,   315,    10,    11,    12,
      13,    14,     0,     0,     0,    16,    17,     0,     0,     0,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,    43,    44,     0,     0,     0,    45,    46,
      47,     0,     0,     0,     0,     0,     0,    10,    11,    12,
      13,    14,     0,     0,     0,    16,    17,     0,     0,    48,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    49,
      50,    31,    32,     0,    51,    52,     0,    53,     0,    54,
       0,    55,    42,    43,    44,     0,     0,     0,    45,    46,
     327,     0,     0,     0,     0,     0,     0,    10,    11,    12,
      13,    14,     0,     0,     0,    16,    17,     0,     0,    48,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    49,
      50,    31,    32,     0,    51,    52,     0,    53,     0,    54,
       0,    55,    42,    43,    44,     0,     0,     0,    45,    46,
       0,     0,     0,     0,     0,     0,     0,    10,    11,    12,
      13,    14,     0,     0,     0,    16,   260,     0,     0,    48,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    49,
      50,    31,    32,     0,    51,    52,     0,    53,     0,    54,
       0,    55,    42,    43,    44,     0,     0,     0,    45,    46,
       0,     0,     0,     0,     0,     0,     0,    10,    11,    12,
      13,    14,     0,     0,     0,   285,   260,     0,     0,    48,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    49,
      50,    31,    32,     0,    51,    52,     0,    53,     0,    54,
       0,    55,    42,    43,    44,     0,     0,     0,    45,    46,
       0,     0,     0,     0,     0,     0,     0,    10,    11,    12,
      13,    14,     0,     0,     0,   286,   260,     0,     0,    48,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    49,
      50,    31,    32,     0,    51,    52,     0,    53,     0,    54,
       0,    55,    42,    43,    44,     0,     0,     0,    45,    46,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,     0,   252,   253,     0,    48,
       0,     0,     0,     0,   254,     0,     0,     0,     0,    49,
      50,     0,     0,     0,    51,    52,     0,    53,     0,    54,
       0,    55,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,     0,   252,   253,     0,     0,     0,     0,
       0,     0,   254,     0,     0,     0,   419,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,     0,   252,
     253,     0,     0,     0,     0,     0,     0,   254,     0,     0,
       0,   477,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,     0,   252,   253,     0,     0,     0,     0,
       0,     0,   254,     0,     0,   290,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,     0,   252,   253,
       0,     0,     0,     0,     0,     0,   254,     0,     0,   402,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,     0,   252,   253,     0,     0,     0,     0,     0,     0,
     254,     0,     0,   413,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,     0,   252,   253,     0,     0,
       0,     0,     0,     0,   254,     0,     0,   458,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,     0,
     252,   253,     0,     0,     0,     0,     0,     0,   254,     0,
     137,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,     0,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,     0,   252,   253,     0,     0,     0,     0,     0,
       0,   254,     0,   315,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   418,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,     0,   252,   253,     0,     0,
       0,     0,     0,     0,   254,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,     0,   252,   253,   182,
     183,   184,   185,     0,   186,   254,     0,   187,     0,     0,
     211,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   149,   150,   151,     0,   152,   153,
     154,   233,     0,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,     0,   252,   253,     0,     0,     0,     0,     0,     0,
     254,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,     0,   252,   253,     0,     0,
       0,     0,     0,     0,   254,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,     0,   252,
     253,     0,     0,     0,     0,     0,     0,   254
};

static const short yycheck[] =
{
      29,    88,     1,     1,   301,    74,   317,    42,    43,    44,
      45,    46,   100,    93,   102,    93,   309,   410,    54,    36,
      94,    18,    19,    97,    41,    48,    49,    50,    51,    52,
      53,    53,    55,    94,    54,    54,    54,    98,    18,    19,
      11,     1,   434,    42,    43,    44,    45,    46,    18,    19,
      10,    11,    12,    13,    14,    52,    16,    55,    54,   147,
      54,    15,    98,    31,    32,    33,    34,    96,   461,    37,
      72,    39,    52,    54,    67,    97,    75,   100,    98,   102,
      98,    83,    10,    11,    12,    13,    14,    35,    16,   482,
      18,    19,    18,    19,   486,    95,    37,    72,    39,   491,
     492,   412,    98,    97,   401,    75,    55,   136,    83,   501,
      58,    12,    94,   136,   407,    16,    64,    98,    97,   142,
     512,   101,   145,   515,   147,    51,    93,   197,   198,    93,
     199,   218,    72,   203,   157,   170,   159,   172,   155,   219,
     100,   219,    95,    83,    97,    94,    95,    15,    16,   460,
     220,   221,    94,    93,    94,    87,    88,    11,    12,    13,
      14,   458,    16,    95,    18,    19,    94,    94,    22,    96,
      97,   170,    53,   172,    94,   143,    94,    93,   146,   202,
      96,    97,    36,    37,    38,   155,    40,    41,    42,   218,
      94,   279,   215,   281,   217,   265,    55,   196,   196,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,    96,
      97,   254,    97,   303,   269,   205,    15,    16,   206,   258,
     259,   270,    15,    16,   273,    53,   214,   101,    18,    19,
      67,   321,   322,   323,   324,    97,   279,    67,   281,    18,
      19,    81,    82,    83,    84,    85,   289,    87,    88,    99,
     269,    22,   301,    94,   303,    95,    95,   306,    48,    49,
       1,    51,    18,    19,    18,    19,    45,    46,    47,    91,
      92,   314,    51,    52,   364,     1,   319,    18,    19,   267,
      21,    10,    11,    12,    10,    11,    12,    13,    14,   277,
      16,    45,    46,    47,    18,    19,   386,    51,    52,    10,
      11,    12,    54,    14,    45,    46,    47,    48,    49,    50,
      51,    52,    94,    95,    18,   305,    94,   407,   361,   374,
     308,    93,   365,    17,    96,    97,    10,    11,    12,    13,
      14,    54,    16,    94,   424,    96,    97,   380,   427,   382,
      93,    94,   432,    55,    98,    54,    47,    55,   367,   367,
     439,    53,    36,    37,    38,   374,    40,    41,    42,   100,
     101,    95,    94,   406,    94,   455,    54,   410,   411,    10,
      98,   461,   391,   391,    47,   418,   431,    53,    67,    18,
      67,   470,   472,    83,    84,    85,   441,    87,    88,    67,
      18,   498,   482,   483,    17,    95,    54,    95,   487,    98,
     449,    98,   509,   510,    10,   495,    98,    98,   457,    99,
     517,     0,   431,     1,   463,   464,   435,   435,   461,   292,
     469,   511,   441,   374,   435,   474,   475,   506,   518,   519,
     479,    36,    37,    38,   524,    40,    41,    42,   441,   482,
     489,   490,    10,    11,    12,    13,    14,   391,    16,   305,
     440,   500,    92,    98,   393,     0,     1,   506,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
     361,    16,    -1,    18,    19,    20,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    51,    52,    53,    -1,
      -1,    -1,     1,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    -1,    -1,    72,    17,    18,
      19,    95,    21,    -1,    -1,    -1,    -1,    82,    83,    -1,
      -1,    -1,    87,    88,    -1,    90,    -1,    92,    -1,    94,
      -1,    96,    -1,    -1,    -1,   100,    45,    46,    47,    48,
      49,    50,    51,    52,    10,    11,    12,    13,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    -1,    -1,    10,    11,
      12,    13,    14,    -1,    -1,    -1,    18,    19,    34,    35,
      10,    11,    12,    13,    14,    -1,    16,    -1,    18,    45,
      46,    47,    34,    35,    13,    51,    52,    -1,    -1,    18,
      19,   100,   101,    45,    46,    47,    -1,    -1,    -1,    51,
      52,    -1,    -1,    -1,    -1,    -1,    72,    36,    37,    38,
      39,    40,    41,    42,    -1,    44,    82,    83,    -1,    -1,
      72,    87,    88,    -1,    90,    -1,    92,    -1,    94,    -1,
      82,    83,    98,    -1,    -1,    87,    88,    -1,    90,    -1,
      92,    -1,    94,    -1,    -1,    -1,    98,    10,    11,    12,
      13,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    11,    12,    13,    14,    -1,    16,    -1,
      -1,    19,    45,    46,    47,    -1,    -1,    -1,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    37,
      38,    -1,    40,    41,    42,    -1,    -1,    -1,    -1,    72,
      -1,    -1,    -1,    10,    11,    12,    13,    14,    -1,    82,
      83,    18,    19,    -1,    87,    88,    -1,    90,    -1,    92,
      -1,    94,    -1,    -1,    97,    -1,    -1,    34,    35,    10,
      11,    12,    13,    14,    -1,    16,    -1,    18,    45,    46,
      47,    -1,    -1,    -1,    51,    52,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    72,    87,    88,    -1,    10,
      11,    12,    13,    14,    95,    82,    83,    18,    19,    -1,
      87,    88,    -1,    90,    -1,    92,    -1,    94,    -1,    -1,
      97,    -1,    -1,    34,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    47,    -1,    -1,    -1,
      51,    52,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    72,    -1,    -1,    -1,    -1,    -1,    95,    -1,    -1,
      -1,    82,    83,    -1,    -1,    -1,    87,    88,    -1,    90,
      -1,    92,    -1,    94,    -1,    -1,    97,    10,    11,    12,
      13,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    47,    -1,    -1,    -1,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    10,    11,    12,
      13,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    72,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      83,    34,    35,    -1,    87,    88,    -1,    90,    -1,    92,
      -1,    94,    45,    46,    47,    -1,    -1,    -1,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    10,    11,    12,
      13,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    72,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      83,    34,    35,    -1,    87,    88,    -1,    90,    -1,    92,
      -1,    94,    45,    46,    47,    -1,    -1,    -1,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,    11,    12,
      13,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    72,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      83,    34,    35,    -1,    87,    88,    -1,    90,    -1,    92,
      -1,    94,    45,    46,    47,    -1,    -1,    -1,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,    11,    12,
      13,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    72,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      83,    34,    35,    -1,    87,    88,    -1,    90,    -1,    92,
      -1,    94,    45,    46,    47,    -1,    -1,    -1,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,    11,    12,
      13,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    72,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      83,    34,    35,    -1,    87,    88,    -1,    90,    -1,    92,
      -1,    94,    45,    46,    47,    -1,    -1,    -1,    51,    52,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    -1,    72,
      -1,    -1,    -1,    -1,    95,    -1,    -1,    -1,    -1,    82,
      83,    -1,    -1,    -1,    87,    88,    -1,    90,    -1,    92,
      -1,    94,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    95,    -1,    -1,    -1,    99,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,    -1,
      -1,    99,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    95,    -1,    -1,    98,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,    -1,    98,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      95,    -1,    -1,    98,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    95,    -1,    -1,    98,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,
      97,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    95,    -1,    97,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    95,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    11,
      12,    13,    14,    -1,    16,    95,    -1,    19,    -1,    -1,
      22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    37,    38,    -1,    40,    41,
      42,    66,    -1,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      95,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    95,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    95
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
struct yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (struct yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	struct yyalloc *yyptr =
	  (struct yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 2:
#line 178 "/usr/local/pdp++/src/css/css_parse.y"
{ cssMisc::cur_top->ResetParseFlags(); return cssProg::YY_Blank; }
    break;
case 3:
#line 179 "/usr/local/pdp++/src/css/css_parse.y"
{ cssMisc::cur_top->ResetParseFlags(); return cssProg::YY_Ok; }
    break;
case 4:
#line 180 "/usr/local/pdp++/src/css/css_parse.y"
{ cssMisc::cur_top->ResetParseFlags(); return yyvsp[-1].ival; }
    break;
case 5:
#line 181 "/usr/local/pdp++/src/css/css_parse.y"
{ cssMisc::cur_top->Prog()->ResetLasts();
				  cssMisc::cur_top->ResetParseFlags(); 
				  return cssProg::YY_Ok; }
    break;
case 6:
#line 184 "/usr/local/pdp++/src/css/css_parse.y"
{ cssMisc::cur_top->Prog()->ResetLasts();
				  cssMisc::cur_top->ResetParseFlags(); 
				  return cssProg::YY_Ok; }
    break;
case 7:
#line 187 "/usr/local/pdp++/src/css/css_parse.y"
{ cssMisc::cur_top->ResetParseFlags(); return cssProg::YY_Ok; }
    break;
case 8:
#line 188 "/usr/local/pdp++/src/css/css_parse.y"
{ cssMisc::cur_top->ResetParseFlags(); return cssProg::YY_Err; }
    break;
case 9:
#line 189 "/usr/local/pdp++/src/css/css_parse.y"
{ cssMisc::cur_top->ResetParseFlags(); return cssProg::YY_Exit; }
    break;
case 10:
#line 192 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = cssMisc::cur_top->Prog()->size; }
    break;
case 11:
#line 195 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = cssMisc::cur_top->Prog()->size; }
    break;
case 12:
#line 196 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = cssMisc::cur_top->Prog()->size; }
    break;
case 18:
#line 208 "/usr/local/pdp++/src/css/css_parse.y"
{ 
            cssEl* tmp = yyvsp[0].el.El();
	    cssMisc::cur_top->SetInclude((const char*)*tmp);
	    cssEl::Done(yyvsp[0].el.El()); }
    break;
case 19:
#line 214 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssMisc::Defines.Push(new cssDef(0, yyvsp[0].nm)); }
    break;
case 21:
#line 217 "/usr/local/pdp++/src/css/css_parse.y"
{ cssMisc::Defines.Remove(yyvsp[0].el.El()); }
    break;
case 22:
#line 220 "/usr/local/pdp++/src/css/css_parse.y"
{ /* if its a name, its not defined.. */
            cssDef::Skip_To_Endif(cssMisc::cur_top->Prog());
	    return cssProg::YY_Ok; }
    break;
case 24:
#line 224 "/usr/local/pdp++/src/css/css_parse.y"
{ /* if its a def, its defined.. */
            cssDef::Skip_To_Endif(cssMisc::cur_top->Prog());
	    return cssProg::YY_Ok; }
    break;
case 26:
#line 230 "/usr/local/pdp++/src/css/css_parse.y"
{ /* if you see it, it applies to u*/
            cssDef::Skip_To_Endif(cssMisc::cur_top->Prog()); }
    break;
case 28:
#line 245 "/usr/local/pdp++/src/css/css_parse.y"
{ 
            if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
            Code1(yyvsp[-1].el); yyval.ival = cssProg::YY_Ok; }
    break;
case 29:
#line 250 "/usr/local/pdp++/src/css/css_parse.y"
{
            if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
	    Code1(yyvsp[-1].el); yyval.ival = cssProg::YY_Ok; }
    break;
case 30:
#line 255 "/usr/local/pdp++/src/css/css_parse.y"
{
	    if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
	    Code2(yyvsp[0].el,yyvsp[-2].el); yyval.ival = cssProg::YY_Ok; }
    break;
case 31:
#line 260 "/usr/local/pdp++/src/css/css_parse.y"
{ 
            if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
	    yyval.ival = cssProg::YY_NoSrc;
	    cssMisc::cur_top->SetCont(-1); }
    break;
case 32:
#line 266 "/usr/local/pdp++/src/css/css_parse.y"
{ 
            if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
	   cssMisc::cur_top->src_ln = cssMisc::cur_top->st_src_ln;
	   cssMisc::cur_top->List(); yyval.ival = cssProg::YY_NoSrc; }
    break;
case 33:
#line 272 "/usr/local/pdp++/src/css/css_parse.y"
{
            if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
	    yyval.ival = cssProg::YY_Ok; 
	    cssMisc::cur_top->src_ln = cssMisc::cur_top->st_src_ln;
	    Code1(yyvsp[-2].el); yyval.ival = cssProg::YY_Ok; }
    break;
case 34:
#line 279 "/usr/local/pdp++/src/css/css_parse.y"
{
            if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
	    yyval.ival = cssProg::YY_Ok; 
	    cssMisc::cur_top->src_ln = cssMisc::cur_top->st_src_ln;
	    Code1(yyvsp[-4].el); yyval.ival = cssProg::YY_Ok; }
    break;
case 35:
#line 286 "/usr/local/pdp++/src/css/css_parse.y"
{
            if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
	    Code1(yyvsp[-1].el); yyval.ival = cssProg::YY_Ok; }
    break;
case 36:
#line 291 "/usr/local/pdp++/src/css/css_parse.y"
{
	    if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
	    Code2(yyvsp[0].el,yyvsp[-2].el); yyval.ival = cssProg::YY_Ok; }
    break;
case 37:
#line 296 "/usr/local/pdp++/src/css/css_parse.y"
{
            if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
	    yyval.ival = cssProg::YY_NoSrc; 
	    (yyvsp[0].el.El())->Do(cssMisc::cur_top->Prog()); }
    break;
case 38:
#line 302 "/usr/local/pdp++/src/css/css_parse.y"
{
	    yyval.ival = cssProg::YY_NoSrc;
	    cssMisc::cur_top->Prog()->Stack()->Push(new cssRef(yyvsp[-1].el));
	    (yyvsp[-2].el.El())->Do(cssMisc::cur_top->Prog()); }
    break;
case 39:
#line 306 "/usr/local/pdp++/src/css/css_parse.y"
{
	    yyval.ival = cssProg::YY_NoSrc; }
    break;
case 40:
#line 308 "/usr/local/pdp++/src/css/css_parse.y"
{
            if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
	    yyval.ival = cssProg::YY_NoSrc;
	    (yyvsp[0].el.El())->Do(cssMisc::cur_top->Prog());}
    break;
case 41:
#line 314 "/usr/local/pdp++/src/css/css_parse.y"
{
            if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
	    yyval.ival = cssProg::YY_NoSrc;
	    cssMisc::cur_top->Prog()->Stack()->Push(yyvsp[0].el.El());
	    (yyvsp[-1].el.El())->Do(cssMisc::cur_top->Prog());}
    break;
case 42:
#line 321 "/usr/local/pdp++/src/css/css_parse.y"
{
            if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
	    yyval.ival = cssProg::YY_NoSrc;
	    cssMisc::cur_top->Prog()->Stack()->Push(yyvsp[0].el.El());
	    (yyvsp[-1].el.El())->Do(cssMisc::cur_top->Prog());}
    break;
case 43:
#line 328 "/usr/local/pdp++/src/css/css_parse.y"
{
            if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
	    yyval.ival = cssProg::YY_NoSrc;
	    cssMisc::cur_top->Prog()->Stack()->Push(yyvsp[0].el.El());
	    (yyvsp[-1].el.El())->Do(cssMisc::cur_top->Prog());}
    break;
case 44:
#line 335 "/usr/local/pdp++/src/css/css_parse.y"
{
            if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
	    yyval.ival = cssProg::YY_NoSrc;
	    cssMisc::cur_top->Prog()->Stack()->Push(yyvsp[0].el.El());
	    (yyvsp[-1].el.El())->Do(cssMisc::cur_top->Prog());}
    break;
case 45:
#line 342 "/usr/local/pdp++/src/css/css_parse.y"
{
            if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
	    yyval.ival = cssProg::YY_NoSrc;
	    cssMisc::cur_top->Prog()->Stack()->Push(yyvsp[0].el.El());
	    (yyvsp[-1].el.El())->Do(cssMisc::cur_top->Prog());}
    break;
case 46:
#line 349 "/usr/local/pdp++/src/css/css_parse.y"
{
            if(!cssMisc::cur_top->InShell()) {
	      yyerror("commands are only available from the shell");
	      return cssProg::YY_Err; }
	    yyval.ival = cssProg::YY_NoSrc;
	    cssMisc::cur_top->Prog()->Stack()->Push(yyvsp[0].el.El());
	    (yyvsp[-1].el.El())->Do(cssMisc::cur_top->Prog());}
    break;
case 47:
#line 358 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = 0; }
    break;
case 49:
#line 360 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-2].ival; }
    break;
case 56:
#line 372 "/usr/local/pdp++/src/css/css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-3].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(yyvsp[-1].ival);
	    if(yyvsp[-2].ival < 0) yyval.ival = yyvsp[-1].ival-1; /* if no coding, its the end, else not */
	    else yyval.ival = yyvsp[-2].ival; }
    break;
case 57:
#line 382 "/usr/local/pdp++/src/css/css_parse.y"
{
 	    (yyvsp[-6].el.El())->MakeToken(cssMisc::cur_top->Prog());
	    cssRef* tmp = (cssRef*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    /* constants get dealt with differently */
	    if(tmp->ptr.ptr == (void*)&(cssMisc::Constants)) {
	      /* code in ConstExpr space the initializer */
	      cssMisc::ConstExprTop->Prog()->UnCode();	/* undo the end jump coding */
	      Code3(tmp->ptr, cssBI::init_asgn, cssBI::pop);
	      cssMisc::ConstExprTop->Run(); /* run the const expr assigning val */
	      cssMisc::CodeTop(); /* revert to coding using top */
	      yyval.ival = Code1(cssMisc::cur_top->Prog()->size+1); /* need to have an rval */
	    }
	    else {
	      cssMisc::cur_top->Prog()->UnCode();	/* undo the end jump coding */
	      yyval.ival = Code3(tmp->ptr, cssBI::init_asgn, cssBI::pop);
	    }
	    cssEl::Done(tmp); }
    break;
case 58:
#line 400 "/usr/local/pdp++/src/css/css_parse.y"
{	/* no type information, get from last expr */
	    cssMisc::cur_top->Prog()->UnCode();	/* undo the end jump coding */
	    css_progdx actln = yyvsp[-1].ival-2; 
	    if(cssMisc::cur_top->Prog()->insts[actln]->IsJump()) { /* if jmp, get before */
	      actln = yyvsp[-3].ival+1;	/* go for the first thing if the last is no good */
	    }
	    cssEl* extyp = cssMisc::cur_top->Prog()->insts[actln]->inst.El();
 	    extyp->MakeToken(cssMisc::cur_top->Prog());
	    cssRef* tmp = (cssRef*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    yyval.ival = Code3(tmp->ptr, cssBI::init_asgn, cssBI::pop);
	    if(!cssMisc::cur_top->InShell()) {
	      cssMisc::Warning(cssMisc::cur_top->Prog(),
			       "Warning: created implicit variable:",
			       tmp->ptr.El()->name,
			       "of type: ", extyp->GetTypeName()); }
	    cssEl::Done(tmp); }
    break;
case 59:
#line 420 "/usr/local/pdp++/src/css/css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-5].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    cssMisc::cur_top->Prog()->UnCode();	/* undo the end jump coding */
	    cssMisc::cur_top->Prog()->Stack()->Push(yyvsp[-5].el.El()); /* type is an arg */
	    cssMisc::cur_top->Prog()->Stack()->Push(new cssInt(yyvsp[-2].ival)); /* num of dims */
	    cssMisc::VoidArray.tmp_str = (yyvsp[-5].el.El())->tmp_str;
	    cssMisc::VoidArray.MakeToken(cssMisc::cur_top->Prog());
	    cssRef* tmp = (cssRef*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    yyval.ival = Code3(tmp->ptr, cssBI::array_alloc, cssBI::pop);
	    cssEl::Done(tmp); }
    break;
case 60:
#line 436 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = 1; }
    break;
case 61:
#line 437 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-1].ival + 1; }
    break;
case 62:
#line 441 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-1].ival; }
    break;
case 63:
#line 444 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(yyvsp[-1].ival); yyval.ival = yyvsp[-1].ival-1;
	    if(cssMisc::cur_enum->name.before(5) == "enum_") /* don't keep anon enums around */
	      delete cssMisc::cur_enum;
	    cssMisc::cur_enum = NULL; }
    break;
case 64:
#line 451 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssString* nm = (cssString*)cssMisc::cur_top->Prog()->Stack()->Pop();
            cssMisc::cur_enum = new cssEnumType((const char*)*nm);
	    if(cssMisc::cur_class != NULL) cssMisc::cur_class->types->Push(cssMisc::cur_enum);
	    /* todo: global keyword?? else cssMisc::TypesSpace.Push(cssMisc::cur_enum); */
	    else cssMisc::cur_top->types.Push(cssMisc::cur_enum);
	    cssEl::Done(nm); }
    break;
case 65:
#line 458 "/usr/local/pdp++/src/css/css_parse.y"
{ /* redefining */
	    if(yyvsp[0].el.El()->GetType() != cssEl::T_EnumType) {
	      yyerror("Attempt to redefine non-enum type as an enum");
	      return cssProg::YY_Err; }
   	    cssMisc::cur_enum = (cssEnumType*)yyvsp[0].el.El();
 	    cssMisc::cur_enum->enums->Reset(); /* prepare for new enums.. */
	    cssMisc::cur_enum->enum_cnt = 0; }
    break;
case 66:
#line 465 "/usr/local/pdp++/src/css/css_parse.y"
{ /* anonymous  */
	    String nm = "anonenum_"; nm += String(cssMisc::anon_type_cnt++); nm += "_";
            cssMisc::cur_enum = new cssEnumType((const char*)nm);
	    if(cssMisc::cur_class != NULL) cssMisc::cur_class->types->Push(cssMisc::cur_enum);
	    /* todo: global keyword?? else cssMisc::TypesSpace.Push(cssMisc::cur_enum); */
	    else cssMisc::cur_top->types.Push(cssMisc::cur_enum); }
    break;
case 71:
#line 479 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.el = cssMisc::VoidElPtr; }
    break;
case 72:
#line 482 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssString* nm = (cssString*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    cssSpace* en_own;
	    if(cssMisc::cur_class != NULL) en_own = cssMisc::cur_class->types;
	    else en_own = &(cssMisc::Enums);
	    cssElPtr itm_ptr = en_own->FindName((const char*)*nm); 	cssEnum* itm;
	    if(itm_ptr != 0) { /* redef */
	      itm = (cssEnum*)itm_ptr.El();
	      itm->val = cssMisc::cur_enum->enum_cnt;
	      itm->SetEnumType(cssMisc::cur_enum);
	    } else {
	      itm = new cssEnum(cssMisc::cur_enum, cssMisc::cur_enum->enum_cnt,
				(const char*)*nm);
	      en_own->Push(itm);
	    }
	    cssMisc::cur_enum->enum_cnt = itm->val + 1;
	    cssMisc::cur_enum->enums->Push(itm); cssEl::Done(nm); }
    break;
case 73:
#line 499 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssString* nm = (cssString*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    cssSpace* en_own;
	    if(cssMisc::cur_class != NULL) en_own = cssMisc::cur_class->types;
	    else en_own = &(cssMisc::Enums);
	    cssElPtr itm_ptr = en_own->FindName((const char*)*nm);	cssEnum* itm;
	    if(itm_ptr != 0) { /* redef */
	      itm = (cssEnum*)itm_ptr.El();
	      itm->val = (int)*(yyvsp[0].el.El());
	      itm->SetEnumType(cssMisc::cur_enum);
	    }
	    else {
	      itm = new cssEnum(cssMisc::cur_enum, (int)*(yyvsp[0].el.El()), (const char*)*nm);
	      en_own->Push(itm);
	    }
	    cssMisc::cur_enum->enum_cnt = itm->val + 1;
	    cssMisc::cur_enum->enums->Push(itm); cssEl::Done(nm); }
    break;
case 74:
#line 519 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(yyvsp[-1].ival); yyval.ival = yyvsp[-1].ival-1; 
            cssMisc::cur_class->GetComments(cssMisc::cur_class, yyvsp[-4].el);
            cssMisc::cur_class = NULL; cssMisc::cur_method = NULL; }
    break;
case 75:
#line 523 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(yyvsp[-1].ival); yyval.ival = yyvsp[-1].ival-1; 
            cssMisc::cur_class->GetComments(cssMisc::cur_class, yyvsp[-3].el);
            cssMisc::cur_class = NULL; cssMisc::cur_method = NULL; }
    break;
case 76:
#line 527 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(yyvsp[-1].ival); yyval.ival = yyvsp[-1].ival-1;
            cssMisc::cur_class = NULL; cssMisc::cur_method = NULL; }
    break;
case 79:
#line 537 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssString* nm = (cssString*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    cssMisc::cur_class = new cssClassType((const char*)*nm);
	    cssMisc::cur_class->last_top = cssMisc::cur_top;
	    /*	todo: keyword for global??    cssMisc::TypesSpace.Push(cssMisc::cur_class); */
	    cssMisc::cur_top->types.Push(cssMisc::cur_class);
	    cssEl::Done(nm); }
    break;
case 80:
#line 544 "/usr/local/pdp++/src/css/css_parse.y"
{ /* redefining */
	    if(yyvsp[0].el.El()->GetType() != cssEl::T_ClassType) {
	      yyerror("Attempt to redefine non-class type as a class");
	      return cssProg::YY_Err;
	    }
	    cssMisc::cur_class = (cssClassType*)yyvsp[0].el.El();
	    cssivSession::CancelClassEdits(cssMisc::cur_class);
	    if(cssMisc::cur_class->last_top != cssMisc::cur_top) {
	      cssMisc::cur_class->last_top = cssMisc::cur_top;
	      cssMisc::cur_class->multi_space = true;
	    }
            cssMisc::cur_class->methods->Reset();
	    cssMisc::cur_class->members->Reset();
            cssMisc::cur_class->member_desc.Reset();
            cssMisc::cur_class->member_opts.Reset();
            cssMisc::cur_class->types->Reset();
	    cssMisc::cur_class->parents->Reset();
	    cssMisc::cur_class->AddBuiltins();  }
    break;
case 81:
#line 564 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssString* nm = (cssString*)cssMisc::cur_top->Prog()->Stack()->Pop();
            cssMisc::cur_class = new cssClassType((const char*)*nm);
	    /*	todo: keyword for global??    cssMisc::TypesSpace.Push(cssMisc::cur_class); */
	    cssMisc::cur_top->types.Push(cssMisc::cur_class);
            cssEl::Done(nm); }
    break;
case 82:
#line 570 "/usr/local/pdp++/src/css/css_parse.y"
{
            if(yyvsp[0].el.El()->GetType() != cssEl::T_ClassType) {
              yyerror("Attempt to redefine non-class type as a class");
              return cssProg::YY_Err;
            }
            cssMisc::cur_class = (cssClassType*)yyvsp[0].el.El(); }
    break;
case 85:
#line 582 "/usr/local/pdp++/src/css/css_parse.y"
{
            if(yyvsp[0].el.El()->GetType() != cssEl::T_ClassType) {
	      yyerror("Cannot inherit from non-class type");
	      /* cssMisc::TypesSpace.Remove(cssMisc::cur_class); */
	      cssMisc::cur_top->types.Remove(cssMisc::cur_class);
	      return cssProg::YY_Err;
	    }
	    cssMisc::cur_class->AddParent((cssClassType*)(yyvsp[0].el.El())); }
    break;
case 87:
#line 593 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.el = yyvsp[0].el; }
    break;
case 96:
#line 610 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.el = cssMisc::VoidElPtr; }
    break;
case 97:
#line 611 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.el = cssMisc::VoidElPtr; }
    break;
case 101:
#line 615 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.el = cssMisc::VoidElPtr; }
    break;
case 102:
#line 618 "/usr/local/pdp++/src/css/css_parse.y"
{ 
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-3].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
            cssMisc::parsing_membdefn = true;
            cssString* nm = (cssString*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    cssClassMember* mbr = new cssClassMember(yyvsp[-3].el.El(), (const char*)*nm);
            cssMisc::cur_class->members->Push(mbr);
            cssMisc::cur_class->GetComments(mbr, yyvsp[0].el);
            cssMisc::parsing_membdefn = false;
            cssEl::Done(nm); }
    break;
case 103:
#line 630 "/usr/local/pdp++/src/css/css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-5].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
            cssMisc::parsing_membdefn = true;
            cssMisc::cur_top->Prog()->Stack()->Push(new cssInt(yyvsp[-2].ival)); /* num of dims */
            cssMisc::cur_top->Prog()->Stack()->Push(yyvsp[-5].el.El()); /* type is an arg */
            cssMisc::VoidArrayType.MakeTempToken(cssMisc::cur_top->Prog());
            cssArrayType* tmp = (cssArrayType*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    cssClassMember* mbr = new cssClassMember(tmp, tmp->name);
            cssMisc::cur_class->members->Push(mbr);
            cssMisc::cur_class->GetComments(mbr, yyvsp[0].el);
            cssMisc::parsing_membdefn = false; }
    break;
case 104:
#line 646 "/usr/local/pdp++/src/css/css_parse.y"
{
            /* swap places with void marker */
            cssString* nm = (cssString*)cssMisc::cur_top->Prog()->Stack()->Pop();
            cssMisc::cur_top->Prog()->Stack()->Push(&cssMisc::Void);
            cssMisc::cur_top->Prog()->Stack()->Push(nm); }
    break;
case 105:
#line 654 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = 1; }
    break;
case 106:
#line 655 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-1].ival + 1; }
    break;
case 107:
#line 659 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssMisc::cur_top->Prog()->Stack()->Push(new cssInt((int)*yyvsp[-1].el.El())); }
    break;
case 108:
#line 663 "/usr/local/pdp++/src/css/css_parse.y"
{       /* pre-declare function */
	    cssMbrScriptFun* fun = (cssMbrScriptFun*)yyvsp[-3].el.El();
            cssMisc::cur_class->GetComments(fun, yyvsp[0].el);
	    cssMisc::ConstExpr->Stack()->Push(new cssString(cssRetv_Name)); /* the return val */
	    fun->retv_type->MakeToken(cssMisc::ConstExpr); /* create return val w/ name */
	    fun->Define(cssMisc::ConstExpr, true); }
    break;
case 109:
#line 669 "/usr/local/pdp++/src/css/css_parse.y"
{       /* constructor */
	    if(yyvsp[-3].el.El() != cssMisc::cur_class) {
	      yyerror("constructor-like method does not match current class type");
	      return cssProg::YY_Err; }
	    cssElPtr fun_ptr = cssMisc::cur_class->methods->FindName((const char*)cssMisc::cur_class->name);
	    cssMbrScriptFun* fun;
	    if(fun_ptr != 0)
	      fun = (cssMbrScriptFun*)fun_ptr.El();
	    else {
	      fun = new cssMbrScriptFun
		((const char*)cssMisc::cur_class->name, cssMisc::cur_class);
	      cssMisc::cur_class->methods->Push(fun);
	    }
	    fun->is_tor = true;
	    fun->argc = yyvsp[-2].ival + 1;	      	fun->GetArgDefs();
            cssMisc::cur_class->GetComments(fun, yyvsp[0].el); }
    break;
case 110:
#line 685 "/usr/local/pdp++/src/css/css_parse.y"
{       /* destructor */
	    if(yyvsp[-3].el.El() != cssMisc::cur_class) {
	      yyerror("destructor-like method does not match current class type");
	      return cssProg::YY_Err; }
	    String nm = "~";
	    nm += cssMisc::cur_class->name;
	    cssElPtr fun_ptr = cssMisc::cur_class->methods->FindName((const char*)nm);
	    cssMbrScriptFun* fun;
	    if(fun_ptr != 0)
	      fun = (cssMbrScriptFun*)fun_ptr.El();
	    else {
	      fun = new cssMbrScriptFun(nm, cssMisc::cur_class);
	      cssMisc::cur_class->methods->Push(fun);
	    }
	    fun->is_tor = true;
	    fun->argc = yyvsp[-2].ival + 1;		fun->GetArgDefs();
            cssMisc::cur_class->GetComments(fun, yyvsp[0].el);}
    break;
case 111:
#line 702 "/usr/local/pdp++/src/css/css_parse.y"
{       /* destructor */
	    if(yyvsp[-3].el.El() != cssMisc::cur_class) {
	      yyerror("destructor-like method does not match current class type");
	      return cssProg::YY_Err; }
	    String nm = "~";
	    nm += cssMisc::cur_class->name;
	    cssElPtr fun_ptr = cssMisc::cur_class->methods->FindName((const char*)nm);
	    cssMbrScriptFun* fun;
	    if(fun_ptr != 0)
	      fun = (cssMbrScriptFun*)fun_ptr.El();
	    else {
	      fun = new cssMbrScriptFun(nm, cssMisc::cur_class);
	      cssMisc::cur_class->methods->Push(fun);
	    }
	    fun->is_tor = true;
	    fun->is_virtual = true;
	    fun->argc = yyvsp[-2].ival + 1;		fun->GetArgDefs();
            cssMisc::cur_class->GetComments(fun, yyvsp[0].el);}
    break;
case 112:
#line 722 "/usr/local/pdp++/src/css/css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-1].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    cssEl* nm = cssMisc::cur_top->Prog()->Stack()->Pop();  /* get rid of name */
	    cssElPtr fun_ptr = cssMisc::cur_class->methods->FindName((const char*)*nm);
	    cssMbrScriptFun* fun;
	    if(fun_ptr != 0) {
	      fun = (cssMbrScriptFun*)fun_ptr.El();
	      yyval.el = fun_ptr;
	    }
	    else {
	      fun = new cssMbrScriptFun((const char*)*nm, cssMisc::cur_class);
	      yyval.el = cssMisc::cur_class->methods->Push(fun);
	    }
	    if(yyvsp[-1].el.El()->tmp_str == "virtual") fun->is_virtual = true;
	    fun->SetRetvType(yyvsp[-1].el.El()); /* preserve type info for later if nec */
            cssEl::Done(nm); }
    break;
case 113:
#line 743 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.el.Reset(); }
    break;
case 114:
#line 744 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.el = yyvsp[0].el; }
    break;
case 115:
#line 745 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.el = yyvsp[-1].el; }
    break;
case 116:
#line 748 "/usr/local/pdp++/src/css/css_parse.y"
{	/* pre-declare function */
            cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(yyvsp[-1].ival);	yyval.ival = yyvsp[-1].ival-1;
	    cssScriptFun* fun = (cssScriptFun*)yyvsp[-3].el.El();
	    fun->argc = yyvsp[-2].ival; fun->GetArgDefs(); }
    break;
case 117:
#line 754 "/usr/local/pdp++/src/css/css_parse.y"
{ 
	    cssScriptFun* fun = (cssScriptFun*)yyvsp[-3].el.El();
	    cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(yyvsp[0].ival+1); yyval.ival = yyvsp[-1].ival-1;
	    cssMisc::ConstExpr->Stack()->Push(new cssString(cssRetv_Name)); /* the return val */
	    fun->retv_type->MakeToken(cssMisc::ConstExpr); /* create return val w/ name */
	    cssScriptFun* bra_fun = (cssScriptFun*)(cssMisc::cur_top->Prog()->insts[yyvsp[0].ival]->inst.El());
	    cssMisc::cur_top->Prog()->insts[yyvsp[0].ival]->SetInst(yyvsp[-3].el); /* replace bra with fun */
	    cssMisc::cur_top->RemoveVar(bra_fun);	/* get rid of the bra */
	    cssMisc::cur_top->SetPush(fun->fun); /* this is the one we want to push */
	    fun->Define(cssMisc::ConstExpr); }
    break;
case 118:
#line 766 "/usr/local/pdp++/src/css/css_parse.y"
{ 
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-3].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    yyval.ival = cssMisc::cur_top->Prog()->size; }
    break;
case 119:
#line 774 "/usr/local/pdp++/src/css/css_parse.y"
{ 
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-4].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(yyvsp[0].ival+1);	yyval.ival = yyvsp[-1].ival-1;
	    cssScriptFun* fun = (cssScriptFun*)yyvsp[-3].el.El();
	    fun->SetRetvType(yyvsp[-4].el.El());
	    cssMisc::ConstExpr->Stack()->Push(new cssString(cssRetv_Name)); /* the return val */
	    fun->retv_type->MakeToken(cssMisc::ConstExpr); /* create return val w/ name */
	    cssScriptFun* bra_fun = (cssScriptFun*)(cssMisc::cur_top->Prog()->insts[yyvsp[0].ival]->inst.El());
	    cssMisc::cur_top->Prog()->insts[yyvsp[0].ival]->SetInst(yyvsp[-3].el); /* replace bra with existing one */
	    cssMisc::cur_top->RemoveVar(bra_fun);	/* get rid of the bra */
	    fun->fun->Reset();	/* reset it for new defn */
	    cssMisc::cur_top->SetPush(fun->fun); /* push this one */
	    fun->Define(cssMisc::ConstExpr); }
    break;
case 120:
#line 792 "/usr/local/pdp++/src/css/css_parse.y"
{
	    cssMbrScriptFun* fun = (cssMbrScriptFun*)yyvsp[-3].el.El();
	    cssClassType* cls = cssMisc::cur_class;
	    cssMisc::ConstExpr->Stack()->Push(new cssString(cssRetv_Name)); /* the return val */
	    fun->retv_type->MakeToken(cssMisc::ConstExpr); /* create return val w/ name */
	    fun->Define(cssMisc::ConstExpr);
	    cssMisc::cur_method = fun; /* this is now the current method */
	    cssElPtr fun_ptr;  fun_ptr.SetNVirtMethod(cls, cls->methods->GetIndex(fun));
	    css_progdx nxt_ln = Code1(fun_ptr); /* code it so it shows up in a listing.. */
	    cssMisc::cur_top->Prog()->insts[ nxt_ln ]->SetDefn();
	    cssMisc::cur_top->SetPush(fun->fun); /* put it on the stack.. */
	    cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival-1]->SetLine(nxt_ln+1); yyval.ival = yyvsp[-1].ival-1; }
    break;
case 121:
#line 806 "/usr/local/pdp++/src/css/css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-1].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    cssEl* nm = cssMisc::cur_top->Prog()->Stack()->Pop();  /* get rid of name */
	    cssScriptFun* fun = new cssScriptFun((const char*)*nm);
	    fun->SetRetvType(yyvsp[-1].el.El()); /* preserve type info for later if nec */
	    if(yyvsp[-1].el.El()->tmp_str == "extern") yyval.el = cssMisc::Externs.PushUniqNameOld(fun);
	    else yyval.el = cssMisc::cur_top->AddStatic(fun);
            cssEl::Done(nm); }
    break;
case 122:
#line 819 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssMisc::cur_scope = NULL;
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-2].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    if((yyvsp[-1].el.El())->GetType() != cssEl::T_ClassType) {
	      yyerror("attempt to define member function in non-class type");
	      return cssProg::YY_Err; }
	    cssClassType* cls = (cssClassType*)yyvsp[-1].el.El();
	    cssMisc::cur_class = cls; /* this is now the current class */
	    cssEl* nm = cssMisc::cur_top->Prog()->Stack()->Pop();  /* get rid of name */
	    cssMbrScriptFun* fun = (cssMbrScriptFun*)cls->GetMemberFun((const char*)*nm);
	    if(fun == &cssMisc::Void) {
	      yyerror("member function not declared in class type");
	      return cssProg::YY_Err; }
            if(fun->GetType() == cssEl::T_MbrCFun) {
              yyerror("member function is hardcoded");
              return cssProg::YY_Err; }
	    if((fun->retv_type != yyvsp[-2].el.El())
	       && !(fun->retv_type->IsRef() || fun->retv_type->GetType() == cssEl::T_Ptr))
	      cssMisc::Warning(NULL, "return type does not match that of declaration");
	    fun->SetRetvType(yyvsp[-2].el.El());
	    yyval.el.SetDirect(fun);  cssEl::Done(nm); }
    break;
case 123:
#line 845 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssMisc::cur_scope = NULL;
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-1].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    if((yyvsp[-1].el.El())->GetType() != cssEl::T_ClassType) {
	      yyerror("attempt to define constructor member function in non-class type");
	      return cssProg::YY_Err; }
	    cssClassType* cls = (cssClassType*)yyvsp[-1].el.El();
	    cssMisc::cur_class = cls; /* this is now the current class */
	    cssMbrScriptFun* fun = (cssMbrScriptFun*)cls->GetMemberFun((const char*)cls->name);
	    if(fun == &cssMisc::Void) {
	      yyerror("constructor member function not declared in class type");
	      return cssProg::YY_Err; }
            if(fun->GetType() == cssEl::T_MbrCFun) {
              yyerror("member function is hardcoded");
              return cssProg::YY_Err; }
	    yyval.el.SetDirect(fun); }
    break;
case 124:
#line 866 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssMisc::cur_scope = NULL;
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-2].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    if((yyvsp[-2].el.El())->GetType() != cssEl::T_ClassType) {
	      yyerror("attempt to define destructor member function in non-class type");
	      return cssProg::YY_Err; }
	    cssClassType* cls = (cssClassType*)yyvsp[-2].el.El();
	    cssMisc::cur_class = cls; /* this is now the current class */
	    String nm = "~"; nm += cls->name;
	    cssMbrScriptFun* fun = (cssMbrScriptFun*)cls->GetMemberFun((const char*)nm);
	    if(fun == &cssMisc::Void) {
	      yyerror("destructor member function not declared in class type");
              return cssProg::YY_Err; }
            if(fun->GetType() == cssEl::T_MbrCFun) {
              yyerror("member function is hardcoded");
	      return cssProg::YY_Err; }
	    yyval.el.SetDirect(fun); }
    break;
case 125:
#line 888 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = 0; }
    break;
case 126:
#line 889 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-1].ival; }
    break;
case 127:
#line 890 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = 0; }
    break;
case 128:
#line 891 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-2].ival; }
    break;
case 129:
#line 894 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = 1; }
    break;
case 130:
#line 895 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-2].ival + 1; }
    break;
case 131:
#line 898 "/usr/local/pdp++/src/css/css_parse.y"
{ cssMisc::parsing_args = false; }
    break;
case 132:
#line 899 "/usr/local/pdp++/src/css/css_parse.y"
{ 
	    cssMisc::parsing_args = false;
	    cssMisc::default_args.Push(yyvsp[0].el.El()); }
    break;
case 133:
#line 905 "/usr/local/pdp++/src/css/css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-1].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    cssMisc::parsing_args = true;
	    yyval.el = cssMisc::ConstExpr->Stack()->Push(new cssString(yyvsp[0].nm));
	    (yyvsp[-1].el.El())->MakeToken(cssMisc::ConstExpr); }
    break;
case 134:
#line 913 "/usr/local/pdp++/src/css/css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-1].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    cssMisc::parsing_args = true;
	    yyval.el = cssMisc::ConstExpr->Stack()->Push(new cssString(yyvsp[0].el.El()->GetName()));
	    (yyvsp[-1].el.El())->MakeToken(cssMisc::ConstExpr); }
    break;
case 136:
#line 924 "/usr/local/pdp++/src/css/css_parse.y"
{
	    if((yyvsp[-2].ival < 0) && (yyvsp[0].ival < 0)) yyval.ival = -1;
	    else if((yyvsp[-2].ival >= 0) && (yyvsp[0].ival < 0)) yyval.ival = yyvsp[-2].ival;
	    else if((yyvsp[-2].ival < 0) && (yyvsp[0].ival >= 0)) yyval.ival = yyvsp[0].ival;
	    else yyval.ival = -1; }
    break;
case 137:
#line 931 "/usr/local/pdp++/src/css/css_parse.y"
{
            (cssMisc::cur_type.El())->MakeToken(cssMisc::cur_top->Prog());
	    cssRef* tmp = (cssRef*)cssMisc::cur_top->Prog()->Stack()->Pop();
	    if(tmp->ptr.El()->GetType() == cssEl::T_Class) {
	      yyval.ival = Code2(tmp->ptr, cssBI::constr); }
	    else yyval.ival = -1;
	    cssEl::Done(tmp); }
    break;
case 138:
#line 940 "/usr/local/pdp++/src/css/css_parse.y"
{ yyvsp[0].el.El()->tmp_str = ""; }
    break;
case 139:
#line 941 "/usr/local/pdp++/src/css/css_parse.y"
{ yyvsp[0].el.El()->tmp_str = "extern"; yyval.el = yyvsp[0].el; }
    break;
case 140:
#line 942 "/usr/local/pdp++/src/css/css_parse.y"
{ yyvsp[0].el.El()->tmp_str = "static"; yyval.el = yyvsp[0].el; }
    break;
case 141:
#line 943 "/usr/local/pdp++/src/css/css_parse.y"
{ /* use const expr prog to code stuff */
	  yyvsp[0].el.El()->tmp_str = "const"; yyval.el = yyvsp[0].el; cssMisc::CodeConstExpr(); }
    break;
case 142:
#line 945 "/usr/local/pdp++/src/css/css_parse.y"
{ yyvsp[0].el.El()->tmp_str = "virtual"; yyval.el = yyvsp[0].el; }
    break;
case 143:
#line 946 "/usr/local/pdp++/src/css/css_parse.y"
{ yyvsp[0].el.El()->tmp_str = ""; yyval.el = yyvsp[0].el; }
    break;
case 144:
#line 947 "/usr/local/pdp++/src/css/css_parse.y"
{ yyvsp[0].el.El()->tmp_str = "virtual"; yyval.el = yyvsp[0].el; }
    break;
case 145:
#line 948 "/usr/local/pdp++/src/css/css_parse.y"
{ yyvsp[0].el.El()->tmp_str = "virtual"; yyval.el = yyvsp[0].el; }
    break;
case 146:
#line 951 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.el = yyvsp[0].el; cssMisc::cur_type = yyval.el; }
    break;
case 147:
#line 952 "/usr/local/pdp++/src/css/css_parse.y"
{
	  if((yyvsp[-1].el.El()->GetParse() != CSS_PTR) || (yyvsp[0].ival >= 2)) {
	    yyval.el = cssMisc::cur_top->AddPtrType(yyvsp[-1].el.El()); cssMisc::cur_type = yyval.el; 
	  }
	  else {
	    yyval.el = yyvsp[-1].el; cssMisc::cur_type = yyval.el; } }
    break;
case 148:
#line 958 "/usr/local/pdp++/src/css/css_parse.y"
{
	  yyval.el = cssMisc::cur_top->AddRefType(yyvsp[-1].el.El()); cssMisc::cur_type = yyval.el; }
    break;
case 149:
#line 960 "/usr/local/pdp++/src/css/css_parse.y"
{
	  if((yyvsp[-2].el.El()->GetParse() != CSS_PTR) || (yyvsp[-1].ival >= 2)) {
            cssElPtr npt = cssMisc::cur_top->AddPtrType(yyvsp[-2].el.El());
            yyval.el = cssMisc::cur_top->AddRefType(npt.El()); cssMisc::cur_type = yyval.el; }
	  else {
	    yyval.el = cssMisc::cur_top->AddRefType(yyvsp[-2].el.El()); cssMisc::cur_type = yyval.el; } }
    break;
case 152:
#line 970 "/usr/local/pdp++/src/css/css_parse.y"
{
          cssEl* itm;
          if(yyvsp[-1].el.El()->GetParse() != CSS_PTR) 
	    itm = yyvsp[-1].el.El()->GetScoped((const char*)yyvsp[0].el.El()->name);
	  else
	    itm = yyvsp[0].el.El();
	  if(itm != &cssMisc::Void)  yyval.el.SetDirect(itm);
	  else			yyval.el.Reset();
	  cssMisc::cur_type = yyval.el; cssMisc::cur_scope = NULL; }
    break;
case 153:
#line 981 "/usr/local/pdp++/src/css/css_parse.y"
{
           if(yyvsp[-1].el.El()->GetType() != cssEl::T_ClassType) {
	     yyerror("scoping of non-class type");
	     return cssProg::YY_Err; }
           cssMisc::cur_scope = yyvsp[-1].el.El(); }
    break;
case 154:
#line 986 "/usr/local/pdp++/src/css/css_parse.y"
{
           cssMisc::cur_scope = yyvsp[-1].el.El(); }
    break;
case 157:
#line 994 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = 1; }
    break;
case 158:
#line 995 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-1].ival + 1; }
    break;
case 159:
#line 998 "/usr/local/pdp++/src/css/css_parse.y"
{ cssMisc::cur_top->Prog()->lastif = -1; }
    break;
case 161:
#line 1002 "/usr/local/pdp++/src/css/css_parse.y"
{ cssMisc::cur_top->Prog()->lastdo = -1; }
    break;
case 163:
#line 1006 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::pop); }
    break;
case 166:
#line 1009 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(yyvsp[-2].el); yyval.ival = yyvsp[-1].ival; }
    break;
case 167:
#line 1010 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(yyvsp[-3].el); yyval.ival = yyvsp[-2].ival; }
    break;
case 168:
#line 1011 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = Code1(yyvsp[-1].el); }
    break;
case 169:
#line 1012 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = Code1(yyvsp[-1].el); }
    break;
case 173:
#line 1018 "/usr/local/pdp++/src/css/css_parse.y"
{
	    yyval.ival = cssMisc::cur_top->Prog()->size; // next instr is 'it'
  	    if(cssMisc::cur_top->Prog()->name != cssSwitchBlock_Name) {
	      yyerror("case statement not in a switch block");
	      return cssProg::YY_Err;
	    }
	    cssElPtr aryptr = cssMisc::cur_top->Prog()->literals.FindName(cssSwitchJump_Name);
	    cssArray* val_ary = (cssArray*)aryptr.El();
	    val_ary->items->Push(new cssInt(yyval.ival, (const char*)*(yyvsp[-1].el.El()))); }
    break;
case 174:
#line 1027 "/usr/local/pdp++/src/css/css_parse.y"
{ 
	    yyval.ival = cssMisc::cur_top->Prog()->size; // next instr is 'it'
  	    if(cssMisc::cur_top->Prog()->name != cssSwitchBlock_Name) {
	      yyerror("case statement not in a switch block");
	      return cssProg::YY_Err;
	    }
	    cssElPtr aryptr = cssMisc::cur_top->Prog()->literals.FindName(cssSwitchJump_Name);
	    cssArray* val_ary = (cssArray*)aryptr.El();
	    val_ary->items->Push(new cssInt(yyval.ival, cssSwitchDefault_Name)); }
    break;
case 178:
#line 1045 "/usr/local/pdp++/src/css/css_parse.y"
{
            yyval.ival = yyvsp[-5].ival; 
	    /* value to switch on */
	    cssMisc::ConstExpr->Stack()->Push(new cssRef(cssMisc::ConstExpr->Autos()->Push
							  (new cssString(0,cssSwitchVar_Name))));
	    /* bogus return value */
	    cssMisc::ConstExpr->Stack()->Push(new cssRef(cssMisc::ConstExpr->Autos()->Push
							  (new cssInt(0,cssRetv_Name))));
            cssScriptFun* tmp = (cssScriptFun*)(cssMisc::cur_top->Prog()->insts[yyvsp[0].ival]->inst.El());
	    tmp->Define(cssMisc::ConstExpr, false, cssSwitchBlock_Name);
	    tmp->is_block = true; /* this is actually a block.. */
	    /* make the jump-table address array: ints whose name is val, val is adr */
	    tmp->fun->Stack()->Push(new cssString(cssSwitchJump_Name));
	    tmp->fun->Stack()->Push(new cssInt(1)); /* type of ary element */
	    tmp->fun->Stack()->Push(new cssInt(1)); /* number of dimensions */
  	    cssMisc::VoidArray.tmp_str = "literal";
	    cssMisc::VoidArray.MakeToken(tmp->fun); /* make the array */
	    cssMisc::VoidArray.tmp_str = "";
	    cssRef* aryptr = (cssRef*) tmp->fun->Stack()->Pop();
	    ((cssArray*)aryptr->ptr.El())->items->DelPop(); /* get rid of first el */
	    tmp->fun->Code(cssBI::switch_jump); 
	    cssEl::Done(aryptr); }
    break;
case 179:
#line 1070 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = Code1(yyvsp[0].el); }
    break;
case 180:
#line 1074 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssMisc::cur_top->Prog()->insts[yyvsp[-8].ival + 1]->SetLine(yyvsp[-5].ival);
	    cssMisc::cur_top->Prog()->insts[yyvsp[-8].ival + 2]->SetLine(yyvsp[-3].ival);
	    cssMisc::cur_top->Prog()->insts[yyvsp[-8].ival + 3]->SetLine(yyvsp[-1].ival);
	    cssMisc::cur_top->Prog()->insts[yyvsp[-8].ival + 4]->SetLine(yyvsp[0].ival); }
    break;
case 181:
#line 1081 "/usr/local/pdp++/src/css/css_parse.y"
{
	    cssMisc::cur_top->Prog()->insts[yyvsp[-9].ival + 1]->SetLine(yyvsp[-6].ival);
	    cssMisc::cur_top->Prog()->insts[yyvsp[-9].ival + 2]->SetLine(yyvsp[-4].ival);
	    cssMisc::cur_top->Prog()->insts[yyvsp[-9].ival + 3]->SetLine(yyvsp[-1].ival);
	    cssMisc::cur_top->Prog()->insts[yyvsp[-9].ival + 4]->SetLine(yyvsp[0].ival); }
    break;
case 182:
#line 1088 "/usr/local/pdp++/src/css/css_parse.y"
{
	    cssMisc::cur_top->Prog()->insts[yyvsp[-9].ival + 1]->SetLine(yyvsp[-5].ival);
	    cssMisc::cur_top->Prog()->insts[yyvsp[-9].ival + 2]->SetLine(yyvsp[-4].ival);
	    cssMisc::cur_top->Prog()->insts[yyvsp[-9].ival + 3]->SetLine(yyvsp[-1].ival);
	    cssMisc::cur_top->Prog()->insts[yyvsp[-9].ival + 4]->SetLine(yyvsp[0].ival); }
    break;
case 183:
#line 1095 "/usr/local/pdp++/src/css/css_parse.y"
{
	    cssMisc::cur_top->Prog()->insts[yyvsp[-10].ival + 1]->SetLine(yyvsp[-6].ival);
	    cssMisc::cur_top->Prog()->insts[yyvsp[-10].ival + 2]->SetLine(yyvsp[-4].ival);
	    cssMisc::cur_top->Prog()->insts[yyvsp[-10].ival + 3]->SetLine(yyvsp[-1].ival);
	    cssMisc::cur_top->Prog()->insts[yyvsp[-10].ival + 4]->SetLine(yyvsp[0].ival); }
    break;
case 184:
#line 1102 "/usr/local/pdp++/src/css/css_parse.y"
{
            yyval.ival = Code2(yyvsp[0].el,cssInst::Stop);
	    Code3(cssInst::Stop, cssInst::Stop, cssInst::Stop); }
    break;
case 185:
#line 1108 "/usr/local/pdp++/src/css/css_parse.y"
{ cssMisc::cur_top->Prog()->lastdo = yyvsp[-1].ival; }
    break;
case 186:
#line 1111 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = Code3(yyvsp[0].el, cssInst::Stop, cssInst::Stop);
                                  cssMisc::cur_top->Prog()->lastdo = yyval.ival; }
    break;
case 187:
#line 1116 "/usr/local/pdp++/src/css/css_parse.y"
{
	    if(cssMisc::cur_top->Prog()->lastdo >= 0) {
 	      cssMisc::cur_top->Prog()->insts[yyvsp[-3].ival + 1]->SetLine(yyvsp[-2].ival);
	      cssMisc::cur_top->Prog()->insts[yyvsp[-3].ival + 2]->SetLine(yyvsp[0].ival);
	    }
	    else {
	      cssMisc::cur_top->Prog()->insts[yyvsp[-3].ival + 1]->SetLine(yyvsp[0].ival-1); /* do nothing */
	      cssMisc::cur_top->Prog()->insts[yyvsp[-3].ival + 2]->SetLine(yyvsp[0].ival);
	    }
	    cssMisc::cur_top->Prog()->lastdo = -1;	}
    break;
case 188:
#line 1127 "/usr/local/pdp++/src/css/css_parse.y"
{
	    cssMisc::cur_top->Prog()->insts[yyvsp[-3].ival + 1]->SetLine(yyvsp[-1].ival);
	    cssMisc::cur_top->Prog()->insts[yyvsp[-3].ival + 2]->SetLine(yyvsp[0].ival); }
    break;
case 189:
#line 1132 "/usr/local/pdp++/src/css/css_parse.y"
{ 
            if(cssMisc::cur_top->Prog()->lastdo < 0) {
	      yyval.ival = Code3(yyvsp[0].el, cssInst::Stop, cssInst::Stop); }
            else { yyval.ival = cssMisc::cur_top->Prog()->lastdo;} }
    break;
case 190:
#line 1140 "/usr/local/pdp++/src/css/css_parse.y"
{
            if(cssMisc::cur_top->debug > 3)
	      cerr << "\nvalue of then is: " << yyvsp[-1].ival << "\n";
	    cssMisc::cur_top->Prog()->insts[yyvsp[-3].ival + 1]->SetLine(yyvsp[-1].ival);
	    cssMisc::cur_top->Prog()->insts[yyvsp[-3].ival]->EndIf(yyvsp[0].ival); }
    break;
case 191:
#line 1145 "/usr/local/pdp++/src/css/css_parse.y"
{
	    cssMisc::cur_top->Prog()->insts[yyvsp[-3].ival + 1]->SetLine(yyvsp[-1].ival);
	    cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival]->previf = yyvsp[-3].ival;
	    cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival]->EndIf(); }
    break;
case 192:
#line 1149 "/usr/local/pdp++/src/css/css_parse.y"
{
	    css_progdx tmp = cssMisc::cur_top->Prog()->elseif;
	    if(tmp < 0) {
	      yyerror("else without matching if");
	      return cssProg::YY_Err;
	    }
	    cssMisc::cur_top->Prog()->elseif = -1;	/* reset the else */
	    cssMisc::cur_top->Prog()->insts[tmp + 2]->SetLine(yyvsp[-1].ival);
	    cssMisc::cur_top->Prog()->insts[tmp]->EndIf(yyvsp[0].ival); yyval.ival = tmp; }
    break;
case 193:
#line 1158 "/usr/local/pdp++/src/css/css_parse.y"
{
	    css_progdx tmp = cssMisc::cur_top->Prog()->elseif;
	    if(tmp < 0) {
	      yyerror("else without matching if");
	      return cssProg::YY_Err;
	    }
	    cssMisc::cur_top->Prog()->elseif = -1;	/* reset the else */
	    cssMisc::cur_top->Prog()->insts[tmp + 2]->SetLine(yyvsp[-1].ival);
	    cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival]->previf = tmp;
	    cssMisc::cur_top->Prog()->insts[yyvsp[-1].ival]->EndIf(); yyval.ival = tmp; }
    break;
case 194:
#line 1170 "/usr/local/pdp++/src/css/css_parse.y"
{
            yyval.ival = Code1(yyvsp[0].el); Code3(cssInst::Stop, cssInst::Stop, cssInst::Stop);
	    cssMisc::cur_top->Prog()->ResetLasts();
	    cssMisc::cur_top->Prog()->lastif = yyval.ival; }
    break;
case 195:
#line 1176 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssMisc::cur_top->Prog()->elseif = cssMisc::cur_top->Prog()->lastif;
	    cssMisc::cur_top->Prog()->ResetLasts(); }
    break;
case 196:
#line 1181 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssInst::Stop); yyval.ival = yyvsp[-1].ival; }
    break;
case 197:
#line 1184 "/usr/local/pdp++/src/css/css_parse.y"
{
            cssScriptFun* b = new cssScriptFun(cssBlock_Name);
	    cssMisc::cur_top->AddStatic(b);
	    yyval.ival = Code1(b);  cssMisc::cur_top->Prog()->insts[ yyval.ival ]->SetDefn();
	    cssMisc::cur_top->SetPush(b->fun); }
    break;
case 198:
#line 1191 "/usr/local/pdp++/src/css/css_parse.y"
{  }
    break;
case 199:
#line 1194 "/usr/local/pdp++/src/css/css_parse.y"
{
            yyval.ival = Code1(cssInst::Stop); cssMisc::cur_top->SetPop();
	    cssScriptFun* sfun = cssMisc::cur_top->Prog()->owner;
	    if((sfun != NULL) && (sfun->GetType() == cssEl::T_MbrScriptFun)) {
	      cssMisc::cur_class = NULL; /* get rid of current class pointer.. */
	      cssMisc::cur_method = NULL; } /* and current method pointer */
	  }
    break;
case 200:
#line 1203 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = Code1(yyvsp[0].el); }
    break;
case 203:
#line 1209 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::asgn); }
    break;
case 204:
#line 1210 "/usr/local/pdp++/src/css/css_parse.y"
{
	    int c; String inp;
	    while(((c = cssMisc::cur_top->Prog()->Getc()) != '}') && (c != EOF)) inp += (char)c;
	    cssSStream* ss = new cssSStream();
	    cssMisc::cur_top->AddLiteral(ss);
 	    stringstream* sss = (stringstream*)ss->GetVoidPtr();
	    *sss << inp;
	    sss->seekg(0, ios::beg);
	    Code3(ss, cssBI::arg_swap, cssBI::rshift);
 	    Code1(cssBI::sstream_rewind); /* rewind stream for next use.. */ }
    break;
case 205:
#line 1220 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::asgn_add); }
    break;
case 206:
#line 1221 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::asgn_sub); }
    break;
case 207:
#line 1222 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::asgn_mult); }
    break;
case 208:
#line 1223 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::asgn_div); }
    break;
case 209:
#line 1224 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::asgn_mod); }
    break;
case 210:
#line 1225 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::asgn_lshift); }
    break;
case 211:
#line 1226 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::asgn_rshift); }
    break;
case 212:
#line 1227 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::asgn_and); }
    break;
case 213:
#line 1228 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::asgn_xor); }
    break;
case 214:
#line 1229 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::asgn_or); }
    break;
case 215:
#line 1230 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-1].ival; Code2(yyvsp[0].el,yyvsp[-2].el); }
    break;
case 216:
#line 1231 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-3].ival; Code2(yyvsp[-2].el,yyvsp[-4].el); }
    break;
case 217:
#line 1232 "/usr/local/pdp++/src/css/css_parse.y"
{
	  yyval.ival = yyvsp[-2].ival; Code2(yyvsp[-1].el,yyvsp[-3].el); }
    break;
case 218:
#line 1234 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-1].ival; Code1(yyvsp[-2].el); }
    break;
case 219:
#line 1235 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-1].ival; Code1(yyvsp[-4].el); }
    break;
case 220:
#line 1236 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::lor); }
    break;
case 221:
#line 1237 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::land); }
    break;
case 222:
#line 1238 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[0].ival; Code1(cssBI::addr_of); }
    break;
case 223:
#line 1239 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[0].ival; Code1(cssBI::de_ptr); }
    break;
case 224:
#line 1240 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::gt); }
    break;
case 225:
#line 1241 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::ge); }
    break;
case 226:
#line 1242 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::lt); }
    break;
case 227:
#line 1243 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::le); }
    break;
case 228:
#line 1244 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::eq); }
    break;
case 229:
#line 1245 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::ne); }
    break;
case 230:
#line 1246 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::cond); }
    break;
case 231:
#line 1247 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::add); }
    break;
case 232:
#line 1248 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::sub); }
    break;
case 233:
#line 1249 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::mul); }
    break;
case 234:
#line 1250 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::div); }
    break;
case 235:
#line 1251 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::modulo); }
    break;
case 236:
#line 1252 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::lshift); }
    break;
case 237:
#line 1253 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::rshift); }
    break;
case 238:
#line 1254 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::bit_and); }
    break;
case 239:
#line 1255 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::bit_xor); }
    break;
case 240:
#line 1256 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::bit_or); }
    break;
case 241:
#line 1257 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::asgn_post_pp); }
    break;
case 242:
#line 1258 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[0].ival; Code1(cssBI::asgn_pre_pp); }
    break;
case 243:
#line 1259 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::asgn_post_mm); }
    break;
case 244:
#line 1260 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[0].ival; Code1(cssBI::asgn_pre_mm); }
    break;
case 245:
#line 1261 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[0].ival; Code1(cssBI::neg); }
    break;
case 246:
#line 1262 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[0].ival; Code1(cssBI::lnot); }
    break;
case 247:
#line 1263 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::de_array); }
    break;
case 248:
#line 1264 "/usr/local/pdp++/src/css/css_parse.y"
{
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-2].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
	    yyval.ival = yyvsp[0].ival; Code2(yyvsp[-2].el, cssBI::cast); }
    break;
case 249:
#line 1270 "/usr/local/pdp++/src/css/css_parse.y"
{ 
  	    cssMisc::CodeTop();	/* don't use const expr if const type decl */
	    if(yyvsp[-3].el.El()->tmp_str == "const") {
	      yyerror("const type not accepted in this context");
	      return cssProg::YY_Err; }
  	    yyval.ival = yyvsp[-1].ival; Code2(yyvsp[-3].el, cssBI::cast); }
    break;
case 251:
#line 1277 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-1].ival; }
    break;
case 262:
#line 1296 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = Code2(cssBI::push_next, yyvsp[0].el); }
    break;
case 263:
#line 1297 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-1].el_ival.ival; Code1(yyvsp[-1].el_ival.el); }
    break;
case 264:
#line 1298 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-2].el_ival.ival; Code1(yyvsp[-2].el_ival.el); 
	  if((yyvsp[-2].el_ival.el.El()->GetType() == cssEl::T_ElCFun) ||
	     /*	     ($1.el.El()->GetType() == cssEl::T_MbrCFun) || */
	     (yyvsp[-2].el_ival.el.El()->GetType() == cssEl::T_ScriptFun) ||
	     (yyvsp[-2].el_ival.el.El()->GetType() == cssEl::T_MbrScriptFun)) {
	    cssElFun* fun = (cssElFun*)yyvsp[-2].el_ival.el.El();
	    int max_args = fun->argc;  int min_args = (fun->argc - fun->arg_defs.size);
	    int act_args = yyvsp[-1].ival;
	    if(fun->GetType() == cssEl::T_MbrScriptFun) { max_args--; min_args--; }
	    if((fun->argc >= 0) && (act_args > max_args)) {
	      cssMisc::Warning(cssMisc::cur_top->Prog(), "Too many arguments for function:",fun->name,", should have at most:", String(max_args), "got:",String(act_args)); }
	    if((fun->argc >= 0) && (act_args < min_args)) {
              cssMisc::Warning(cssMisc::cur_top->Prog(), "Too few arguments for function:",fun->name,", should have at least:",String(min_args),"got:",String(act_args)); } } }
    break;
case 265:
#line 1313 "/usr/local/pdp++/src/css/css_parse.y"
{
            yyval.el_ival.ival = Code1(cssMisc::VoidElPtr); /* an arg stop */
	    yyval.el_ival.el = yyvsp[-1].el;	/* save this pointer for later.. */
            if(yyvsp[-1].el.El()->GetType() == cssEl::T_MbrScriptFun) 
	      Code1(cssBI::push_cur_this); /* push this as first arg.. */
	    else if(yyvsp[-1].el.El()->GetType() == cssEl::T_MbrCFun) {
	      /* only push this for MbrCFun that are builtins (Load, Save, or InheritsFrom) on a script class! */
	      cssMbrCFun* mbrfun = (cssMbrCFun*)yyvsp[-1].el.El();
	      if((mbrfun->funp == &cssClassType::InheritsFrom_stub) ||
		 (mbrfun->funp == &cssClassType::Load_stub) ||
		 (mbrfun->funp == &cssClassType::Save_stub))
		Code1(cssBI::push_cur_this); /* push this as first arg.. */		
	    } }
    break;
case 266:
#line 1329 "/usr/local/pdp++/src/css/css_parse.y"
{ Code2(yyvsp[0].el, cssBI::points_at);}
    break;
case 267:
#line 1330 "/usr/local/pdp++/src/css/css_parse.y"
{
	    int mbno = yyvsp[-2].el.El()->GetMemberNo((const char*)*(yyvsp[0].el.El()));
	    if(mbno < 0) { yyval.ival = Code3(yyvsp[-2].el, yyvsp[0].el, cssBI::points_at); }
	    else { cssElPtr tmpint = cssMisc::cur_top->AddLiteral(mbno);
		   yyval.ival = Code3(yyvsp[-2].el, tmpint, cssBI::points_at); } }
    break;
case 268:
#line 1338 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = Code3(cssBI::push_root, yyvsp[0].el, cssBI::points_at); }
    break;
case 269:
#line 1339 "/usr/local/pdp++/src/css/css_parse.y"
{
	  cssMisc::cur_scope = NULL;
	    cssEl* scp = yyvsp[-1].el.El()->GetScoped((const char*)*(yyvsp[0].el.El()));
	    if(scp != &cssMisc::Void) {  yyval.ival = Code1(scp); }
	    else { yyval.ival = Code3(yyvsp[-1].el, yyvsp[0].el, cssBI::scoper); } }
    break;
case 270:
#line 1344 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-2].el_ival.ival; }
    break;
case 271:
#line 1345 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-3].el_ival.ival;
	  if((yyvsp[-3].el_ival.el.El()->GetType() == cssEl::T_ElCFun) ||
	     (yyvsp[-3].el_ival.el.El()->GetType() == cssEl::T_MbrCFun) ||
	     (yyvsp[-3].el_ival.el.El()->GetType() == cssEl::T_ScriptFun) ||
	     (yyvsp[-3].el_ival.el.El()->GetType() == cssEl::T_MbrScriptFun)) {
	    cssElFun* fun = (cssElFun*)yyvsp[-3].el_ival.el.El();
	    int max_args = fun->argc;  int min_args = (fun->argc - fun->arg_defs.size);
	    int act_args = yyvsp[-2].ival;
	    if(fun->GetType() == cssEl::T_MbrScriptFun) { max_args--; min_args--; }
	    if((fun->argc >= 0) && (act_args > max_args)) {
	      cssMisc::Warning(cssMisc::cur_top->Prog(), "Too many arguments for function:",fun->name,", should have at most:", String(max_args), "got:",String(act_args)); }
	    if((fun->argc >= 0) && (act_args < min_args)) {
              cssMisc::Warning(cssMisc::cur_top->Prog(), "Too few arguments for function:",fun->name,", should have at least:",String(min_args),"got:",String(act_args)); } } }
    break;
case 272:
#line 1360 "/usr/local/pdp++/src/css/css_parse.y"
{ Code2(yyvsp[-1].el, cssBI::member_fun);
                                                  yyval.el_ival.ival = yyvsp[-3].ival; yyval.el_ival.el.Reset(); }
    break;
case 273:
#line 1362 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.el_ival.el.Reset();
	    int mbno = yyvsp[-3].el.El()->GetMemberFunNo((const char*)*(yyvsp[-1].el.El()));
	    if(mbno < 0) { /* don't complain for pointers and references */
	      if(!yyvsp[-3].el.El()->IsRef() && (yyvsp[-3].el.El()->GetType() != cssEl::T_Ptr))
		cssMisc::Warning(NULL, "Member Function:",(const char*)*(yyvsp[-1].el.El()),
				 "not found in parent object, will be resolved dynamically");
	      yyval.el_ival.ival = Code3(yyvsp[-3].el, yyvsp[-1].el, cssBI::member_fun); }
	    else {
	      cssElPtr tmpint = cssMisc::cur_top->AddLiteral(mbno);
	      yyval.el_ival.ival = Code3(yyvsp[-3].el, tmpint, cssBI::member_fun);
	      cssEl* ths = yyvsp[-3].el.El();
	      if(ths->GetType() == cssEl::T_Ptr)
		ths = ((cssPtr*)ths)->el_type;
	      if((ths != NULL) && ((ths->GetType() == cssEl::T_Class) || (ths->GetType() == cssEl::T_ClassType))) {
		cssEl* fun = ths->GetMemberFun((const char*)*(yyvsp[-1].el.El()));
		if(fun->GetType() != cssEl::T_MbrCFun)
		  yyval.el_ival.el.SetDirect(fun);
	      } } }
    break;
case 274:
#line 1380 "/usr/local/pdp++/src/css/css_parse.y"
{
	    cssMisc::cur_scope = NULL; yyval.el_ival.el.Reset();
	    int mbno = yyvsp[-2].el.El()->GetMemberFunNo((const char*)*(yyvsp[-1].el.El()));
	    if(mbno < 0) { /* don't complain for pointers and references */
	      if(!yyvsp[-2].el.El()->IsRef() && (yyvsp[-2].el.El()->GetType() != cssEl::T_Ptr))
		cssMisc::Warning(NULL, "Member Function:",(const char*)*(yyvsp[-1].el.El()),
				 "not found in parent object, will be resolved dynamically");
	      yyval.el_ival.ival = Code3(yyvsp[-2].el, yyvsp[-1].el, cssBI::member_fun); }
	    else {
	      cssElPtr tmpint = cssMisc::cur_top->AddLiteral(mbno);
	      yyval.el_ival.ival = Code3(yyvsp[-2].el, tmpint, cssBI::member_fun);
	      cssEl* ths = yyvsp[-2].el.El();
	      if(ths->GetType() == cssEl::T_Ptr)
		ths = ((cssPtr*)ths)->el_type;
	      if((ths != NULL) && ((ths->GetType() == cssEl::T_Class) || (ths->GetType() == cssEl::T_ClassType))) {
		cssEl* fun = ths->GetMemberFun((const char*)*(yyvsp[-1].el.El()));
		if(fun->GetType() != cssEl::T_MbrCFun)
		  yyval.el_ival.el.SetDirect(fun);
	      } } }
    break;
case 275:
#line 1404 "/usr/local/pdp++/src/css/css_parse.y"
{
            yyval.el = cssMisc::cur_top->Prog()->Stack()->Push(new cssString(yyvsp[0].nm)); }
    break;
case 276:
#line 1408 "/usr/local/pdp++/src/css/css_parse.y"
{
            yyval.el = cssMisc::cur_top->Prog()->Stack()->Push(new cssString(yyvsp[0].nm)); }
    break;
case 277:
#line 1410 "/usr/local/pdp++/src/css/css_parse.y"
{
	    yyval.el = cssMisc::cur_top->Prog()->Stack()->Push(new cssString(yyvsp[0].el.El()->GetName())); }
    break;
case 278:
#line 1412 "/usr/local/pdp++/src/css/css_parse.y"
{
	    yyval.el = cssMisc::cur_top->Prog()->Stack()->Push(new cssString(yyvsp[0].el.El()->GetName())); }
    break;
case 279:
#line 1414 "/usr/local/pdp++/src/css/css_parse.y"
{
	    yyval.el = cssMisc::cur_top->Prog()->Stack()->Push(new cssString(yyvsp[0].el.El()->GetName()));
	    if(cssMisc::cur_top->debug >= 1)
	    cssMisc::Warning(cssMisc::cur_top->Prog(), "Warning: hiding variable:", yyvsp[0].el.El()->PrintStr()); }
    break;
case 280:
#line 1418 "/usr/local/pdp++/src/css/css_parse.y"
{
	    yyval.el = cssMisc::cur_top->Prog()->Stack()->Push(new cssString(yyvsp[0].el.El()->GetName()));
	    if(cssMisc::cur_top->debug >= 1)
	    cssMisc::Warning(cssMisc::cur_top->Prog(), "Warning: hiding variable:", yyvsp[0].el.El()->PrintStr()); }
    break;
case 281:
#line 1422 "/usr/local/pdp++/src/css/css_parse.y"
{
	    yyval.el = cssMisc::cur_top->Prog()->Stack()->Push(new cssString(yyvsp[0].el.El()->GetName()));
	    if(cssMisc::cur_top->debug >= 1)
	    cssMisc::Warning(cssMisc::cur_top->Prog(), "Warning: hiding function:", yyvsp[0].el.El()->PrintStr()); }
    break;
case 284:
#line 1432 "/usr/local/pdp++/src/css/css_parse.y"
{
   	    String tmpstr = String(yyvsp[0].nm);
            yyval.el = cssMisc::cur_top->AddLiteral(tmpstr); }
    break;
case 286:
#line 1436 "/usr/local/pdp++/src/css/css_parse.y"
{ /* this is source of shift-reduce problems */
	    String tmpstr = String(yyvsp[0].el.El()->GetName());
	    yyval.el = cssMisc::cur_top->AddLiteral(tmpstr); }
    break;
case 292:
#line 1448 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = 1; }
    break;
case 293:
#line 1449 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = yyvsp[-2].ival + 1; }
    break;
case 295:
#line 1453 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = Code1(yyvsp[0].el); }
    break;
case 296:
#line 1456 "/usr/local/pdp++/src/css/css_parse.y"
{ yyval.ival = Code1(cssMisc::VoidElPtr); }
    break;
case 299:
#line 1463 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssBI::pop); }
    break;
case 300:
#line 1466 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssInst::Stop); yyval.ival = cssMisc::cur_top->Prog()->size; }
    break;
case 301:
#line 1469 "/usr/local/pdp++/src/css/css_parse.y"
{ Code1(cssInst::Stop); yyval.ival = cssMisc::cur_top->Prog()->size; }
    break;
}

#line 705 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 1473 "/usr/local/pdp++/src/css/css_parse.y"


	/* end of grammar */


void yyerror(char* s) { 	/* called for yacc syntax error */
  int i;

  if(strcmp(s, "parse error") == 0) {
    String src = cssMisc::cur_top->Prog()->GetSrcLC(cssMisc::cur_top->Prog()->tok_line);
    src.gsub('\t',' ');		// replace tabs
    *(cssMisc::cur_top->ferr) << "Syntax Error, line " << cssMisc::cur_top->src_ln << ":\t"
      << src;
    *(cssMisc::cur_top->ferr) << "\t\t\t";
    for(i=0; i < cssMisc::cur_top->Prog()->tok_col; i++)
      *(cssMisc::cur_top->ferr) << " ";
    *(cssMisc::cur_top->ferr) << "^\n";
  }
  else {
    *(cssMisc::cur_top->ferr) << s << " line " << cssMisc::cur_top->src_ln << ":\t"
      << cssMisc::cur_top->Prog()->GetSrcLC(cssMisc::cur_top->Prog()->tok_line);
  }
  cssMisc::cur_top->ferr->flush();
}
