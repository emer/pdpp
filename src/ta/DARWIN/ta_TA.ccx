// File Automatically Generated by MakeTA
// DO NOT EDIT


#include <ta/typea.h>
#include <ta/typea_constr.h>
#include <css/basic_types.h>
#include <css/c_ptr_types.h>
#include <css/ta_css.h>
#include <ta_string.h>
#include <ta_stdef.h>
#include <ta_list.h>
#include <ta_list_tmplt.h>
#include <typea.h>
#include <ta_base.h>
#include <ta_base_tmplt.h>
#include <ta_group.h>
#include <ta_group_tmplt.h>
#include <ta_dump.h>
#include <tdefaults.h>
#include <taiv_data.h>
#include <taiv_dialog.h>
#include <taiv_type.h>
#include <ta_group_iv.h>
#include "ta_TA_type.h"
#include "ta_TA_inst.h"


// Types

TypeDef TA_void("void", 1, 0, 0, 0,1);
TypeDef TA_int("int", 1, 0, 0, 0,1);
TypeDef TA_short("short", 1, 0, 0, 0,1);
TypeDef TA_long("long", 1, 0, 0, 0,1);
TypeDef TA_char("char", 1, 0, 0, 0,1);
TypeDef TA_unsigned("unsigned", 1, 0, 0, 0,1);
TypeDef TA_signed("signed", 1, 0, 0, 0,1);
TypeDef TA_float("float", 1, 0, 0, 0,1);
TypeDef TA_double("double", 1, 0, 0, 0,1);
TypeDef TA_bool("bool", 1, 0, 0, 0,1);
TypeDef TA_const("const", 1, 0, 0, 0,1);
TypeDef TA_enum("enum", 1, 0, 0, 1,1);
TypeDef TA_struct("struct", 1, 0, 0, 1,1);
TypeDef TA_union("union", 1, 0, 0, 1,1);
TypeDef TA_class("class", 1, 0, 0, 1,1);
TypeDef TA_template("template", 1, 0, 0, 1,1);
TypeDef TA_templ_inst("templ_inst", 1, 0, 0, 1,1);
TypeDef TA_ta_array("ta_array", 1, 0, 0, 1,1);
TypeDef TA_taBase("taBase", " Base type for all type-aware classes Base type for all type-aware classes", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taBase), (void**)&TAI_taBase, 0, 0, 0,1);
TypeDef TA_taRegFun("taRegFun", 1, 0, 0, 0,1);
TypeDef TA_taString("taString", "", 
	"", "", "", sizeof(taString), (void**)0, 1, 0, 0,1);
TypeDef TA_taSubString("taSubString", "", 
	"", "", "", sizeof(taSubString), (void**)0, 1, 0, 0,1);
TypeDef TA_void_ptr("void_ptr", 1, 1, 0, 1,1);
TypeDef TA_streambuf("streambuf", " In case some header files defines these as macros.", 
	"", "", "", sizeof(streambuf), (void**)0, 0, 0, 0,1);
TypeDef TA_signed_long("signed_long", 1, 0, 0, 0,1);
TypeDef TA_signed_long_long("signed_long_long", 1, 0, 0, 0,1);
TypeDef TA_signed_long_long_int("signed_long_long_int", 1, 0, 0, 0,1);
TypeDef TA_streampos("streampos", "", 
	"", "", "", sizeof(streampos), (void**)0, 0, 0, 0,1);
TypeDef TA_streamoff("streamoff", "", 
	"", "", "", sizeof(streamoff), (void**)0, 0, 0, 0,1);
TypeDef TA_streamsize("streamsize", " 27.4.2.1.3 Type ios_base::iostate", 
	"", "", "", sizeof(streamsize), (void**)0, 0, 0, 0,1);
TypeDef TA__Ios_Fmtflags("_Ios_Fmtflags", "", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA__Ios_Openmode("_Ios_Openmode", "", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA__Ios_Iostate("_Ios_Iostate", "", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA__Ios_Seekdir("_Ios_Seekdir", "", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA_void_ptr_ref("void_ptr_ref", 1, 1, 1, 0,1);
TypeDef TA_long_ref("long_ref", 1, 0, 1, 0,1);
TypeDef TA_ios("ios", "", 
	"", "", "", sizeof(ios), (void**)0, 1, 0, 0,1);
TypeDef TA_ostream("ostream", "", 
	"", "", "", sizeof(ostream), (void**)0, 1, 0, 0,1);
TypeDef TA_istream("istream", "", 
	"", "", "", sizeof(istream), (void**)0, 1, 0, 0,1);
TypeDef TA_ostream_ref("ostream_ref", 1, 0, 1, 0,1);
TypeDef TA_ostream_ptr("ostream_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_char("const_char", 1, 0, 0, 0,1);
TypeDef TA_const_char_ptr("const_char_ptr", 1, 1, 0, 0,1);
TypeDef TA_istream_ref("istream_ref", 1, 0, 1, 0,1);
TypeDef TA_char_ptr("char_ptr", 1, 1, 0, 0,1);
TypeDef TA_iostream("iostream", "", 
	"", "MULT_INHERIT ", "", sizeof(iostream), (void**)0, 1, 0, 0,1);
TypeDef TA_ifstream("ifstream", "", 
	"", "", "", sizeof(ifstream), (void**)0, 1, 0, 0,1);
TypeDef TA_ofstream("ofstream", "", 
	"", "", "", sizeof(ofstream), (void**)0, 1, 0, 0,1);
TypeDef TA_fstream("fstream", "", 
	"", "", "", sizeof(fstream), (void**)0, 1, 0, 0,1);
TypeDef TA_istringstream("istringstream", "", 
	"", "", "", sizeof(istringstream), (void**)0, 1, 0, 0,1);
TypeDef TA_ostringstream("ostringstream", "", 
	"", "", "", sizeof(ostringstream), (void**)0, 1, 0, 0,1);
TypeDef TA_stringstream("stringstream", "", 
	"", "", "", sizeof(stringstream), (void**)0, 1, 0, 0,1);
TypeDef TA_unsigned_short("unsigned_short", 1, 0, 0, 0,1);
TypeDef TA_char_ary("char_ary", 1, 1, 0, 0,1);
TypeDef TA_taStrRep("taStrRep", " internal String representations", 
	"", "", "", sizeof(taStrRep), (void**)0, 1, 0, 0,1);
TypeDef TA_taString_ref("taString_ref", 1, 0, 1, 0,1);
TypeDef TA_const_taStrRep("const_taStrRep", 1, 0, 0, 0,1);
TypeDef TA_const_taStrRep_ptr("const_taStrRep_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_taSubString("const_taSubString", 1, 0, 0, 0,1);
TypeDef TA_const_taSubString_ref("const_taSubString_ref", 1, 0, 1, 0,1);
TypeDef TA_taSubString_ref("taSubString_ref", 1, 0, 1, 0,1);
TypeDef TA_const_taString("const_taString", 1, 0, 0, 0,1);
TypeDef TA_const_taString_ref("const_taString_ref", 1, 0, 1, 0,1);
TypeDef TA_unsigned_int("unsigned_int", 1, 0, 0, 0,1);
TypeDef TA_taStrRep_ptr("taStrRep_ptr", 1, 1, 0, 0,1);
TypeDef TA_char_ref("char_ref", 1, 0, 1, 0,1);
TypeDef TA_const_char_ref("const_char_ref", 1, 0, 1, 0,1);
TypeDef TA_uint("uint", "", 
	"", "", "", sizeof(uint), (void**)0, 0, 0, 0,1);
TypeDef TA_unsigned_long("unsigned_long", 1, 0, 0, 0,1);
TypeDef TA_ulong("ulong", " replicate the builtin bool type for those that don't have it", 
	"", "", "", sizeof(ulong), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_impl("taPtrList_impl", " implementation of the pointer list class", 
	"", "", "", sizeof(taPtrList_impl), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_impl_ptr("taPtrList_impl_ptr", 1, 1, 0, 0,1);
TypeDef TA_TALPtr("TALPtr", "", 
	"", "", "", sizeof(taPtrList_impl*), (void**)0, 0, 1, 0,1);
TypeDef TA_void_ptr_ptr("void_ptr_ptr", 1, 2, 0, 0,1);
TypeDef TA_const_taPtrList_impl("const_taPtrList_impl", 1, 0, 0, 0,1);
TypeDef TA_const_taPtrList_impl_ref("const_taPtrList_impl_ref", 1, 0, 1, 0,1);
TypeDef TA_int_ref("int_ref", 1, 0, 1, 0,1);
TypeDef TA_taArray_impl("taArray_impl", " Base Type for Arrays, no tokens of which are ever kept", 
	"", "", "", sizeof(taArray_impl), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taArray_impl("const_taArray_impl", 1, 0, 0, 0,1);
TypeDef TA_taPtrList("taPtrList", 1, 0, 0, 0,1);
TypeDef TA_const_taArray_impl_ref("const_taArray_impl_ref", 1, 0, 1, 0,1);
TypeDef TA_taHashVal("taHashVal", "", 
	"", "", "", sizeof(taHashVal), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taPtrList("const_taPtrList", 1, 0, 0, 0,1);
TypeDef TA_taHashEl("taHashEl", " holds information for one entry of the hash table", 
	"", "", "", sizeof(taHashEl), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taPtrList_ref("const_taPtrList_ref", 1, 0, 1, 0,1);
TypeDef TA_taPtrList_taHashEl_("taPtrList_taHashEl_", " ", 
	"", "", "", sizeof(taPtrList<taHashEl>), (void**)&TAI_taPtrList_taHashEl_, 0, 0, 0,1);
TypeDef TA_taHashEl_ptr("taHashEl_ptr", 1, 1, 0, 0,1);
TypeDef TA_taHashBucket("taHashBucket", " holds a set of hash table entries that all have the same hash_code modulo value", 
	"", "", "", sizeof(taHashBucket), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_taHashBucket_("taPtrList_taHashBucket_", " ", 
	"", "", "", sizeof(taPtrList<taHashBucket>), (void**)&TAI_taPtrList_taHashBucket_, 0, 0, 0,1);
TypeDef TA_int_ary("int_ary", 1, 1, 0, 0,1);
TypeDef TA_taHashTable("taHashTable", " table has a number of buckets, each with some hash values", 
	"", "", "", sizeof(taHashTable), (void**)0, 0, 0, 0,1);
TypeDef TA_taHashBucket_ptr("taHashBucket_ptr", 1, 1, 0, 0,1);
TypeDef TA_taHashTable_ptr("taHashTable_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_taHashTable("const_taHashTable", 1, 0, 0, 0,1);
TypeDef TA_const_taHashTable_ref("const_taHashTable_ref", 1, 0, 1, 0,1);
TypeDef TA_taPtrList_base("taPtrList_base", 1, 0, 0, 0,1);
TypeDef TA_const_taPtrList_base("const_taPtrList_base", 1, 0, 0, 0,1);
TypeDef TA_taPlainArray("taPlainArray", 1, 0, 0, 0,1);
TypeDef TA_const_taPtrList_base_ref("const_taPtrList_base_ref", 1, 0, 1, 0,1);
TypeDef TA_const_taPlainArray("const_taPlainArray", 1, 0, 0, 0,1);
TypeDef TA_const_taPlainArray_ref("const_taPlainArray_ref", 1, 0, 1, 0,1);
TypeDef TA_taivType("taivType", " graphically represents a type ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivType), (void**)&TAI_taivType, 0, 0, 0,1);
TypeDef TA_taivEdit("taivEdit", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivEdit), (void**)&TAI_taivEdit, 0, 0, 0,1);
TypeDef TA_taivMember("taivMember", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMember), (void**)&TAI_taivMember, 0, 0, 0,1);
TypeDef TA_taivMethod("taivMethod", " for css support", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMethod), (void**)&TAI_taivMethod, 0, 0, 0,1);
TypeDef TA_css_fun_stub_ptr("css_fun_stub_ptr", "", 
	"", "", "", sizeof(void*), (void**)0, 0, 1, 0,1);
TypeDef TA_ta_void_fun("ta_void_fun", "", 
	"", "", "", sizeof(void*), (void**)0, 0, 1, 0,1);
TypeDef TA_ta_memb_ptr_class("ta_memb_ptr_class", "", 
	"", "", "", sizeof(ta_memb_ptr_class), (void**)0, 1, 0, 0,1);
TypeDef TA_int_ta_memb_ptr_class("int_ta_memb_ptr_class", 1, 0, 0, 0,1);
TypeDef TA_ta_memb_ptr("ta_memb_ptr", "", 
	"", "", "", sizeof(void*), (void**)0, 0, 1, 0,1);
TypeDef TA_taBase_ptr("taBase_ptr", 1, 1, 0, 0,1);
TypeDef TA_TAPtr("TAPtr", " pointer to a taBase type", 
	"", "", "", sizeof(taBase*), (void**)&TAI_TAPtr, 0, 1, 0,1);
TypeDef TA_taPlainArray_taString_("taPlainArray_taString_", " ", 
	"", "", "", sizeof(taPlainArray<taString>), (void**)&TAI_taPlainArray_taString_, 0, 0, 0,1);
TypeDef TA_String_PArray("String_PArray", "", 
	"", "", "", sizeof(String_PArray), (void**)0, 0, 0, 0,1);
TypeDef TA_taPlainArray_int_("taPlainArray_int_", " ", 
	"", "", "", sizeof(taPlainArray<int>), (void**)&TAI_taPlainArray_int_, 0, 0, 0,1);
TypeDef TA_const_String_PArray("const_String_PArray", 1, 0, 0, 0,1);
TypeDef TA_int_PArray("int_PArray", "", 
	"", "", "", sizeof(int_PArray), (void**)0, 0, 0, 0,1);
TypeDef TA_const_String_PArray_ref("const_String_PArray_ref", 1, 0, 1, 0,1);
TypeDef TA_String_PArray_ref("String_PArray_ref", 1, 0, 1, 0,1);
TypeDef TA_taMisc("taMisc", " miscellanous global parameters and functions for type access system", 
	"", "", "", sizeof(taMisc), (void**)&TAI_taMisc, 0, 0, 0,1);
TypeDef TA_taRefN("taRefN", " reference counting base class", 
	"", "NO_MEMBERS NO_CSS ", "", sizeof(taRefN), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_EnumDef_("taPtrList_EnumDef_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<EnumDef>), (void**)&TAI_taPtrList_EnumDef_, 0, 0, 0,1);
TypeDef TA_taRefN_ref("taRefN_ref", 1, 0, 1, 0,1);
TypeDef TA_MemberDef("MemberDef", 1, 0, 0, 0,1);
TypeDef TA_taRefN_ptr("taRefN_ptr", 1, 1, 0, 0,1);
TypeDef TA_EnumDef("EnumDef", " defines an enum member", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(EnumDef), (void**)&TAI_EnumDef, 0, 0, 0,1);
TypeDef TA_MethodDef("MethodDef", 1, 0, 0, 0,1);
TypeDef TA_EnumSpace("EnumSpace", " space of enums", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(EnumSpace), (void**)&TAI_EnumSpace, 0, 0, 0,1);
TypeDef TA_TypeDef("TypeDef", 1, 0, 0, 0,1);
TypeDef TA_const_EnumSpace("const_EnumSpace", 1, 0, 0, 0,1);
TypeDef TA_TypeDef_ptr("TypeDef_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_EnumSpace_ref("const_EnumSpace_ref", 1, 0, 1, 0,1);
TypeDef TA_EnumDef_ptr("EnumDef_ptr", 1, 1, 0, 0,1);
TypeDef TA_taPtrList_void_("taPtrList_void_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<void>), (void**)&TAI_taPtrList_void_, 0, 0, 0,1);
TypeDef TA_TokenSpace("TokenSpace", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(TokenSpace), (void**)&TAI_TokenSpace, 0, 0, 0,1);
TypeDef TA_taPtrList_MemberDef_("taPtrList_MemberDef_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<MemberDef>), (void**)&TAI_taPtrList_MemberDef_, 0, 0, 0,1);
TypeDef TA_const_TokenSpace("const_TokenSpace", 1, 0, 0, 0,1);
TypeDef TA_MemberSpace("MemberSpace", " space of members", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(MemberSpace), (void**)&TAI_MemberSpace, 0, 0, 0,1);
TypeDef TA_const_TokenSpace_ref("const_TokenSpace_ref", 1, 0, 1, 0,1);
TypeDef TA_const_MemberSpace("const_MemberSpace", 1, 0, 0, 0,1);
TypeDef TA_MemberDef_ptr("MemberDef_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_MemberSpace_ref("const_MemberSpace_ref", 1, 0, 1, 0,1);
TypeDef TA_taPtrList_MethodDef_("taPtrList_MethodDef_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<MethodDef>), (void**)&TAI_taPtrList_MethodDef_, 0, 0, 0,1);
TypeDef TA_MethodSpace("MethodSpace", " space of methods", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(MethodSpace), (void**)&TAI_MethodSpace, 0, 0, 0,1);
TypeDef TA_const_MethodSpace("const_MethodSpace", 1, 0, 0, 0,1);
TypeDef TA_MethodDef_ptr("MethodDef_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_MethodSpace_ref("const_MethodSpace_ref", 1, 0, 1, 0,1);
TypeDef TA_taPtrList_TypeDef_("taPtrList_TypeDef_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<TypeDef>), (void**)&TAI_taPtrList_TypeDef_, 0, 0, 0,1);
TypeDef TA_TypeSpace("TypeSpace", " space of types", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(TypeSpace), (void**)&TAI_TypeSpace, 0, 0, 0,1);
TypeDef TA_const_TypeSpace("const_TypeSpace", 1, 0, 0, 0,1);
TypeDef TA_EnumSpace_ptr("EnumSpace_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_TypeSpace_ref("const_TypeSpace_ref", 1, 0, 1, 0,1);
TypeDef TA_const_EnumDef("const_EnumDef", 1, 0, 0, 0,1);
TypeDef TA_const_EnumDef_ref("const_EnumDef_ref", 1, 0, 1, 0,1);
TypeDef TA_MemberSpace_ptr("MemberSpace_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivMember_ptr("taivMember_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_MemberDef("const_MemberDef", 1, 0, 0, 0,1);
TypeDef TA_const_MemberDef_ref("const_MemberDef_ref", 1, 0, 1, 0,1);
TypeDef TA_MethodSpace_ptr("MethodSpace_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivMethod_ptr("taivMethod_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_MethodDef("const_MethodDef", 1, 0, 0, 0,1);
TypeDef TA_const_MethodDef_ref("const_MethodDef_ref", 1, 0, 1, 0,1);
TypeDef TA_TypeSpace_ptr("TypeSpace_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivType_ptr("taivType_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivEdit_ptr("taivEdit_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_TypeDef("const_TypeDef", 1, 0, 0, 0,1);
TypeDef TA_const_TypeDef_ref("const_TypeDef_ref", 1, 0, 1, 0,1);
TypeDef TA_const_TypeDef_ptr("const_TypeDef_ptr", 1, 1, 0, 0,1);
TypeDef TA_TypeDef_ptr_ref("TypeDef_ptr_ref", 1, 1, 1, 0,1);
TypeDef TA_MemberDef_ptr_ptr("MemberDef_ptr_ptr", 1, 2, 0, 0,1);
TypeDef TA_taivGetFile("taivGetFile", " associate this with each file that is managed", 
	"", "", "", sizeof(taivGetFile), (void**)0, 0, 0, 0,1);
TypeDef TA_tabMisc("tabMisc", " miscellaneous useful stuff for taBase", 
	"", "", "", sizeof(tabMisc), (void**)&TAI_tabMisc, 0, 0, 0,1);
TypeDef TA_const_taBase("const_taBase", 1, 0, 0, 0,1);
TypeDef TA_const_taBase_ref("const_taBase_ref", 1, 0, 1, 0,1);
TypeDef TA_taBase_ref("taBase_ref", 1, 0, 1, 0,1);
TypeDef TA_TAPtr_ptr("TAPtr_ptr", 1, 1, 0, 0,1);
TypeDef TA_MemberDef_ptr_ref("MemberDef_ptr_ref", 1, 1, 1, 0,1);
TypeDef TA_taivGetFile_ptr("taivGetFile_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_ivColor_ptr("const_ivColor_ptr", 1, 1, 0, 0,1);
TypeDef TA_taNBase("taNBase", " Named, owned base class of taBase", 
	"", "", "", sizeof(taNBase), (void**)&TAI_taNBase, 0, 0, 0,1);
TypeDef TA_taNBase_ptr("taNBase_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_taNBase("const_taNBase", 1, 0, 0, 0,1);
TypeDef TA_SelectEdit("SelectEdit", " Selectively edit members from different objects", 
	"EXT_edit ", "EXT_edit ", "", sizeof(SelectEdit), (void**)&TAI_SelectEdit, 1, 0, 0,1);
TypeDef TA_const_taNBase_ref("const_taNBase_ref", 1, 0, 1, 0,1);
TypeDef TA_TANPtr("TANPtr", "", 
	"", "", "", sizeof(taNBase*), (void**)&TAI_TANPtr, 0, 1, 0,1);
TypeDef TA_SelectEdit_ptr("SelectEdit_ptr", 1, 1, 0, 0,1);
TypeDef TA_taOBase("taOBase", " Named, owned base class of taBase", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taOBase), (void**)&TAI_taOBase, 0, 0, 0,1);
TypeDef TA_taPtrList_base_taBase_("taPtrList_base_taBase_", " ", 
	"", "", "", sizeof(taPtrList_base<taBase>), (void**)&TAI_taPtrList_base_taBase_, 0, 0, 0,1);
TypeDef TA_const_taOBase("const_taOBase", 1, 0, 0, 0,1);
TypeDef TA_taPtrList_ta_base("taPtrList_ta_base", "", 
	"", "", "", sizeof(taPtrList_ta_base), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taOBase_ref("const_taOBase_ref", 1, 0, 1, 0,1);
TypeDef TA_taList_impl("taList_impl", " implementation for a taBase list class", 
	"", "MULT_INHERIT NO_UPDATE_AFTER ", "", sizeof(taList_impl), (void**)&TAI_taList_impl, 0, 0, 0,1);
TypeDef TA_taList_impl_ptr("taList_impl_ptr", 1, 1, 0, 0,1);
TypeDef TA_TABLPtr("TABLPtr", "", 
	"", "", "", sizeof(taList_impl*), (void**)0, 0, 1, 0,1);
TypeDef TA_const_taList_impl("const_taList_impl", 1, 0, 0, 0,1);
TypeDef TA_const_taList_impl_ref("const_taList_impl_ref", 1, 0, 1, 0,1);
TypeDef TA_taArray_base("taArray_base", " base for arrays (from taBase)", 
	"", "MULT_INHERIT NO_UPDATE_AFTER ", "", sizeof(taArray_base), (void**)&TAI_taArray_base, 0, 0, 0,1);
TypeDef TA_const_taArray_base("const_taArray_base", 1, 0, 0, 0,1);
TypeDef TA_taList("taList", 1, 0, 0, 0,1);
TypeDef TA_const_taArray_base_ref("const_taArray_base_ref", 1, 0, 1, 0,1);
TypeDef TA_taList_taBase_("taList_taBase_", " ", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(taList<taBase>), (void**)&TAI_taList_taBase_, 0, 0, 0,1);
TypeDef TA_const_taList("const_taList", 1, 0, 0, 0,1);
TypeDef TA_const_taList_ref("const_taList_ref", 1, 0, 1, 0,1);
TypeDef TA_taBase_List("taBase_List", " list of objects", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(taBase_List), (void**)&TAI_taBase_List, 0, 0, 0,1);
TypeDef TA_const_taBase_List("const_taBase_List", 1, 0, 0, 0,1);
TypeDef TA_taBase_List_ptr("taBase_List_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_taBase_List_ref("const_taBase_List_ref", 1, 0, 1, 0,1);
TypeDef TA_taArray("taArray", 1, 0, 0, 0,1);
TypeDef TA_taArray_int_("taArray_int_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taArray<int>), (void**)&TAI_taArray_int_, 0, 0, 0,1);
TypeDef TA_const_taArray("const_taArray", 1, 0, 0, 0,1);
TypeDef TA_const_taArray_ref("const_taArray_ref", 1, 0, 1, 0,1);
TypeDef TA_int_Array("int_Array", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(int_Array), (void**)&TAI_int_Array, 0, 0, 0,1);
TypeDef TA_taArray_float_("taArray_float_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taArray<float>), (void**)&TAI_taArray_float_, 0, 0, 0,1);
TypeDef TA_const_int_Array("const_int_Array", 1, 0, 0, 0,1);
TypeDef TA_const_int_Array_ref("const_int_Array_ref", 1, 0, 1, 0,1);
TypeDef TA_float_Array("float_Array", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(float_Array), (void**)&TAI_float_Array, 0, 0, 0,1);
TypeDef TA_taArray_double_("taArray_double_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taArray<double>), (void**)&TAI_taArray_double_, 0, 0, 0,1);
TypeDef TA_const_float_Array("const_float_Array", 1, 0, 0, 0,1);
TypeDef TA_const_float_Array_ref("const_float_Array_ref", 1, 0, 1, 0,1);
TypeDef TA_double_Array("double_Array", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(double_Array), (void**)&TAI_double_Array, 0, 0, 0,1);
TypeDef TA_taArray_taString_("taArray_taString_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taArray<taString>), (void**)&TAI_taArray_taString_, 0, 0, 0,1);
TypeDef TA_const_double_Array("const_double_Array", 1, 0, 0, 0,1);
TypeDef TA_const_double_Array_ref("const_double_Array_ref", 1, 0, 1, 0,1);
TypeDef TA_String_Array("String_Array", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(String_Array), (void**)&TAI_String_Array, 0, 0, 0,1);
TypeDef TA_taArray_long_("taArray_long_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taArray<long>), (void**)&TAI_taArray_long_, 0, 0, 0,1);
TypeDef TA_const_String_Array("const_String_Array", 1, 0, 0, 0,1);
TypeDef TA_const_String_Array_ref("const_String_Array_ref", 1, 0, 1, 0,1);
TypeDef TA_long_Array("long_Array", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(long_Array), (void**)&TAI_long_Array, 0, 0, 0,1);
TypeDef TA_const_long_Array("const_long_Array", 1, 0, 0, 0,1);
TypeDef TA_voidptr_Array("voidptr_Array", " ", 
	"NO_CSS NO_MEMBERS ", "NO_UPDATE_AFTER NO_CSS NO_MEMBERS ", "", sizeof(voidptr_Array), (void**)&TAI_voidptr_Array, 0, 0, 0,1);
TypeDef TA_const_long_Array_ref("const_long_Array_ref", 1, 0, 1, 0,1);
TypeDef TA_taGroup_impl("taGroup_impl", " pre-declare implementation of a group", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taGroup_impl), (void**)&TAI_taGroup_impl, 0, 0, 0,1);
TypeDef TA_const_voidptr_Array("const_voidptr_Array", 1, 0, 0, 0,1);
TypeDef TA_taGroup_impl_ptr("taGroup_impl_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_voidptr_Array_ref("const_voidptr_Array_ref", 1, 0, 1, 0,1);
TypeDef TA_TAGPtr("TAGPtr", "", 
	"", "", "", sizeof(taGroup_impl*), (void**)0, 0, 1, 0,1);
TypeDef TA_taList_taGroup_impl_("taList_taGroup_impl_", " ", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(taList<taGroup_impl>), (void**)&TAI_taList_taGroup_impl_, 0, 0, 0,1);
TypeDef TA_TALOG("TALOG", " list of groups (LOG)", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(TALOG), (void**)&TAI_TALOG, 0, 0, 0,1);
TypeDef TA_taSubGroup("taSubGroup", " has the sub-groups for a group", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(taSubGroup), (void**)&TAI_taSubGroup, 0, 0, 0,1);
TypeDef TA_taLeafItr("taLeafItr", " contains the indicies for iterating over leafs", 
	"", "", "", sizeof(taLeafItr), (void**)0, 1, 0, 0,1);
TypeDef TA_const_taSubGroup("const_taSubGroup", 1, 0, 0, 0,1);
TypeDef TA_TALOG_ptr("TALOG_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_taSubGroup_ref("const_taSubGroup_ref", 1, 0, 1, 0,1);
TypeDef TA_taLeafItr_ref("taLeafItr_ref", 1, 0, 1, 0,1);
TypeDef TA_const_taGroup_impl("const_taGroup_impl", 1, 0, 0, 0,1);
TypeDef TA_const_taGroup_impl_ref("const_taGroup_impl_ref", 1, 0, 1, 0,1);
TypeDef TA_DMemShareVar("DMemShareVar", " definition of a variable of a given type (FLOAT, DOUBLE, INT) that each proc has some instances of (can be multiple members of a given object) -- these can all be Allgather'ed to sync across procs", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(DMemShareVar), (void**)&TAI_DMemShareVar, 0, 0, 0,1);
TypeDef TA_taPtrList_impl_ref("taPtrList_impl_ref", 1, 0, 1, 0,1);
TypeDef TA_const_DMemShareVar("const_DMemShareVar", 1, 0, 0, 0,1);
TypeDef TA_const_DMemShareVar_ref("const_DMemShareVar_ref", 1, 0, 1, 0,1);
TypeDef TA_DMemShare("DMemShare", " collection of objects that are shared across distributed processes: link the objects into this list to share them", 
	"NO_UPDATE_AFTER NO_CSS NO_MEMBERS ", "NO_UPDATE_AFTER NO_CSS NO_MEMBERS ", "", sizeof(DMemShare), (void**)&TAI_DMemShare, 0, 0, 0,1);
TypeDef TA_const_DMemShare("const_DMemShare", 1, 0, 0, 0,1);
TypeDef TA_const_DMemShare_ref("const_DMemShare_ref", 1, 0, 1, 0,1);
TypeDef TA_taGroup("taGroup", 1, 0, 0, 0,1);
TypeDef TA_taGroup_taBase_("taGroup_taBase_", " ", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(taGroup<taBase>), (void**)&TAI_taGroup_taBase_, 0, 0, 0,1);
TypeDef TA_const_taGroup("const_taGroup", 1, 0, 0, 0,1);
TypeDef TA_taGroup_ptr("taGroup_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_taGroup_ref("const_taGroup_ref", 1, 0, 1, 0,1);
TypeDef TA_taBase_Group("taBase_Group", " group of objects", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(taBase_Group), (void**)&TAI_taBase_Group, 0, 0, 0,1);
TypeDef TA_const_taBase_Group("const_taBase_Group", 1, 0, 0, 0,1);
TypeDef TA_const_taBase_Group_ref("const_taBase_Group_ref", 1, 0, 1, 0,1);
TypeDef TA_dumpMisc("dumpMisc", " miscellaneous stuff for dump files", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(dumpMisc), (void**)0, 0, 0, 0,1);
TypeDef TA_VPUnref("VPUnref", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(VPUnref), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_VPUnref_("taPtrList_VPUnref_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<VPUnref>), (void**)&TAI_taPtrList_VPUnref_, 0, 0, 0,1);
TypeDef TA_VPUnref_ptr("VPUnref_ptr", 1, 1, 0, 0,1);
TypeDef TA_VPUList("VPUList", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(VPUList), (void**)0, 0, 0, 0,1);
TypeDef TA_DumpPathSub("DumpPathSub", " Path element substitution", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(DumpPathSub), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_DumpPathSub_("taPtrList_DumpPathSub_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<DumpPathSub>), (void**)&TAI_taPtrList_DumpPathSub_, 0, 0, 0,1);
TypeDef TA_DumpPathSub_ptr("DumpPathSub_ptr", 1, 1, 0, 0,1);
TypeDef TA_DumpPathSubList("DumpPathSubList", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(DumpPathSubList), (void**)0, 0, 0, 0,1);
TypeDef TA_DumpPathToken("DumpPathToken", " Path tokens for quicker loading", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(DumpPathToken), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_DumpPathToken_("taPtrList_DumpPathToken_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<DumpPathToken>), (void**)&TAI_taPtrList_DumpPathToken_, 0, 0, 0,1);
TypeDef TA_DumpPathToken_ptr("DumpPathToken_ptr", 1, 1, 0, 0,1);
TypeDef TA_DumpPathTokenList("DumpPathTokenList", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(DumpPathTokenList), (void**)0, 0, 0, 0,1);
TypeDef TA_NameValue("NameValue", " name/value pair", 
	"", "NO_UPDATE_AFTER ", "", sizeof(NameValue), (void**)&TAI_NameValue, 0, 0, 0,1);
TypeDef TA_unsigned_long_ary("unsigned_long_ary", 1, 1, 0, 0,1);
TypeDef TA_const_NameValue("const_NameValue", 1, 0, 0, 0,1);
TypeDef TA_const_NameValue_ref("const_NameValue_ref", 1, 0, 1, 0,1);
TypeDef TA_TypeDefault("TypeDefault", " Contains a default object of a type", 
	"EXT_def ", "EXT_def NO_UPDATE_AFTER ", "", sizeof(TypeDefault), (void**)&TAI_TypeDefault, 0, 0, 0,1);
TypeDef TA_taivData("taivData", " base class for data elements", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivData), (void**)0, 0, 0, 0,1);
TypeDef TA_const_TypeDefault("const_TypeDefault", 1, 0, 0, 0,1);
TypeDef TA_taivDialog("taivDialog", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivDialog), (void**)0, 0, 0, 0,1);
TypeDef TA_const_TypeDefault_ref("const_TypeDefault_ref", 1, 0, 1, 0,1);
TypeDef TA_taivEditDialog("taivEditDialog", " // edit dialog for classes", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivEditDialog), (void**)0, 0, 0, 0,1);
TypeDef TA_NoBlockDialog("NoBlockDialog", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(NoBlockDialog), (void**)0, 0, 0, 0,1);
TypeDef TA_NoBlockDialog_ptr("NoBlockDialog_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivEditDialog_ptr("taivEditDialog_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivMisc("taivMisc", " miscellaneous stuff for taiv", 
	"", "", "", sizeof(taivMisc), (void**)&TAI_taivMisc, 0, 0, 0,1);
TypeDef TA_const_ivAllocation("const_ivAllocation", 1, 0, 0, 0,1);
TypeDef TA_const_ivAllocation_ref("const_ivAllocation_ref", 1, 0, 1, 0,1);
TypeDef TA_ivGlyph_ptr("ivGlyph_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivExtension_ref("ivExtension_ref", 1, 0, 1, 0,1);
TypeDef TA_ivPrinter_ptr("ivPrinter_ptr", 1, 1, 0, 0,1);
TypeDef TA_HighlightBG("HighlightBG", "", 
	"", "", "", sizeof(HighlightBG), (void**)0, 1, 0, 0,1);
TypeDef TA_taivData_ptr("taivData_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivDialog_ptr("taivDialog_ptr", 1, 1, 0, 0,1);
TypeDef TA_HighlightBG_ptr("HighlightBG_ptr", 1, 1, 0, 0,1);
TypeDef TA_taPtrList_taivData_("taPtrList_taivData_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<taivData>), (void**)&TAI_taPtrList_taivData_, 0, 0, 0,1);
TypeDef TA_taivDataList("taivDataList", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivDataList), (void**)0, 0, 0, 0,1);
TypeDef TA_taivField("taivField", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivField), (void**)0, 0, 0, 0,1);
TypeDef TA_taivIncrField("taivIncrField", " increment/decrement field", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivIncrField), (void**)0, 0, 0, 0,1);
TypeDef TA_taivRO_Field("taivRO_Field", " read only field", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivRO_Field), (void**)0, 0, 0, 0,1);
TypeDef TA_taivToggle("taivToggle", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivToggle), (void**)0, 0, 0, 0,1);
TypeDef TA_taivLabel("taivLabel", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivLabel), (void**)0, 0, 0, 0,1);
TypeDef TA_taivPlusToggle("taivPlusToggle", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivPlusToggle), (void**)0, 0, 0, 0,1);
TypeDef TA_taivPolyData("taivPolyData", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivPolyData), (void**)0, 0, 0, 0,1);
TypeDef TA_taivDataDeck("taivDataDeck", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivDataDeck), (void**)0, 0, 0, 0,1);
TypeDef TA_taivMenu("taivMenu", " non-hierarchical menu for selecting a single item", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMenu), (void**)0, 0, 0, 0,1);
TypeDef TA_taivMenuEl("taivMenuEl", " this is the action for meus that returns the selected menuel holds menu data", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMenuEl), (void**)0, 0, 0, 0,1);
TypeDef TA_taivMenuEl_ptr("taivMenuEl_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivMenuAction("taivMenuAction", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMenuAction), (void**)0, 0, 0, 0,1);
TypeDef TA_taivMenu_ptr("taivMenu_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivMenuAction_ptr("taivMenuAction_ptr", 1, 1, 0, 0,1);
TypeDef TA_taPtrList_taivMenuEl_("taPtrList_taivMenuEl_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<taivMenuEl>), (void**)&TAI_taPtrList_taivMenuEl_, 0, 0, 0,1);
TypeDef TA_taivMenuEl_List("taivMenuEl_List", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMenuEl_List), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_taivMenu_("taPtrList_taivMenu_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<taivMenu>), (void**)&TAI_taPtrList_taivMenu_, 0, 0, 0,1);
TypeDef TA_taivMenu_List("taivMenu_List", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMenu_List), (void**)0, 0, 0, 0,1);
TypeDef TA_taivHierMenu("taivHierMenu", " a hierarchical menu", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivHierMenu), (void**)0, 0, 0, 0,1);
TypeDef TA_taivHierMenu_ptr("taivHierMenu_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivHierEl("taivHierEl", " data element for hierarchical menus", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivHierEl), (void**)0, 0, 0, 0,1);
TypeDef TA_taivHierSub("taivHierSub", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivHierSub), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_taivHierSub_("taPtrList_taivHierSub_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<taivHierSub>), (void**)&TAI_taPtrList_taivHierSub_, 0, 0, 0,1);
TypeDef TA_taivHierSub_List("taivHierSub_List", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivHierSub_List), (void**)0, 0, 0, 0,1);
TypeDef TA_taivHierEl_ptr("taivHierEl_ptr", 1, 1, 0, 0,1);
TypeDef TA_taPtrList_taivHierMenu_("taPtrList_taivHierMenu_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<taivHierMenu>), (void**)&TAI_taPtrList_taivHierMenu_, 0, 0, 0,1);
TypeDef TA_taivHierMenu_List("taivHierMenu_List", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivHierMenu_List), (void**)0, 0, 0, 0,1);
TypeDef TA_taivEditButton("taivEditButton", " actually an edit menu...", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivEditButton), (void**)0, 0, 0, 0,1);
TypeDef TA_ifstream_ptr("ifstream_ptr", 1, 1, 0, 0,1);
TypeDef TA_ofstream_ptr("ofstream_ptr", 1, 1, 0, 0,1);
TypeDef TA_fstream_ptr("fstream_ptr", 1, 1, 0, 0,1);
TypeDef TA_istream_ptr("istream_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivObjChooser("taivObjChooser", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivObjChooser), (void**)0, 0, 0, 0,1);
TypeDef TA_taivFileButton("taivFileButton", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivFileButton), (void**)0, 0, 0, 0,1);
TypeDef TA_taivToken("taivToken", " for making menus of tokens", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivToken), (void**)0, 0, 0, 0,1);
TypeDef TA_taivSubToken("taivSubToken", " Menu for sub tokens of a giventype", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivSubToken), (void**)0, 0, 0, 0,1);
TypeDef TA_taivMemberDefMenu("taivMemberDefMenu", " Menu for memberdefs of a typedef in the object with a MDTYPE_xxx option", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMemberDefMenu), (void**)0, 0, 0, 0,1);
TypeDef TA_taivMethodDefMenu("taivMethodDefMenu", " Menu for memberdefs of a typedef in the object with a MDTYPE_xxx option", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMethodDefMenu), (void**)0, 0, 0, 0,1);
TypeDef TA_taivTypeHier("taivTypeHier", " for menus of type hierarchy", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivTypeHier), (void**)0, 0, 0, 0,1);
TypeDef TA_taivMethMenu("taivMethMenu", " all representations of member functions must inherit from this one", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMethMenu), (void**)0, 0, 0, 0,1);
TypeDef TA_taivMethButton("taivMethButton", " button representation of a method", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMethButton), (void**)0, 0, 0, 0,1);
TypeDef TA_taivToggle_ptr("taivToggle_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivMethToggle("taivMethToggle", " toggle representation of a method (does not call directly, but checks flag)", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMethToggle), (void**)0, 0, 0, 0,1);
TypeDef TA_const_ivEvent_ref("const_ivEvent_ref", 1, 0, 1, 0,1);
TypeDef TA_ivCoord_ref("ivCoord_ref", 1, 0, 1, 0,1);
TypeDef TA_taivChoiceDialog("taivChoiceDialog", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivChoiceDialog), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taivDataList("const_taivDataList", 1, 0, 0, 0,1);
TypeDef TA_const_taivDataList_ref("const_taivDataList_ref", 1, 0, 1, 0,1);
TypeDef TA_taivDataList_ref("taivDataList_ref", 1, 0, 1, 0,1);
TypeDef TA_taivToken_ptr("taivToken_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivTokenDialog("taivTokenDialog", " automatic widget to select a token of a given type", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivTokenDialog), (void**)0, 0, 0, 0,1);
TypeDef TA_taivTypeHier_ptr("taivTypeHier_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivTypeDialog("taivTypeDialog", " select a type ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivTypeDialog), (void**)0, 0, 0, 0,1);
TypeDef TA_taivEnumDialog("taivEnumDialog", " select an enum", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivEnumDialog), (void**)0, 0, 0, 0,1);
TypeDef TA_taivArgType("taivArgType", " _ unlike taivTypes, these are created and destroyed each time", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivArgType), (void**)&TAI_taivArgType, 0, 0, 0,1);
TypeDef TA_taPtrList_taivType_("taPtrList_taivType_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<taivType>), (void**)&TAI_taPtrList_taivType_, 0, 0, 0,1);
TypeDef TA_taivType_List("taivType_List", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivType_List), (void**)0, 0, 0, 0,1);
TypeDef TA_taivIntType("taivIntType", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivIntType), (void**)&TAI_taivIntType, 0, 0, 0,1);
TypeDef TA_taivEnumType("taivEnumType", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivEnumType), (void**)&TAI_taivEnumType, 0, 0, 0,1);
TypeDef TA_taivBoolType("taivBoolType", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivBoolType), (void**)&TAI_taivBoolType, 0, 0, 0,1);
TypeDef TA_taivClassType("taivClassType", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivClassType), (void**)&TAI_taivClassType, 0, 0, 0,1);
TypeDef TA_taivStringType("taivStringType", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivStringType), (void**)&TAI_taivStringType, 0, 0, 0,1);
TypeDef TA_taivTokenPtrType("taivTokenPtrType", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivTokenPtrType), (void**)&TAI_taivTokenPtrType, 0, 0, 0,1);
TypeDef TA_taivTypePtr("taivTypePtr", " typedef pointer", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivTypePtr), (void**)&TAI_taivTypePtr, 0, 0, 0,1);
TypeDef TA_taivFilePtrType("taivFilePtrType", " ptr to taiv_getFiles", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivFilePtrType), (void**)&TAI_taivFilePtrType, 0, 0, 0,1);
TypeDef TA_taivDefaultEdit("taivDefaultEdit", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivDefaultEdit), (void**)&TAI_taivDefaultEdit, 0, 0, 0,1);
TypeDef TA_bool_ref("bool_ref", 1, 0, 1, 0,1);
TypeDef TA_taivROMember("taivROMember", " read-only member", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivROMember), (void**)&TAI_taivROMember, 0, 0, 0,1);
TypeDef TA_taivTokenPtrMember("taivTokenPtrMember", " for taBase pointer members (allows scoping by owner obj)", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivTokenPtrMember), (void**)&TAI_taivTokenPtrMember, 0, 0, 0,1);
TypeDef TA_taivTypePtrMember("taivTypePtrMember", " typedef ptrs that have member-comment directives", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivTypePtrMember), (void**)&TAI_taivTypePtrMember, 0, 0, 0,1);
TypeDef TA_taivSubTokenPtrMember("taivSubTokenPtrMember", " a token ptr that points to sub-objects of current object", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivSubTokenPtrMember), (void**)&TAI_taivSubTokenPtrMember, 0, 0, 0,1);
TypeDef TA_taivMemberDefPtrMember("taivMemberDefPtrMember", " pointer to a member-def", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMemberDefPtrMember), (void**)&TAI_taivMemberDefPtrMember, 0, 0, 0,1);
TypeDef TA_taivFunPtrMember("taivFunPtrMember", " pointer to a function", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivFunPtrMember), (void**)&TAI_taivFunPtrMember, 0, 0, 0,1);
TypeDef TA_taivCondEditMember("taivCondEditMember", " conditional editing member", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivCondEditMember), (void**)&TAI_taivCondEditMember, 0, 0, 0,1);
TypeDef TA_TypeDefault_ptr("TypeDefault_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivTDefaultMember("taivTDefaultMember", " special for the TypeDefault member (add the 'active' box)", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivTDefaultMember), (void**)&TAI_taivTDefaultMember, 0, 0, 0,1);
TypeDef TA_taivDefaultToken("taivDefaultToken", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivDefaultToken), (void**)&TAI_taivDefaultToken, 0, 0, 0,1);
TypeDef TA_taivMethMenu_ptr("taivMethMenu_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivButtonMethod("taivButtonMethod", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivButtonMethod), (void**)&TAI_taivButtonMethod, 0, 0, 0,1);
TypeDef TA_taivMenuMethod("taivMenuMethod", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMenuMethod), (void**)&TAI_taivMenuMethod, 0, 0, 0,1);
TypeDef TA_taivMenuButtonMethod("taivMenuButtonMethod", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMenuButtonMethod), (void**)&TAI_taivMenuButtonMethod, 0, 0, 0,1);
TypeDef TA_taivArgType_ptr("taivArgType_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivStreamArgType("taivStreamArgType", " for ios derived args (uses a file-requestor)", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivStreamArgType), (void**)&TAI_taivStreamArgType, 0, 0, 0,1);
TypeDef TA_taivBoolArgType("taivBoolArgType", " for bool int types", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivBoolArgType), (void**)&TAI_taivBoolArgType, 0, 0, 0,1);
TypeDef TA_taivTokenPtrArgType("taivTokenPtrArgType", " for pointers to tokens (uses appropriate scoping)", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivTokenPtrArgType), (void**)&TAI_taivTokenPtrArgType, 0, 0, 0,1);
TypeDef TA_taivTypePtrArgType("taivTypePtrArgType", " for typedef ptr types", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivTypePtrArgType), (void**)&TAI_taivTypePtrArgType, 0, 0, 0,1);
TypeDef TA_taivMemberPtrArgType("taivMemberPtrArgType", " for memberdef ptr types", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMemberPtrArgType), (void**)&TAI_taivMemberPtrArgType, 0, 0, 0,1);
TypeDef TA_taivMethodPtrArgType("taivMethodPtrArgType", " for methoddef ptr types", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivMethodPtrArgType), (void**)&TAI_taivMethodPtrArgType, 0, 0, 0,1);
TypeDef TA_gpivListEditButton("gpivListEditButton", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivListEditButton), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivGroupEditButton("gpivGroupEditButton", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivGroupEditButton), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivSubEditButton("gpivSubEditButton", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivSubEditButton), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivLinkEditButton("gpivLinkEditButton", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivLinkEditButton), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivListLinkEditButton("gpivListLinkEditButton", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivListLinkEditButton), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivArrayEditButton("gpivArrayEditButton", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivArrayEditButton), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivListEls("gpivListEls", " menu of elements in the list", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivListEls), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivGroupEls("gpivGroupEls", " menu of elements in the group", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivGroupEls), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivSubGroups("gpivSubGroups", " menu of sub-groups within a group", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivSubGroups), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivElTypes("gpivElTypes", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivElTypes), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivNewFuns("gpivNewFuns", " functions to call during New", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivNewFuns), (void**)0, 0, 0, 0,1);
TypeDef TA_taivField_ptr("taivField_ptr", 1, 1, 0, 0,1);
TypeDef TA_gpivElTypes_ptr("gpivElTypes_ptr", 1, 1, 0, 0,1);
TypeDef TA_gpivNewFuns_ptr("gpivNewFuns_ptr", 1, 1, 0, 0,1);
TypeDef TA_gpivListNew("gpivListNew", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivListNew), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivSubGroups_ptr("gpivSubGroups_ptr", 1, 1, 0, 0,1);
TypeDef TA_gpivGroupNew("gpivGroupNew", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivGroupNew), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivList_ElData("gpivList_ElData", " contains data_els for one member of List", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivList_ElData), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_gpivList_ElData_("taPtrList_gpivList_ElData_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<gpivList_ElData>), (void**)&TAI_taPtrList_gpivList_ElData_, 0, 0, 0,1);
TypeDef TA_gpivList_ElDataList("gpivList_ElDataList", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivList_ElDataList), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivListDialog("gpivListDialog", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivListDialog), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivListEdit("gpivListEdit", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivListEdit), (void**)&TAI_gpivListEdit, 0, 0, 0,1);
TypeDef TA_gpivGroupDialog("gpivGroupDialog", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivGroupDialog), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivGroupEdit("gpivGroupEdit", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivGroupEdit), (void**)&TAI_gpivGroupEdit, 0, 0, 0,1);
TypeDef TA_gpivArrayEditDialog("gpivArrayEditDialog", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivArrayEditDialog), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivArrayEdit("gpivArrayEdit", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivArrayEdit), (void**)&TAI_gpivArrayEdit, 0, 0, 0,1);
TypeDef TA_gpivListType("gpivListType", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivListType), (void**)&TAI_gpivListType, 0, 0, 0,1);
TypeDef TA_gpivGroupType("gpivGroupType", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivGroupType), (void**)&TAI_gpivGroupType, 0, 0, 0,1);
TypeDef TA_gpivArray_Type("gpivArray_Type", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivArray_Type), (void**)&TAI_gpivArray_Type, 0, 0, 0,1);
TypeDef TA_taivROListMember("taivROListMember", " allows one to view a listing of the members of a ReadOnly object that is a list or array", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivROListMember), (void**)&TAI_taivROListMember, 0, 0, 0,1);
TypeDef TA_taivROGroupMember("taivROGroupMember", " allows one to view a listing of the members of a ReadOnly object that is a Group or array", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivROGroupMember), (void**)&TAI_taivROGroupMember, 0, 0, 0,1);
TypeDef TA_taivROArrayMember("taivROArrayMember", " allows one to view a listing of the members of a ReadOnly object that is a array or array", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taivROArrayMember), (void**)&TAI_taivROArrayMember, 0, 0, 0,1);
TypeDef TA_gpivDefaultEl("gpivDefaultEl", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivDefaultEl), (void**)&TAI_gpivDefaultEl, 0, 0, 0,1);
TypeDef TA_gpivLinkGP("gpivLinkGP", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivLinkGP), (void**)&TAI_gpivLinkGP, 0, 0, 0,1);
TypeDef TA_gpivLinkList("gpivLinkList", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivLinkList), (void**)&TAI_gpivLinkList, 0, 0, 0,1);
TypeDef TA_gpivFromGpTokenPtrMember("gpivFromGpTokenPtrMember", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivFromGpTokenPtrMember), (void**)&TAI_gpivFromGpTokenPtrMember, 0, 0, 0,1);
TypeDef TA_gpivTAPtrArgType("gpivTAPtrArgType", " for taBase pointers in groups, sets the typedef to be the right one..", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivTAPtrArgType), (void**)&TAI_gpivTAPtrArgType, 0, 0, 0,1);
TypeDef TA_gpivInObjArgType("gpivInObjArgType", " for taBase pointers in groups with ARG_IN_OBJ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivInObjArgType), (void**)&TAI_gpivInObjArgType, 0, 0, 0,1);
TypeDef TA_gpivFromGpArgType("gpivFromGpArgType", " for taBase pointers with FROM_GROUP_xxx", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivFromGpArgType), (void**)&TAI_gpivFromGpArgType, 0, 0, 0,1);
TypeDef TA_SelectEditConfig("SelectEditConfig", " special parameters for controlling the select edit display", 
	"", "EDIT_INLINE ", "", sizeof(SelectEditConfig), (void**)&TAI_SelectEditConfig, 0, 0, 0,1);
TypeDef TA_const_SelectEdit("const_SelectEdit", 1, 0, 0, 0,1);
TypeDef TA_const_SelectEditConfig("const_SelectEditConfig", 1, 0, 0, 0,1);
TypeDef TA_const_SelectEdit_ref("const_SelectEdit_ref", 1, 0, 1, 0,1);
TypeDef TA_const_SelectEditConfig_ref("const_SelectEditConfig_ref", 1, 0, 1, 0,1);
TypeDef TA_gpivSelectEdit("gpivSelectEdit", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivSelectEdit), (void**)&TAI_gpivSelectEdit, 0, 0, 0,1);
TypeDef TA_gpivSelectEditDialog("gpivSelectEditDialog", " edit only selected items from a range of ta-base objects", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivSelectEditDialog), (void**)0, 0, 0, 0,1);
TypeDef TA_ivInputHandler_ptr("ivInputHandler_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivInputHandler("ivInputHandler", 1, 0, 0, 0,1);
TypeDef TA_ivWindow_ptr("ivWindow_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivWindow("ivWindow", 1, 0, 0, 0,1);
TypeDef TA_ivWidgetKit_ptr("ivWidgetKit_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivWidgetKit("ivWidgetKit", 1, 0, 0, 0,1);
TypeDef TA_ivDialogKit_ptr("ivDialogKit_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivDialogKit("ivDialogKit", 1, 0, 0, 0,1);
TypeDef TA_ivLayoutKit_ptr("ivLayoutKit_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivLayoutKit("ivLayoutKit", 1, 0, 0, 0,1);
TypeDef TA_ivStyle_ptr("ivStyle_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivStyle("ivStyle", 1, 0, 0, 0,1);
TypeDef TA_ivButton_ptr("ivButton_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivButton("ivButton", 1, 0, 0, 0,1);
TypeDef TA_HiLightButton_ptr("HiLightButton_ptr", 1, 1, 0, 0,1);
TypeDef TA_HiLightButton("HiLightButton", 1, 0, 0, 0,1);
TypeDef TA_ivPatch_ptr("ivPatch_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivPatch("ivPatch", 1, 0, 0, 0,1);
TypeDef TA_ivPolyGlyph_ptr("ivPolyGlyph_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivPolyGlyph("ivPolyGlyph", 1, 0, 0, 0,1);
TypeDef TA_ivCoord("ivCoord", 1, 0, 0, 0,1);
TypeDef TA_ivMenu_ptr("ivMenu_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivMenu("ivMenu", 1, 0, 0, 0,1);
TypeDef TA_ivFont_ptr("ivFont_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivFont("ivFont", 1, 0, 0, 0,1);
TypeDef TA_ivDialog("ivDialog", 1, 0, 0, 0,1);
TypeDef TA_osboolean("osboolean", 1, 0, 0, 0,1);
TypeDef TA_ivTopLevelWindow_ptr("ivTopLevelWindow_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivTopLevelWindow("ivTopLevelWindow", 1, 0, 0, 0,1);
TypeDef TA_const_ivResource_ptr("const_ivResource_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_ivResource("const_ivResource", 1, 0, 0, 0,1);
TypeDef TA_ivResource("ivResource", 1, 0, 0, 0,1);
TypeDef TA_ivRequisition_ref("ivRequisition_ref", 1, 0, 1, 0,1);
TypeDef TA_ivRequisition("ivRequisition", 1, 0, 0, 0,1);
TypeDef TA_ivCanvas_ptr("ivCanvas_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivCanvas("ivCanvas", 1, 0, 0, 0,1);
TypeDef TA_ivAllocation("ivAllocation", 1, 0, 0, 0,1);
TypeDef TA_ivExtension("ivExtension", 1, 0, 0, 0,1);
TypeDef TA_ivPrinter("ivPrinter", 1, 0, 0, 0,1);
TypeDef TA_ivHit_ref("ivHit_ref", 1, 0, 1, 0,1);
TypeDef TA_ivHit("ivHit", 1, 0, 0, 0,1);
TypeDef TA_ivGlyph("ivGlyph", 1, 0, 0, 0,1);
TypeDef TA_ivGlyphBreakType("ivGlyphBreakType", 1, 0, 0, 0,1);
TypeDef TA_ivGlyphIndex("ivGlyphIndex", 1, 0, 0, 0,1);
TypeDef TA_DimensionName("DimensionName", 1, 0, 0, 0,1);
TypeDef TA_ivAllotment_ref("ivAllotment_ref", 1, 0, 1, 0,1);
TypeDef TA_ivAllotment("ivAllotment", 1, 0, 0, 0,1);
TypeDef TA_ivHandler_ptr("ivHandler_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivHandler("ivHandler", 1, 0, 0, 0,1);
TypeDef TA_const_ivEvent("const_ivEvent", 1, 0, 0, 0,1);
TypeDef TA_ivEvent("ivEvent", 1, 0, 0, 0,1);
TypeDef TA_const_ivTransformer_ref("const_ivTransformer_ref", 1, 0, 1, 0,1);
TypeDef TA_const_ivTransformer("const_ivTransformer", 1, 0, 0, 0,1);
TypeDef TA_ivTransformer("ivTransformer", 1, 0, 0, 0,1);
TypeDef TA_ivWindow_List("ivWindow_List", 1, 0, 0, 0,1);
TypeDef TA_ivMonoGlyph("ivMonoGlyph", 1, 0, 0, 0,1);
TypeDef TA_ivFieldEditor_ptr("ivFieldEditor_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivFieldEditor("ivFieldEditor", 1, 0, 0, 0,1);
TypeDef TA_ivDeck_ptr("ivDeck_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivDeck("ivDeck", 1, 0, 0, 0,1);
TypeDef TA_ivMenuItem_ptr("ivMenuItem_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivMenuItem("ivMenuItem", 1, 0, 0, 0,1);
TypeDef TA_ivMonoGlyph_ptr("ivMonoGlyph_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivTelltaleGroup_ptr("ivTelltaleGroup_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivTelltaleGroup("ivTelltaleGroup", 1, 0, 0, 0,1);
TypeDef TA_ivAction_ptr("ivAction_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivAction("ivAction", 1, 0, 0, 0,1);
TypeDef TA_ivDialog_ptr("ivDialog_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivFileBrowser_ptr("ivFileBrowser_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivFileBrowser("ivFileBrowser", 1, 0, 0, 0,1);
TypeDef TA_cssClass_ptr("cssClass_ptr", 1, 1, 0, 0,1);
TypeDef TA_cssClass("cssClass", 1, 0, 0, 0,1);
TypeDef TA_taivArgDialog_ptr("taivArgDialog_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivArgDialog("taivArgDialog", 1, 0, 0, 0,1);
TypeDef TA_cssEl_ptr("cssEl_ptr", 1, 1, 0, 0,1);
TypeDef TA_cssEl("cssEl", 1, 0, 0, 0,1);
TypeDef TA_lrScrollBox_ptr("lrScrollBox_ptr", 1, 1, 0, 0,1);
TypeDef TA_lrScrollBox("lrScrollBox", 1, 0, 0, 0,1);
TypeDef TA_tbScrollBox_ptr("tbScrollBox_ptr", 1, 1, 0, 0,1);
TypeDef TA_tbScrollBox("tbScrollBox", 1, 0, 0, 0,1);

// Instances

taBase*		 TAI_taBase=NULL;
  static cssEl* cssElCFun_taBase_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taBase_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taBase_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taBase*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taBase_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((taBase*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((taBase*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taBase*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taBase_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((taBase*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taBase*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taBase*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taBase_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taBase*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taBase*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taBase*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_taBase_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_taBase_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taBase_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taBase*)ths)->GetEnumString((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taBase_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taBase*)ths)->GetEnumVal((const char*)*arg[1]));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((taBase*)ths)->GetEnumVal((const char*)*arg[1], refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taBase_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taBase*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taBase*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taBase_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taBase*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taBase*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taBase*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taBase_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taBase*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taBase*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taBase*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taBase_Edit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taBase*)ths)->Edit());}
    if(na == 1) {
      rval=new cssInt((int)((taBase*)ths)->Edit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taBase_CloseEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->CloseEdit());
    return rval;}
  static cssEl* cssElCFun_taBase_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_taBase_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taBase_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taBase_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_taBase_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taBase_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taBase_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taBase_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_taBase_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->CallFun((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taString_chars_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssCPtr_char((void*)((taString*)ths)->chars(), 1);
    return rval;}
  static cssEl* cssElCFun_taString_prepend_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->prepend((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taString_index_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taString*)ths)->index((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taString*)ths)->index((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_contains_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->contains((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_matches_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taString*)ths)->matches((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taString*)ths)->matches((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_freq_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->freq((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_at_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->at((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taString_before_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->before((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->before((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_through_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->through((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->through((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_from_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->from((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->from((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_after_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->after((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->after((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_del_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->del((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taString_remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taString*)ths)->remove((const char*)*arg[1]);}
    if(na == 2) {
      ((taString*)ths)->remove((const char*)*arg[1], (int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_taString_gsub_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->gsub((const char*)*arg[1], (const char*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taString_reverse_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->reverse();
    return rval;}
  static cssEl* cssElCFun_taString_upcase_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->upcase();
    return rval;}
  static cssEl* cssElCFun_taString_downcase_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->downcase();
    return rval;}
  static cssEl* cssElCFun_taString_capitalize_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->capitalize();
    return rval;}
  static cssEl* cssElCFun_taString_elem_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->elem((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_firstchar_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->firstchar());
    return rval;}
  static cssEl* cssElCFun_taString_lastchar_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->lastchar());
    return rval;}
  static cssEl* cssElCFun_taString_length_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->length());
    return rval;}
  static cssEl* cssElCFun_taString_empty_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->empty());
    return rval;}
  static cssEl* cssElCFun_taString_alloc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->alloc((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taString_allocation_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->allocation());
    return rval;}
  static cssEl* cssElCFun_taString_error_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->error((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taString_OK_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->OK());
    return rval;}
  static cssEl* cssElCFun_taSubString_contains_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taSubString*)ths)->contains((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taSubString_length_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taSubString*)ths)->length());
    return rval;}
  static cssEl* cssElCFun_taSubString_empty_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taSubString*)ths)->empty());
    return rval;}
  static cssEl* cssElCFun_taSubString_chars_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssCPtr_char((void*)((taSubString*)ths)->chars(), 1);
    return rval;}
  static cssEl* cssElCFun_taSubString_OK_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taSubString*)ths)->OK());
    return rval;}
  static cssEl* cssElCFun_ios_flags_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ios*)ths)->flags();
    return rval;}
  static cssEl* cssElCFun_ios_setf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ios*)ths)->setf((ios::fmtflags)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ios_unsetf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ios*)ths)->unsetf((ios::fmtflags)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ios_tie_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ios*)ths)->tie((ostream*)*arg[1]), 1, &TA_ostream);
    return rval;}
  static cssEl* cssElCFun_ios_precision_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->precision((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ios_width_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->width((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ios_clear_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ios*)ths)->clear();}
    if(na == 1) {
      ((ios*)ths)->clear((ios::iostate)(int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_ios_setstate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ios*)ths)->setstate((ios::iostate)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ios_good_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->good());
    return rval;}
  static cssEl* cssElCFun_ios_eof_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->eof());
    return rval;}
  static cssEl* cssElCFun_ios_fail_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->fail());
    return rval;}
  static cssEl* cssElCFun_ios_bad_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->bad());
    return rval;}
  static cssEl* cssElCFun_ios_pword_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ios*)ths)->pword((int)*arg[1]), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_ios_iword_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->iword((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ostream_flush_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ostream*)ths)->flush();
    return rval;}
  static cssEl* cssElCFun_ostream_put_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ostream*)ths)->put((char)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ostream_write_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ostream*)ths)->write((const char*)*arg[1], (streamsize)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ostream_seekp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ostream*)ths)->seekp((streamoff)*arg[1], (ios::seekdir)(int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ostream_tellp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ostream*)ths)->tellp());
    return rval;}
  static cssEl* cssElCFun_istream_getline_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((istream*)ths)->getline((char*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((istream*)ths)->getline((char*)*arg[1], (int)*arg[2], (char)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_istream_read_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((istream*)ths)->read((char*)*arg[1], (streamsize)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_istream_get_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((istream*)ths)->get());
    return rval;}
  static cssEl* cssElCFun_istream_peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((istream*)ths)->peek());
    return rval;}
  static cssEl* cssElCFun_istream_ignore_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((istream*)ths)->ignore();}
    if(na == 1) {
      ((istream*)ths)->ignore((int)*arg[1]);}
    if(na == 2) {
      ((istream*)ths)->ignore((int)*arg[1], (int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_istream_sync_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((istream*)ths)->sync());
    return rval;}
  static cssEl* cssElCFun_istream_seekg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((istream*)ths)->seekg((streamoff)*arg[1], (ios::seekdir)(int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_istream_tellg_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((istream*)ths)->tellg());
    return rval;}
  static cssEl* cssElCFun_istream_putback_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((istream*)ths)->putback((char)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_istream_unget_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((istream*)ths)->unget();
    return rval;}
  static cssEl* cssElCFun_iostream_flags_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->flags();
    return rval;}
  static cssEl* cssElCFun_iostream_setf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->setf((ios::fmtflags)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iostream_unsetf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->unsetf((ios::fmtflags)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iostream_tie_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((iostream*)ths)->tie((ostream*)*arg[1]), 1, &TA_ostream);
    return rval;}
  static cssEl* cssElCFun_iostream_precision_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->precision((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_iostream_width_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->width((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_iostream_clear_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((iostream*)ths)->clear();}
    if(na == 1) {
      ((iostream*)ths)->clear((ios::iostate)(int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_iostream_setstate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->setstate((ios::iostate)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iostream_good_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->good());
    return rval;}
  static cssEl* cssElCFun_iostream_eof_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->eof());
    return rval;}
  static cssEl* cssElCFun_iostream_fail_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->fail());
    return rval;}
  static cssEl* cssElCFun_iostream_bad_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->bad());
    return rval;}
  static cssEl* cssElCFun_iostream_pword_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((iostream*)ths)->pword((int)*arg[1]), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_iostream_iword_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->iword((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_iostream_getline_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((iostream*)ths)->getline((char*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((iostream*)ths)->getline((char*)*arg[1], (int)*arg[2], (char)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_iostream_read_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->read((char*)*arg[1], (streamsize)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_iostream_get_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->get());
    return rval;}
  static cssEl* cssElCFun_iostream_peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->peek());
    return rval;}
  static cssEl* cssElCFun_iostream_ignore_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((iostream*)ths)->ignore();}
    if(na == 1) {
      ((iostream*)ths)->ignore((int)*arg[1]);}
    if(na == 2) {
      ((iostream*)ths)->ignore((int)*arg[1], (int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_iostream_sync_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->sync());
    return rval;}
  static cssEl* cssElCFun_iostream_seekg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->seekg((streamoff)*arg[1], (ios::seekdir)(int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_iostream_tellg_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->tellg());
    return rval;}
  static cssEl* cssElCFun_iostream_putback_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->putback((char)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iostream_unget_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->unget();
    return rval;}
  static cssEl* cssElCFun_iostream_flush_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->flush();
    return rval;}
  static cssEl* cssElCFun_iostream_put_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->put((char)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iostream_write_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->write((const char*)*arg[1], (streamsize)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_iostream_seekp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->seekp((streamoff)*arg[1], (ios::seekdir)(int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_iostream_tellp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->tellp());
    return rval;}
  static cssEl* cssElCFun_ifstream_close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ifstream*)ths)->close();
    return rval;}
  static cssEl* cssElCFun_ifstream_is_open_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ifstream*)ths)->is_open());
    return rval;}
  static cssEl* cssElCFun_ifstream_open_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((ifstream*)ths)->open((const char*)*arg[1]);}
    if(na == 2) {
      ((ifstream*)ths)->open((const char*)*arg[1], (ios::openmode)(int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_ofstream_close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ofstream*)ths)->close();
    return rval;}
  static cssEl* cssElCFun_ofstream_is_open_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ofstream*)ths)->is_open());
    return rval;}
  static cssEl* cssElCFun_ofstream_open_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((ofstream*)ths)->open((const char*)*arg[1]);}
    if(na == 2) {
      ((ofstream*)ths)->open((const char*)*arg[1], (ios::openmode)(int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_fstream_close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((fstream*)ths)->close();
    return rval;}
  static cssEl* cssElCFun_fstream_is_open_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((fstream*)ths)->is_open());
    return rval;}
  static cssEl* cssElCFun_fstream_open_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((fstream*)ths)->open((const char*)*arg[1], (ios::openmode)(int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Indenter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((taPtrList_impl*)ths)->Indenter(refarg_0, (const char*)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Alloc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Alloc((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_IsEmpty_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_impl*)ths)->IsEmpty());
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_BuildHashTable_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->BuildHashTable((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_impl*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_impl*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_RemoveName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_impl*)ths)->RemoveName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_RemoveLast_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_impl*)ths)->RemoveLast());
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_RemoveAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->RemoveAll();
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Move_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_impl*)ths)->Move((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Swap_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_impl*)ths)->Swap((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_PopAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->PopAll();
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Permute_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Permute();
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Sort_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taPtrList_impl*)ths)->Sort();}
    if(na == 1) {
      ((taPtrList_impl*)ths)->Sort((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Sort__stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taPtrList_impl*)ths)->Sort_();}
    if(na == 1) {
      ((taPtrList_impl*)ths)->Sort_((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_UpdateAllIndicies_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->UpdateAllIndicies();
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Duplicate(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_DupeUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->DupeUniqNameNew(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_DupeUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->DupeUniqNameOld(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Stealth_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Stealth_Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_BorrowUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->BorrowUnique(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_BorrowUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->BorrowUniqNameNew(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_BorrowUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->BorrowUniqNameOld(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Copy_Common_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Copy_Common(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Copy_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Copy_Duplicate(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Copy_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Copy_Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_List_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taPtrList_impl*)ths)->List();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((taPtrList_impl*)ths)->List(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Alloc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Alloc((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_taArray_impl_EnforceSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->EnforceSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray_impl*)ths)->Remove((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray_impl*)ths)->Remove((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Move_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_impl*)ths)->Move((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Permute_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Permute();
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Sort_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taArray_impl*)ths)->Sort();}
    if(na == 1) {
      ((taArray_impl*)ths)->Sort((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taArray_impl_ShiftLeft_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->ShiftLeft((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_impl_ShiftLeftPct_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->ShiftLeftPct((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_impl_V_Flip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_impl*)ths)->V_Flip((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Duplicate(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_DupeUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->DupeUnique(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Copy_Common_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Copy_Common(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Copy_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Copy_Duplicate(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_CopyVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray_impl*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));}
    if(na == 2) {
      ((taArray_impl*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2]);}
    if(na == 3) {
      ((taArray_impl*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((taArray_impl*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_taArray_impl_List_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taArray_impl*)ths)->List();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((taArray_impl*)ths)->List(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_taArray_impl_InitFromString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->InitFromString((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taHashEl_Initialize_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taHashEl*)ths)->Initialize();
    return rval;}
taPtrList<taHashEl>*		 TAI_taPtrList_taHashEl_=NULL;
  static cssEl* cssElCFun_taPtrList_taHashEl__Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->FastEl((int)*arg[1]), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->Edit_El((taHashEl*)(void*)*arg[1]), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->FindName((const char*)*arg[1]), 1, &TA_taHashEl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_taHashEl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->Pop(), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->Peek(), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->AddUniqNameOld((taHashEl*)(void*)*arg[1]), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->LinkUniqNameOld((taHashEl*)(void*)*arg[1]), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->FindEl((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashEl>*)ths)->AddEl((taHashEl*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashEl>*)ths)->Add((taHashEl*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->AddUnique((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->AddUniqNameNew((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->Insert((taHashEl*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->Replace((int)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->ReplaceEl((taHashEl*)(void*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->ReplaceName((const char*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->RemoveEl((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->DuplicateEl((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashEl>*)ths)->Link((taHashEl*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->LinkUnique((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->LinkUniqNameNew((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->InsertLink((taHashEl*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->InsertLink((taHashEl*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->ReplaceLink((int)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->ReplaceLinkEl((taHashEl*)(void*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->ReplaceLinkName((const char*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashEl>*)ths)->Push((taHashEl*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->MoveEl((taHashEl*)(void*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->Transfer((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->MoveBefore((taHashEl*)(void*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->MoveAfter((taHashEl*)(void*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taHashBucket_Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taHashBucket*)ths)->Find((taHashVal)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taHashBucket_FindIndex_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taHashBucket*)ths)->FindIndex((taHashVal)*arg[1]));
    return rval;}
taPtrList<taHashBucket>*		 TAI_taPtrList_taHashBucket_=NULL;
  static cssEl* cssElCFun_taPtrList_taHashBucket__Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->FastEl((int)*arg[1]), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->Edit_El((taHashBucket*)(void*)*arg[1]), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->FindName((const char*)*arg[1]), 1, &TA_taHashBucket);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_taHashBucket);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->Pop(), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->Peek(), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->AddUniqNameOld((taHashBucket*)(void*)*arg[1]), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->LinkUniqNameOld((taHashBucket*)(void*)*arg[1]), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->FindEl((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashBucket>*)ths)->AddEl((taHashBucket*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashBucket>*)ths)->Add((taHashBucket*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->AddUnique((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->AddUniqNameNew((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->Insert((taHashBucket*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->Replace((int)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->ReplaceEl((taHashBucket*)(void*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->ReplaceName((const char*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->RemoveEl((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->DuplicateEl((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashBucket>*)ths)->Link((taHashBucket*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->LinkUnique((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->LinkUniqNameNew((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->InsertLink((taHashBucket*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->InsertLink((taHashBucket*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->ReplaceLink((int)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->ReplaceLinkEl((taHashBucket*)(void*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->ReplaceLinkName((const char*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashBucket>*)ths)->Push((taHashBucket*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->MoveEl((taHashBucket*)(void*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->Transfer((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->MoveBefore((taHashBucket*)(void*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->MoveAfter((taHashBucket*)(void*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taHashTable_Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taHashTable*)ths)->Remove((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taHashTable_Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taHashTable*)ths)->Add((const char*)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taHashTable_HashCode_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taHashTable*)ths)->HashCode((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taHashTable_FindIndex_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taHashTable*)ths)->FindIndex((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taHashTable_UpdateIndex_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taHashTable*)ths)->UpdateIndex((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taHashTable_InitList__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taHashTable*)ths)->InitList_();
    return rval;}
taivType*		 TAI_taivType=NULL;
taivEdit*		 TAI_taivEdit=NULL;
taivMember*		 TAI_taivMember=NULL;
taivMethod*		 TAI_taivMethod=NULL;
taBase**		 TAI_TAPtr=NULL;
taPlainArray<taString>*		 TAI_taPlainArray_taString_=NULL;
  static cssEl* cssElCFun_taPlainArray_taString__Remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPlainArray<taString>*)ths)->Remove((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPlainArray<taString>*)ths)->Remove((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlainArray<taString>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlainArray<taString>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlainArray<taString>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlainArray<taString>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlainArray<taString>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<taString>*)ths)->Set((int)*arg[1], arg[2]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<taString>*)ths)->Add(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<taString>*)ths)->AddUnique(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<taString>*)ths)->Push(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taPlainArray<taString>*)ths)->Insert(arg[1]->GetStr(), (int)*arg[2]);}
    if(na == 3) {
      ((taPlainArray<taString>*)ths)->Insert(arg[1]->GetStr(), (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPlainArray<taString>*)ths)->Find(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((taPlainArray<taString>*)ths)->Find(arg[1]->GetStr(), (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<taString>*)ths)->RemoveEl(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_String_PArray_Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((String_PArray*)ths)->Add((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_String_PArray_AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((String_PArray*)ths)->AddUnique((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_String_PArray_FindContains_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((String_PArray*)ths)->FindContains((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((String_PArray*)ths)->FindContains((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
taPlainArray<int>*		 TAI_taPlainArray_int_=NULL;
  static cssEl* cssElCFun_taPlainArray_int__Remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPlainArray<int>*)ths)->Remove((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPlainArray<int>*)ths)->Remove((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<int>*)ths)->Set((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<int>*)ths)->Add((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->AddUnique((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<int>*)ths)->Push((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taPlainArray<int>*)ths)->Insert((int)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taPlainArray<int>*)ths)->Insert((int)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPlainArray<int>*)ths)->Find((int)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPlainArray<int>*)ths)->Find((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->RemoveEl((int)*arg[1]));
    return rval;}
taMisc*		 TAI_taMisc=NULL;
  static cssEl* cssElCFun_taMisc_SaveConfig_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->SaveConfig();
    return rval;}
  static cssEl* cssElCFun_taMisc_LoadConfig_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->LoadConfig();
    return rval;}
  static cssEl* cssElCFun_taMisc_Error_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taMisc*)ths)->Error((const char*)*arg[1]);}
    if(na == 2) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2]);}
    if(na == 3) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3]);}
    if(na == 4) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4]);}
    if(na == 5) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5]);}
    if(na == 6) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6]);}
    if(na == 7) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7]);}
    if(na == 8) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8]);}
    if(na == 9) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9]);}
    if(na == 10) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9], (const char*)*arg[10]);}
    if(na == 11) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9], (const char*)*arg[10], (const char*)*arg[11]);}
    if(na == 12) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9], (const char*)*arg[10], (const char*)*arg[11], (const char*)*arg[12]);}
    return rval;}
  static cssEl* cssElCFun_taMisc_Choice_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taMisc*)ths)->Choice());}
    if(na == 1) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3]));}
    if(na == 4) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4]));}
    if(na == 5) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5]));}
    if(na == 6) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6]));}
    if(na == 7) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7]));}
    if(na == 8) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8]));}
    if(na == 9) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9]));}
    if(na == 10) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9], (const char*)*arg[10]));}
    if(na == 11) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9], (const char*)*arg[10], (const char*)*arg[11]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_Busy_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->Busy();
    return rval;}
  static cssEl* cssElCFun_taMisc_DoneBusy_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->DoneBusy();
    return rval;}
  static cssEl* cssElCFun_taMisc_Initialize_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->Initialize();
    return rval;}
  static cssEl* cssElCFun_taMisc_MallocInfo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((taMisc*)ths)->MallocInfo(refarg_0);
    return rval;}
  static cssEl* cssElCFun_taMisc_ListAllTokens_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((taMisc*)ths)->ListAllTokens(refarg_0);
    return rval;}
  static cssEl* cssElCFun_taMisc_ReplaceAllPtrs_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taMisc*)ths)->ReplaceAllPtrs((TypeDef*)*arg[1], (void*)(void*)*arg[2], (void*)(void*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taMisc_ReplaceAllPtrsWithToken_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taMisc*)ths)->ReplaceAllPtrsWithToken((TypeDef*)*arg[1], (void*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taMisc_Decode_Signal_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->Decode_Signal((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taMisc_CharToStrArray_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    String_PArray& refarg_0=*(String_PArray*)arg[1]->GetVoidPtrOfType(&TA_String_PArray);
    ((taMisc*)ths)->CharToStrArray(refarg_0, (const char*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taMisc_StrArrayToChar_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->StrArrayToChar(*(String_PArray*)arg[1]->GetVoidPtrOfType(&TA_String_PArray)));
    return rval;}
  static cssEl* cssElCFun_taMisc_SpaceLabel_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taString refarg_0=arg[1]->GetStr();
    ((taMisc*)ths)->SpaceLabel(refarg_0);
    *arg[1]=(String)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taMisc_LeadingZeros_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->LeadingZeros((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taMisc_FormatValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->FormatValue((float)*arg[1], (int)*arg[2], (int)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taMisc_StringMaxLen_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->StringMaxLen(arg[1]->GetStr(), (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taMisc_StringEnforceLen_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->StringEnforceLen(arg[1]->GetStr(), (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taMisc_remove_name_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taString refarg_0=arg[1]->GetStr();
    rval=new cssString(((taMisc*)ths)->remove_name(refarg_0));
    *arg[1]=(String)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taMisc_FindFileInclude_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->FindFileInclude((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taMisc_skip_white_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->skip_white(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->skip_white(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_skip_white_noeol_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->skip_white_noeol(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->skip_white_noeol(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_word_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_word(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_word(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_alnum_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_alnum(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_alnum(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_alnum_noeol_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_alnum_noeol(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_alnum_noeol(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_eol_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_eol(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_eol(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_semi_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_semi(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_semi(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_lbracket_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_lbracket(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_lbracket(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_lb_or_semi_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_lb_or_semi(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_lb_or_semi(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_rbracket_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_rbracket(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_rbracket(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_rb_or_semi_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_rb_or_semi(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_rb_or_semi(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_quote_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_quote(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_quote(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_quote_semi_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_quote_semi(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->read_till_quote_semi(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_skip_past_err_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->skip_past_err(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->skip_past_err(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_skip_past_err_rb_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->skip_past_err_rb(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taMisc*)ths)->skip_past_err_rb(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_indent_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((taMisc*)ths)->indent(refarg_0, (int)*arg[2]);}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((taMisc*)ths)->indent(refarg_0, (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taMisc_fmt_sep_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((taMisc*)ths)->fmt_sep(refarg_0, arg[2]->GetStr(), (int)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((taMisc*)ths)->fmt_sep(refarg_0, arg[2]->GetStr(), (int)*arg[3], (int)*arg[4], (int)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_taMisc_fancy_list_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((taMisc*)ths)->fancy_list(refarg_0, arg[2]->GetStr(), (int)*arg[3], (int)*arg[4], (int)*arg[5]);
    return rval;}
taPtrList<EnumDef>*		 TAI_taPtrList_EnumDef_=NULL;
EnumDef*		 TAI_EnumDef=NULL;
EnumSpace*		 TAI_EnumSpace=NULL;
taPtrList<void>*		 TAI_taPtrList_void_=NULL;
TokenSpace*		 TAI_TokenSpace=NULL;
taPtrList<MemberDef>*		 TAI_taPtrList_MemberDef_=NULL;
MemberSpace*		 TAI_MemberSpace=NULL;
taPtrList<MethodDef>*		 TAI_taPtrList_MethodDef_=NULL;
MethodSpace*		 TAI_MethodSpace=NULL;
taPtrList<TypeDef>*		 TAI_taPtrList_TypeDef_=NULL;
TypeSpace*		 TAI_TypeSpace=NULL;
  static cssEl* cssElCFun_taivGetFile_UnCompressInput_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taivGetFile*)ths)->UnCompressInput((const char*)*arg[1]), 1, &TA_istream);
    return rval;}
  static cssEl* cssElCFun_taivGetFile_CompressOutput_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA((void*)((taivGetFile*)ths)->CompressOutput((const char*)*arg[1]), 1, &TA_ostream);}
    if(na == 2) {
      rval=new cssTA((void*)((taivGetFile*)ths)->CompressOutput((const char*)*arg[1], (bool)*arg[2]), 1, &TA_ostream);}
    return rval;}
  static cssEl* cssElCFun_taivGetFile_open_read_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taivGetFile*)ths)->open_read(), 1, &TA_istream);
    return rval;}
  static cssEl* cssElCFun_taivGetFile_open_write_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taivGetFile*)ths)->open_write(), 1, &TA_ostream);
    return rval;}
  static cssEl* cssElCFun_taivGetFile_open_append_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taivGetFile*)ths)->open_append(), 1, &TA_ostream);
    return rval;}
  static cssEl* cssElCFun_taivGetFile_open_write_exist_check_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taivGetFile*)ths)->open_write_exist_check());
    return rval;}
  static cssEl* cssElCFun_taivGetFile_Open_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((taivGetFile*)ths)->Open(), 1, &TA_istream);}
    if(na == 1) {
      rval=new cssTA((void*)((taivGetFile*)ths)->Open((const char*)*arg[1]), 1, &TA_istream);}
    if(na == 2) {
      rval=new cssTA((void*)((taivGetFile*)ths)->Open((const char*)*arg[1], (bool)*arg[2]), 1, &TA_istream);}
    return rval;}
  static cssEl* cssElCFun_taivGetFile_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((taivGetFile*)ths)->Save(), 1, &TA_ostream);}
    if(na == 1) {
      rval=new cssTA((void*)((taivGetFile*)ths)->Save((const char*)*arg[1]), 1, &TA_ostream);}
    if(na == 2) {
      rval=new cssTA((void*)((taivGetFile*)ths)->Save((const char*)*arg[1], (bool)*arg[2]), 1, &TA_ostream);}
    return rval;}
  static cssEl* cssElCFun_taivGetFile_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((taivGetFile*)ths)->SaveAs(), 1, &TA_ostream);}
    if(na == 1) {
      rval=new cssTA((void*)((taivGetFile*)ths)->SaveAs((const char*)*arg[1]), 1, &TA_ostream);}
    if(na == 2) {
      rval=new cssTA((void*)((taivGetFile*)ths)->SaveAs((const char*)*arg[1], (bool)*arg[2]), 1, &TA_ostream);}
    return rval;}
  static cssEl* cssElCFun_taivGetFile_Append_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((taivGetFile*)ths)->Append(), 1, &TA_ostream);}
    if(na == 1) {
      rval=new cssTA((void*)((taivGetFile*)ths)->Append((const char*)*arg[1]), 1, &TA_ostream);}
    if(na == 2) {
      rval=new cssTA((void*)((taivGetFile*)ths)->Append((const char*)*arg[1], (bool)*arg[2]), 1, &TA_ostream);}
    return rval;}
  static cssEl* cssElCFun_taivGetFile_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taivGetFile*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_taivGetFile_FixFileName_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taivGetFile*)ths)->FixFileName();
    return rval;}
  static cssEl* cssElCFun_taivGetFile_GetDir_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taivGetFile*)ths)->GetDir();
    return rval;}
tabMisc*		 TAI_tabMisc=NULL;
  static cssEl* cssElCFun_tabMisc_Close_Obj_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((tabMisc*)ths)->Close_Obj((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_tabMisc_WaitProc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((tabMisc*)ths)->WaitProc());
    return rval;}
  static cssEl* cssElCFun_tabMisc_NotifyEdits_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((tabMisc*)ths)->NotifyEdits((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_tabMisc_DelayedUpdateAfterEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((tabMisc*)ths)->DelayedUpdateAfterEdit((taBase*)(void*)*arg[1]);
    return rval;}
taNBase*		 TAI_taNBase=NULL;
  static cssEl* cssElCFun_taNBase_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taNBase*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
SelectEdit*		 TAI_SelectEdit=NULL;
  static cssEl* cssElCFun_SelectEdit_FindMbrBase_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SelectEdit*)ths)->FindMbrBase((taBase*)(void*)*arg[1], (MemberDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_SelectMember_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SelectEdit*)ths)->SelectMember((taBase*)(void*)*arg[1], (MemberDef*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_SelectMemberNm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SelectEdit*)ths)->SelectMemberNm((taBase*)(void*)*arg[1], (const char*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_FindMethBase_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SelectEdit*)ths)->FindMethBase((taBase*)(void*)*arg[1], (MethodDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_SelectMethod_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SelectEdit*)ths)->SelectMethod((taBase*)(void*)*arg[1], (MethodDef*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_SelectMethodNm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SelectEdit*)ths)->SelectMethodNm((taBase*)(void*)*arg[1], (const char*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_UpdateAllBases_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->UpdateAllBases();
    return rval;}
  static cssEl* cssElCFun_SelectEdit_RemoveField_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->RemoveField((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SelectEdit_MoveField_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->MoveField((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_SelectEdit_RemoveFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->RemoveFun((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SelectEdit_MoveFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->MoveFun((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_SelectEdit_NewEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->NewEdit();
    return rval;}
  static cssEl* cssElCFun_SelectEdit_GetMembsFmStrs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->GetMembsFmStrs();
    return rval;}
  static cssEl* cssElCFun_SelectEdit_GetMethsFmStrs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->GetMethsFmStrs();
    return rval;}
  static cssEl* cssElCFun_SelectEdit_GetAllPaths_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->GetAllPaths();
    return rval;}
  static cssEl* cssElCFun_SelectEdit_BaseClosing_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SelectEdit*)ths)->BaseClosing((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_BaseClosingAll_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SelectEdit*)ths)->BaseClosingAll((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_BaseChangeSave_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->BaseChangeSave();
    return rval;}
  static cssEl* cssElCFun_SelectEdit_BaseChangeReOpen_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SelectEdit*)ths)->BaseChangeReOpen();
    return rval;}
  static cssEl* cssElCFun_SelectEdit_GetMbrLabel_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((SelectEdit*)ths)->GetMbrLabel((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_SelectEdit_GetMethLabel_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((SelectEdit*)ths)->GetMethLabel((int)*arg[1]));
    return rval;}
taNBase**		 TAI_TANPtr=NULL;
taOBase*		 TAI_taOBase=NULL;
  static cssEl* cssElCFun_taOBase_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taOBase*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
taPtrList_base<taBase>*		 TAI_taPtrList_base_taBase_=NULL;
  static cssEl* cssElCFun_taPtrList_base_taBase__Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->Find((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->FindEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_base<taBase>*)ths)->AddEl((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_base<taBase>*)ths)->Add((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->AddUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->AddUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->Insert((taBase*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->Replace((int)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->ReplaceEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->ReplaceName((const char*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->RemoveEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->DuplicateEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_base<taBase>*)ths)->Link((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->LinkUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->LinkUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->InsertLink((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->InsertLink((taBase*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->ReplaceLink((int)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->ReplaceLinkEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->ReplaceLinkName((const char*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_base<taBase>*)ths)->Push((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->MoveEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->Transfer((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->MoveBefore((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->MoveAfter((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
taList_impl*		 TAI_taList_impl=NULL;
  static cssEl* cssElCFun_taList_impl_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetOwner_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList_impl*)ths)->GetOwner(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((taList_impl*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((taList_impl*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taList_impl*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((taList_impl*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taList_impl*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taList_impl*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_impl_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taList_impl*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList_impl*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taList_impl*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_taList_impl_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_taList_impl_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taList_impl*)ths)->GetEnumString((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taList_impl*)ths)->GetEnumVal((const char*)*arg[1]));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((taList_impl*)ths)->GetEnumVal((const char*)*arg[1], refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_impl_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_Edit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taList_impl*)ths)->Edit());}
    if(na == 1) {
      rval=new cssInt((int)((taList_impl*)ths)->Edit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_CloseEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->CloseEdit());
    return rval;}
  static cssEl* cssElCFun_taList_impl_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_taList_impl_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_taList_impl_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_taList_impl_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->CallFun((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_Alloc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Alloc((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_taList_impl_IsEmpty_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->IsEmpty());
    return rval;}
  static cssEl* cssElCFun_taList_impl_BuildHashTable_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->BuildHashTable((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_RemoveName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->RemoveName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_RemoveLast_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->RemoveLast());
    return rval;}
  static cssEl* cssElCFun_taList_impl_RemoveAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->RemoveAll();
    return rval;}
  static cssEl* cssElCFun_taList_impl_Move_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->Move((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Swap_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->Swap((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_PopAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->PopAll();
    return rval;}
  static cssEl* cssElCFun_taList_impl_Permute_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Permute();
    return rval;}
  static cssEl* cssElCFun_taList_impl_Sort_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taList_impl*)ths)->Sort();}
    if(na == 1) {
      ((taList_impl*)ths)->Sort((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taList_impl_Sort__stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taList_impl*)ths)->Sort_();}
    if(na == 1) {
      ((taList_impl*)ths)->Sort_((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taList_impl_UpdateAllIndicies_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->UpdateAllIndicies();
    return rval;}
  static cssEl* cssElCFun_taList_impl_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Duplicate(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_DupeUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->DupeUniqNameNew(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_DupeUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->DupeUniqNameOld(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Stealth_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Stealth_Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_BorrowUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->BorrowUnique(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_BorrowUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->BorrowUniqNameNew(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_BorrowUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->BorrowUniqNameOld(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Copy_Common_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Copy_Common(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Copy_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Copy_Duplicate(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Copy_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Copy_Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_List_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taList_impl*)ths)->List();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((taList_impl*)ths)->List(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_taList_impl_FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->FindEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->AddEl((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Add((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->AddUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->AddUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->Insert((taBase*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->Replace((int)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ReplaceEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ReplaceName((const char*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->RemoveEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->DuplicateEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Link((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->LinkUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->LinkUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taList_impl*)ths)->InsertLink((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taList_impl*)ths)->InsertLink((taBase*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ReplaceLink((int)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ReplaceLinkEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ReplaceLinkName((const char*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Push((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->MoveEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->Transfer((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->MoveBefore((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->MoveAfter((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Dump_Save_PathR_impl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->Dump_Save_PathR_impl(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->Dump_Save_PathR_impl(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taList_impl*)ths)->Dump_Save_PathR_impl(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetDefaultEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->SetDefaultEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetDefaultElName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->SetDefaultElName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetDefaultElType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->SetDefaultElType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_EnforceSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->EnforceSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_EnforceType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->EnforceType();
    return rval;}
  static cssEl* cssElCFun_taList_impl_EnforceSameStru_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->EnforceSameStru(*(taList_impl*)arg[1]->GetVoidPtrOfType(&TA_taList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ChangeType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ChangeType((taBase*)(void*)*arg[1], (TypeDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ReplaceType((TypeDef*)*arg[1], (TypeDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetBaseType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->SetBaseType((TypeDef*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReturnFindMd_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taList_impl*)ths)->ReturnFindMd(), 1, &TA_MemberDef);
    return rval;}
taArray_base*		 TAI_taArray_base=NULL;
  static cssEl* cssElCFun_taArray_base_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetOwner_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taArray_base*)ths)->GetOwner(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((taArray_base*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((taArray_base*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taArray_base*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((taArray_base*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taArray_base*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taArray_base*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taArray_base_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taArray_base*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taArray_base*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taArray_base*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_taArray_base_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_taArray_base_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray_base*)ths)->GetEnumString((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray_base*)ths)->GetEnumVal((const char*)*arg[1]));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((taArray_base*)ths)->GetEnumVal((const char*)*arg[1], refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taArray_base_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taArray_base*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((taArray_base*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taArray_base*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taArray_base*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taArray_base*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taArray_base*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taArray_base*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((taArray_base*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_Edit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taArray_base*)ths)->Edit());}
    if(na == 1) {
      rval=new cssInt((int)((taArray_base*)ths)->Edit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_CloseEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->CloseEdit());
    return rval;}
  static cssEl* cssElCFun_taArray_base_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_taArray_base_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_taArray_base_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_taArray_base_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->CallFun((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_Alloc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Alloc((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_taArray_base_EnforceSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->EnforceSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_Remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray_base*)ths)->Remove((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray_base*)ths)->Remove((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_Move_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->Move((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_Permute_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Permute();
    return rval;}
  static cssEl* cssElCFun_taArray_base_Sort_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taArray_base*)ths)->Sort();}
    if(na == 1) {
      ((taArray_base*)ths)->Sort((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taArray_base_ShiftLeft_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->ShiftLeft((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_ShiftLeftPct_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->ShiftLeftPct((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_V_Flip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->V_Flip((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Duplicate(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_base_DupeUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->DupeUnique(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_base_Copy_Common_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Copy_Common(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_base_Copy_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Copy_Duplicate(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_base_CopyVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray_base*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));}
    if(na == 2) {
      ((taArray_base*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2]);}
    if(na == 3) {
      ((taArray_base*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((taArray_base*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_taArray_base_List_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taArray_base*)ths)->List();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((taArray_base*)ths)->List(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_taArray_base_InitFromString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->InitFromString((const char*)*arg[1]);
    return rval;}
taList<taBase>*		 TAI_taList_taBase_=NULL;
  static cssEl* cssElCFun_taList_taBase__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<taBase>*)ths)->MoveBefore((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_taBase__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<taBase>*)ths)->MoveAfter((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_taBase__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->FastEl((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->DefaultEl(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->Edit_El((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<taBase>*)ths)->FindName((const char*)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_taBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_taBase__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<taBase>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_taBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_taBase__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->Pop(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->Peek(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->AddUniqNameOld((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->LinkUniqNameOld((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
taBase_List*		 TAI_taBase_List=NULL;
taArray<int>*		 TAI_taArray_int_=NULL;
  static cssEl* cssElCFun_taArray_int__Remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<int>*)ths)->Remove((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<int>*)ths)->Remove((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_int__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_int__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_int__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_int__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taArray_int__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taArray_int__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<int>*)ths)->Set((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taArray_int__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<int>*)ths)->Add((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_int__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->AddUnique((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_int__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<int>*)ths)->Push((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_int__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<int>*)ths)->Insert((int)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<int>*)ths)->Insert((int)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_int__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<int>*)ths)->Find((int)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<int>*)ths)->Find((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_int__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->RemoveEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_int__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<int>*)ths)->InitVals((int)*arg[1]);}
    if(na == 2) {
      ((taArray<int>*)ths)->InitVals((int)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<int>*)ths)->InitVals((int)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
int_Array*		 TAI_int_Array=NULL;
  static cssEl* cssElCFun_int_Array_FillSeq_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((int_Array*)ths)->FillSeq();}
    if(na == 1) {
      ((int_Array*)ths)->FillSeq((int)*arg[1]);}
    if(na == 2) {
      ((int_Array*)ths)->FillSeq((int)*arg[1], (int)*arg[2]);}
    return rval;}
taArray<float>*		 TAI_taArray_float_=NULL;
  static cssEl* cssElCFun_taArray_float__Remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<float>*)ths)->Remove((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<float>*)ths)->Remove((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_float__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<float>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_float__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<float>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_float__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<float>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_float__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<float>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taArray_float__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<float>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taArray_float__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<float>*)ths)->Set((int)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taArray_float__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<float>*)ths)->Add((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_float__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<float>*)ths)->AddUnique((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_float__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<float>*)ths)->Push((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_float__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<float>*)ths)->Insert((float)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<float>*)ths)->Insert((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_float__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<float>*)ths)->Find((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<float>*)ths)->Find((float)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_float__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<float>*)ths)->RemoveEl((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_float__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<float>*)ths)->InitVals((float)*arg[1]);}
    if(na == 2) {
      ((taArray<float>*)ths)->InitVals((float)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<float>*)ths)->InitVals((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
float_Array*		 TAI_float_Array=NULL;
taArray<double>*		 TAI_taArray_double_=NULL;
  static cssEl* cssElCFun_taArray_double__Remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<double>*)ths)->Remove((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<double>*)ths)->Remove((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_double__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<double>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_double__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<double>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_double__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<double>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_double__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<double>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taArray_double__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<double>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taArray_double__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<double>*)ths)->Set((int)*arg[1], (double)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taArray_double__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<double>*)ths)->Add((double)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_double__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<double>*)ths)->AddUnique((double)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_double__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<double>*)ths)->Push((double)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_double__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<double>*)ths)->Insert((double)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<double>*)ths)->Insert((double)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_double__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<double>*)ths)->Find((double)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<double>*)ths)->Find((double)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_double__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<double>*)ths)->RemoveEl((double)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_double__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<double>*)ths)->InitVals((double)*arg[1]);}
    if(na == 2) {
      ((taArray<double>*)ths)->InitVals((double)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<double>*)ths)->InitVals((double)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
double_Array*		 TAI_double_Array=NULL;
taArray<taString>*		 TAI_taArray_taString_=NULL;
  static cssEl* cssElCFun_taArray_taString__Remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<taString>*)ths)->Remove((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<taString>*)ths)->Remove((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_taString__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray<taString>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_taString__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray<taString>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_taString__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray<taString>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray<taString>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray<taString>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<taString>*)ths)->Set((int)*arg[1], arg[2]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<taString>*)ths)->Add(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taArray_taString__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<taString>*)ths)->AddUnique(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<taString>*)ths)->Push(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<taString>*)ths)->Insert(arg[1]->GetStr(), (int)*arg[2]);}
    if(na == 3) {
      ((taArray<taString>*)ths)->Insert(arg[1]->GetStr(), (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<taString>*)ths)->Find(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<taString>*)ths)->Find(arg[1]->GetStr(), (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_taString__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<taString>*)ths)->RemoveEl(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_taString__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<taString>*)ths)->InitVals(arg[1]->GetStr());}
    if(na == 2) {
      ((taArray<taString>*)ths)->InitVals(arg[1]->GetStr(), (int)*arg[2]);}
    if(na == 3) {
      ((taArray<taString>*)ths)->InitVals(arg[1]->GetStr(), (int)*arg[2], (int)*arg[3]);}
    return rval;}
String_Array*		 TAI_String_Array=NULL;
taArray<long>*		 TAI_taArray_long_=NULL;
  static cssEl* cssElCFun_taArray_long__Remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<long>*)ths)->Remove((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<long>*)ths)->Remove((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_long__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<long>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_long__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<long>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_long__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<long>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_long__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<long>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taArray_long__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<long>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taArray_long__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<long>*)ths)->Set((int)*arg[1], (long)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taArray_long__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<long>*)ths)->Add((long)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_long__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<long>*)ths)->AddUnique((long)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_long__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<long>*)ths)->Push((long)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_long__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<long>*)ths)->Insert((long)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<long>*)ths)->Insert((long)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_long__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<long>*)ths)->Find((long)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<long>*)ths)->Find((long)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_long__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<long>*)ths)->RemoveEl((long)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_long__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<long>*)ths)->InitVals((long)*arg[1]);}
    if(na == 2) {
      ((taArray<long>*)ths)->InitVals((long)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<long>*)ths)->InitVals((long)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
long_Array*		 TAI_long_Array=NULL;
  static cssEl* cssElCFun_long_Array_FillSeq_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((long_Array*)ths)->FillSeq();}
    if(na == 1) {
      ((long_Array*)ths)->FillSeq((long)*arg[1]);}
    if(na == 2) {
      ((long_Array*)ths)->FillSeq((long)*arg[1], (long)*arg[2]);}
    return rval;}
voidptr_Array*		 TAI_voidptr_Array=NULL;
taGroup_impl*		 TAI_taGroup_impl=NULL;
  static cssEl* cssElCFun_taGroup_impl_Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup_impl*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->Duplicate(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_DupeUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->DupeUniqNameNew(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_DupeUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->DupeUniqNameOld(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->Borrow(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_BorrowUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->BorrowUnique(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_BorrowUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->BorrowUniqNameNew(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_BorrowUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->BorrowUniqNameOld(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_Copy_Common_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->Copy_Common(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_Copy_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->Copy_Duplicate(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_Copy_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->Copy_Borrow(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_EnforceSameStru_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->EnforceSameStru(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_InitLeafGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->InitLeafGp();
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_RemoveLeaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup_impl*)ths)->RemoveLeaf((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_RemoveLeafName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup_impl*)ths)->RemoveLeafName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_RemoveLeafEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup_impl*)ths)->RemoveLeafEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_RemoveGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup_impl*)ths)->RemoveGp((taGroup_impl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_EditSubGps_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup_impl*)ths)->EditSubGps(), 1, &TA_TALOG);
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_EnforceLeaves_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taGroup_impl*)ths)->EnforceLeaves((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_FindLeaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup_impl*)ths)->FindLeaf((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taGroup_impl_FindLeafEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup_impl*)ths)->FindLeafEl((taBase*)(void*)*arg[1]));
    return rval;}
taList<taGroup_impl>*		 TAI_taList_taGroup_impl_=NULL;
  static cssEl* cssElCFun_taList_taGroup_impl__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<taGroup_impl>*)ths)->MoveBefore((taGroup_impl*)(void*)*arg[1], (taGroup_impl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<taGroup_impl>*)ths)->MoveAfter((taGroup_impl*)(void*)*arg[1], (taGroup_impl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taGroup_impl);
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->FastEl((int)*arg[1]), 1, &TA_taGroup_impl);
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->DefaultEl(), 1, &TA_taGroup_impl);
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->Edit_El((taGroup_impl*)(void*)*arg[1]), 1, &TA_taGroup_impl);
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->FindName((const char*)*arg[1]), 1, &TA_taGroup_impl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_taGroup_impl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_taGroup_impl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_taGroup_impl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->Pop(), 1, &TA_taGroup_impl);
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->Peek(), 1, &TA_taGroup_impl);
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->AddUniqNameOld((taGroup_impl*)(void*)*arg[1]), 1, &TA_taGroup_impl);
    return rval;}
  static cssEl* cssElCFun_taList_taGroup_impl__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taGroup_impl>*)ths)->LinkUniqNameOld((taGroup_impl*)(void*)*arg[1]), 1, &TA_taGroup_impl);
    return rval;}
TALOG*		 TAI_TALOG=NULL;
taSubGroup*		 TAI_taSubGroup=NULL;
  static cssEl* cssElCFun_taSubGroup_Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taSubGroup*)ths)->Transfer((taBase*)(void*)*arg[1]));
    return rval;}
DMemShareVar*		 TAI_DMemShareVar=NULL;
DMemShare*		 TAI_DMemShare=NULL;
taGroup<taBase>*		 TAI_taGroup_taBase_=NULL;
  static cssEl* cssElCFun_taGroup_taBase__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<taBase>*)ths)->MoveBefore((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<taBase>*)ths)->MoveAfter((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FastEl((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->DefaultEl(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->Edit_El((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->Leaf((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FirstEl(refarg_0), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->NextEl(refarg_0), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->NewEl(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->NewEl((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FindName((const char*)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_taBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_taBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->Pop(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->Peek(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->AddUniqNameOld((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->LinkUniqNameOld((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_taBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_taBase__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<taBase>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_taBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
taBase_Group*		 TAI_taBase_Group=NULL;
taPtrList<VPUnref>*		 TAI_taPtrList_VPUnref_=NULL;
taPtrList<DumpPathSub>*		 TAI_taPtrList_DumpPathSub_=NULL;
taPtrList<DumpPathToken>*		 TAI_taPtrList_DumpPathToken_=NULL;
NameValue*		 TAI_NameValue=NULL;
TypeDefault*		 TAI_TypeDefault=NULL;
  static cssEl* cssElCFun_TypeDefault_SetActive_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TypeDefault*)ths)->SetActive((char*)*arg[1], (bool)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_TypeDefault_GetActive_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TypeDefault*)ths)->GetActive((char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_TypeDefault_UpdateToNameValue_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((TypeDefault*)ths)->UpdateToNameValue();
    return rval;}
  static cssEl* cssElCFun_TypeDefault_UpdateFromNameValue_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((TypeDefault*)ths)->UpdateFromNameValue();
    return rval;}
taivMisc*		 TAI_taivMisc=NULL;
  static cssEl* cssElCFun_taivMisc_Busy_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taivMisc*)ths)->Busy();
    return rval;}
  static cssEl* cssElCFun_taivMisc_DoneBusy_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taivMisc*)ths)->DoneBusy();
    return rval;}
  static cssEl* cssElCFun_taivMisc_StartRecording_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taivMisc*)ths)->StartRecording((ostream*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taivMisc_StopRecording_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taivMisc*)ths)->StopRecording();
    return rval;}
  static cssEl* cssElCFun_taivMisc_RunIV_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taivMisc*)ths)->RunIV());
    return rval;}
  static cssEl* cssElCFun_taivMisc_RunIVPending_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taivMisc*)ths)->RunIVPending());
    return rval;}
  static cssEl* cssElCFun_taivMisc_FlushIVPending_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taivMisc*)ths)->FlushIVPending());
    return rval;}
  static cssEl* cssElCFun_taivMisc_RecordScript_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taivMisc*)ths)->RecordScript((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taivMisc_ScriptRecordAssignment_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taivMisc*)ths)->ScriptRecordAssignment((taBase*)(void*)*arg[1], (MemberDef*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taivMisc_SRIAssignment_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taivMisc*)ths)->SRIAssignment((taBase*)(void*)*arg[1], (MemberDef*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taivMisc_SREAssignment_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taivMisc*)ths)->SREAssignment((taBase*)(void*)*arg[1], (MemberDef*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taivMisc_PurgeDialogs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taivMisc*)ths)->PurgeDialogs();
    return rval;}
  static cssEl* cssElCFun_taivMisc_RevertEdits_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taivMisc*)ths)->RevertEdits((void*)(void*)*arg[1], (TypeDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taivMisc_CloseEdits_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taivMisc*)ths)->CloseEdits((void*)(void*)*arg[1], (TypeDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taivMisc_NotifyEdits_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taivMisc*)ths)->NotifyEdits((void*)(void*)*arg[1], (TypeDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taivMisc_FindEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taivMisc*)ths)->FindEdit((void*)(void*)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taivEditDialog);
    return rval;}
  static cssEl* cssElCFun_taivMisc_CreateLoadDialog_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taivMisc*)ths)->CreateLoadDialog();
    return rval;}
  static cssEl* cssElCFun_taivMisc_RemoveLoadDialog_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taivMisc*)ths)->RemoveLoadDialog();
    return rval;}
  static cssEl* cssElCFun_taivMisc_SetLoadDialog_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taivMisc*)ths)->SetLoadDialog((char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_HighlightBG_allocate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ivExtension& refarg_2=*(ivExtension*)arg[3]->GetVoidPtrOfType(&TA_ivExtension);
    ((HighlightBG*)ths)->allocate((ivCanvas*)(void*)*arg[1], *(ivAllocation*)arg[2]->GetVoidPtrOfType(&TA_ivAllocation), refarg_2);
    return rval;}
  static cssEl* cssElCFun_HighlightBG_draw_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((HighlightBG*)ths)->draw((ivCanvas*)(void*)*arg[1], *(ivAllocation*)arg[2]->GetVoidPtrOfType(&TA_ivAllocation));
    return rval;}
  static cssEl* cssElCFun_HighlightBG_print_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((HighlightBG*)ths)->print((ivPrinter*)(void*)*arg[1], *(ivAllocation*)arg[2]->GetVoidPtrOfType(&TA_ivAllocation));
    return rval;}
taPtrList<taivData>*		 TAI_taPtrList_taivData_=NULL;
taPtrList<taivMenuEl>*		 TAI_taPtrList_taivMenuEl_=NULL;
taPtrList<taivMenu>*		 TAI_taPtrList_taivMenu_=NULL;
taPtrList<taivHierSub>*		 TAI_taPtrList_taivHierSub_=NULL;
taPtrList<taivHierMenu>*		 TAI_taPtrList_taivHierMenu_=NULL;
taivArgType*		 TAI_taivArgType=NULL;
taPtrList<taivType>*		 TAI_taPtrList_taivType_=NULL;
taivIntType*		 TAI_taivIntType=NULL;
taivEnumType*		 TAI_taivEnumType=NULL;
taivBoolType*		 TAI_taivBoolType=NULL;
taivClassType*		 TAI_taivClassType=NULL;
taivStringType*		 TAI_taivStringType=NULL;
taivTokenPtrType*		 TAI_taivTokenPtrType=NULL;
taivTypePtr*		 TAI_taivTypePtr=NULL;
taivFilePtrType*		 TAI_taivFilePtrType=NULL;
taivDefaultEdit*		 TAI_taivDefaultEdit=NULL;
taivROMember*		 TAI_taivROMember=NULL;
taivTokenPtrMember*		 TAI_taivTokenPtrMember=NULL;
taivTypePtrMember*		 TAI_taivTypePtrMember=NULL;
taivSubTokenPtrMember*		 TAI_taivSubTokenPtrMember=NULL;
taivMemberDefPtrMember*		 TAI_taivMemberDefPtrMember=NULL;
taivFunPtrMember*		 TAI_taivFunPtrMember=NULL;
taivCondEditMember*		 TAI_taivCondEditMember=NULL;
taivTDefaultMember*		 TAI_taivTDefaultMember=NULL;
taivDefaultToken*		 TAI_taivDefaultToken=NULL;
taivButtonMethod*		 TAI_taivButtonMethod=NULL;
taivMenuMethod*		 TAI_taivMenuMethod=NULL;
taivMenuButtonMethod*		 TAI_taivMenuButtonMethod=NULL;
taivStreamArgType*		 TAI_taivStreamArgType=NULL;
taivBoolArgType*		 TAI_taivBoolArgType=NULL;
taivTokenPtrArgType*		 TAI_taivTokenPtrArgType=NULL;
taivTypePtrArgType*		 TAI_taivTypePtrArgType=NULL;
taivMemberPtrArgType*		 TAI_taivMemberPtrArgType=NULL;
taivMethodPtrArgType*		 TAI_taivMethodPtrArgType=NULL;
taPtrList<gpivList_ElData>*		 TAI_taPtrList_gpivList_ElData_=NULL;
gpivListEdit*		 TAI_gpivListEdit=NULL;
gpivGroupEdit*		 TAI_gpivGroupEdit=NULL;
gpivArrayEdit*		 TAI_gpivArrayEdit=NULL;
gpivListType*		 TAI_gpivListType=NULL;
gpivGroupType*		 TAI_gpivGroupType=NULL;
gpivArray_Type*		 TAI_gpivArray_Type=NULL;
taivROListMember*		 TAI_taivROListMember=NULL;
taivROGroupMember*		 TAI_taivROGroupMember=NULL;
taivROArrayMember*		 TAI_taivROArrayMember=NULL;
gpivDefaultEl*		 TAI_gpivDefaultEl=NULL;
gpivLinkGP*		 TAI_gpivLinkGP=NULL;
gpivLinkList*		 TAI_gpivLinkList=NULL;
gpivFromGpTokenPtrMember*		 TAI_gpivFromGpTokenPtrMember=NULL;
gpivTAPtrArgType*		 TAI_gpivTAPtrArgType=NULL;
gpivInObjArgType*		 TAI_gpivInObjArgType=NULL;
gpivFromGpArgType*		 TAI_gpivFromGpArgType=NULL;
SelectEditConfig*		 TAI_SelectEditConfig=NULL;
gpivSelectEdit*		 TAI_gpivSelectEdit=NULL;

// Type Data

static MethodArgs_data TA_taBase_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_taBase_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_taBase_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_taBase_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","0"},
  {&TA_TAPtr,NULL,"par_stop","0"},
  NULL};
static MethodArgs_data TA_taBase_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_taBase_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"type","0"},
  NULL};
static MethodArgs_data TA_taBase_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taBase_GetEnumString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_taBase_GetEnumVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_taBase_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  NULL};
static MethodArgs_data TA_taBase_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taBase_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taBase_Edit_MethArgs[]={
  {&TA_bool,NULL,"wait","false"},
  NULL};
static MethodArgs_data TA_taBase_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_taBase_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_taBase_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taBase_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taBase_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taBase_CallFun_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fun_name",""},
  NULL};
static MethodDef_data TA_taBase_MethodDef[]={
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_taBase_UnSafeCopy_stub,TA_taBase_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_taBase_CastCopyTo_stub,TA_taBase_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    1,1,-1,0,NULL,cssElCFun_taBase_GetOwner_stub,TA_taBase_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_taBase_GetPath_stub,TA_taBase_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_taBase_FindFromPath_stub,TA_taBase_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    0,2,0,0,NULL,cssElCFun_taBase_New_stub,TA_taBase_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_taBase_UpdateAfterEdit_stub,NULL},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_taBase_InheritsFrom_stub,TA_taBase_InheritsFrom_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","","",
    0,2,-1,0,NULL,cssElCFun_taBase_GetEnumString_stub,TA_taBase_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","","",
    0,2,1,0,NULL,cssElCFun_taBase_GetEnumVal_stub,TA_taBase_GetEnumVal_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taBase_Load_stub,TA_taBase_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_taBase_Save_stub,TA_taBase_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_taBase_SaveAs_stub,TA_taBase_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object NO_SCRIPT ","",
    0,1,0,0,NULL,cssElCFun_taBase_Edit_stub,TA_taBase_Edit_MethArgs},
  {&TA_bool,NULL,"CloseEdit"," close any open edit dialogs for this object","","",
    0,0,-1,0,NULL,cssElCFun_taBase_CloseEdit_stub,NULL},
  {&TA_void,NULL,"Close"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) ","",
    0,0,-1,0,NULL,cssElCFun_taBase_Close_stub,NULL},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taBase_CopyFrom_stub,TA_taBase_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taBase_CopyTo_stub,TA_taBase_CopyTo_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_taBase_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taBase_ChangeMyType_stub,TA_taBase_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing in a select edit dialog -- if already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_taBase_SelectForEdit_stub,TA_taBase_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog -- if already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_taBase_SelectFunForEdit_stub,TA_taBase_SelectFunForEdit_MethArgs},
  {&TA_void,NULL,"Help"," get help on using this object","MENU ","",
    0,0,-1,0,NULL,cssElCFun_taBase_Help_stub,NULL},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","","",
    0,1,-1,0,NULL,cssElCFun_taBase_CallFun_stub,TA_taBase_CallFun_MethArgs},
  NULL};
static MethodArgs_data TA_taString_prepend_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_index_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_contains_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_matches_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"pos"," 0"},
  NULL};
static MethodArgs_data TA_taString_freq_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_at_MethArgs[]={
  {&TA_int,NULL,"pos",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taString_before_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_through_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_from_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_after_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_del_MethArgs[]={
  {&TA_int,NULL,"pos",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taString_remove_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_gsub_MethArgs[]={
  {&TA_const_char_ptr,NULL,"pat",""},
  {&TA_const_char_ptr,NULL,"repl",""},
  NULL};
static MethodArgs_data TA_taString_elem_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taString_alloc_MethArgs[]={
  {&TA_int,NULL,"newsize",""},
  NULL};
static MethodArgs_data TA_taString_error_MethArgs[]={
  {&TA_const_char_ptr,NULL,"msg",""},
  NULL};
static MethodDef_data TA_taString_MethodDef[]={
  {&TA_const_char_ptr,NULL,"chars"," these are strangely missing in the original	","","",
    0,0,-1,0,NULL,cssElCFun_taString_chars_stub,NULL},
  {&TA_void,NULL,"prepend"," add to beginning of string","","",
    3,1,-1,0,NULL,cssElCFun_taString_prepend_stub,TA_taString_prepend_MethArgs},
  {&TA_int,NULL,"index"," return position of target in string or -1 for failure","","",
    3,2,1,0,NULL,cssElCFun_taString_index_stub,TA_taString_index_MethArgs},
  {&TA_int,NULL,"contains"," return 1 if target appears anywhere after position pos  return 1 if target appears anywhere in string","","",
    7,1,-1,0,NULL,cssElCFun_taString_contains_stub,TA_taString_contains_MethArgs},
  {&TA_int,NULL,"matches"," return 1 if target appears at position pos in String; else 0","","",
    3,2,1,0,NULL,cssElCFun_taString_matches_stub,TA_taString_matches_MethArgs},
  {&TA_int,NULL,"freq"," return number of occurences of target in String","","",
    3,1,-1,0,NULL,cssElCFun_taString_freq_stub,TA_taString_freq_MethArgs},
  {&TA_taSubString,NULL,"at"," substring at position for length","","",
    4,2,-1,0,NULL,cssElCFun_taString_at_stub,TA_taString_at_MethArgs},
  {&TA_taSubString,NULL,"before"," substring before (not including) target string","","",
    4,2,1,0,NULL,cssElCFun_taString_before_stub,TA_taString_before_MethArgs},
  {&TA_taSubString,NULL,"through"," substring through (including) target string","","",
    4,2,1,0,NULL,cssElCFun_taString_through_stub,TA_taString_through_MethArgs},
  {&TA_taSubString,NULL,"from"," substring from (including) target string","","",
    4,2,1,0,NULL,cssElCFun_taString_from_stub,TA_taString_from_MethArgs},
  {&TA_taSubString,NULL,"after"," substring after (not including) target string","","",
    4,2,1,0,NULL,cssElCFun_taString_after_stub,TA_taString_after_MethArgs},
  {&TA_void,NULL,"del"," delete len chars starting at pos","","",
    4,2,-1,0,NULL,cssElCFun_taString_del_stub,TA_taString_del_MethArgs},
  {&TA_void,NULL,"remove"," remove target string from string","","",
    0,2,1,0,NULL,cssElCFun_taString_remove_stub,TA_taString_remove_MethArgs},
  {&TA_int,NULL,"gsub"," global substitution: substitute all occurrences of pat with repl","","",
    3,2,-1,0,NULL,cssElCFun_taString_gsub_stub,TA_taString_gsub_MethArgs},
  {&TA_void,NULL,"reverse"," reverse order of string","","",
    0,0,-1,0,NULL,cssElCFun_taString_reverse_stub,NULL},
  {&TA_void,NULL,"upcase"," convert all letters to upper case","","",
    0,0,-1,0,NULL,cssElCFun_taString_upcase_stub,NULL},
  {&TA_void,NULL,"downcase"," convert all letters to lower case","","",
    0,0,-1,0,NULL,cssElCFun_taString_downcase_stub,NULL},
  {&TA_void,NULL,"capitalize"," capitalize the first letter of each word","","",
    0,0,-1,0,NULL,cssElCFun_taString_capitalize_stub,NULL},
  {&TA_char,NULL,"elem"," get the character at index i","","",
    0,1,-1,0,NULL,cssElCFun_taString_elem_stub,TA_taString_elem_MethArgs},
  {&TA_char,NULL,"firstchar"," get the first character","","",
    0,0,-1,0,NULL,cssElCFun_taString_firstchar_stub,NULL},
  {&TA_char,NULL,"lastchar"," get the last character","","",
    0,0,-1,0,NULL,cssElCFun_taString_lastchar_stub,NULL},
  {&TA_unsigned_int,NULL,"length"," how many characters in the string","","",
    0,0,-1,0,NULL,cssElCFun_taString_length_stub,NULL},
  {&TA_int,NULL,"empty"," true if the string is empty","","",
    0,0,-1,0,NULL,cssElCFun_taString_empty_stub,NULL},
  {&TA_void,NULL,"alloc"," preallocate some space for String","","",
    0,1,-1,0,NULL,cssElCFun_taString_alloc_stub,TA_taString_alloc_MethArgs},
  {&TA_int,NULL,"allocation"," report current allocation (not length!)","","",
    0,0,-1,0,NULL,cssElCFun_taString_allocation_stub,NULL},
  {&TA_void,NULL,"error","","","",
    0,1,-1,0,NULL,cssElCFun_taString_error_stub,TA_taString_error_MethArgs},
  {&TA_int,NULL,"OK"," check if the string is allocated properly, etc.","","",
    0,0,-1,0,NULL,cssElCFun_taString_OK_stub,NULL},
  NULL};
static MethodArgs_data TA_taSubString_contains_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodDef_data TA_taSubString_MethodDef[]={
  {&TA_int,NULL,"contains"," return 1 if target matches entire SubString","","",
    3,1,-1,0,NULL,cssElCFun_taSubString_contains_stub,TA_taSubString_contains_MethArgs},
  {&TA_unsigned_int,NULL,"length","","","",
    0,0,-1,0,NULL,cssElCFun_taSubString_length_stub,NULL},
  {&TA_int,NULL,"empty","","","",
    0,0,-1,0,NULL,cssElCFun_taSubString_empty_stub,NULL},
  {&TA_const_char_ptr,NULL,"chars","","","",
    0,0,-1,0,NULL,cssElCFun_taSubString_chars_stub,NULL},
  {&TA_int,NULL,"OK","","","",
    0,0,-1,0,NULL,cssElCFun_taSubString_OK_stub,NULL},
  NULL};
static EnumDef_data TA__Ios_Fmtflags_EnumDef[]={
  {"boolalpha","","",1},
  {"dec","","",2},
  {"fixed","","",4},
  {"hex","","",8},
  {"internal","","",16},
  {"left","","",32},
  {"oct","","",64},
  {"right","","",128},
  {"scientific","","",256},
  {"showbase","","",512},
  {"showpoint","","",1024},
  {"showpos","","",2048},
  {"skipws","","",4096},
  {"unitbuf","","",8192},
  {"uppercase","","",16384},
  {"adjustfield","","",0},
  {"b0","","",1},
  {"basefield","","",4},
  {"a","","",5},
  {"floatfield","","",260},
  NULL};
static EnumDef_data TA__Ios_Openmode_EnumDef[]={
  {"app","","",1},
  {"ate","","",2},
  {"binary","","",4},
  {"in","","",8},
  {"out","","",16},
  {"trunc","","",32},
  NULL};
static EnumDef_data TA__Ios_Iostate_EnumDef[]={
  {"badbit","","",1},
  {"eofbit","","",2},
  {"failbit","","",4},
  {"goodbit","","",0},
  NULL};
static EnumDef_data TA__Ios_Seekdir_EnumDef[]={
  {"beg","","",0},
  {"cur"," 1","",1},
  {"end"," 2","",2},
  NULL};
static EnumDef_data TA_ios_fmtflags[]={
  {"boolalpha","","",1},
  {"dec","","",2},
  {"fixed","","",4},
  {"hex","","",8},
  {"internal","","",16},
  {"left","","",32},
  {"oct","","",64},
  {"right","","",128},
  {"scientific","","",256},
  {"showbase","","",512},
  {"showpoint","","",1024},
  {"showpos","","",2048},
  {"skipws","","",4096},
  {"unitbuf","","",8192},
  {"uppercase","","",16384},
  {"adjustfield","","",0},
  {"b0","","",1},
  {"basefield","","",4},
  {"a","","",5},
  {"floatfield","","",260},
  NULL};
static EnumDef_data TA_ios_iostate[]={
  {"badbit","","",1},
  {"eofbit","","",2},
  {"failbit","","",4},
  {"goodbit","","",0},
  NULL};
static EnumDef_data TA_ios_openmode[]={
  {"app","","",1},
  {"ate","","",2},
  {"binary","","",4},
  {"in","","",8},
  {"out","","",16},
  {"trunc","","",32},
  NULL};
static EnumDef_data TA_ios_seekdir[]={
  {"beg","","",0},
  {"cur"," 1","",1},
  {"end"," 2","",2},
  NULL};
static MethodArgs_data TA_ios_setf_MethArgs[]={
  {NULL,"::fmtflags","val",""},
  NULL};
static MethodArgs_data TA_ios_unsetf_MethArgs[]={
  {NULL,"::fmtflags","mask",""},
  NULL};
static MethodArgs_data TA_ios_tie_MethArgs[]={
  {&TA_ostream_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_ios_precision_MethArgs[]={
  {&TA_int,NULL,"newp",""},
  NULL};
static MethodArgs_data TA_ios_width_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_ios_clear_MethArgs[]={
  {NULL,"::iostate","state"," 0"},
  NULL};
static MethodArgs_data TA_ios_setstate_MethArgs[]={
  {NULL,"::iostate","flag",""},
  NULL};
static MethodArgs_data TA_ios_pword_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodArgs_data TA_ios_iword_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodDef_data TA_ios_MethodDef[]={
  {&TA__Ios_Fmtflags,NULL,"flags","","","",
    0,0,-1,0,NULL,cssElCFun_ios_flags_stub,NULL},
  {&TA__Ios_Fmtflags,NULL,"setf","","","",
    0,1,-1,0,NULL,cssElCFun_ios_setf_stub,TA_ios_setf_MethArgs},
  {&TA_void,NULL,"unsetf","","","",
    0,1,-1,0,NULL,cssElCFun_ios_unsetf_stub,TA_ios_unsetf_MethArgs},
  {&TA_ostream_ptr,NULL,"tie","","","",
    1,1,-1,0,NULL,cssElCFun_ios_tie_stub,TA_ios_tie_MethArgs},
  {&TA_int,NULL,"precision","","","",
    1,1,-1,0,NULL,cssElCFun_ios_precision_stub,TA_ios_precision_MethArgs},
  {&TA_int,NULL,"width","","","",
    1,1,-1,0,NULL,cssElCFun_ios_width_stub,TA_ios_width_MethArgs},
  {&TA_void,NULL,"clear","","","",
    0,1,0,0,NULL,cssElCFun_ios_clear_stub,TA_ios_clear_MethArgs},
  {&TA_void,NULL,"setstate","","","",
    0,1,-1,0,NULL,cssElCFun_ios_setstate_stub,TA_ios_setstate_MethArgs},
  {&TA_int,NULL,"good","","","",
    0,0,-1,0,NULL,cssElCFun_ios_good_stub,NULL},
  {&TA_int,NULL,"eof","","","",
    0,0,-1,0,NULL,cssElCFun_ios_eof_stub,NULL},
  {&TA_int,NULL,"fail","","","",
    0,0,-1,0,NULL,cssElCFun_ios_fail_stub,NULL},
  {&TA_int,NULL,"bad","","","",
    0,0,-1,0,NULL,cssElCFun_ios_bad_stub,NULL},
  {&TA_void_ptr_ref,NULL,"pword","","","",
    0,1,-1,0,NULL,cssElCFun_ios_pword_stub,TA_ios_pword_MethArgs},
  {&TA_long_ref,NULL,"iword","","","",
    0,1,-1,0,NULL,cssElCFun_ios_iword_stub,TA_ios_iword_MethArgs},
  NULL};
static MethodArgs_data TA_ostream_put_MethArgs[]={
  {&TA_char,NULL,"c",""},
  NULL};
static MethodArgs_data TA_ostream_write_MethArgs[]={
  {&TA_const_char_ptr,NULL,"s",""},
  {&TA_streamsize,NULL,"n",""},
  NULL};
static MethodArgs_data TA_ostream_seekp_MethArgs[]={
  {&TA_streamoff,NULL,"off",""},
  {NULL,"ios::seekdir","dir",""},
  NULL};
static MethodDef_data TA_ostream_MethodDef[]={
  {&TA_ostream_ref,NULL,"flush","","","",
    0,0,-1,0,NULL,cssElCFun_ostream_flush_stub,NULL},
  {&TA_ostream_ref,NULL,"put","","","",
    0,1,-1,0,NULL,cssElCFun_ostream_put_stub,TA_ostream_put_MethArgs},
  {&TA_ostream_ref,NULL,"write","","","",
    0,2,-1,0,NULL,cssElCFun_ostream_write_stub,TA_ostream_write_MethArgs},
  {&TA_ostream_ref,NULL,"seekp","","","",
    0,2,-1,0,NULL,cssElCFun_ostream_seekp_stub,TA_ostream_seekp_MethArgs},
  {&TA_streampos,NULL,"tellp","","","",
    0,0,-1,0,NULL,cssElCFun_ostream_tellp_stub,NULL},
  NULL};
static MethodArgs_data TA_istream_getline_MethArgs[]={
  {&TA_char_ptr,NULL,"ptr",""},
  {&TA_int,NULL,"len",""},
  {&TA_char,NULL,"delim"," '\n'"},
  NULL};
static MethodArgs_data TA_istream_read_MethArgs[]={
  {&TA_char_ptr,NULL,"ptr",""},
  {&TA_streamsize,NULL,"n",""},
  NULL};
static MethodArgs_data TA_istream_ignore_MethArgs[]={
  {&TA_int,NULL,"n","1"},
  {&TA_int,NULL,"delim"," (-1)"},
  NULL};
static MethodArgs_data TA_istream_seekg_MethArgs[]={
  {&TA_streamoff,NULL,"off",""},
  {NULL,"ios::seekdir","dir",""},
  NULL};
static MethodArgs_data TA_istream_putback_MethArgs[]={
  {&TA_char,NULL,"ch",""},
  NULL};
static MethodDef_data TA_istream_MethodDef[]={
  {&TA_istream_ref,NULL,"getline","","","",
    0,3,2,0,NULL,cssElCFun_istream_getline_stub,TA_istream_getline_MethArgs},
  {&TA_istream_ref,NULL,"read","","","",
    0,2,-1,0,NULL,cssElCFun_istream_read_stub,TA_istream_read_MethArgs},
  {&TA_int,NULL,"get","","","",
    0,0,-1,0,NULL,cssElCFun_istream_get_stub,NULL},
  {&TA_int,NULL,"peek","","","",
    0,0,-1,0,NULL,cssElCFun_istream_peek_stub,NULL},
  {&TA_istream_ref,NULL,"ignore","","","",
    0,2,0,0,NULL,cssElCFun_istream_ignore_stub,TA_istream_ignore_MethArgs},
  {&TA_int,NULL,"sync","","","",
    0,0,-1,0,NULL,cssElCFun_istream_sync_stub,NULL},
  {&TA_istream_ref,NULL,"seekg","","","",
    0,2,-1,0,NULL,cssElCFun_istream_seekg_stub,TA_istream_seekg_MethArgs},
  {&TA_streampos,NULL,"tellg","","","",
    0,0,-1,0,NULL,cssElCFun_istream_tellg_stub,NULL},
  {&TA_istream_ref,NULL,"putback","","","",
    0,1,-1,0,NULL,cssElCFun_istream_putback_stub,TA_istream_putback_MethArgs},
  {&TA_istream_ref,NULL,"unget","","","",
    0,0,-1,0,NULL,cssElCFun_istream_unget_stub,NULL},
  NULL};
static MethodArgs_data TA_iostream_setf_MethArgs[]={
  {NULL,"ios::fmtflags","val",""},
  NULL};
static MethodArgs_data TA_iostream_unsetf_MethArgs[]={
  {NULL,"ios::fmtflags","mask",""},
  NULL};
static MethodArgs_data TA_iostream_tie_MethArgs[]={
  {&TA_ostream_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_iostream_precision_MethArgs[]={
  {&TA_int,NULL,"newp",""},
  NULL};
static MethodArgs_data TA_iostream_width_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_iostream_clear_MethArgs[]={
  {NULL,"ios::iostate","state"," 0"},
  NULL};
static MethodArgs_data TA_iostream_setstate_MethArgs[]={
  {NULL,"ios::iostate","flag",""},
  NULL};
static MethodArgs_data TA_iostream_pword_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodArgs_data TA_iostream_iword_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodArgs_data TA_iostream_getline_MethArgs[]={
  {&TA_char_ptr,NULL,"ptr",""},
  {&TA_int,NULL,"len",""},
  {&TA_char,NULL,"delim"," '\n'"},
  NULL};
static MethodArgs_data TA_iostream_read_MethArgs[]={
  {&TA_char_ptr,NULL,"ptr",""},
  {&TA_streamsize,NULL,"n",""},
  NULL};
static MethodArgs_data TA_iostream_ignore_MethArgs[]={
  {&TA_int,NULL,"n","1"},
  {&TA_int,NULL,"delim"," (-1)"},
  NULL};
static MethodArgs_data TA_iostream_seekg_MethArgs[]={
  {&TA_streamoff,NULL,"off",""},
  {NULL,"ios::seekdir","dir",""},
  NULL};
static MethodArgs_data TA_iostream_putback_MethArgs[]={
  {&TA_char,NULL,"ch",""},
  NULL};
static MethodArgs_data TA_iostream_put_MethArgs[]={
  {&TA_char,NULL,"c",""},
  NULL};
static MethodArgs_data TA_iostream_write_MethArgs[]={
  {&TA_const_char_ptr,NULL,"s",""},
  {&TA_streamsize,NULL,"n",""},
  NULL};
static MethodArgs_data TA_iostream_seekp_MethArgs[]={
  {&TA_streamoff,NULL,"off",""},
  {NULL,"ios::seekdir","dir",""},
  NULL};
static MethodDef_data TA_iostream_MethodDef[]={
  {&TA__Ios_Fmtflags,NULL,"flags","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_flags_stub,NULL},
  {&TA__Ios_Fmtflags,NULL,"setf","","","",
    0,1,-1,0,NULL,cssElCFun_iostream_setf_stub,TA_iostream_setf_MethArgs},
  {&TA_void,NULL,"unsetf","","","",
    0,1,-1,0,NULL,cssElCFun_iostream_unsetf_stub,TA_iostream_unsetf_MethArgs},
  {&TA_ostream_ptr,NULL,"tie","","","",
    1,1,-1,0,NULL,cssElCFun_iostream_tie_stub,TA_iostream_tie_MethArgs},
  {&TA_int,NULL,"precision","","","",
    1,1,-1,0,NULL,cssElCFun_iostream_precision_stub,TA_iostream_precision_MethArgs},
  {&TA_int,NULL,"width","","","",
    1,1,-1,0,NULL,cssElCFun_iostream_width_stub,TA_iostream_width_MethArgs},
  {&TA_void,NULL,"clear","","","",
    0,1,0,0,NULL,cssElCFun_iostream_clear_stub,TA_iostream_clear_MethArgs},
  {&TA_void,NULL,"setstate","","","",
    0,1,-1,0,NULL,cssElCFun_iostream_setstate_stub,TA_iostream_setstate_MethArgs},
  {&TA_int,NULL,"good","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_good_stub,NULL},
  {&TA_int,NULL,"eof","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_eof_stub,NULL},
  {&TA_int,NULL,"fail","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_fail_stub,NULL},
  {&TA_int,NULL,"bad","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_bad_stub,NULL},
  {&TA_void_ptr_ref,NULL,"pword","","","",
    0,1,-1,0,NULL,cssElCFun_iostream_pword_stub,TA_iostream_pword_MethArgs},
  {&TA_long_ref,NULL,"iword","","","",
    0,1,-1,0,NULL,cssElCFun_iostream_iword_stub,TA_iostream_iword_MethArgs},
  {&TA_istream_ref,NULL,"getline","","","",
    0,3,2,0,NULL,cssElCFun_iostream_getline_stub,TA_iostream_getline_MethArgs},
  {&TA_istream_ref,NULL,"read","","","",
    0,2,-1,0,NULL,cssElCFun_iostream_read_stub,TA_iostream_read_MethArgs},
  {&TA_int,NULL,"get","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_get_stub,NULL},
  {&TA_int,NULL,"peek","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_peek_stub,NULL},
  {&TA_istream_ref,NULL,"ignore","","","",
    0,2,0,0,NULL,cssElCFun_iostream_ignore_stub,TA_iostream_ignore_MethArgs},
  {&TA_int,NULL,"sync","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_sync_stub,NULL},
  {&TA_istream_ref,NULL,"seekg","","","",
    0,2,-1,0,NULL,cssElCFun_iostream_seekg_stub,TA_iostream_seekg_MethArgs},
  {&TA_streampos,NULL,"tellg","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_tellg_stub,NULL},
  {&TA_istream_ref,NULL,"putback","","","",
    0,1,-1,0,NULL,cssElCFun_iostream_putback_stub,TA_iostream_putback_MethArgs},
  {&TA_istream_ref,NULL,"unget","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_unget_stub,NULL},
  {&TA_ostream_ref,NULL,"flush","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_flush_stub,NULL},
  {&TA_ostream_ref,NULL,"put","","","",
    0,1,-1,0,NULL,cssElCFun_iostream_put_stub,TA_iostream_put_MethArgs},
  {&TA_ostream_ref,NULL,"write","","","",
    0,2,-1,0,NULL,cssElCFun_iostream_write_stub,TA_iostream_write_MethArgs},
  {&TA_ostream_ref,NULL,"seekp","","","",
    0,2,-1,0,NULL,cssElCFun_iostream_seekp_stub,TA_iostream_seekp_MethArgs},
  {&TA_streampos,NULL,"tellp","","","",
    0,0,-1,0,NULL,cssElCFun_iostream_tellp_stub,NULL},
  NULL};
static MethodArgs_data TA_ifstream_open_MethArgs[]={
  {&TA_const_char_ptr,NULL,"name",""},
  {NULL,"ios::openmode","mode"," 0x08"},
  NULL};
static MethodDef_data TA_ifstream_MethodDef[]={
  {&TA_void,NULL,"close","","","",
    0,0,-1,0,NULL,cssElCFun_ifstream_close_stub,NULL},
  {&TA_int,NULL,"is_open","","","",
    0,0,-1,0,NULL,cssElCFun_ifstream_is_open_stub,NULL},
  {&TA_void,NULL,"open","","","",
    0,2,1,0,NULL,cssElCFun_ifstream_open_stub,TA_ifstream_open_MethArgs},
  NULL};
static MethodArgs_data TA_ofstream_open_MethArgs[]={
  {&TA_const_char_ptr,NULL,"name",""},
  {NULL,"ios::openmode","mode"," 0x10"},
  NULL};
static MethodDef_data TA_ofstream_MethodDef[]={
  {&TA_void,NULL,"close","","","",
    0,0,-1,0,NULL,cssElCFun_ofstream_close_stub,NULL},
  {&TA_int,NULL,"is_open","","","",
    0,0,-1,0,NULL,cssElCFun_ofstream_is_open_stub,NULL},
  {&TA_void,NULL,"open","","","",
    0,2,1,0,NULL,cssElCFun_ofstream_open_stub,TA_ofstream_open_MethArgs},
  NULL};
static MethodArgs_data TA_fstream_open_MethArgs[]={
  {&TA_const_char_ptr,NULL,"name",""},
  {NULL,"ios::openmode","mode",""},
  NULL};
static MethodDef_data TA_fstream_MethodDef[]={
  {&TA_void,NULL,"close","","","",
    0,0,-1,0,NULL,cssElCFun_fstream_close_stub,NULL},
  {&TA_int,NULL,"is_open","","","",
    0,0,-1,0,NULL,cssElCFun_fstream_is_open_stub,NULL},
  {&TA_void,NULL,"open","","","",
    0,2,-1,0,NULL,cssElCFun_fstream_open_stub,TA_fstream_open_MethArgs},
  NULL};
static int taStrRep::* TA_taStrRep_MbrOff;
static MemberDef_data TA_taStrRep_MemberDef[]={
  {&TA_unsigned_short,NULL,"len"," string length ","","",
    *((ta_memb_ptr*)&(TA_taStrRep_MbrOff=(int taStrRep::*)(&taStrRep::len))),0,NULL,0},
  {&TA_unsigned_short,NULL,"sz"," allocated space","","",
    *((ta_memb_ptr*)&(TA_taStrRep_MbrOff=(int taStrRep::*)(&taStrRep::sz))),0,NULL,0},
  {&TA_char_ary,NULL,"s"," the string starts here ","","",
    *((ta_memb_ptr*)&(TA_taStrRep_MbrOff=(int taStrRep::*)(&taStrRep::s))),0,NULL,0},
  NULL};
static int taPtrList_impl::* TA_taPtrList_impl_MbrOff;
static MemberDef_data TA_taPtrList_impl_MemberDef[]={
  {&TA_void_ptr_ptr,NULL,"el"," the elements themselves","READ_ONLY NO_SAVE HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taPtrList_impl_MbrOff=(int taPtrList_impl::*)(&taPtrList_impl::el))),0,NULL,0},
  {&TA_int,NULL,"alloc_size"," allocation size","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taPtrList_impl_MbrOff=(int taPtrList_impl::*)(&taPtrList_impl::alloc_size))),0,NULL,0},
  {&TA_taHashTable_ptr,NULL,"hash_table"," a hash table (NULL if not used)","READ_ONLY NO_SAVE HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taPtrList_impl_MbrOff=(int taPtrList_impl::*)(&taPtrList_impl::hash_table))),0,NULL,0},
  {&TA_int,NULL,"size"," number of elements in the list","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taPtrList_impl_MbrOff=(int taPtrList_impl::*)(&taPtrList_impl::size))),0,NULL,0},
  {&TA_int,NULL,"Idx"," pass to find if you don't want one","HIDDEN ","",
    (ta_memb_ptr)NULL,1,(void*)(&taPtrList_impl::Idx),0},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Indenter_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_const_char_ptr,NULL,"itm",""},
  {&TA_int,NULL,"no",""},
  {&TA_int,NULL,"prln",""},
  {&TA_int,NULL,"tabs",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Alloc_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_BuildHashTable_MethArgs[]={
  {&TA_int,NULL,"n_buckets",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_RemoveName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Move_MethArgs[]={
  {&TA_int,NULL,"from",""},
  {&TA_int,NULL,"to",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Swap_MethArgs[]={
  {&TA_int,NULL,"pos1",""},
  {&TA_int,NULL,"pos2",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Sort_MethArgs[]={
  {&TA_bool,NULL,"descending","false"},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Sort__MethArgs[]={
  {&TA_bool,NULL,"descending","false"},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Duplicate_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_DupeUniqNameNew_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_DupeUniqNameOld_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Stealth_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_BorrowUnique_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_BorrowUniqNameNew_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_BorrowUniqNameOld_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Copy_Common_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Copy_Duplicate_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Copy_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_List_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm","cout"},
  NULL};
static MethodDef_data TA_taPtrList_impl_MethodDef[]={
  {&TA_ostream_ref,NULL,"Indenter","","","",
    0,5,-1,1,(ta_void_fun)(taPtrList_impl::Indenter),cssElCFun_taPtrList_impl_Indenter_stub,TA_taPtrList_impl_Indenter_MethArgs},
  {&TA_void,NULL,"Alloc"," allocate a list big enough for given number of elements (or current size)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_Alloc_stub,TA_taPtrList_impl_Alloc_MethArgs},
  {&TA_void,NULL,"Reset"," reset the list (remove all elements)","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_impl_Reset_stub,NULL},
  {&TA_bool,NULL,"IsEmpty","","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_impl_IsEmpty_stub,NULL},
  {&TA_void,NULL,"BuildHashTable"," build a hash table with given number of buckets (not dynamic, so make it big)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_BuildHashTable_stub,TA_taPtrList_impl_BuildHashTable_MethArgs},
  {&TA_int,NULL,"Find"," find named element in list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_Find_stub,TA_taPtrList_impl_Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index","","",
    1,1,-1,0,NULL,cssElCFun_taPtrList_impl_Remove_stub,TA_taPtrList_impl_Remove_MethArgs},
  {&TA_bool,NULL,"RemoveName"," remove given named element from list (if on list)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_RemoveName_stub,TA_taPtrList_impl_RemoveName_MethArgs},
  {&TA_bool,NULL,"RemoveLast"," remove the last element on the list","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_impl_RemoveLast_stub,NULL},
  {&TA_void,NULL,"RemoveAll"," Remove all elements on the list","MENU MENU_ON_Edit CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_impl_RemoveAll_stub,NULL},
  {&TA_bool,NULL,"Move"," Move element from (from) to position (to) in list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_impl_Move_stub,TA_taPtrList_impl_Move_MethArgs},
  {&TA_bool,NULL,"Swap"," Swap the elements in the two given positions on the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_impl_Swap_stub,TA_taPtrList_impl_Swap_MethArgs},
  {&TA_void,NULL,"PopAll"," pop all elements off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_impl_PopAll_stub,NULL},
  {&TA_void,NULL,"Permute"," permute the items in the list into a random order","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_impl_Permute_stub,NULL},
  {&TA_void,NULL,"Sort"," sort the items in the list in alpha order according to name (or El_Compare_)","MENU CONFIRM UPDATE_MENUS ","",
    0,1,0,0,NULL,cssElCFun_taPtrList_impl_Sort_stub,TA_taPtrList_impl_Sort_MethArgs},
  {&TA_void,NULL,"Sort_"," implementation of sorting function","","",
    0,1,0,0,NULL,cssElCFun_taPtrList_impl_Sort__stub,TA_taPtrList_impl_Sort__MethArgs},
  {&TA_void,NULL,"UpdateAllIndicies"," update all indicies of elements in list","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_impl_UpdateAllIndicies_stub,NULL},
  {&TA_void,NULL,"Duplicate"," duplicate (clone & add) elements of given list into this one","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_Duplicate_stub,TA_taPtrList_impl_Duplicate_MethArgs},
  {&TA_void,NULL,"DupeUniqNameNew"," duplicate so result is unique names, replacing with new ones where dupl","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_DupeUniqNameNew_stub,TA_taPtrList_impl_DupeUniqNameNew_MethArgs},
  {&TA_void,NULL,"DupeUniqNameOld"," duplicate so result is unique names, using old ones where dupl","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_DupeUniqNameOld_stub,TA_taPtrList_impl_DupeUniqNameOld_MethArgs},
  {&TA_void,NULL,"Stealth_Borrow"," borrow without referencing the borrowed elements (i.e. use AddEl_())","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_Stealth_Borrow_stub,TA_taPtrList_impl_Stealth_Borrow_MethArgs},
  {&TA_void,NULL,"Borrow"," borrow (link) elements of given list into this one","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_Borrow_stub,TA_taPtrList_impl_Borrow_MethArgs},
  {&TA_void,NULL,"BorrowUnique"," borrow so result is unique list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_BorrowUnique_stub,TA_taPtrList_impl_BorrowUnique_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameNew"," borrow so result is unique names, replacing with new ones where dupl","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_BorrowUniqNameNew_stub,TA_taPtrList_impl_BorrowUniqNameNew_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameOld"," borrow so result is unique names, using old ones where dupl","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_BorrowUniqNameOld_stub,TA_taPtrList_impl_BorrowUniqNameOld_MethArgs},
  {&TA_void,NULL,"Copy_Common"," apply copy operator to only those items in common between the two lists","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_Copy_Common_stub,TA_taPtrList_impl_Copy_Common_MethArgs},
  {&TA_void,NULL,"Copy_Duplicate"," apply copy operator to items, use duplicate to add new ones from cp (if necc)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_Copy_Duplicate_stub,TA_taPtrList_impl_Copy_Duplicate_MethArgs},
  {&TA_void,NULL,"Copy_Borrow"," apply copy operator to items, use borrow to add new ones from cp (if necc)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_impl_Copy_Borrow_stub,TA_taPtrList_impl_Copy_Borrow_MethArgs},
  {&TA_void,NULL,"List"," List the group items","","",
    0,1,0,0,NULL,cssElCFun_taPtrList_impl_List_stub,TA_taPtrList_impl_List_MethArgs},
  NULL};
static int taArray_impl::* TA_taArray_impl_MbrOff;
static MemberDef_data TA_taArray_impl_MemberDef[]={
  {&TA_int,NULL,"size"," number of elements in the array","NO_SAVE READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taArray_impl_MbrOff=(int taArray_impl::*)(&taArray_impl::size))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_impl_Alloc_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodArgs_data TA_taArray_impl_EnforceSize_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taArray_impl_Remove_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_impl_Move_MethArgs[]={
  {&TA_int,NULL,"from",""},
  {&TA_int,NULL,"to",""},
  NULL};
static MethodArgs_data TA_taArray_impl_Sort_MethArgs[]={
  {&TA_bool,NULL,"descending","false"},
  NULL};
static MethodArgs_data TA_taArray_impl_ShiftLeft_MethArgs[]={
  {&TA_int,NULL,"nshift",""},
  NULL};
static MethodArgs_data TA_taArray_impl_ShiftLeftPct_MethArgs[]={
  {&TA_float,NULL,"pct",""},
  NULL};
static MethodArgs_data TA_taArray_impl_V_Flip_MethArgs[]={
  {&TA_int,NULL,"width",""},
  NULL};
static MethodArgs_data TA_taArray_impl_Duplicate_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_impl_DupeUnique_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_impl_Copy_Common_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_impl_Copy_Duplicate_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_impl_CopyVals_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"from",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  {&TA_int,NULL,"at","0"},
  NULL};
static MethodArgs_data TA_taArray_impl_List_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm"," cout"},
  NULL};
static MethodArgs_data TA_taArray_impl_InitFromString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"val",""},
  NULL};
static MethodDef_data TA_taArray_impl_MethodDef[]={
  {&TA_void,NULL,"Alloc"," allocate of a given size","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_Alloc_stub,TA_taArray_impl_Alloc_MethArgs},
  {&TA_void,NULL,"Reset"," reset the list to zero size (does not free memory)","","",
    0,0,-1,0,NULL,cssElCFun_taArray_impl_Reset_stub,NULL},
  {&TA_void,NULL,"EnforceSize"," force array to be of given size by inserting blanks or removing","MENU MENU_ON_Edit ","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_EnforceSize_stub,TA_taArray_impl_EnforceSize_MethArgs},
  {&TA_bool,NULL,"Remove"," Remove (n_els) item(s) at idx, returns success","MENU MENU_ON_Edit ","",
    0,2,1,0,NULL,cssElCFun_taArray_impl_Remove_stub,TA_taArray_impl_Remove_MethArgs},
  {&TA_bool,NULL,"Move"," move item from index to index","MENU ","",
    0,2,-1,0,NULL,cssElCFun_taArray_impl_Move_stub,TA_taArray_impl_Move_MethArgs},
  {&TA_void,NULL,"Permute"," permute the items in the list into a random order","MENU ","",
    0,0,-1,0,NULL,cssElCFun_taArray_impl_Permute_stub,NULL},
  {&TA_void,NULL,"Sort"," sort the list in ascending order (or descending if switched)","MENU ","",
    0,1,0,0,NULL,cssElCFun_taArray_impl_Sort_stub,TA_taArray_impl_Sort_MethArgs},
  {&TA_void,NULL,"ShiftLeft"," shift all the elements in the array to the left by given number of items","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_ShiftLeft_stub,TA_taArray_impl_ShiftLeft_MethArgs},
  {&TA_void,NULL,"ShiftLeftPct"," shift the array to the left by given percentage of current size","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_ShiftLeftPct_stub,TA_taArray_impl_ShiftLeftPct_MethArgs},
  {&TA_int,NULL,"V_Flip"," vertically flip the array as if it was arrange in a matrix of width","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_V_Flip_stub,TA_taArray_impl_V_Flip_MethArgs},
  {&TA_void,NULL,"Duplicate"," duplicate the items in the list","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_Duplicate_stub,TA_taArray_impl_Duplicate_MethArgs},
  {&TA_void,NULL,"DupeUnique"," duplicate so result is unique list","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_DupeUnique_stub,TA_taArray_impl_DupeUnique_MethArgs},
  {&TA_void,NULL,"Copy_Common"," copy elements in common","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_Copy_Common_stub,TA_taArray_impl_Copy_Common_MethArgs},
  {&TA_void,NULL,"Copy_Duplicate"," copy elements in common, duplicating (if necc) any extra on cp","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_Copy_Duplicate_stub,TA_taArray_impl_Copy_Duplicate_MethArgs},
  {&TA_void,NULL,"CopyVals"," copy values from other array at given start and end points, and putting at given point in this","","",
    0,4,1,0,NULL,cssElCFun_taArray_impl_CopyVals_stub,TA_taArray_impl_CopyVals_MethArgs},
  {&TA_void,NULL,"List"," print out all of the elements in the array","","",
    0,1,0,0,NULL,cssElCFun_taArray_impl_List_stub,TA_taArray_impl_List_MethArgs},
  {&TA_void,NULL,"InitFromString"," initialize an array from given string (does reset first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_impl_InitFromString_stub,TA_taArray_impl_InitFromString_MethArgs},
  NULL};
static int taHashEl::* TA_taHashEl_MbrOff;
static MemberDef_data TA_taHashEl_MemberDef[]={
  {&TA_taHashVal,NULL,"hash_code"," hash-coded value of name","","",
    *((ta_memb_ptr*)&(TA_taHashEl_MbrOff=(int taHashEl::*)(&taHashEl::hash_code))),0,NULL,0},
  {&TA_int,NULL,"list_idx"," index of item in list","","",
    *((ta_memb_ptr*)&(TA_taHashEl_MbrOff=(int taHashEl::*)(&taHashEl::list_idx))),0,NULL,0},
  NULL};
static MethodDef_data TA_taHashEl_MethodDef[]={
  {&TA_void,NULL,"Initialize","","","",
    0,0,-1,0,NULL,cssElCFun_taHashEl_Initialize_stub,NULL},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Edit_El_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__AddUniqNameOld_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__FindEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__AddEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Add_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__AddUnique_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__AddUniqNameNew_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Insert_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Replace_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__ReplaceEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","old_it",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__RemoveEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__DuplicateEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Link_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__LinkUnique_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__LinkUniqNameNew_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__InsertLink_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__ReplaceLink_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__ReplaceLinkEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","old_it",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Push_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__MoveEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","from",""},
  {NULL,"::taHashEl_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Transfer_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__MoveBefore_MethArgs[]={
  {NULL,"::taHashEl_ptr","trg",""},
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__MoveAfter_MethArgs[]={
  {NULL,"::taHashEl_ptr","trg",""},
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_taHashEl__MethodDef[]={
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there)","","",
    2,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Find_stub,TA_taPtrList_taHashEl__Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove element at given index","","",
    4,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Remove_stub,TA_taPtrList_taHashEl__Remove_MethArgs},
  {NULL,"::taHashEl_ptr","SafeEl"," element at index","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__SafeEl_stub,TA_taPtrList_taHashEl__SafeEl_MethArgs},
  {NULL,"::taHashEl_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__FastEl_stub,TA_taPtrList_taHashEl__FastEl_MethArgs},
  {NULL,"::taHashEl_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Edit_El_stub,TA_taPtrList_taHashEl__Edit_El_MethArgs},
  {NULL,"::taHashEl_ptr","FindName"," find given named element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taPtrList_taHashEl__FindName_stub,TA_taPtrList_taHashEl__FindName_MethArgs},
  {NULL,"::taHashEl_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Pop_stub,NULL},
  {NULL,"::taHashEl_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Peek_stub,NULL},
  {NULL,"::taHashEl_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__AddUniqNameOld_stub,TA_taPtrList_taHashEl__AddUniqNameOld_MethArgs},
  {NULL,"::taHashEl_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__LinkUniqNameOld_stub,TA_taPtrList_taHashEl__LinkUniqNameOld_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__FindEl_stub,TA_taPtrList_taHashEl__FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__AddEl_stub,TA_taPtrList_taHashEl__AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Add_stub,TA_taPtrList_taHashEl__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__AddUnique_stub,TA_taPtrList_taHashEl__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__AddUniqNameNew_stub,TA_taPtrList_taHashEl__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," Add or insert element at idx (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Insert_stub,TA_taPtrList_taHashEl__Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Replace_stub,TA_taPtrList_taHashEl__Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__ReplaceEl_stub,TA_taPtrList_taHashEl__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__ReplaceName_stub,TA_taPtrList_taHashEl__ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__RemoveEl_stub,TA_taPtrList_taHashEl__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__DuplicateEl_stub,TA_taPtrList_taHashEl__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Link_stub,TA_taPtrList_taHashEl__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__LinkUnique_stub,TA_taPtrList_taHashEl__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__LinkUniqNameNew_stub,TA_taPtrList_taHashEl__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taPtrList_taHashEl__InsertLink_stub,TA_taPtrList_taHashEl__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__ReplaceLink_stub,TA_taPtrList_taHashEl__ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__ReplaceLinkEl_stub,TA_taPtrList_taHashEl__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__ReplaceLinkName_stub,TA_taPtrList_taHashEl__ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Push_stub,TA_taPtrList_taHashEl__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__MoveEl_stub,TA_taPtrList_taHashEl__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer item to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashEl__Transfer_stub,TA_taPtrList_taHashEl__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__MoveBefore_stub,TA_taPtrList_taHashEl__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashEl__MoveAfter_stub,TA_taPtrList_taHashEl__MoveAfter_MethArgs},
  NULL};
static MethodArgs_data TA_taHashBucket_Find_MethArgs[]={
  {&TA_taHashVal,NULL,"hash",""},
  NULL};
static MethodArgs_data TA_taHashBucket_FindIndex_MethArgs[]={
  {&TA_taHashVal,NULL,"hash",""},
  NULL};
static MethodDef_data TA_taHashBucket_MethodDef[]={
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there) find index of item (in the bucket) with given hash code value","","",
    5,1,-1,0,NULL,cssElCFun_taHashBucket_Find_stub,TA_taHashBucket_Find_MethArgs},
  {&TA_int,NULL,"FindIndex"," find index of item (list_idx) with given hash code value","","",
    0,1,-1,0,NULL,cssElCFun_taHashBucket_FindIndex_stub,TA_taHashBucket_FindIndex_MethArgs},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Edit_El_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__AddUniqNameOld_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__FindEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__AddEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Add_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__AddUnique_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__AddUniqNameNew_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Insert_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Replace_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__ReplaceEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","old_it",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__RemoveEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__DuplicateEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Link_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__LinkUnique_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__LinkUniqNameNew_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__InsertLink_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__ReplaceLink_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__ReplaceLinkEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","old_it",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Push_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__MoveEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","from",""},
  {NULL,"::taHashBucket_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Transfer_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__MoveBefore_MethArgs[]={
  {NULL,"::taHashBucket_ptr","trg",""},
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__MoveAfter_MethArgs[]={
  {NULL,"::taHashBucket_ptr","trg",""},
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_taHashBucket__MethodDef[]={
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there)","","",
    2,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Find_stub,TA_taPtrList_taHashBucket__Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove element at given index","","",
    4,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Remove_stub,TA_taPtrList_taHashBucket__Remove_MethArgs},
  {NULL,"::taHashBucket_ptr","SafeEl"," element at index","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__SafeEl_stub,TA_taPtrList_taHashBucket__SafeEl_MethArgs},
  {NULL,"::taHashBucket_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__FastEl_stub,TA_taPtrList_taHashBucket__FastEl_MethArgs},
  {NULL,"::taHashBucket_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Edit_El_stub,TA_taPtrList_taHashBucket__Edit_El_MethArgs},
  {NULL,"::taHashBucket_ptr","FindName"," find given named element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taPtrList_taHashBucket__FindName_stub,TA_taPtrList_taHashBucket__FindName_MethArgs},
  {NULL,"::taHashBucket_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Pop_stub,NULL},
  {NULL,"::taHashBucket_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Peek_stub,NULL},
  {NULL,"::taHashBucket_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__AddUniqNameOld_stub,TA_taPtrList_taHashBucket__AddUniqNameOld_MethArgs},
  {NULL,"::taHashBucket_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__LinkUniqNameOld_stub,TA_taPtrList_taHashBucket__LinkUniqNameOld_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__FindEl_stub,TA_taPtrList_taHashBucket__FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__AddEl_stub,TA_taPtrList_taHashBucket__AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Add_stub,TA_taPtrList_taHashBucket__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__AddUnique_stub,TA_taPtrList_taHashBucket__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__AddUniqNameNew_stub,TA_taPtrList_taHashBucket__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," Add or insert element at idx (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Insert_stub,TA_taPtrList_taHashBucket__Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Replace_stub,TA_taPtrList_taHashBucket__Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__ReplaceEl_stub,TA_taPtrList_taHashBucket__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__ReplaceName_stub,TA_taPtrList_taHashBucket__ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__RemoveEl_stub,TA_taPtrList_taHashBucket__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__DuplicateEl_stub,TA_taPtrList_taHashBucket__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Link_stub,TA_taPtrList_taHashBucket__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__LinkUnique_stub,TA_taPtrList_taHashBucket__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__LinkUniqNameNew_stub,TA_taPtrList_taHashBucket__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taPtrList_taHashBucket__InsertLink_stub,TA_taPtrList_taHashBucket__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__ReplaceLink_stub,TA_taPtrList_taHashBucket__ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__ReplaceLinkEl_stub,TA_taPtrList_taHashBucket__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__ReplaceLinkName_stub,TA_taPtrList_taHashBucket__ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Push_stub,TA_taPtrList_taHashBucket__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__MoveEl_stub,TA_taPtrList_taHashBucket__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer item to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__Transfer_stub,TA_taPtrList_taHashBucket__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__MoveBefore_stub,TA_taPtrList_taHashBucket__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_taHashBucket__MoveAfter_stub,TA_taPtrList_taHashBucket__MoveAfter_MethArgs},
  NULL};
static int taHashTable::* TA_taHashTable_MbrOff;
static MemberDef_data TA_taHashTable_MemberDef[]={
  {&TA_int_ary,NULL,"n_bucket_primes"," prime numbers for number of buckets","","",
    (ta_memb_ptr)NULL,1,(void*)(&taHashTable::n_bucket_primes),0},
  {&TA_int,NULL,"n_primes"," number of prime numbers (86)","","",
    (ta_memb_ptr)NULL,1,(void*)(&taHashTable::n_primes),0},
  {&TA_int,NULL,"bucket_max"," maximum size of any bucket ","","",
    *((ta_memb_ptr*)&(TA_taHashTable_MbrOff=(int taHashTable::*)(&taHashTable::bucket_max))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taHashTable_Remove_MethArgs[]={
  {&TA_const_char_ptr,NULL,"string",""},
  NULL};
static MethodArgs_data TA_taHashTable_Add_MethArgs[]={
  {&TA_const_char_ptr,NULL,"string",""},
  {&TA_int,NULL,"index",""},
  NULL};
static MethodArgs_data TA_taHashTable_HashCode_MethArgs[]={
  {&TA_const_char_ptr,NULL,"string",""},
  NULL};
static MethodArgs_data TA_taHashTable_FindIndex_MethArgs[]={
  {&TA_const_char_ptr,NULL,"string",""},
  NULL};
static MethodArgs_data TA_taHashTable_UpdateIndex_MethArgs[]={
  {&TA_const_char_ptr,NULL,"string",""},
  {&TA_int,NULL,"index",""},
  NULL};
static MethodDef_data TA_taHashTable_MethodDef[]={
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove element at given index remove given hash code from table remove given string from table","","",
    8,1,-1,0,NULL,cssElCFun_taHashTable_Remove_stub,TA_taHashTable_Remove_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item add a new item to the hash table","","",
    2,2,-1,0,NULL,cssElCFun_taHashTable_Add_stub,TA_taHashTable_Add_MethArgs},
  {&TA_taHashVal,NULL,"HashCode"," get a hash code value from given string","","",
    0,1,-1,1,(ta_void_fun)(taHashTable::HashCode),cssElCFun_taHashTable_HashCode_stub,TA_taHashTable_HashCode_MethArgs},
  {&TA_int,NULL,"FindIndex"," find index from given hash value (-1 if not found) find index from given string","","",
    1,1,-1,0,NULL,cssElCFun_taHashTable_FindIndex_stub,TA_taHashTable_FindIndex_MethArgs},
  {&TA_bool,NULL,"UpdateIndex"," update index associated with item update index associated with item","","",
    1,2,-1,0,NULL,cssElCFun_taHashTable_UpdateIndex_stub,TA_taHashTable_UpdateIndex_MethArgs},
  {&TA_void,NULL,"InitList_","","","",
    0,0,-1,0,NULL,cssElCFun_taHashTable_InitList__stub,NULL},
  NULL};
static int taPlainArray<taString>::* TA_taPlainArray_taString__MbrOff;
static MemberDef_data TA_taPlainArray_taString__MemberDef[]={
  {NULL,"::taString_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taPlainArray_taString__MbrOff=(int taPlainArray<taString>::*)(&taPlainArray<taString>::el))),0,NULL,0},
  {&TA_taString,NULL,"err"," what is returned when out of range","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taPlainArray_taString__MbrOff=(int taPlainArray<taString>::*)(&taPlainArray<taString>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__Remove_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__Add_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__AddUnique_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__Push_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__Insert_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  {&TA_int,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__Find_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  {&TA_int,NULL,"i","0"},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__RemoveEl_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodDef_data TA_taPlainArray_taString__MethodDef[]={
  {&TA_bool,NULL,"Remove"," Remove (n_els) item(s) at idx, returns success Remove (n_els) item(s) at idx, returns success","MENU MENU_ON_Edit ","",
    2,2,1,0,NULL,cssElCFun_taPlainArray_taString__Remove_stub,TA_taPlainArray_taString__Remove_MethArgs},
  {NULL,"::taString_ref","SafeEl"," the element at the given index","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_taString__SafeEl_stub,TA_taPlainArray_taString__SafeEl_MethArgs},
  {NULL,"::taString_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_taString__FastEl_stub,TA_taPlainArray_taString__FastEl_MethArgs},
  {NULL,"::taString_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_taString__RevEl_stub,TA_taPlainArray_taString__RevEl_MethArgs},
  {&TA_taString,NULL,"Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taPlainArray_taString__Pop_stub,NULL},
  {NULL,"::taString_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taPlainArray_taString__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taPlainArray_taString__Set_stub,TA_taPlainArray_taString__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_taString__Add_stub,TA_taPlainArray_taString__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_taString__AddUnique_stub,TA_taPlainArray_taString__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_taString__Push_stub,TA_taPlainArray_taString__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at idx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taPlainArray_taString__Insert_stub,TA_taPlainArray_taString__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from idx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taPlainArray_taString__Find_stub,TA_taPlainArray_taString__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_taString__RemoveEl_stub,TA_taPlainArray_taString__RemoveEl_MethArgs},
  NULL};
static MethodArgs_data TA_String_PArray_Add_MethArgs[]={
  {&TA_const_char_ptr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_String_PArray_AddUnique_MethArgs[]={
  {&TA_const_char_ptr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_String_PArray_FindContains_MethArgs[]={
  {&TA_const_char_ptr,NULL,"op",""},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodDef_data TA_String_PArray_MethodDef[]={
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    2,1,-1,0,NULL,cssElCFun_String_PArray_Add_stub,TA_String_PArray_Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    2,1,-1,0,NULL,cssElCFun_String_PArray_AddUnique_stub,TA_String_PArray_AddUnique_MethArgs},
  {&TA_int,NULL,"FindContains","","","",
    0,2,1,0,NULL,cssElCFun_String_PArray_FindContains_stub,TA_String_PArray_FindContains_MethArgs},
  NULL};
static int taPlainArray<int>::* TA_taPlainArray_int__MbrOff;
static MemberDef_data TA_taPlainArray_int__MemberDef[]={
  {NULL,"::int_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taPlainArray_int__MbrOff=(int taPlainArray<int>::*)(&taPlainArray<int>::el))),0,NULL,0},
  {&TA_int,NULL,"err"," what is returned when out of range","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taPlainArray_int__MbrOff=(int taPlainArray<int>::*)(&taPlainArray<int>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taPlainArray_int__Remove_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taPlainArray_int__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__Add_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__AddUnique_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__Push_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__Insert_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taPlainArray_int__Find_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"i","0"},
  NULL};
static MethodArgs_data TA_taPlainArray_int__RemoveEl_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodDef_data TA_taPlainArray_int__MethodDef[]={
  {&TA_bool,NULL,"Remove"," Remove (n_els) item(s) at idx, returns success Remove (n_els) item(s) at idx, returns success","MENU MENU_ON_Edit ","",
    2,2,1,0,NULL,cssElCFun_taPlainArray_int__Remove_stub,TA_taPlainArray_int__Remove_MethArgs},
  {NULL,"::int_ref","SafeEl"," the element at the given index","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_int__SafeEl_stub,TA_taPlainArray_int__SafeEl_MethArgs},
  {NULL,"::int_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_int__FastEl_stub,TA_taPlainArray_int__FastEl_MethArgs},
  {NULL,"::int_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_int__RevEl_stub,TA_taPlainArray_int__RevEl_MethArgs},
  {&TA_int,NULL,"Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taPlainArray_int__Pop_stub,NULL},
  {NULL,"::int_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taPlainArray_int__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taPlainArray_int__Set_stub,TA_taPlainArray_int__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_int__Add_stub,TA_taPlainArray_int__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_int__AddUnique_stub,TA_taPlainArray_int__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_int__Push_stub,TA_taPlainArray_int__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at idx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taPlainArray_int__Insert_stub,TA_taPlainArray_int__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from idx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taPlainArray_int__Find_stub,TA_taPlainArray_int__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taPlainArray_int__RemoveEl_stub,TA_taPlainArray_int__RemoveEl_MethArgs},
  NULL};
static EnumDef_data TA_taMisc_ShowMembs[]={
  {"ALL_MEMBS","","",0},
  {"NO_HIDDEN","","",1},
  {"NO_READ_ONLY","","",2},
  {"NO_HID_RO","","",3},
  {"NO_DETAIL","","",4},
  {"NO_HID_DET","","",5},
  {"NO_RO_DET","","",6},
  {"NO_HID_RO_DET","","",7},
  NULL};
static EnumDef_data TA_taMisc_TypeInfo[]={
  {"MEMB_OFFSETS"," display all including member offsets","",0},
  {"ALL_INFO"," display all type information","",1},
  {"NO_OPTIONS"," don't display options","",2},
  {"NO_LISTS"," don't display lists","",3},
  {"NO_OPTIONS_LISTS"," don't display options or lists","",4},
  NULL};
static EnumDef_data TA_taMisc_KeepTokens[]={
  {"Tokens"," keep tokens as specified by the type","",0},
  {"NoTokens"," don't keep any tokens","",1},
  {"ForceTokens"," force to keep all tokens","",2},
  NULL};
static EnumDef_data TA_taMisc_SaveFormat[]={
  {"PLAIN"," dump files are not formatted for easy reading","",0},
  {"PRETTY"," dump files should be more readable by humans","",1},
  NULL};
static EnumDef_data TA_taMisc_LoadVerbosity[]={
  {"QUIET"," don't say anything except errors","",0},
  {"MESSAGES"," display informative messages during load","",1},
  {"TRACE"," and show a trace of objects loaded","",2},
  {"SOURCE"," and show the source of the load as its loaded","",3},
  NULL};
static EnumDef_data TA_taMisc_AutoRevert[]={
  {"AUTO_APPLY"," automatically apply changes before auto-reverting","",0},
  {"AUTO_REVERT"," automatically revert, losing changes","",1},
  {"CONFIRM_REVERT"," put up a confirmatory message before reverting","",2},
  NULL};
static MemberDef_data TA_taMisc_MemberDef[]={
  {&TA_taString,NULL,"version_no"," version number of ta/css","READ_ONLY NO_SAVE SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::version_no),0},
  {&TA_TypeSpace,NULL,"types"," list of all the active types ","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::types),0},
  {&TA_bool,NULL,"in_init"," true if in ta initialization function","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::in_init),0},
  {&TA_bool,NULL,"not_constr"," true if ta types are not yet constructed (or are destructed)","READ_ONLY ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::not_constr),0},
  {&TA_bool,NULL,"iv_active"," if iv has been started up or not","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::iv_active),0},
  {&TA_bool,NULL,"is_loading"," true if currently loading an object","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::is_loading),0},
  {&TA_bool,NULL,"is_saving"," true if currently saving an object","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::is_saving),0},
  {&TA_bool,NULL,"is_duplicating"," true if currently duplicating an object","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::is_duplicating),0},
  {&TA_int,NULL,"dmem_proc"," distributed memory process number (rank in MPI, always 0 for no dmem)","READ_ONLY NO_SAVE SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::dmem_proc),0},
  {&TA_int,NULL,"dmem_nprocs"," distributed memory number of processes (comm_size in MPI, 1 for no dmem)","READ_ONLY NO_SAVE SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::dmem_nprocs),0},
  {&TA_int,NULL,"display_width"," width of shell display (in chars)","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::display_width),0},
  {&TA_int,NULL,"sep_tabs"," number of tabs to separate items by","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::sep_tabs),0},
  {&TA_int,NULL,"max_menu"," maximum number of items in a menu","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::max_menu),0},
  {&TA_int,NULL,"search_depth"," depth recursive find will search for a path object","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::search_depth),0},
  {&TA_int,NULL,"color_scale_size"," number of colors to put in a color scale","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::color_scale_size),0},
  {&TA_int,NULL,"mono_scale_size"," number of monochrome bit-patterns to put in a color scale","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::mono_scale_size),0},
  {&TA_float,NULL,"window_decor_offset_x"," some window managers (e.g., KDE) add an offset to location of windows -- add this amount to x position to compensate","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::window_decor_offset_x),0},
  {&TA_float,NULL,"window_decor_offset_y"," some window managers (e.g., KDE) add an offset to location of windows -- add this amount to y position to compensate","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::window_decor_offset_y),0},
  {&TA_float,NULL,"mswin_scale"," window size scaling parameter for MS Windows ","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::mswin_scale),0},
  {&TA_int,NULL,"jpeg_quality"," jpeg quality for dumping jpeg files (1-100; 85 default)","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::jpeg_quality),0},
  {NULL,"::ShowMembs","show"," what to show in general (eg. css) ","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::show),0},
  {NULL,"::ShowMembs","show_iv"," what to show in interviews (the gui)","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::show_iv),0},
  {NULL,"::TypeInfo","type_info"," what to show when displaying type information","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::type_info),0},
  {NULL,"::KeepTokens","keep_tokens"," default for keeping tokens","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::keep_tokens),0},
  {NULL,"::SaveFormat","save_format"," format to use when saving things (dump files)","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::save_format),0},
  {NULL,"::LoadVerbosity","verbose_load"," report the names of things during loading","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::verbose_load),0},
  {NULL,"::LoadVerbosity","iv_verbose_load"," what to report in the load dialog","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::iv_verbose_load),0},
  {&TA_bool,NULL,"dmem_debug"," turn on debug messages for distributed memory processing","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::dmem_debug),0},
  {&TA_TypeDef_ptr,NULL,"default_scope"," type of object to use to determine if two objects are in the same scope","","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::default_scope),0},
  {&TA_bool,NULL,"auto_edit"," automatic edit dialog after creation?","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::auto_edit),0},
  {NULL,"::AutoRevert","auto_revert"," when dialogs are automatically updated (reverted), what to do about changes?","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::auto_revert),0},
  {&TA_String_PArray,NULL,"include_paths"," paths to be used for finding files","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::include_paths),0},
  {&TA_taString,NULL,"tmp_dir"," location of temporary files","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::tmp_dir),0},
  {&TA_taString,NULL,"compress_cmd"," command to use for compressing files","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::compress_cmd),0},
  {&TA_taString,NULL,"uncompress_cmd"," for uncompressing files","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::uncompress_cmd),0},
  {&TA_taString,NULL,"compress_sfx"," suffix to use for compressing files","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::compress_sfx),0},
  {&TA_taString,NULL,"help_file_tmplt"," template for converting type name into a help file (%t = type name)","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::help_file_tmplt),0},
  {&TA_taString,NULL,"help_cmd"," how to run html browser to get help, %s is entire path to help file","SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::help_cmd),0},
  {&TA_taString,NULL,"LexBuf"," a buffer, contains last thing read by read_ funs","HIDDEN ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::LexBuf),0},
  NULL};
static MethodArgs_data TA_taMisc_Error_MethArgs[]={
  {&TA_const_char_ptr,NULL,"a",""},
  {&TA_const_char_ptr,NULL,"b",""},
  {&TA_const_char_ptr,NULL,"c",""},
  {&TA_const_char_ptr,NULL,"d",""},
  {&TA_const_char_ptr,NULL,"e",""},
  {&TA_const_char_ptr,NULL,"f",""},
  {&TA_const_char_ptr,NULL,"g",""},
  {&TA_const_char_ptr,NULL,"h",""},
  {&TA_const_char_ptr,NULL,"i",""},
  {&TA_const_char_ptr,NULL,"j",""},
  {&TA_const_char_ptr,NULL,"k",""},
  {&TA_const_char_ptr,NULL,"l",""},
  NULL};
static MethodArgs_data TA_taMisc_Choice_MethArgs[]={
  {&TA_const_char_ptr,NULL,"text","Choice"},
  {&TA_const_char_ptr,NULL,"a","Ok"},
  {&TA_const_char_ptr,NULL,"b",""},
  {&TA_const_char_ptr,NULL,"c",""},
  {&TA_const_char_ptr,NULL,"d",""},
  {&TA_const_char_ptr,NULL,"e",""},
  {&TA_const_char_ptr,NULL,"f",""},
  {&TA_const_char_ptr,NULL,"g",""},
  {&TA_const_char_ptr,NULL,"h",""},
  {&TA_const_char_ptr,NULL,"i",""},
  {&TA_const_char_ptr,NULL,"j",""},
  NULL};
static MethodArgs_data TA_taMisc_MallocInfo_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_taMisc_ListAllTokens_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_taMisc_ReplaceAllPtrs_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"obj_typ",""},
  {&TA_void_ptr,NULL,"old_ptr",""},
  {&TA_void_ptr,NULL,"new_ptr",""},
  NULL};
static MethodArgs_data TA_taMisc_ReplaceAllPtrsWithToken_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"obj_typ",""},
  {&TA_void_ptr,NULL,"old_ptr",""},
  NULL};
static MethodArgs_data TA_taMisc_Decode_Signal_MethArgs[]={
  {&TA_int,NULL,"err",""},
  NULL};
static MethodArgs_data TA_taMisc_CharToStrArray_MethArgs[]={
  {&TA_String_PArray_ref,NULL,"sa",""},
  {&TA_const_char_ptr,NULL,"ch",""},
  NULL};
static MethodArgs_data TA_taMisc_StrArrayToChar_MethArgs[]={
  {&TA_const_String_PArray_ref,NULL,"sa",""},
  NULL};
static MethodArgs_data TA_taMisc_SpaceLabel_MethArgs[]={
  {&TA_taString_ref,NULL,"lbl",""},
  NULL};
static MethodArgs_data TA_taMisc_LeadingZeros_MethArgs[]={
  {&TA_int,NULL,"num",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taMisc_FormatValue_MethArgs[]={
  {&TA_float,NULL,"val",""},
  {&TA_int,NULL,"width",""},
  {&TA_int,NULL,"precision",""},
  NULL};
static MethodArgs_data TA_taMisc_StringMaxLen_MethArgs[]={
  {&TA_const_taString_ref,NULL,"str",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taMisc_StringEnforceLen_MethArgs[]={
  {&TA_const_taString_ref,NULL,"str",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taMisc_remove_name_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  NULL};
static MethodArgs_data TA_taMisc_FindFileInclude_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fname",""},
  NULL};
static MethodArgs_data TA_taMisc_skip_white_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_skip_white_noeol_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_word_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_alnum_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_alnum_noeol_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_eol_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_semi_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_lbracket_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_lb_or_semi_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_rbracket_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_rb_or_semi_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_quote_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_quote_semi_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_skip_past_err_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_skip_past_err_rb_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_indent_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_int,NULL,"indent",""},
  {&TA_int,NULL,"tsp","2"},
  NULL};
static MethodArgs_data TA_taMisc_fmt_sep_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_const_taString_ref,NULL,"itm",""},
  {&TA_int,NULL,"no",""},
  {&TA_int,NULL,"indent",""},
  {&TA_int,NULL,"tsp","2"},
  NULL};
static MethodArgs_data TA_taMisc_fancy_list_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_const_taString_ref,NULL,"itm",""},
  {&TA_int,NULL,"no",""},
  {&TA_int,NULL,"prln",""},
  {&TA_int,NULL,"tabs",""},
  NULL};
static MethodDef_data TA_taMisc_MethodDef[]={
  {&TA_void,NULL,"SaveConfig"," save configuration defaults to ~/.taconfig file that is loaded automatically at startup","BUTTON CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_taMisc_SaveConfig_stub,NULL},
  {&TA_void,NULL,"LoadConfig"," load configuration defaults from ~/.taconfig file (which is loaded automatically at startup)","BUTTON CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_taMisc_LoadConfig_stub,NULL},
  {&TA_void,NULL,"Error"," displays error either in a window if iv_active or to stdout","","",
    0,12,1,1,(ta_void_fun)(taMisc::Error),cssElCFun_taMisc_Error_stub,TA_taMisc_Error_MethArgs},
  {&TA_int,NULL,"Choice"," allows user to choose among different options in window if iv_active or stdin/out","","",
    0,11,0,1,(ta_void_fun)(taMisc::Choice),cssElCFun_taMisc_Choice_stub,TA_taMisc_Choice_MethArgs},
  {&TA_void,NULL,"Busy"," puts system in a 'busy' state ","","",
    0,0,-1,1,(ta_void_fun)(taMisc::Busy),cssElCFun_taMisc_Busy_stub,NULL},
  {&TA_void,NULL,"DoneBusy"," when no longer busy, call this function","","",
    0,0,-1,1,(ta_void_fun)(taMisc::DoneBusy),cssElCFun_taMisc_DoneBusy_stub,NULL},
  {&TA_void,NULL,"Initialize"," initialize type system, called in ta_TA.cc","","",
    0,0,-1,1,(ta_void_fun)(taMisc::Initialize),cssElCFun_taMisc_Initialize_stub,NULL},
  {&TA_void,NULL,"MallocInfo"," generate malloc memory statistic information to given stream","","",
    0,1,-1,1,(ta_void_fun)(taMisc::MallocInfo),cssElCFun_taMisc_MallocInfo_stub,TA_taMisc_MallocInfo_MethArgs},
  {&TA_void,NULL,"ListAllTokens"," generate a list and count of all types that keep tokens, with a count of tokens","","",
    0,1,-1,1,(ta_void_fun)(taMisc::ListAllTokens),cssElCFun_taMisc_ListAllTokens_stub,TA_taMisc_ListAllTokens_MethArgs},
  {&TA_int,NULL,"ReplaceAllPtrs"," search through all tokens in all types and replace any pointer to object of type obj_typ address old_ptr with new_ptr","","",
    0,3,-1,1,(ta_void_fun)(taMisc::ReplaceAllPtrs),cssElCFun_taMisc_ReplaceAllPtrs_stub,TA_taMisc_ReplaceAllPtrs_MethArgs},
  {&TA_int,NULL,"ReplaceAllPtrsWithToken"," search through all tokens in all types and replace any pointer to old_ptr with first other token in same scope of same type","","",
    0,2,-1,1,(ta_void_fun)(taMisc::ReplaceAllPtrsWithToken),cssElCFun_taMisc_ReplaceAllPtrsWithToken_stub,TA_taMisc_ReplaceAllPtrsWithToken_MethArgs},
  {&TA_void,NULL,"Decode_Signal"," printout translation of signal on cerr","","",
    0,1,-1,1,(ta_void_fun)(taMisc::Decode_Signal),cssElCFun_taMisc_Decode_Signal_stub,TA_taMisc_Decode_Signal_MethArgs},
  {&TA_void,NULL,"CharToStrArray"," convert space-delimeted character string to a string array","","",
    0,2,-1,1,(ta_void_fun)(taMisc::CharToStrArray),cssElCFun_taMisc_CharToStrArray_stub,TA_taMisc_CharToStrArray_MethArgs},
  {&TA_taString,NULL,"StrArrayToChar"," convert a string array to a space-delimeted character string ","","",
    0,1,-1,1,(ta_void_fun)(taMisc::StrArrayToChar),cssElCFun_taMisc_StrArrayToChar_stub,TA_taMisc_StrArrayToChar_MethArgs},
  {&TA_void,NULL,"SpaceLabel"," add spaces to a label in place of _'s and upper-lower transitions","","",
    0,1,-1,1,(ta_void_fun)(taMisc::SpaceLabel),cssElCFun_taMisc_SpaceLabel_stub,TA_taMisc_SpaceLabel_MethArgs},
  {&TA_taString,NULL,"LeadingZeros"," returns num converted to a string with leading zeros up to len","","",
    0,2,-1,1,(ta_void_fun)(taMisc::LeadingZeros),cssElCFun_taMisc_LeadingZeros_stub,TA_taMisc_LeadingZeros_MethArgs},
  {&TA_taString,NULL,"FormatValue"," format output of value according to width and precision","","",
    0,3,-1,1,(ta_void_fun)(taMisc::FormatValue),cssElCFun_taMisc_FormatValue_stub,TA_taMisc_FormatValue_MethArgs},
  {&TA_taString,NULL,"StringMaxLen"," returns string up to maximum length given (enforces string to be len or less in length)","","",
    0,2,-1,1,(ta_void_fun)(taMisc::StringMaxLen),cssElCFun_taMisc_StringMaxLen_stub,TA_taMisc_StringMaxLen_MethArgs},
  {&TA_taString,NULL,"StringEnforceLen"," returns string enforced to given length (spaces added to make length)","","",
    0,2,-1,1,(ta_void_fun)(taMisc::StringEnforceLen),cssElCFun_taMisc_StringEnforceLen_stub,TA_taMisc_StringEnforceLen_MethArgs},
  {&TA_taString,NULL,"remove_name","","","",
    0,1,-1,1,(ta_void_fun)(taMisc::remove_name),cssElCFun_taMisc_remove_name_stub,TA_taMisc_remove_name_MethArgs},
  {&TA_taString,NULL,"FindFileInclude"," try to find file fnm in one of the include paths -- returns complete path to file","","",
    0,1,-1,1,(ta_void_fun)(taMisc::FindFileInclude),cssElCFun_taMisc_FindFileInclude_stub,TA_taMisc_FindFileInclude_MethArgs},
  {&TA_int,NULL,"skip_white","","","",
    0,2,1,1,(ta_void_fun)(taMisc::skip_white),cssElCFun_taMisc_skip_white_stub,TA_taMisc_skip_white_MethArgs},
  {&TA_int,NULL,"skip_white_noeol"," don't skip end-of-line","","",
    0,2,1,1,(ta_void_fun)(taMisc::skip_white_noeol),cssElCFun_taMisc_skip_white_noeol_stub,TA_taMisc_skip_white_noeol_MethArgs},
  {&TA_int,NULL,"read_word","","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_word),cssElCFun_taMisc_read_word_stub,TA_taMisc_read_word_MethArgs},
  {&TA_int,NULL,"read_alnum"," alpha-numeric","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_alnum),cssElCFun_taMisc_read_alnum_stub,TA_taMisc_read_alnum_MethArgs},
  {&TA_int,NULL,"read_alnum_noeol","","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_alnum_noeol),cssElCFun_taMisc_read_alnum_noeol_stub,TA_taMisc_read_alnum_noeol_MethArgs},
  {&TA_int,NULL,"read_till_eol","","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_till_eol),cssElCFun_taMisc_read_till_eol_stub,TA_taMisc_read_till_eol_MethArgs},
  {&TA_int,NULL,"read_till_semi","","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_till_semi),cssElCFun_taMisc_read_till_semi_stub,TA_taMisc_read_till_semi_MethArgs},
  {&TA_int,NULL,"read_till_lbracket","","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_till_lbracket),cssElCFun_taMisc_read_till_lbracket_stub,TA_taMisc_read_till_lbracket_MethArgs},
  {&TA_int,NULL,"read_till_lb_or_semi","","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_till_lb_or_semi),cssElCFun_taMisc_read_till_lb_or_semi_stub,TA_taMisc_read_till_lb_or_semi_MethArgs},
  {&TA_int,NULL,"read_till_rbracket","","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_till_rbracket),cssElCFun_taMisc_read_till_rbracket_stub,TA_taMisc_read_till_rbracket_MethArgs},
  {&TA_int,NULL,"read_till_rb_or_semi","","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_till_rb_or_semi),cssElCFun_taMisc_read_till_rb_or_semi_stub,TA_taMisc_read_till_rb_or_semi_MethArgs},
  {&TA_int,NULL,"read_till_quote"," dbl quote ","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_till_quote),cssElCFun_taMisc_read_till_quote_stub,TA_taMisc_read_till_quote_MethArgs},
  {&TA_int,NULL,"read_till_quote_semi"," dbl quote followed by a semi","","",
    0,2,1,1,(ta_void_fun)(taMisc::read_till_quote_semi),cssElCFun_taMisc_read_till_quote_semi_stub,TA_taMisc_read_till_quote_semi_MethArgs},
  {&TA_int,NULL,"skip_past_err"," skips to next rb or semi (robust)","","",
    0,2,1,1,(ta_void_fun)(taMisc::skip_past_err),cssElCFun_taMisc_skip_past_err_stub,TA_taMisc_skip_past_err_MethArgs},
  {&TA_int,NULL,"skip_past_err_rb"," skips to next rbracket (robust)","","",
    0,2,1,1,(ta_void_fun)(taMisc::skip_past_err_rb),cssElCFun_taMisc_skip_past_err_rb_stub,TA_taMisc_skip_past_err_rb_MethArgs},
  {&TA_ostream_ref,NULL,"indent","","","",
    0,3,2,1,(ta_void_fun)(taMisc::indent),cssElCFun_taMisc_indent_stub,TA_taMisc_indent_MethArgs},
  {&TA_ostream_ref,NULL,"fmt_sep","","","",
    0,5,4,1,(ta_void_fun)(taMisc::fmt_sep),cssElCFun_taMisc_fmt_sep_stub,TA_taMisc_fmt_sep_MethArgs},
  {&TA_ostream_ref,NULL,"fancy_list","","","",
    0,5,-1,1,(ta_void_fun)(taMisc::fancy_list),cssElCFun_taMisc_fancy_list_stub,TA_taMisc_fancy_list_MethArgs},
  NULL};
static int taivGetFile::* TA_taivGetFile_MbrOff;
static MemberDef_data TA_taivGetFile_MemberDef[]={
  {&TA_int,NULL,"buf_size"," size of the buffer for input operations","","",
    (ta_memb_ptr)NULL,1,(void*)(&taivGetFile::buf_size),0},
  {&TA_taString,NULL,"last_fname"," last file name processed","","",
    (ta_memb_ptr)NULL,1,(void*)(&taivGetFile::last_fname),0},
  {&TA_taString,NULL,"last_dir"," last directory name processed","","",
    (ta_memb_ptr)NULL,1,(void*)(&taivGetFile::last_dir),0},
  {&TA_taString,NULL,"filter","","","",
    *((ta_memb_ptr*)&(TA_taivGetFile_MbrOff=(int taivGetFile::*)(&taivGetFile::filter))),0,NULL,0},
  {&TA_taString,NULL,"dir","","","",
    *((ta_memb_ptr*)&(TA_taivGetFile_MbrOff=(int taivGetFile::*)(&taivGetFile::dir))),0,NULL,0},
  {&TA_taString,NULL,"fname","","","",
    *((ta_memb_ptr*)&(TA_taivGetFile_MbrOff=(int taivGetFile::*)(&taivGetFile::fname))),0,NULL,0},
  {&TA_bool,NULL,"compress"," true if file should be auto-compressed","","",
    *((ta_memb_ptr*)&(TA_taivGetFile_MbrOff=(int taivGetFile::*)(&taivGetFile::compress))),0,NULL,0},
  {&TA_bool,NULL,"select_only"," file is to be selected only (not opened)","","",
    *((ta_memb_ptr*)&(TA_taivGetFile_MbrOff=(int taivGetFile::*)(&taivGetFile::select_only))),0,NULL,0},
  {&TA_ifstream_ptr,NULL,"ifstrm"," ","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taivGetFile_MbrOff=(int taivGetFile::*)(&taivGetFile::ifstrm))),0,NULL,0},
  {&TA_ofstream_ptr,NULL,"ofstrm"," ","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taivGetFile_MbrOff=(int taivGetFile::*)(&taivGetFile::ofstrm))),0,NULL,0},
  {&TA_fstream_ptr,NULL,"fstrm"," ","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taivGetFile_MbrOff=(int taivGetFile::*)(&taivGetFile::fstrm))),0,NULL,0},
  {&TA_istream_ptr,NULL,"istrm"," ","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taivGetFile_MbrOff=(int taivGetFile::*)(&taivGetFile::istrm))),0,NULL,0},
  {&TA_ostream_ptr,NULL,"ostrm"," ","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taivGetFile_MbrOff=(int taivGetFile::*)(&taivGetFile::ostrm))),0,NULL,0},
  {&TA_bool,NULL,"open_file"," true if there is an open file somewhere","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taivGetFile_MbrOff=(int taivGetFile::*)(&taivGetFile::open_file))),0,NULL,0},
  {&TA_bool,NULL,"file_selected"," true if a file was selected last time..","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taivGetFile_MbrOff=(int taivGetFile::*)(&taivGetFile::file_selected))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taivGetFile_UnCompressInput_MethArgs[]={
  {&TA_const_char_ptr,NULL,"filename",""},
  NULL};
static MethodArgs_data TA_taivGetFile_CompressOutput_MethArgs[]={
  {&TA_const_char_ptr,NULL,"filename",""},
  {&TA_bool,NULL,"append","0"},
  NULL};
static MethodArgs_data TA_taivGetFile_Open_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm"," 0"},
  {&TA_bool,NULL,"no_dlg"," 0"},
  NULL};
static MethodArgs_data TA_taivGetFile_Save_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm"," 0"},
  {&TA_bool,NULL,"no_dlg"," 0"},
  NULL};
static MethodArgs_data TA_taivGetFile_SaveAs_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm"," 0"},
  {&TA_bool,NULL,"no_dlg"," 0"},
  NULL};
static MethodArgs_data TA_taivGetFile_Append_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm"," 0"},
  {&TA_bool,NULL,"no_dlg"," 0"},
  NULL};
static MethodDef_data TA_taivGetFile_MethodDef[]={
  {&TA_istream_ptr,NULL,"UnCompressInput"," get an input stream from given compressed file which does uncompression via pipe","","",
    0,1,-1,0,NULL,cssElCFun_taivGetFile_UnCompressInput_stub,TA_taivGetFile_UnCompressInput_MethArgs},
  {&TA_ostream_ptr,NULL,"CompressOutput"," get an output stream to given file which does compression via pipe","","",
    0,2,1,0,NULL,cssElCFun_taivGetFile_CompressOutput_stub,TA_taivGetFile_CompressOutput_MethArgs},
  {&TA_istream_ptr,NULL,"open_read","","","",
    0,0,-1,0,NULL,cssElCFun_taivGetFile_open_read_stub,NULL},
  {&TA_ostream_ptr,NULL,"open_write","","","",
    0,0,-1,0,NULL,cssElCFun_taivGetFile_open_write_stub,NULL},
  {&TA_ostream_ptr,NULL,"open_append","","","",
    0,0,-1,0,NULL,cssElCFun_taivGetFile_open_append_stub,NULL},
  {&TA_bool,NULL,"open_write_exist_check"," returns true if file already exists for writing","","",
    0,0,-1,0,NULL,cssElCFun_taivGetFile_open_write_exist_check_stub,NULL},
  {&TA_istream_ptr,NULL,"Open"," to get a file for reading (already exists)","","",
    0,2,0,0,NULL,cssElCFun_taivGetFile_Open_stub,TA_taivGetFile_Open_MethArgs},
  {&TA_ostream_ptr,NULL,"Save"," to save to an existing file","","",
    0,2,0,0,NULL,cssElCFun_taivGetFile_Save_stub,TA_taivGetFile_Save_MethArgs},
  {&TA_ostream_ptr,NULL,"SaveAs"," to save with a new file","","",
    0,2,0,0,NULL,cssElCFun_taivGetFile_SaveAs_stub,TA_taivGetFile_SaveAs_MethArgs},
  {&TA_ostream_ptr,NULL,"Append"," to save a file for appending (already exists)","","",
    0,2,0,0,NULL,cssElCFun_taivGetFile_Append_stub,TA_taivGetFile_Append_MethArgs},
  {&TA_void,NULL,"Close"," close the stream","","",
    0,0,-1,0,NULL,cssElCFun_taivGetFile_Close_stub,NULL},
  {&TA_void,NULL,"FixFileName"," make sure suffix is right","","",
    0,0,-1,0,NULL,cssElCFun_taivGetFile_FixFileName_stub,NULL},
  {&TA_void,NULL,"GetDir"," get directory from file name","","",
    0,0,-1,0,NULL,cssElCFun_taivGetFile_GetDir_stub,NULL},
  NULL};
static MemberDef_data TA_tabMisc_MemberDef[]={
  {&TA_TAPtr,NULL,"root"," root of the structural object hierarchy","","",
    (ta_memb_ptr)NULL,1,(void*)(&tabMisc::root),0},
  {&TA_taBase_List,NULL,"delayed_remove"," list of objs to be removed in the wait process (e.g. when objs delete themselves)","","",
    (ta_memb_ptr)NULL,1,(void*)(&tabMisc::delayed_remove),0},
  {&TA_taBase_List,NULL,"delayed_updateafteredit"," list of objs to be update-after-edit'd in the wait process","","",
    (ta_memb_ptr)NULL,1,(void*)(&tabMisc::delayed_updateafteredit),0},
  NULL};
static MethodArgs_data TA_tabMisc_Close_Obj_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodArgs_data TA_tabMisc_NotifyEdits_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodArgs_data TA_tabMisc_DelayedUpdateAfterEdit_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodDef_data TA_tabMisc_MethodDef[]={
  {&TA_void,NULL,"Close_Obj"," call this to implement closing object function","","",
    0,1,-1,1,(ta_void_fun)(tabMisc::Close_Obj),cssElCFun_tabMisc_Close_Obj_stub,TA_tabMisc_Close_Obj_MethArgs},
  {&TA_int,NULL,"WaitProc"," wait process function: remove objects from groups, update others","","",
    0,0,-1,1,(ta_void_fun)(tabMisc::WaitProc),cssElCFun_tabMisc_WaitProc_stub,NULL},
  {&TA_bool,NULL,"NotifyEdits"," notify any edit dialogs of a taptr object that object has changed","","",
    0,1,-1,1,(ta_void_fun)(tabMisc::NotifyEdits),cssElCFun_tabMisc_NotifyEdits_stub,TA_tabMisc_NotifyEdits_MethArgs},
  {&TA_void,NULL,"DelayedUpdateAfterEdit"," call update-after-edit on object in wait process (in case this does other kinds of damage..)","","",
    0,1,-1,1,(ta_void_fun)(tabMisc::DelayedUpdateAfterEdit),cssElCFun_tabMisc_DelayedUpdateAfterEdit_stub,TA_tabMisc_DelayedUpdateAfterEdit_MethArgs},
  NULL};
static int taNBase::* TA_taNBase_MbrOff;
static MemberDef_data TA_taNBase_MemberDef[]={
  {&TA_TAPtr,NULL,"owner"," pointer to owner","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taNBase_MbrOff=(int taNBase::*)(&taNBase::owner))),0,NULL,0},
  {&TA_taString,NULL,"name"," name of the object","","",
    *((ta_memb_ptr*)&(TA_taNBase_MbrOff=(int taNBase::*)(&taNBase::name))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taNBase_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodDef_data TA_taNBase_MethodDef[]={
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_taNBase_GetOwner_stub,TA_taNBase_GetOwner_MethArgs},
  NULL};
static int SelectEdit::* TA_SelectEdit_MbrOff;
static MemberDef_data TA_SelectEdit_MemberDef[]={
  {&TA_SelectEditConfig,NULL,"config"," special parameters for controlling the display","","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::config))),0,NULL,0},
  {&TA_bool,NULL,"edit_on_reopen"," if true, edit was open on BaseChangeSave, so edit on ReOpen","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::edit_on_reopen))),0,NULL,0},
  {&TA_taBase_List,NULL,"mbr_bases"," the bases for each element in the list","LINK_GROUP READ_ONLY AKA_bases ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::mbr_bases))),0,NULL,0},
  {&TA_String_Array,NULL,"mbr_strs"," string names of mbrs on bases -- used for saving","READ_ONLY AKA_member_strs ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::mbr_strs))),0,NULL,0},
  {&TA_MemberSpace,NULL,"members"," member defs","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::members))),0,NULL,0},
  {&TA_String_Array,NULL,"mbr_base_paths"," paths to base objects for BaseChangeSave","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::mbr_base_paths))),0,NULL,0},
  {&TA_taBase_List,NULL,"meth_bases"," the bases for each element in the list","LINK_GROUP READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::meth_bases))),0,NULL,0},
  {&TA_String_Array,NULL,"meth_strs"," string names of meths on bases -- used for saving","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::meth_strs))),0,NULL,0},
  {&TA_MethodSpace,NULL,"methods"," method defs","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::methods))),0,NULL,0},
  {&TA_String_Array,NULL,"meth_base_paths"," paths to base objects for BaseChangeSave","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SelectEdit_MbrOff=(int SelectEdit::*)(&SelectEdit::meth_base_paths))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SelectEdit_FindMbrBase_MethArgs[]={
  {&TA_TAPtr,NULL,"base",""},
  {&TA_MemberDef_ptr,NULL,"md",""},
  NULL};
static MethodArgs_data TA_SelectEdit_SelectMember_MethArgs[]={
  {&TA_TAPtr,NULL,"base",""},
  {&TA_MemberDef_ptr,NULL,"md",""},
  {&TA_const_char_ptr,NULL,"lbl",""},
  NULL};
static MethodArgs_data TA_SelectEdit_SelectMemberNm_MethArgs[]={
  {&TA_TAPtr,NULL,"base",""},
  {&TA_const_char_ptr,NULL,"md",""},
  {&TA_const_char_ptr,NULL,"lbl",""},
  NULL};
static MethodArgs_data TA_SelectEdit_FindMethBase_MethArgs[]={
  {&TA_TAPtr,NULL,"base",""},
  {&TA_MethodDef_ptr,NULL,"md",""},
  NULL};
static MethodArgs_data TA_SelectEdit_SelectMethod_MethArgs[]={
  {&TA_TAPtr,NULL,"base",""},
  {&TA_MethodDef_ptr,NULL,"md",""},
  {&TA_const_char_ptr,NULL,"lbl",""},
  NULL};
static MethodArgs_data TA_SelectEdit_SelectMethodNm_MethArgs[]={
  {&TA_TAPtr,NULL,"base",""},
  {&TA_const_char_ptr,NULL,"md",""},
  {&TA_const_char_ptr,NULL,"lbl",""},
  NULL};
static MethodArgs_data TA_SelectEdit_RemoveField_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_SelectEdit_MoveField_MethArgs[]={
  {&TA_int,NULL,"from",""},
  {&TA_int,NULL,"to",""},
  NULL};
static MethodArgs_data TA_SelectEdit_RemoveFun_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_SelectEdit_MoveFun_MethArgs[]={
  {&TA_int,NULL,"from",""},
  {&TA_int,NULL,"to",""},
  NULL};
static MethodArgs_data TA_SelectEdit_BaseClosing_MethArgs[]={
  {&TA_TAPtr,NULL,"base",""},
  NULL};
static MethodArgs_data TA_SelectEdit_BaseClosingAll_MethArgs[]={
  {&TA_TAPtr,NULL,"base",""},
  NULL};
static MethodArgs_data TA_SelectEdit_GetMbrLabel_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_SelectEdit_GetMethLabel_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodDef_data TA_SelectEdit_MethodDef[]={
  {&TA_int,NULL,"FindMbrBase"," find a given base and member, returns index","","",
    0,2,-1,0,NULL,cssElCFun_SelectEdit_FindMbrBase_stub,TA_SelectEdit_FindMbrBase_MethArgs},
  {&TA_bool,NULL,"SelectMember"," add new member to edit if it isn't already here (returns true), otherwise remove (returns false)","","",
    0,3,-1,0,NULL,cssElCFun_SelectEdit_SelectMember_stub,TA_SelectEdit_SelectMember_MethArgs},
  {&TA_bool,NULL,"SelectMemberNm"," add new member to edit if it isn't already here (returns true), otherwise remove (returns false)","","",
    0,3,-1,0,NULL,cssElCFun_SelectEdit_SelectMemberNm_stub,TA_SelectEdit_SelectMemberNm_MethArgs},
  {&TA_int,NULL,"FindMethBase"," find a given base and method, returns index","","",
    0,2,-1,0,NULL,cssElCFun_SelectEdit_FindMethBase_stub,TA_SelectEdit_FindMethBase_MethArgs},
  {&TA_bool,NULL,"SelectMethod"," add new method to edit if it isn't already here (returns true), otherwise remove (returns false)","","",
    0,3,-1,0,NULL,cssElCFun_SelectEdit_SelectMethod_stub,TA_SelectEdit_SelectMethod_MethArgs},
  {&TA_bool,NULL,"SelectMethodNm"," add new method to edit if it isn't already here (returns true), otherwise remove (returns false)","","",
    0,3,-1,0,NULL,cssElCFun_SelectEdit_SelectMethodNm_stub,TA_SelectEdit_SelectMethodNm_MethArgs},
  {&TA_void,NULL,"UpdateAllBases"," perform update-after-edit on all base objects","","",
    0,0,-1,0,NULL,cssElCFun_SelectEdit_UpdateAllBases_stub,NULL},
  {&TA_void,NULL,"RemoveField"," remove edit data item at given index","MENU MENU_ON_SelectEdit ","",
    0,1,-1,0,NULL,cssElCFun_SelectEdit_RemoveField_stub,TA_SelectEdit_RemoveField_MethArgs},
  {&TA_void,NULL,"MoveField"," move member to edit from index to index","MENU ","",
    0,2,-1,0,NULL,cssElCFun_SelectEdit_MoveField_stub,TA_SelectEdit_MoveField_MethArgs},
  {&TA_void,NULL,"RemoveFun"," remove function at given index","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_SelectEdit_RemoveFun_stub,TA_SelectEdit_RemoveFun_MethArgs},
  {&TA_void,NULL,"MoveFun"," move function to edit from index to index","MENU ","",
    0,2,-1,0,NULL,cssElCFun_SelectEdit_MoveFun_stub,TA_SelectEdit_MoveFun_MethArgs},
  {&TA_void,NULL,"NewEdit"," closes current edit dialog and makes a new one (with any changes)","MENU MENU_SEP_BEFORE ","",
    0,0,-1,0,NULL,cssElCFun_SelectEdit_NewEdit_stub,NULL},
  {&TA_void,NULL,"GetMembsFmStrs"," get members from strings (upon loading)","","",
    0,0,-1,0,NULL,cssElCFun_SelectEdit_GetMembsFmStrs_stub,NULL},
  {&TA_void,NULL,"GetMethsFmStrs"," get methods from strings (upon loading)","","",
    0,0,-1,0,NULL,cssElCFun_SelectEdit_GetMethsFmStrs_stub,NULL},
  {&TA_void,NULL,"GetAllPaths"," get paths for all current objects","","",
    0,0,-1,0,NULL,cssElCFun_SelectEdit_GetAllPaths_stub,NULL},
  {&TA_bool,NULL,"BaseClosing"," this base object is about to be closed (removed), if i edit it, then I need to save and reopen (returns true if edited)","","",
    0,1,-1,0,NULL,cssElCFun_SelectEdit_BaseClosing_stub,TA_SelectEdit_BaseClosing_MethArgs},
  {&TA_bool,NULL,"BaseClosingAll"," calls base closing on all SelectEdit tokens..","","",
    0,1,-1,1,(ta_void_fun)(SelectEdit::BaseClosingAll),cssElCFun_SelectEdit_BaseClosingAll_stub,TA_SelectEdit_BaseClosingAll_MethArgs},
  {&TA_void,NULL,"BaseChangeSave"," close edit dialog and save paths to current bases","","",
    0,0,-1,0,NULL,cssElCFun_SelectEdit_BaseChangeSave_stub,NULL},
  {&TA_void,NULL,"BaseChangeReOpen"," re-open the edit dialog loading bases from saved paths","","",
    0,0,-1,0,NULL,cssElCFun_SelectEdit_BaseChangeReOpen_stub,NULL},
  {&TA_taString,NULL,"GetMbrLabel"," get full label for member","","",
    0,1,-1,0,NULL,cssElCFun_SelectEdit_GetMbrLabel_stub,TA_SelectEdit_GetMbrLabel_MethArgs},
  {&TA_taString,NULL,"GetMethLabel"," get full label for method","","",
    0,1,-1,0,NULL,cssElCFun_SelectEdit_GetMethLabel_stub,TA_SelectEdit_GetMethLabel_MethArgs},
  NULL};
static int taOBase::* TA_taOBase_MbrOff;
static MemberDef_data TA_taOBase_MemberDef[]={
  {&TA_TAPtr,NULL,"owner"," pointer to owner","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taOBase_MbrOff=(int taOBase::*)(&taOBase::owner))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taOBase_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodDef_data TA_taOBase_MethodDef[]={
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_taOBase_GetOwner_stub,TA_taOBase_GetOwner_MethArgs},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Find_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Remove_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__FindEl_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__AddEl_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Add_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__AddUnique_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__AddUniqNameNew_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Insert_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  {&TA_int,NULL,"where",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Replace_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__ReplaceEl_MethArgs[]={
  {NULL,"::taBase_ptr","old_it",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__RemoveEl_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__DuplicateEl_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Link_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__LinkUnique_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__LinkUniqNameNew_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__InsertLink_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__ReplaceLink_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__ReplaceLinkEl_MethArgs[]={
  {NULL,"::taBase_ptr","old_it",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Push_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__MoveEl_MethArgs[]={
  {NULL,"::taBase_ptr","from",""},
  {NULL,"::taBase_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Transfer_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__MoveBefore_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__MoveAfter_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_base_taBase__MethodDef[]={
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there)","","",
    1,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__Find_stub,TA_taPtrList_base_taBase__Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index","","",
    4,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__Remove_stub,TA_taPtrList_base_taBase__Remove_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__FindEl_stub,TA_taPtrList_base_taBase__FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__AddEl_stub,TA_taPtrList_base_taBase__AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__Add_stub,TA_taPtrList_base_taBase__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__AddUnique_stub,TA_taPtrList_base_taBase__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__AddUniqNameNew_stub,TA_taPtrList_base_taBase__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," insert element at index (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__Insert_stub,TA_taPtrList_base_taBase__Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__Replace_stub,TA_taPtrList_base_taBase__Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__ReplaceEl_stub,TA_taPtrList_base_taBase__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__ReplaceName_stub,TA_taPtrList_base_taBase__ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__RemoveEl_stub,TA_taPtrList_base_taBase__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__DuplicateEl_stub,TA_taPtrList_base_taBase__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__Link_stub,TA_taPtrList_base_taBase__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__LinkUnique_stub,TA_taPtrList_base_taBase__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__LinkUniqNameNew_stub,TA_taPtrList_base_taBase__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taPtrList_base_taBase__InsertLink_stub,TA_taPtrList_base_taBase__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__ReplaceLink_stub,TA_taPtrList_base_taBase__ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__ReplaceLinkEl_stub,TA_taPtrList_base_taBase__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__ReplaceLinkName_stub,TA_taPtrList_base_taBase__ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__Push_stub,TA_taPtrList_base_taBase__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__MoveEl_stub,TA_taPtrList_base_taBase__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer element to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_base_taBase__Transfer_stub,TA_taPtrList_base_taBase__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__MoveBefore_stub,TA_taPtrList_base_taBase__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_base_taBase__MoveAfter_stub,TA_taPtrList_base_taBase__MoveAfter_MethArgs},
  NULL};
static int taList_impl::* TA_taList_impl_MbrOff;
static MemberDef_data TA_taList_impl_MemberDef[]={
  {&TA_MemberDef_ptr,NULL,"find_md"," return value for findmember of data","HIDDEN NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taList_impl::find_md),0},
  {&TA_TypeDef_ptr,NULL,"el_base"," Base type for objects in group","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taList_impl_MbrOff=(int taList_impl::*)(&taList_impl::el_base))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"el_typ"," Default type for objects in group","TYPE_ON_el_base ","",
    *((ta_memb_ptr*)&(TA_taList_impl_MbrOff=(int taList_impl::*)(&taList_impl::el_typ))),0,NULL,0},
  {&TA_int,NULL,"el_def"," Index of default element in group","","",
    *((ta_memb_ptr*)&(TA_taList_impl_MbrOff=(int taList_impl::*)(&taList_impl::el_def))),0,NULL,0},
  {&TA_taString,NULL,"name"," name of the list","","",
    *((ta_memb_ptr*)&(TA_taList_impl_MbrOff=(int taList_impl::*)(&taList_impl::name))),0,NULL,0},
  {&TA_TAPtr,NULL,"owner"," owner of the list","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taList_impl_MbrOff=(int taList_impl::*)(&taList_impl::owner))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taList_impl_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_taList_impl_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","0"},
  {&TA_TAPtr,NULL,"par_stop","0"},
  NULL};
static MethodArgs_data TA_taList_impl_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_taList_impl_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"typ","0"},
  NULL};
static MethodArgs_data TA_taList_impl_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetEnumString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetEnumVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_taList_impl_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  NULL};
static MethodArgs_data TA_taList_impl_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taList_impl_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taList_impl_Edit_MethArgs[]={
  {&TA_bool,NULL,"wait","false"},
  NULL};
static MethodArgs_data TA_taList_impl_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_taList_impl_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_taList_impl_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taList_impl_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taList_impl_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taList_impl_CallFun_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_taList_impl_Alloc_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taList_impl_BuildHashTable_MethArgs[]={
  {&TA_int,NULL,"n_buckets",""},
  NULL};
static MethodArgs_data TA_taList_impl_Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taList_impl_Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_impl_RemoveName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taList_impl_Move_MethArgs[]={
  {&TA_int,NULL,"from",""},
  {&TA_int,NULL,"to",""},
  NULL};
static MethodArgs_data TA_taList_impl_Swap_MethArgs[]={
  {&TA_int,NULL,"pos1",""},
  {&TA_int,NULL,"pos2",""},
  NULL};
static MethodArgs_data TA_taList_impl_Sort_MethArgs[]={
  {&TA_bool,NULL,"descending","false"},
  NULL};
static MethodArgs_data TA_taList_impl_Sort__MethArgs[]={
  {&TA_bool,NULL,"descending","false"},
  NULL};
static MethodArgs_data TA_taList_impl_Duplicate_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_DupeUniqNameNew_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_DupeUniqNameOld_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_Stealth_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_BorrowUnique_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_BorrowUniqNameNew_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_BorrowUniqNameOld_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_Copy_Common_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_Copy_Duplicate_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_Copy_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_List_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm","cout"},
  NULL};
static MethodArgs_data TA_taList_impl_FindEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_AddEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_Add_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_AddUnique_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_AddUniqNameNew_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_Insert_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  {&TA_int,NULL,"where",""},
  NULL};
static MethodArgs_data TA_taList_impl_Replace_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","old_it",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_RemoveEl_MethArgs[]={
  {&TA_TAPtr,NULL,"item",""},
  NULL};
static MethodArgs_data TA_taList_impl_DuplicateEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_Link_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_LinkUnique_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_LinkUniqNameNew_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_InsertLink_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceLink_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceLinkEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","old_it",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_Push_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_MoveEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","from",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","to",""},
  NULL};
static MethodArgs_data TA_taList_impl_Transfer_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_MoveBefore_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","trg",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_MoveAfter_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","trg",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_Dump_Save_PathR_impl_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taList_impl_SetDefaultEl_MethArgs[]={
  {&TA_TAPtr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_taList_impl_SetDefaultElName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taList_impl_SetDefaultElType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_taList_impl_EnforceSize_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taList_impl_EnforceSameStru_MethArgs[]={
  {&TA_const_taList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_ChangeType_MethArgs[]={
  {&TA_TAPtr,NULL,"itm",""},
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"old_type",""},
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taList_impl_SetBaseType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"it",""},
  NULL};
static MethodDef_data TA_taList_impl_MethodDef[]={
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_UnSafeCopy_stub,TA_taList_impl_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_CastCopyTo_stub,TA_taList_impl_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    2,0,-1,0,NULL,cssElCFun_taList_impl_GetOwner_stub,NULL},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_taList_impl_GetPath_stub,TA_taList_impl_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_taList_impl_FindFromPath_stub,TA_taList_impl_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," create n_objs new objects of given type","MENU MENU_ON_Object ARGC_0 UPDATE_MENUS NO_SCRIPT ","",
    0,2,0,0,NULL,cssElCFun_taList_impl_New_stub,TA_taList_impl_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_UpdateAfterEdit_stub,NULL},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_taList_impl_InheritsFrom_stub,TA_taList_impl_InheritsFrom_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_GetEnumString_stub,TA_taList_impl_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","","",
    0,2,1,0,NULL,cssElCFun_taList_impl_GetEnumVal_stub,TA_taList_impl_GetEnumVal_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taList_impl_Load_stub,TA_taList_impl_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_taList_impl_Save_stub,TA_taList_impl_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_taList_impl_SaveAs_stub,TA_taList_impl_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object NO_SCRIPT ","",
    0,1,0,0,NULL,cssElCFun_taList_impl_Edit_stub,TA_taList_impl_Edit_MethArgs},
  {&TA_bool,NULL,"CloseEdit"," close any open edit dialogs for this object","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_CloseEdit_stub,NULL},
  {&TA_void,NULL,"Close"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) ","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_Close_stub,NULL},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_CopyFrom_stub,TA_taList_impl_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_CopyTo_stub,TA_taList_impl_CopyTo_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_ChangeMyType_stub,TA_taList_impl_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing in a select edit dialog -- if already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_taList_impl_SelectForEdit_stub,TA_taList_impl_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog -- if already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_taList_impl_SelectFunForEdit_stub,TA_taList_impl_SelectFunForEdit_MethArgs},
  {&TA_void,NULL,"Help"," get help on using this object","MENU ","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_Help_stub,NULL},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_CallFun_stub,TA_taList_impl_CallFun_MethArgs},
  {&TA_void,NULL,"Alloc"," allocate a list big enough for given number of elements (or current size)","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Alloc_stub,TA_taList_impl_Alloc_MethArgs},
  {&TA_void,NULL,"Reset"," reset the list (remove all elements)","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_Reset_stub,NULL},
  {&TA_bool,NULL,"IsEmpty","","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_IsEmpty_stub,NULL},
  {&TA_void,NULL,"BuildHashTable"," build a hash table with given number of buckets (not dynamic, so make it big)","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_BuildHashTable_stub,TA_taList_impl_BuildHashTable_MethArgs},
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there) find element of given type","","",
    4,1,-1,0,NULL,cssElCFun_taList_impl_Find_stub,TA_taList_impl_Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove object at given index on list","","",
    7,1,-1,0,NULL,cssElCFun_taList_impl_Remove_stub,TA_taList_impl_Remove_MethArgs},
  {&TA_bool,NULL,"RemoveName"," remove given named element from list (if on list)","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_RemoveName_stub,TA_taList_impl_RemoveName_MethArgs},
  {&TA_bool,NULL,"RemoveLast"," remove the last element on the list","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_RemoveLast_stub,NULL},
  {&TA_void,NULL,"RemoveAll"," Remove all elements on the list","MENU MENU_ON_Edit CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_RemoveAll_stub,NULL},
  {&TA_bool,NULL,"Move"," Move element from (from) to position (to) in list","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_Move_stub,TA_taList_impl_Move_MethArgs},
  {&TA_bool,NULL,"Swap"," Swap the elements in the two given positions on the list","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_Swap_stub,TA_taList_impl_Swap_MethArgs},
  {&TA_void,NULL,"PopAll"," pop all elements off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_PopAll_stub,NULL},
  {&TA_void,NULL,"Permute"," permute the items in the list into a random order","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_Permute_stub,NULL},
  {&TA_void,NULL,"Sort"," sort the items in the list in alpha order according to name (or El_Compare_)","MENU CONFIRM UPDATE_MENUS ","",
    0,1,0,0,NULL,cssElCFun_taList_impl_Sort_stub,TA_taList_impl_Sort_MethArgs},
  {&TA_void,NULL,"Sort_"," implementation of sorting function","","",
    0,1,0,0,NULL,cssElCFun_taList_impl_Sort__stub,TA_taList_impl_Sort__MethArgs},
  {&TA_void,NULL,"UpdateAllIndicies"," update all indicies of elements in list","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_UpdateAllIndicies_stub,NULL},
  {&TA_void,NULL,"Duplicate"," duplicate (clone & add) elements of given list into this one","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Duplicate_stub,TA_taList_impl_Duplicate_MethArgs},
  {&TA_void,NULL,"DupeUniqNameNew"," duplicate so result is unique names, replacing with new ones where dupl","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_DupeUniqNameNew_stub,TA_taList_impl_DupeUniqNameNew_MethArgs},
  {&TA_void,NULL,"DupeUniqNameOld"," duplicate so result is unique names, using old ones where dupl","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_DupeUniqNameOld_stub,TA_taList_impl_DupeUniqNameOld_MethArgs},
  {&TA_void,NULL,"Stealth_Borrow"," borrow without referencing the borrowed elements (i.e. use AddEl_())","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Stealth_Borrow_stub,TA_taList_impl_Stealth_Borrow_MethArgs},
  {&TA_void,NULL,"Borrow"," borrow (link) elements of given list into this one","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Borrow_stub,TA_taList_impl_Borrow_MethArgs},
  {&TA_void,NULL,"BorrowUnique"," borrow so result is unique list","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_BorrowUnique_stub,TA_taList_impl_BorrowUnique_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameNew"," borrow so result is unique names, replacing with new ones where dupl","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_BorrowUniqNameNew_stub,TA_taList_impl_BorrowUniqNameNew_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameOld"," borrow so result is unique names, using old ones where dupl","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_BorrowUniqNameOld_stub,TA_taList_impl_BorrowUniqNameOld_MethArgs},
  {&TA_void,NULL,"Copy_Common"," apply copy operator to only those items in common between the two lists","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Copy_Common_stub,TA_taList_impl_Copy_Common_MethArgs},
  {&TA_void,NULL,"Copy_Duplicate"," apply copy operator to items, use duplicate to add new ones from cp (if necc)","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Copy_Duplicate_stub,TA_taList_impl_Copy_Duplicate_MethArgs},
  {&TA_void,NULL,"Copy_Borrow"," apply copy operator to items, use borrow to add new ones from cp (if necc)","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Copy_Borrow_stub,TA_taList_impl_Copy_Borrow_MethArgs},
  {&TA_void,NULL,"List"," List the group items","","",
    0,1,0,0,NULL,cssElCFun_taList_impl_List_stub,TA_taList_impl_List_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_FindEl_stub,TA_taList_impl_FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_AddEl_stub,TA_taList_impl_AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Add_stub,TA_taList_impl_Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_AddUnique_stub,TA_taList_impl_AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_AddUniqNameNew_stub,TA_taList_impl_AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," insert element at index (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_Insert_stub,TA_taList_impl_Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_taList_impl_Replace_stub,TA_taList_impl_Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_ReplaceEl_stub,TA_taList_impl_ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_ReplaceName_stub,TA_taList_impl_ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list Remove given item from the list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    1,1,-1,0,NULL,cssElCFun_taList_impl_RemoveEl_stub,TA_taList_impl_RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_DuplicateEl_stub,TA_taList_impl_DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Link_stub,TA_taList_impl_Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_LinkUnique_stub,TA_taList_impl_LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_LinkUniqNameNew_stub,TA_taList_impl_LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taList_impl_InsertLink_stub,TA_taList_impl_InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_taList_impl_ReplaceLink_stub,TA_taList_impl_ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_ReplaceLinkEl_stub,TA_taList_impl_ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_ReplaceLinkName_stub,TA_taList_impl_ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Push_stub,TA_taList_impl_Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_MoveEl_stub,TA_taList_impl_MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer element to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_Transfer_stub,TA_taList_impl_Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_MoveBefore_stub,TA_taList_impl_MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_MoveAfter_stub,TA_taList_impl_MoveAfter_MethArgs},
  {&TA_int,NULL,"Dump_Save_PathR_impl","","","",
    0,3,1,0,NULL,cssElCFun_taList_impl_Dump_Save_PathR_impl_stub,TA_taList_impl_Dump_Save_PathR_impl_MethArgs},
  {&TA_int,NULL,"SetDefaultEl"," set the default element to be given item","","",
    2,1,-1,0,NULL,cssElCFun_taList_impl_SetDefaultEl_stub,TA_taList_impl_SetDefaultEl_MethArgs},
  {&TA_int,NULL,"SetDefaultElName"," set the default element to be item with given name","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_SetDefaultElName_stub,TA_taList_impl_SetDefaultElName_MethArgs},
  {&TA_int,NULL,"SetDefaultElType"," set the default element to be item with given type","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_SetDefaultElType_stub,TA_taList_impl_SetDefaultElType_MethArgs},
  {&TA_void,NULL,"EnforceSize"," add or remove elements to force list to be of given size","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_EnforceSize_stub,TA_taList_impl_EnforceSize_MethArgs},
  {&TA_void,NULL,"EnforceType"," enforce current type (all elements have to be of this type)","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_EnforceType_stub,NULL},
  {&TA_void,NULL,"EnforceSameStru"," make the two lists identical in terms of size and types of objects","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_EnforceSameStru_stub,TA_taList_impl_EnforceSameStru_MethArgs},
  {&TA_bool,NULL,"ChangeType"," change type of item at index change type of item to new type, copying current info","MENU MENU_ON_Object UPDATE_MENUS ARG_ON_OBJ TYPE_ON_el_base ","",
    1,2,-1,0,NULL,cssElCFun_taList_impl_ChangeType_stub,TA_taList_impl_ChangeType_MethArgs},
  {&TA_int,NULL,"ReplaceType"," replace all items of old type with new type (returns number changed)","MENU MENU_ON_Object USE_RVAL UPDATE_MENUS TYPE_ON_el_base ","",
    0,2,-1,0,NULL,cssElCFun_taList_impl_ReplaceType_stub,TA_taList_impl_ReplaceType_MethArgs},
  {&TA_void,NULL,"SetBaseType"," set base (and default) type to given td","","",
    0,1,-1,0,NULL,cssElCFun_taList_impl_SetBaseType_stub,TA_taList_impl_SetBaseType_MethArgs},
  {&TA_MemberDef_ptr,NULL,"ReturnFindMd"," return the find_md variable, initialized if necessary","","",
    0,0,-1,0,NULL,cssElCFun_taList_impl_ReturnFindMd_stub,NULL},
  NULL};
static int taArray_base::* TA_taArray_base_MbrOff;
static MemberDef_data TA_taArray_base_MemberDef[]={
  {&TA_TAPtr,NULL,"owner"," owner of the list","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_base_MbrOff=(int taArray_base::*)(&taArray_base::owner))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_base_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_taArray_base_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","0"},
  {&TA_TAPtr,NULL,"par_stop","0"},
  NULL};
static MethodArgs_data TA_taArray_base_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_taArray_base_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"type","0"},
  NULL};
static MethodArgs_data TA_taArray_base_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetEnumString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetEnumVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_taArray_base_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  NULL};
static MethodArgs_data TA_taArray_base_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taArray_base_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taArray_base_Edit_MethArgs[]={
  {&TA_bool,NULL,"wait","false"},
  NULL};
static MethodArgs_data TA_taArray_base_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_taArray_base_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_taArray_base_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taArray_base_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taArray_base_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taArray_base_CallFun_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_taArray_base_Alloc_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodArgs_data TA_taArray_base_EnforceSize_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taArray_base_Remove_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_base_Move_MethArgs[]={
  {&TA_int,NULL,"from",""},
  {&TA_int,NULL,"to",""},
  NULL};
static MethodArgs_data TA_taArray_base_Sort_MethArgs[]={
  {&TA_bool,NULL,"descending","false"},
  NULL};
static MethodArgs_data TA_taArray_base_ShiftLeft_MethArgs[]={
  {&TA_int,NULL,"nshift",""},
  NULL};
static MethodArgs_data TA_taArray_base_ShiftLeftPct_MethArgs[]={
  {&TA_float,NULL,"pct",""},
  NULL};
static MethodArgs_data TA_taArray_base_V_Flip_MethArgs[]={
  {&TA_int,NULL,"width",""},
  NULL};
static MethodArgs_data TA_taArray_base_Duplicate_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_base_DupeUnique_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_base_Copy_Common_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_base_Copy_Duplicate_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_base_CopyVals_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"from",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  {&TA_int,NULL,"at","0"},
  NULL};
static MethodArgs_data TA_taArray_base_List_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm"," cout"},
  NULL};
static MethodArgs_data TA_taArray_base_InitFromString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"val",""},
  NULL};
static MethodDef_data TA_taArray_base_MethodDef[]={
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_UnSafeCopy_stub,TA_taArray_base_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_CastCopyTo_stub,TA_taArray_base_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    2,0,-1,0,NULL,cssElCFun_taArray_base_GetOwner_stub,NULL},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_taArray_base_GetPath_stub,TA_taArray_base_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_taArray_base_FindFromPath_stub,TA_taArray_base_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    0,2,0,0,NULL,cssElCFun_taArray_base_New_stub,TA_taArray_base_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_UpdateAfterEdit_stub,NULL},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_taArray_base_InheritsFrom_stub,TA_taArray_base_InheritsFrom_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","","",
    0,2,-1,0,NULL,cssElCFun_taArray_base_GetEnumString_stub,TA_taArray_base_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","","",
    0,2,1,0,NULL,cssElCFun_taArray_base_GetEnumVal_stub,TA_taArray_base_GetEnumVal_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taArray_base_Load_stub,TA_taArray_base_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_taArray_base_Save_stub,TA_taArray_base_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_taArray_base_SaveAs_stub,TA_taArray_base_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object NO_SCRIPT ","",
    0,1,0,0,NULL,cssElCFun_taArray_base_Edit_stub,TA_taArray_base_Edit_MethArgs},
  {&TA_bool,NULL,"CloseEdit"," close any open edit dialogs for this object","","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_CloseEdit_stub,NULL},
  {&TA_void,NULL,"Close"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) ","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_Close_stub,NULL},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_CopyFrom_stub,TA_taArray_base_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_CopyTo_stub,TA_taArray_base_CopyTo_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_ChangeMyType_stub,TA_taArray_base_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing in a select edit dialog -- if already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_taArray_base_SelectForEdit_stub,TA_taArray_base_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog -- if already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_taArray_base_SelectFunForEdit_stub,TA_taArray_base_SelectFunForEdit_MethArgs},
  {&TA_void,NULL,"Help"," get help on using this object","MENU ","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_Help_stub,NULL},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_CallFun_stub,TA_taArray_base_CallFun_MethArgs},
  {&TA_void,NULL,"Alloc"," allocate of a given size","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_Alloc_stub,TA_taArray_base_Alloc_MethArgs},
  {&TA_void,NULL,"Reset"," reset the list to zero size (does not free memory)","","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_Reset_stub,NULL},
  {&TA_void,NULL,"EnforceSize"," force array to be of given size by inserting blanks or removing","MENU MENU_ON_Edit ","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_EnforceSize_stub,TA_taArray_base_EnforceSize_MethArgs},
  {&TA_bool,NULL,"Remove"," Remove (n_els) item(s) at idx, returns success","MENU MENU_ON_Edit ","",
    0,2,1,0,NULL,cssElCFun_taArray_base_Remove_stub,TA_taArray_base_Remove_MethArgs},
  {&TA_bool,NULL,"Move"," move item from index to index","MENU ","",
    0,2,-1,0,NULL,cssElCFun_taArray_base_Move_stub,TA_taArray_base_Move_MethArgs},
  {&TA_void,NULL,"Permute"," permute the items in the list into a random order","MENU ","",
    0,0,-1,0,NULL,cssElCFun_taArray_base_Permute_stub,NULL},
  {&TA_void,NULL,"Sort"," sort the list in ascending order (or descending if switched)","MENU ","",
    0,1,0,0,NULL,cssElCFun_taArray_base_Sort_stub,TA_taArray_base_Sort_MethArgs},
  {&TA_void,NULL,"ShiftLeft"," shift all the elements in the array to the left by given number of items","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_ShiftLeft_stub,TA_taArray_base_ShiftLeft_MethArgs},
  {&TA_void,NULL,"ShiftLeftPct"," shift the array to the left by given percentage of current size","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_ShiftLeftPct_stub,TA_taArray_base_ShiftLeftPct_MethArgs},
  {&TA_int,NULL,"V_Flip"," vertically flip the array as if it was arrange in a matrix of width","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_V_Flip_stub,TA_taArray_base_V_Flip_MethArgs},
  {&TA_void,NULL,"Duplicate"," duplicate the items in the list","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_Duplicate_stub,TA_taArray_base_Duplicate_MethArgs},
  {&TA_void,NULL,"DupeUnique"," duplicate so result is unique list","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_DupeUnique_stub,TA_taArray_base_DupeUnique_MethArgs},
  {&TA_void,NULL,"Copy_Common"," copy elements in common","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_Copy_Common_stub,TA_taArray_base_Copy_Common_MethArgs},
  {&TA_void,NULL,"Copy_Duplicate"," copy elements in common, duplicating (if necc) any extra on cp","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_Copy_Duplicate_stub,TA_taArray_base_Copy_Duplicate_MethArgs},
  {&TA_void,NULL,"CopyVals"," copy values from other array at given start and end points, and putting at given point in this","","",
    0,4,1,0,NULL,cssElCFun_taArray_base_CopyVals_stub,TA_taArray_base_CopyVals_MethArgs},
  {&TA_void,NULL,"List"," print out all of the elements in the array","","",
    0,1,0,0,NULL,cssElCFun_taArray_base_List_stub,TA_taArray_base_List_MethArgs},
  {&TA_void,NULL,"InitFromString"," initialize an array from given string (does reset first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_base_InitFromString_stub,TA_taArray_base_InitFromString_MethArgs},
  NULL};
static MethodArgs_data TA_taList_taBase__MoveBefore_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taBase__MoveAfter_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taBase__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_taBase__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_taBase__Edit_El_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taBase__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_taBase__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_taBase__AddUniqNameOld_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taBase__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_taBase__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_taBase__MoveBefore_stub,TA_taList_taBase__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_taBase__MoveAfter_stub,TA_taList_taBase__MoveAfter_MethArgs},
  {NULL,"::taBase_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_taBase__SafeEl_stub,TA_taList_taBase__SafeEl_MethArgs},
  {NULL,"::taBase_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_taBase__FastEl_stub,TA_taList_taBase__FastEl_MethArgs},
  {NULL,"::taBase_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_taBase__DefaultEl_stub,NULL},
  {NULL,"::taBase_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_taBase__Edit_El_stub,TA_taList_taBase__Edit_El_MethArgs},
  {NULL,"::taBase_ptr","FindName"," Find element with given name (item_nm) ","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_taBase__FindName_stub,TA_taList_taBase__FindName_MethArgs},
  {NULL,"::taBase_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_taBase__FindType_stub,TA_taList_taBase__FindType_MethArgs},
  {NULL,"::taBase_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_taBase__Pop_stub,NULL},
  {NULL,"::taBase_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_taBase__Peek_stub,NULL},
  {NULL,"::taBase_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_taBase__AddUniqNameOld_stub,TA_taList_taBase__AddUniqNameOld_MethArgs},
  {NULL,"::taBase_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_taBase__LinkUniqNameOld_stub,TA_taList_taBase__LinkUniqNameOld_MethArgs},
  NULL};
static int taArray<int>::* TA_taArray_int__MbrOff;
static MemberDef_data TA_taArray_int__MemberDef[]={
  {NULL,"::int_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_int__MbrOff=(int taArray<int>::*)(&taArray<int>::el))),0,NULL,0},
  {&TA_int,NULL,"err"," what is returned when out of range","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taArray_int__MbrOff=(int taArray<int>::*)(&taArray<int>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_int__Remove_MethArgs[]={
  {&TA_uint,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_int__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_int__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_int__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_int__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_int__Add_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_int__AddUnique_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_int__Push_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_int__Insert_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_int__Find_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_int__RemoveEl_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_int__InitVals_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_int__MethodDef[]={
  {&TA_bool,NULL,"Remove"," Remove (n_els) item(s) at idx, returns success Remove (n_els) item(s) at indx, returns success","MENU MENU_ON_Edit ","",
    2,2,1,0,NULL,cssElCFun_taArray_int__Remove_stub,TA_taArray_int__Remove_MethArgs},
  {NULL,"::int_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,NULL,cssElCFun_taArray_int__SafeEl_stub,TA_taArray_int__SafeEl_MethArgs},
  {NULL,"::int_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_int__FastEl_stub,TA_taArray_int__FastEl_MethArgs},
  {NULL,"::int_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_int__RevEl_stub,TA_taArray_int__RevEl_MethArgs},
  {&TA_int,NULL,"Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taArray_int__Pop_stub,NULL},
  {NULL,"::int_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taArray_int__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taArray_int__Set_stub,TA_taArray_int__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taArray_int__Add_stub,TA_taArray_int__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taArray_int__AddUnique_stub,TA_taArray_int__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_int__Push_stub,TA_taArray_int__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taArray_int__Insert_stub,TA_taArray_int__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taArray_int__Find_stub,TA_taArray_int__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taArray_int__RemoveEl_stub,TA_taArray_int__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,0,NULL,cssElCFun_taArray_int__InitVals_stub,TA_taArray_int__InitVals_MethArgs},
  NULL};
static MethodArgs_data TA_int_Array_FillSeq_MethArgs[]={
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"inc","1"},
  NULL};
static MethodDef_data TA_int_Array_MethodDef[]={
  {&TA_void,NULL,"FillSeq"," fill array with sequential values starting at start, incrementing by inc","","",
    0,2,0,0,NULL,cssElCFun_int_Array_FillSeq_stub,TA_int_Array_FillSeq_MethArgs},
  NULL};
static int taArray<float>::* TA_taArray_float__MbrOff;
static MemberDef_data TA_taArray_float__MemberDef[]={
  {NULL,"::float_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_float__MbrOff=(int taArray<float>::*)(&taArray<float>::el))),0,NULL,0},
  {&TA_float,NULL,"err"," what is returned when out of range","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taArray_float__MbrOff=(int taArray<float>::*)(&taArray<float>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_float__Remove_MethArgs[]={
  {&TA_uint,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_float__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_float__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_float__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_float__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_float_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_float__Add_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_float__AddUnique_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_float__Push_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_float__Insert_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_float__Find_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_float__RemoveEl_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_float__InitVals_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_float__MethodDef[]={
  {&TA_bool,NULL,"Remove"," Remove (n_els) item(s) at idx, returns success Remove (n_els) item(s) at indx, returns success","MENU MENU_ON_Edit ","",
    2,2,1,0,NULL,cssElCFun_taArray_float__Remove_stub,TA_taArray_float__Remove_MethArgs},
  {NULL,"::float_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,NULL,cssElCFun_taArray_float__SafeEl_stub,TA_taArray_float__SafeEl_MethArgs},
  {NULL,"::float_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_float__FastEl_stub,TA_taArray_float__FastEl_MethArgs},
  {NULL,"::float_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_float__RevEl_stub,TA_taArray_float__RevEl_MethArgs},
  {&TA_float,NULL,"Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taArray_float__Pop_stub,NULL},
  {NULL,"::float_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taArray_float__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taArray_float__Set_stub,TA_taArray_float__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taArray_float__Add_stub,TA_taArray_float__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taArray_float__AddUnique_stub,TA_taArray_float__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_float__Push_stub,TA_taArray_float__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taArray_float__Insert_stub,TA_taArray_float__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taArray_float__Find_stub,TA_taArray_float__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taArray_float__RemoveEl_stub,TA_taArray_float__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,0,NULL,cssElCFun_taArray_float__InitVals_stub,TA_taArray_float__InitVals_MethArgs},
  NULL};
static int taArray<double>::* TA_taArray_double__MbrOff;
static MemberDef_data TA_taArray_double__MemberDef[]={
  {NULL,"::double_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_double__MbrOff=(int taArray<double>::*)(&taArray<double>::el))),0,NULL,0},
  {&TA_double,NULL,"err"," what is returned when out of range","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taArray_double__MbrOff=(int taArray<double>::*)(&taArray<double>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_double__Remove_MethArgs[]={
  {&TA_uint,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_double__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_double__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_double__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_double__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_double_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_double__Add_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_double__AddUnique_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_double__Push_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_double__Insert_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_double__Find_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_double__RemoveEl_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_double__InitVals_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_double__MethodDef[]={
  {&TA_bool,NULL,"Remove"," Remove (n_els) item(s) at idx, returns success Remove (n_els) item(s) at indx, returns success","MENU MENU_ON_Edit ","",
    2,2,1,0,NULL,cssElCFun_taArray_double__Remove_stub,TA_taArray_double__Remove_MethArgs},
  {NULL,"::double_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,NULL,cssElCFun_taArray_double__SafeEl_stub,TA_taArray_double__SafeEl_MethArgs},
  {NULL,"::double_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_double__FastEl_stub,TA_taArray_double__FastEl_MethArgs},
  {NULL,"::double_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_double__RevEl_stub,TA_taArray_double__RevEl_MethArgs},
  {&TA_double,NULL,"Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taArray_double__Pop_stub,NULL},
  {NULL,"::double_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taArray_double__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taArray_double__Set_stub,TA_taArray_double__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taArray_double__Add_stub,TA_taArray_double__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taArray_double__AddUnique_stub,TA_taArray_double__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_double__Push_stub,TA_taArray_double__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taArray_double__Insert_stub,TA_taArray_double__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taArray_double__Find_stub,TA_taArray_double__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taArray_double__RemoveEl_stub,TA_taArray_double__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,0,NULL,cssElCFun_taArray_double__InitVals_stub,TA_taArray_double__InitVals_MethArgs},
  NULL};
static int taArray<taString>::* TA_taArray_taString__MbrOff;
static MemberDef_data TA_taArray_taString__MemberDef[]={
  {NULL,"::taString_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_taString__MbrOff=(int taArray<taString>::*)(&taArray<taString>::el))),0,NULL,0},
  {&TA_taString,NULL,"err"," what is returned when out of range","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taArray_taString__MbrOff=(int taArray<taString>::*)(&taArray<taString>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_taString__Remove_MethArgs[]={
  {&TA_uint,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_taString__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_taString__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_taString__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_taString__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_taString__Add_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_taString__AddUnique_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_taString__Push_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_taString__Insert_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_taString__Find_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_taString__RemoveEl_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_taString__InitVals_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_taString__MethodDef[]={
  {&TA_bool,NULL,"Remove"," Remove (n_els) item(s) at idx, returns success Remove (n_els) item(s) at indx, returns success","MENU MENU_ON_Edit ","",
    2,2,1,0,NULL,cssElCFun_taArray_taString__Remove_stub,TA_taArray_taString__Remove_MethArgs},
  {NULL,"::taString_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,NULL,cssElCFun_taArray_taString__SafeEl_stub,TA_taArray_taString__SafeEl_MethArgs},
  {NULL,"::taString_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_taString__FastEl_stub,TA_taArray_taString__FastEl_MethArgs},
  {NULL,"::taString_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_taString__RevEl_stub,TA_taArray_taString__RevEl_MethArgs},
  {&TA_taString,NULL,"Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taArray_taString__Pop_stub,NULL},
  {NULL,"::taString_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taArray_taString__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taArray_taString__Set_stub,TA_taArray_taString__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taArray_taString__Add_stub,TA_taArray_taString__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taArray_taString__AddUnique_stub,TA_taArray_taString__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_taString__Push_stub,TA_taArray_taString__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taArray_taString__Insert_stub,TA_taArray_taString__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taArray_taString__Find_stub,TA_taArray_taString__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taArray_taString__RemoveEl_stub,TA_taArray_taString__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,0,NULL,cssElCFun_taArray_taString__InitVals_stub,TA_taArray_taString__InitVals_MethArgs},
  NULL};
static int taArray<long>::* TA_taArray_long__MbrOff;
static MemberDef_data TA_taArray_long__MemberDef[]={
  {NULL,"::long_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_long__MbrOff=(int taArray<long>::*)(&taArray<long>::el))),0,NULL,0},
  {&TA_long,NULL,"err"," what is returned when out of range","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taArray_long__MbrOff=(int taArray<long>::*)(&taArray<long>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_long__Remove_MethArgs[]={
  {&TA_uint,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_long__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_long__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_long__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_long__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_long_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_long__Add_MethArgs[]={
  {NULL,"::const_long_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_long__AddUnique_MethArgs[]={
  {NULL,"::const_long_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_long__Push_MethArgs[]={
  {NULL,"::const_long_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_long__Insert_MethArgs[]={
  {NULL,"::const_long_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_long__Find_MethArgs[]={
  {NULL,"::const_long_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_long__RemoveEl_MethArgs[]={
  {NULL,"::const_long_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_long__InitVals_MethArgs[]={
  {NULL,"::const_long_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_long__MethodDef[]={
  {&TA_bool,NULL,"Remove"," Remove (n_els) item(s) at idx, returns success Remove (n_els) item(s) at indx, returns success","MENU MENU_ON_Edit ","",
    2,2,1,0,NULL,cssElCFun_taArray_long__Remove_stub,TA_taArray_long__Remove_MethArgs},
  {NULL,"::long_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,NULL,cssElCFun_taArray_long__SafeEl_stub,TA_taArray_long__SafeEl_MethArgs},
  {NULL,"::long_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_long__FastEl_stub,TA_taArray_long__FastEl_MethArgs},
  {NULL,"::long_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_long__RevEl_stub,TA_taArray_long__RevEl_MethArgs},
  {&TA_long,NULL,"Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taArray_long__Pop_stub,NULL},
  {NULL,"::long_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taArray_long__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taArray_long__Set_stub,TA_taArray_long__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taArray_long__Add_stub,TA_taArray_long__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taArray_long__AddUnique_stub,TA_taArray_long__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_long__Push_stub,TA_taArray_long__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taArray_long__Insert_stub,TA_taArray_long__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taArray_long__Find_stub,TA_taArray_long__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taArray_long__RemoveEl_stub,TA_taArray_long__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,0,NULL,cssElCFun_taArray_long__InitVals_stub,TA_taArray_long__InitVals_MethArgs},
  NULL};
static MethodArgs_data TA_long_Array_FillSeq_MethArgs[]={
  {&TA_long,NULL,"start","0"},
  {&TA_long,NULL,"inc","1"},
  NULL};
static MethodDef_data TA_long_Array_MethodDef[]={
  {&TA_void,NULL,"FillSeq"," fill array with sequential values starting at start, incrementing by inc","","",
    0,2,0,0,NULL,cssElCFun_long_Array_FillSeq_stub,TA_long_Array_FillSeq_MethArgs},
  NULL};
static int taGroup_impl::* TA_taGroup_impl_MbrOff;
static MemberDef_data TA_taGroup_impl_MemberDef[]={
  {&TA_int,NULL,"leaves"," total number of leaves","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taGroup_impl_MbrOff=(int taGroup_impl::*)(&taGroup_impl::leaves))),0,NULL,0},
  {&TA_taSubGroup,NULL,"gp"," sub-groups within this one","HIDDEN NO_FIND NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taGroup_impl_MbrOff=(int taGroup_impl::*)(&taGroup_impl::gp))),0,NULL,0},
  {&TA_TAGPtr,NULL,"super_gp"," super-group above this","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taGroup_impl_MbrOff=(int taGroup_impl::*)(&taGroup_impl::super_gp))),0,NULL,0},
  {&TA_TALOG_ptr,NULL,"leaf_gp"," 'flat' list of leaf-containing-gps ","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taGroup_impl_MbrOff=(int taGroup_impl::*)(&taGroup_impl::leaf_gp))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taGroup_impl_Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_Duplicate_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_DupeUniqNameNew_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_DupeUniqNameOld_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_Borrow_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_BorrowUnique_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_BorrowUniqNameNew_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_BorrowUniqNameOld_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_Copy_Common_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_Copy_Duplicate_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_Copy_Borrow_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_EnforceSameStru_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_RemoveLeaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_RemoveLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_RemoveLeafEl_MethArgs[]={
  {&TA_TAPtr,NULL,"item",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_RemoveGp_MethArgs[]={
  {&TA_TAGPtr,NULL,"group",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_EnforceLeaves_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_FindLeaf_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taGroup_impl_FindLeafEl_MethArgs[]={
  {&TA_TAPtr,NULL,"item",""},
  NULL};
static MethodDef_data TA_taGroup_impl_MethodDef[]={
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove object at given index on list","","",
    10,1,-1,0,NULL,cssElCFun_taGroup_impl_Remove_stub,TA_taGroup_impl_Remove_MethArgs},
  {&TA_void,NULL,"Duplicate"," duplicate (clone & add) elements of given list into this one","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_Duplicate_stub,TA_taGroup_impl_Duplicate_MethArgs},
  {&TA_void,NULL,"DupeUniqNameNew"," duplicate so result is unique names, replacing with new ones where dupl","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_DupeUniqNameNew_stub,TA_taGroup_impl_DupeUniqNameNew_MethArgs},
  {&TA_void,NULL,"DupeUniqNameOld"," duplicate so result is unique names, using old ones where dupl","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_DupeUniqNameOld_stub,TA_taGroup_impl_DupeUniqNameOld_MethArgs},
  {&TA_void,NULL,"Borrow"," borrow (link) elements of given list into this one","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_Borrow_stub,TA_taGroup_impl_Borrow_MethArgs},
  {&TA_void,NULL,"BorrowUnique"," borrow so result is unique list","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_BorrowUnique_stub,TA_taGroup_impl_BorrowUnique_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameNew"," borrow so result is unique names, replacing with new ones where dupl","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_BorrowUniqNameNew_stub,TA_taGroup_impl_BorrowUniqNameNew_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameOld"," borrow so result is unique names, using old ones where dupl","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_BorrowUniqNameOld_stub,TA_taGroup_impl_BorrowUniqNameOld_MethArgs},
  {&TA_void,NULL,"Copy_Common"," apply copy operator to only those items in common between the two lists","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_Copy_Common_stub,TA_taGroup_impl_Copy_Common_MethArgs},
  {&TA_void,NULL,"Copy_Duplicate"," apply copy operator to items, use duplicate to add new ones from cp (if necc)","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_Copy_Duplicate_stub,TA_taGroup_impl_Copy_Duplicate_MethArgs},
  {&TA_void,NULL,"Copy_Borrow"," apply copy operator to items, use borrow to add new ones from cp (if necc)","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_Copy_Borrow_stub,TA_taGroup_impl_Copy_Borrow_MethArgs},
  {&TA_void,NULL,"EnforceSameStru"," make the two lists identical in terms of size and types of objects","","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_EnforceSameStru_stub,TA_taGroup_impl_EnforceSameStru_MethArgs},
  {&TA_void,NULL,"InitLeafGp"," Initialize the leaf group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_impl_InitLeafGp_stub,NULL},
  {&TA_bool,NULL,"RemoveLeaf"," remove given leaf element Remove leaf element at leaf index","","",
    2,1,-1,0,NULL,cssElCFun_taGroup_impl_RemoveLeaf_stub,TA_taGroup_impl_RemoveLeaf_MethArgs},
  {&TA_bool,NULL,"RemoveLeafName"," remove given named leaf element ","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_impl_RemoveLeafName_stub,TA_taGroup_impl_RemoveLeafName_MethArgs},
  {&TA_bool,NULL,"RemoveLeafEl"," Remove given leaf element","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_impl_RemoveLeafEl_stub,TA_taGroup_impl_RemoveLeafEl_MethArgs},
  {&TA_bool,NULL,"RemoveGp"," remove group at given index remove given group ","MENU FROM_GROUP_gp MENU_ON_Edit UPDATE_MENUS ","",
    1,1,-1,0,NULL,cssElCFun_taGroup_impl_RemoveGp_stub,TA_taGroup_impl_RemoveGp_MethArgs},
  {&TA_TALOG_ptr,NULL,"EditSubGps"," edit the list of sub-groups (e.g., so you can move around subgroups)","MENU USE_RVAL ","",
    0,0,-1,0,NULL,cssElCFun_taGroup_impl_EditSubGps_stub,NULL},
  {&TA_void,NULL,"EnforceLeaves"," ensure that sz leaves exits by adding new ones to top group and removing old ones from end","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_impl_EnforceLeaves_stub,TA_taGroup_impl_EnforceLeaves_MethArgs},
  {&TA_int,NULL,"FindLeaf"," find given leaf element (-1 = not here) find named leaf element","","",
    2,1,-1,0,NULL,cssElCFun_taGroup_impl_FindLeaf_stub,TA_taGroup_impl_FindLeaf_MethArgs},
  {&TA_int,NULL,"FindLeafEl"," find given leaf element -1 = not here. ","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_impl_FindLeafEl_stub,TA_taGroup_impl_FindLeafEl_MethArgs},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__MoveBefore_MethArgs[]={
  {NULL,"::taGroup_impl_ptr","trg",""},
  {NULL,"::taGroup_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__MoveAfter_MethArgs[]={
  {NULL,"::taGroup_impl_ptr","trg",""},
  {NULL,"::taGroup_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__Edit_El_MethArgs[]={
  {NULL,"::taGroup_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__AddUniqNameOld_MethArgs[]={
  {NULL,"::taGroup_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taGroup_impl__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taGroup_impl_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_taGroup_impl__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_taGroup_impl__MoveBefore_stub,TA_taList_taGroup_impl__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_taGroup_impl__MoveAfter_stub,TA_taList_taGroup_impl__MoveAfter_MethArgs},
  {NULL,"::taGroup_impl_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_taGroup_impl__SafeEl_stub,TA_taList_taGroup_impl__SafeEl_MethArgs},
  {NULL,"::taGroup_impl_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_taGroup_impl__FastEl_stub,TA_taList_taGroup_impl__FastEl_MethArgs},
  {NULL,"::taGroup_impl_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_taGroup_impl__DefaultEl_stub,NULL},
  {NULL,"::taGroup_impl_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_taGroup_impl__Edit_El_stub,TA_taList_taGroup_impl__Edit_El_MethArgs},
  {NULL,"::taGroup_impl_ptr","FindName"," Find element with given name (item_nm) ","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_taGroup_impl__FindName_stub,TA_taList_taGroup_impl__FindName_MethArgs},
  {NULL,"::taGroup_impl_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_taGroup_impl__FindType_stub,TA_taList_taGroup_impl__FindType_MethArgs},
  {NULL,"::taGroup_impl_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_taGroup_impl__Pop_stub,NULL},
  {NULL,"::taGroup_impl_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_taGroup_impl__Peek_stub,NULL},
  {NULL,"::taGroup_impl_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_taGroup_impl__AddUniqNameOld_stub,TA_taList_taGroup_impl__AddUniqNameOld_MethArgs},
  {NULL,"::taGroup_impl_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_taGroup_impl__LinkUniqNameOld_stub,TA_taList_taGroup_impl__LinkUniqNameOld_MethArgs},
  NULL};
static MethodArgs_data TA_taSubGroup_Transfer_MethArgs[]={
  {&TA_taBase_ptr,NULL,"item",""},
  NULL};
static MethodDef_data TA_taSubGroup_MethodDef[]={
  {&TA_bool,NULL,"Transfer"," Transfer element to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    1,1,-1,0,NULL,cssElCFun_taSubGroup_Transfer_stub,TA_taSubGroup_Transfer_MethArgs},
  NULL};
static int taLeafItr::* TA_taLeafItr_MbrOff;
static MemberDef_data TA_taLeafItr_MemberDef[]={
  {&TA_TAGPtr,NULL,"cgp"," pointer to current group","","",
    *((ta_memb_ptr*)&(TA_taLeafItr_MbrOff=(int taLeafItr::*)(&taLeafItr::cgp))),0,NULL,0},
  {&TA_int,NULL,"g"," index of current group","","",
    *((ta_memb_ptr*)&(TA_taLeafItr_MbrOff=(int taLeafItr::*)(&taLeafItr::g))),0,NULL,0},
  {&TA_int,NULL,"i"," index of current leaf element","","",
    *((ta_memb_ptr*)&(TA_taLeafItr_MbrOff=(int taLeafItr::*)(&taLeafItr::i))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taGroup_taBase__MoveBefore_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__MoveAfter_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__Edit_El_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","0"},
  NULL};
static MethodArgs_data TA_taGroup_taBase__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","0"},
  NULL};
static MethodArgs_data TA_taGroup_taBase__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_taBase__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_taBase__AddUniqNameOld_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_taBase__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_taBase__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_taBase__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_taBase__MoveBefore_stub,TA_taGroup_taBase__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_taBase__MoveAfter_stub,TA_taGroup_taBase__MoveAfter_MethArgs},
  {NULL,"::taBase_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__SafeEl_stub,TA_taGroup_taBase__SafeEl_MethArgs},
  {NULL,"::taBase_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__FastEl_stub,TA_taGroup_taBase__FastEl_MethArgs},
  {NULL,"::taBase_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_taBase__DefaultEl_stub,NULL},
  {NULL,"::taBase_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__Edit_El_stub,TA_taGroup_taBase__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__SafeGp_stub,TA_taGroup_taBase__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__FastGp_stub,TA_taGroup_taBase__FastGp_MethArgs},
  {NULL,"::taBase_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__Leaf_stub,TA_taGroup_taBase__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__LeafGp_stub,TA_taGroup_taBase__LeafGp_MethArgs},
  {NULL,"::taBase_ptr","FirstEl"," returns first leaf element and inits indexes","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__FirstEl_stub,TA_taGroup_taBase__FirstEl_MethArgs},
  {NULL,"::taBase_ptr","NextEl"," returns next leaf element and incs indexes","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__NextEl_stub,TA_taGroup_taBase__NextEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__FirstGp_stub,TA_taGroup_taBase__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__NextGp_stub,TA_taGroup_taBase__NextGp_MethArgs},
  {NULL,"::taBase_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_taBase__NewEl_stub,TA_taGroup_taBase__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_taBase__NewGp_stub,TA_taGroup_taBase__NewGp_MethArgs},
  {NULL,"::taBase_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_taBase__FindName_stub,TA_taGroup_taBase__FindName_MethArgs},
  {NULL,"::taBase_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_taBase__FindType_stub,TA_taGroup_taBase__FindType_MethArgs},
  {NULL,"::taBase_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_taBase__Pop_stub,NULL},
  {NULL,"::taBase_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_taBase__Peek_stub,NULL},
  {NULL,"::taBase_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__AddUniqNameOld_stub,TA_taGroup_taBase__AddUniqNameOld_MethArgs},
  {NULL,"::taBase_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_taBase__LinkUniqNameOld_stub,TA_taGroup_taBase__LinkUniqNameOld_MethArgs},
  {NULL,"::taBase_ptr","FindLeafName"," Find element with given name (el_nm) ","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_taBase__FindLeafName_stub,TA_taGroup_taBase__FindLeafName_MethArgs},
  {NULL,"::taBase_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_taBase__FindLeafType_stub,TA_taGroup_taBase__FindLeafType_MethArgs},
  NULL};
static int NameValue::* TA_NameValue_MbrOff;
static MemberDef_data TA_NameValue_MemberDef[]={
  {&TA_taString,NULL,"value"," Value for name","","",
    *((ta_memb_ptr*)&(TA_NameValue_MbrOff=(int NameValue::*)(&NameValue::value))),0,NULL,0},
  NULL};
static int TypeDefault::* TA_TypeDefault_MbrOff;
static MemberDef_data TA_TypeDefault_MemberDef[]={
  {&TA_TypeDef_ptr,NULL,"old_type"," has previous type (if default_type changes)","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_TypeDefault_MbrOff=(int TypeDefault::*)(&TypeDefault::old_type))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"default_type"," type of the default","TYPE_taBase ","",
    *((ta_memb_ptr*)&(TA_TypeDefault_MbrOff=(int TypeDefault::*)(&TypeDefault::default_type))),0,NULL,0},
  {&TA_TAPtr,NULL,"token"," token which has default values","DEFAULT_EDIT NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_TypeDefault_MbrOff=(int TypeDefault::*)(&TypeDefault::token))),0,NULL,0},
  {&TA_taBase_List,NULL,"active_membs"," MemberName / MemberValue pairs","","",
    *((ta_memb_ptr*)&(TA_TypeDefault_MbrOff=(int TypeDefault::*)(&TypeDefault::active_membs))),0,NULL,0},
  {&TA_unsigned_long_ary,NULL,"active"," bits representing a memberdefs activity in a default","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_TypeDefault_MbrOff=(int TypeDefault::*)(&TypeDefault::active))),0,NULL,0},
  NULL};
static MethodArgs_data TA_TypeDefault_SetActive_MethArgs[]={
  {&TA_char_ptr,NULL,"memb_nm",""},
  {&TA_bool,NULL,"onoff",""},
  NULL};
static MethodArgs_data TA_TypeDefault_GetActive_MethArgs[]={
  {&TA_char_ptr,NULL,"memb_nm",""},
  NULL};
static MethodDef_data TA_TypeDefault_MethodDef[]={
  {&TA_void,NULL,"SetActive"," set active bit set active flag for member","","",
    1,2,-1,0,NULL,cssElCFun_TypeDefault_SetActive_stub,TA_TypeDefault_SetActive_MethArgs},
  {&TA_bool,NULL,"GetActive"," check active bit check active flag for member","","",
    1,1,-1,0,NULL,cssElCFun_TypeDefault_GetActive_stub,TA_TypeDefault_GetActive_MethArgs},
  {&TA_void,NULL,"UpdateToNameValue"," set the name value data from token","","",
    0,0,-1,0,NULL,cssElCFun_TypeDefault_UpdateToNameValue_stub,NULL},
  {&TA_void,NULL,"UpdateFromNameValue"," set the token form the name values","","",
    0,0,-1,0,NULL,cssElCFun_TypeDefault_UpdateFromNameValue_stub,NULL},
  NULL};
static MemberDef_data TA_taivMisc_MemberDef[]={
  {&TA_bool,NULL,"iv_active"," indicates if iv has been started up or not","READ_ONLY ","",
    (ta_memb_ptr)NULL,1,(void*)(&taivMisc::iv_active),0},
  {&TA_ivWindow_List,NULL,"delete_wins"," list of windows to delete (delayed)","IGONRE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taivMisc::delete_wins),0},
  {&TA_int,NULL,"busy_count"," levels of busy","","",
    (ta_memb_ptr)NULL,1,(void*)(&taivMisc::busy_count),0},
  {&TA_TypeSpace,NULL,"arg_types"," list of all taivArgTypes","","",
    (ta_memb_ptr)NULL,1,(void*)(&taivMisc::arg_types),0},
  {&TA_ostream_ptr,NULL,"record_script"," stream to use for recording a script of interface activity (NULL if no record)","","",
    (ta_memb_ptr)NULL,1,(void*)(&taivMisc::record_script),0},
  NULL};
static MethodArgs_data TA_taivMisc_StartRecording_MethArgs[]={
  {&TA_ostream_ptr,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_taivMisc_RecordScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"cmd",""},
  NULL};
static MethodArgs_data TA_taivMisc_ScriptRecordAssignment_MethArgs[]={
  {&TA_taBase_ptr,NULL,"tab",""},
  {&TA_MemberDef_ptr,NULL,"md",""},
  NULL};
static MethodArgs_data TA_taivMisc_SRIAssignment_MethArgs[]={
  {&TA_taBase_ptr,NULL,"tab",""},
  {&TA_MemberDef_ptr,NULL,"md",""},
  NULL};
static MethodArgs_data TA_taivMisc_SREAssignment_MethArgs[]={
  {&TA_taBase_ptr,NULL,"tab",""},
  {&TA_MemberDef_ptr,NULL,"md",""},
  NULL};
static MethodArgs_data TA_taivMisc_RevertEdits_MethArgs[]={
  {&TA_void_ptr,NULL,"obj",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_taivMisc_CloseEdits_MethArgs[]={
  {&TA_void_ptr,NULL,"obj",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_taivMisc_NotifyEdits_MethArgs[]={
  {&TA_void_ptr,NULL,"obj",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_taivMisc_FindEdit_MethArgs[]={
  {&TA_void_ptr,NULL,"obj",""},
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_taivMisc_SetLoadDialog_MethArgs[]={
  {&TA_char_ptr,NULL,"tpname",""},
  NULL};
static MethodDef_data TA_taivMisc_MethodDef[]={
  {&TA_void,NULL,"Busy"," puts system in a 'busy' state (pointer, no input)","","",
    0,0,-1,1,(ta_void_fun)(taivMisc::Busy),cssElCFun_taivMisc_Busy_stub,NULL},
  {&TA_void,NULL,"DoneBusy"," when no longer busy, call this function","","",
    0,0,-1,1,(ta_void_fun)(taivMisc::DoneBusy),cssElCFun_taivMisc_DoneBusy_stub,NULL},
  {&TA_void,NULL,"StartRecording"," sets record_strm and record_cursor","","",
    0,1,-1,1,(ta_void_fun)(taivMisc::StartRecording),cssElCFun_taivMisc_StartRecording_stub,TA_taivMisc_StartRecording_MethArgs},
  {&TA_void,NULL,"StopRecording"," unsets record_strm and record_cursor","","",
    0,0,-1,1,(ta_void_fun)(taivMisc::StopRecording),cssElCFun_taivMisc_StopRecording_stub,NULL},
  {&TA_int,NULL,"RunIV"," run iv event loop","","",
    0,0,-1,1,(ta_void_fun)(taivMisc::RunIV),cssElCFun_taivMisc_RunIV_stub,NULL},
  {&TA_int,NULL,"RunIVPending"," run any pending iv events that might need processed","","",
    0,0,-1,1,(ta_void_fun)(taivMisc::RunIVPending),cssElCFun_taivMisc_RunIVPending_stub,NULL},
  {&TA_int,NULL,"FlushIVPending"," run multiple loops of iv pending to flush out all pending events","","",
    0,0,-1,1,(ta_void_fun)(taivMisc::FlushIVPending),cssElCFun_taivMisc_FlushIVPending_stub,NULL},
  {&TA_bool,NULL,"RecordScript"," record the given script command, if the script is open (just sends cmd to stream)","","",
    0,1,-1,1,(ta_void_fun)(taivMisc::RecordScript),cssElCFun_taivMisc_RecordScript_stub,TA_taivMisc_RecordScript_MethArgs},
  {&TA_void,NULL,"ScriptRecordAssignment"," record last script assignment of tab's md value;","","",
    0,2,-1,1,(ta_void_fun)(taivMisc::ScriptRecordAssignment),cssElCFun_taivMisc_ScriptRecordAssignment_stub,TA_taivMisc_ScriptRecordAssignment_MethArgs},
  {&TA_void,NULL,"SRIAssignment"," record inline md assignment","","",
    0,2,-1,1,(ta_void_fun)(taivMisc::SRIAssignment),cssElCFun_taivMisc_SRIAssignment_stub,TA_taivMisc_SRIAssignment_MethArgs},
  {&TA_void,NULL,"SREAssignment"," record enum md assignment","","",
    0,2,-1,1,(ta_void_fun)(taivMisc::SREAssignment),cssElCFun_taivMisc_SREAssignment_stub,TA_taivMisc_SREAssignment_MethArgs},
  {&TA_void,NULL,"PurgeDialogs"," remove any 'NoBlock' dialogs from active list (& delete them)","","",
    0,0,-1,1,(ta_void_fun)(taivMisc::PurgeDialogs),cssElCFun_taivMisc_PurgeDialogs_stub,NULL},
  {&TA_bool,NULL,"RevertEdits"," revert any open edit dialogs for given object","","",
    0,2,-1,1,(ta_void_fun)(taivMisc::RevertEdits),cssElCFun_taivMisc_RevertEdits_stub,TA_taivMisc_RevertEdits_MethArgs},
  {&TA_bool,NULL,"CloseEdits"," close any open edit dialogs for object or sub-objs","","",
    0,2,-1,1,(ta_void_fun)(taivMisc::CloseEdits),cssElCFun_taivMisc_CloseEdits_stub,TA_taivMisc_CloseEdits_MethArgs},
  {&TA_bool,NULL,"NotifyEdits"," notifies any open edit dialogs for given object that a change in its data has occured","","",
    0,2,-1,1,(ta_void_fun)(taivMisc::NotifyEdits),cssElCFun_taivMisc_NotifyEdits_stub,TA_taivMisc_NotifyEdits_MethArgs},
  {&TA_taivEditDialog_ptr,NULL,"FindEdit"," find first active edit dialog for this object","","",
    0,2,-1,1,(ta_void_fun)(taivMisc::FindEdit),cssElCFun_taivMisc_FindEdit_stub,TA_taivMisc_FindEdit_MethArgs},
  {&TA_void,NULL,"CreateLoadDialog","","","",
    0,0,-1,1,(ta_void_fun)(taivMisc::CreateLoadDialog),cssElCFun_taivMisc_CreateLoadDialog_stub,NULL},
  {&TA_void,NULL,"RemoveLoadDialog","","","",
    0,0,-1,1,(ta_void_fun)(taivMisc::RemoveLoadDialog),cssElCFun_taivMisc_RemoveLoadDialog_stub,NULL},
  {&TA_void,NULL,"SetLoadDialog","","","",
    0,1,-1,1,(ta_void_fun)(taivMisc::SetLoadDialog),cssElCFun_taivMisc_SetLoadDialog_stub,TA_taivMisc_SetLoadDialog_MethArgs},
  NULL};
static int HighlightBG::* TA_HighlightBG_MbrOff;
static MemberDef_data TA_HighlightBG_MemberDef[]={
  {&TA_bool,NULL,"highlight"," whether to highlight or not","","",
    *((ta_memb_ptr*)&(TA_HighlightBG_MbrOff=(int HighlightBG::*)(&HighlightBG::highlight))),0,NULL,0},
  NULL};
static MethodArgs_data TA_HighlightBG_allocate_MethArgs[]={
  {&TA_ivCanvas_ptr,NULL,"na",""},
  {&TA_const_ivAllocation_ref,NULL,"na",""},
  {&TA_ivExtension_ref,NULL,"na",""},
  NULL};
static MethodArgs_data TA_HighlightBG_draw_MethArgs[]={
  {&TA_ivCanvas_ptr,NULL,"na",""},
  {&TA_const_ivAllocation_ref,NULL,"na",""},
  NULL};
static MethodArgs_data TA_HighlightBG_print_MethArgs[]={
  {&TA_ivPrinter_ptr,NULL,"na",""},
  {&TA_const_ivAllocation_ref,NULL,"na",""},
  NULL};
static MethodDef_data TA_HighlightBG_MethodDef[]={
  {&TA_void,NULL,"allocate","","","",
    1,3,-1,0,NULL,cssElCFun_HighlightBG_allocate_stub,TA_HighlightBG_allocate_MethArgs},
  {&TA_void,NULL,"draw","","","",
    1,2,-1,0,NULL,cssElCFun_HighlightBG_draw_stub,TA_HighlightBG_draw_MethArgs},
  {&TA_void,NULL,"print","","","",
    1,2,-1,0,NULL,cssElCFun_HighlightBG_print_stub,TA_HighlightBG_print_MethArgs},
  NULL};
static int SelectEditConfig::* TA_SelectEditConfig_MbrOff;
static MemberDef_data TA_SelectEditConfig_MemberDef[]={
  {&TA_bool,NULL,"auto_edit"," automatically bring up edit dialog upon loading","","",
    *((ta_memb_ptr*)&(TA_SelectEditConfig_MbrOff=(int SelectEditConfig::*)(&SelectEditConfig::auto_edit))),0,NULL,0},
  {&TA_String_Array,NULL,"mbr_labels"," extra labels at the start of each member label for the selected fields","","",
    *((ta_memb_ptr*)&(TA_SelectEditConfig_MbrOff=(int SelectEditConfig::*)(&SelectEditConfig::mbr_labels))),0,NULL,0},
  {&TA_String_Array,NULL,"meth_labels"," extra labels at the start of each method label for the selected functions","","",
    *((ta_memb_ptr*)&(TA_SelectEditConfig_MbrOff=(int SelectEditConfig::*)(&SelectEditConfig::meth_labels))),0,NULL,0},
  NULL};

// Init Function


static bool ta_Init_ta_done = false;

void ta_Init_ta() {
  TypeDef* sbt;

  if(ta_Init_ta_done) return;
  ta_Init_ta_done = true;


  taMisc::in_init = true;

  taMisc::types.Add(&TA_void);
  taMisc::types.Add(&TA_int);
  taMisc::types.Add(&TA_short);
  taMisc::types.Add(&TA_long);
  taMisc::types.Add(&TA_char);
  taMisc::types.Add(&TA_unsigned);
  taMisc::types.Add(&TA_signed);
  taMisc::types.Add(&TA_float);
  taMisc::types.Add(&TA_double);
  taMisc::types.Add(&TA_bool);
  taMisc::types.Add(&TA_const);
  taMisc::types.Add(&TA_enum);
  taMisc::types.Add(&TA_struct);
  taMisc::types.Add(&TA_union);
  taMisc::types.Add(&TA_class);
  taMisc::types.Add(&TA_template);
  taMisc::types.Add(&TA_templ_inst);
  taMisc::types.Add(&TA_ta_array);
  taMisc::types.Add(&TA_taBase);
    TAI_taBase = new taBase;
    TA_taBase.AddParFormal(&TA_class);
    tac_AddMethods(TA_taBase,TA_taBase_MethodDef);
  taMisc::types.Add(&TA_taRegFun);
  taMisc::types.Add(&TA_taString);
    TA_taString.AddParFormal(&TA_class);
    tac_AddMethods(TA_taString,TA_taString_MethodDef);
  taMisc::types.Add(&TA_taSubString);
    TA_taSubString.AddParFormal(&TA_class);
    tac_AddMethods(TA_taSubString,TA_taSubString_MethodDef);
  taMisc::types.Add(&TA_void_ptr);
    TA_void_ptr.AddParents(&TA_void);
  taMisc::types.Add(&TA_streambuf);
    TA_streambuf.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_signed_long);
    TA_signed_long.AddParents(&TA_signed, &TA_long);
  taMisc::types.Add(&TA_signed_long_long);
    TA_signed_long_long.AddParents(&TA_signed_long, &TA_long);
  taMisc::types.Add(&TA_signed_long_long_int);
    TA_signed_long_long_int.AddParents(&TA_signed_long_long, &TA_int);
  taMisc::types.Add(&TA_streampos);
    TA_streampos.AddParents(&TA_signed_long_long_int);
  taMisc::types.Add(&TA_streamoff);
    TA_streamoff.AddParents(&TA_signed_long_long_int);
  taMisc::types.Add(&TA_streamsize);
    TA_streamsize.AddParents(&TA_int);
  taMisc::types.Add(&TA__Ios_Fmtflags);
    TA__Ios_Fmtflags.AddParFormal(&TA_enum);
    tac_ThisEnum(TA__Ios_Fmtflags, TA__Ios_Fmtflags_EnumDef);
  taMisc::types.Add(&TA__Ios_Openmode);
    TA__Ios_Openmode.AddParFormal(&TA_enum);
    tac_ThisEnum(TA__Ios_Openmode, TA__Ios_Openmode_EnumDef);
  taMisc::types.Add(&TA__Ios_Iostate);
    TA__Ios_Iostate.AddParFormal(&TA_enum);
    tac_ThisEnum(TA__Ios_Iostate, TA__Ios_Iostate_EnumDef);
  taMisc::types.Add(&TA__Ios_Seekdir);
    TA__Ios_Seekdir.AddParFormal(&TA_enum);
    tac_ThisEnum(TA__Ios_Seekdir, TA__Ios_Seekdir_EnumDef);
  taMisc::types.Add(&TA_void_ptr_ref);
    TA_void_ptr_ref.AddParents(&TA_void_ptr);
  taMisc::types.Add(&TA_long_ref);
    TA_long_ref.AddParents(&TA_long);
  taMisc::types.Add(&TA_ios);
    TA_ios.AddParFormal(&TA_class);
    tac_AddEnum(TA_ios, "fmtflags", "", "", "", "", TA_ios_fmtflags);
    tac_AddEnum(TA_ios, "iostate", "", "", "", "", TA_ios_iostate);
    tac_AddEnum(TA_ios, "openmode", "", "", "", "", TA_ios_openmode);
    tac_AddEnum(TA_ios, "seekdir", "", "", "", "", TA_ios_seekdir);
    tac_AddMethods(TA_ios,TA_ios_MethodDef);
  taMisc::types.Add(&TA_ostream);
    TA_ostream.AddParFormal(&TA_class);
    TA_ostream.AddClassPar(&TA_ios,0);
    tac_AddMethods(TA_ostream,TA_ostream_MethodDef);
  taMisc::types.Add(&TA_istream);
    TA_istream.AddParFormal(&TA_class);
    TA_istream.AddClassPar(&TA_ios,0);
    tac_AddMethods(TA_istream,TA_istream_MethodDef);
  taMisc::types.Add(&TA_ostream_ref);
    TA_ostream_ref.AddParents(&TA_ostream);
  taMisc::types.Add(&TA_ostream_ptr);
    TA_ostream_ptr.AddParents(&TA_ostream);
  taMisc::types.Add(&TA_const_char);
    TA_const_char.AddParents(&TA_const, &TA_char);
  taMisc::types.Add(&TA_const_char_ptr);
    TA_const_char_ptr.AddParents(&TA_const_char);
  taMisc::types.Add(&TA_istream_ref);
    TA_istream_ref.AddParents(&TA_istream);
  taMisc::types.Add(&TA_char_ptr);
    TA_char_ptr.AddParents(&TA_char);
  taMisc::types.Add(&TA_iostream);
    TA_iostream.AddParFormal(&TA_class);
    TA_iostream.AddClassPar(&TA_istream,0, &TA_ostream,0);
    tac_AddMethods(TA_iostream,TA_iostream_MethodDef);
  taMisc::types.Add(&TA_ifstream);
    TA_ifstream.AddParFormal(&TA_class);
    TA_ifstream.AddClassPar(&TA_istream,0);
    tac_AddMethods(TA_ifstream,TA_ifstream_MethodDef);
  taMisc::types.Add(&TA_ofstream);
    TA_ofstream.AddParFormal(&TA_class);
    TA_ofstream.AddClassPar(&TA_ostream,0);
    tac_AddMethods(TA_ofstream,TA_ofstream_MethodDef);
  taMisc::types.Add(&TA_fstream);
    TA_fstream.AddParFormal(&TA_class);
    TA_fstream.AddClassPar(&TA_iostream,0);
    tac_AddMethods(TA_fstream,TA_fstream_MethodDef);
  taMisc::types.Add(&TA_istringstream);
    TA_istringstream.AddParFormal(&TA_class);
    TA_istringstream.AddClassPar(&TA_istream,0);
  taMisc::types.Add(&TA_ostringstream);
    TA_ostringstream.AddParFormal(&TA_class);
    TA_ostringstream.AddClassPar(&TA_ostream,0);
  taMisc::types.Add(&TA_stringstream);
    TA_stringstream.AddParFormal(&TA_class);
    TA_stringstream.AddClassPar(&TA_iostream,0);
  taMisc::types.Add(&TA_unsigned_short);
    TA_unsigned_short.AddParents(&TA_unsigned, &TA_short);
  taMisc::types.Add(&TA_char_ary);
    TA_char_ary.AddParFormal(&TA_ta_array);
    TA_char_ary.AddParents(&TA_char);
  taMisc::types.Add(&TA_taStrRep);
    TA_taStrRep.AddParFormal(&TA_class);
    tac_AddMembers(TA_taStrRep,TA_taStrRep_MemberDef);
  taMisc::types.Add(&TA_taString_ref);
    TA_taString_ref.AddParents(&TA_taString);
  taMisc::types.Add(&TA_const_taStrRep);
    TA_const_taStrRep.AddParents(&TA_const, &TA_taStrRep);
  taMisc::types.Add(&TA_const_taStrRep_ptr);
    TA_const_taStrRep_ptr.AddParents(&TA_const_taStrRep);
  taMisc::types.Add(&TA_const_taSubString);
    TA_const_taSubString.AddParents(&TA_const, &TA_taSubString);
  taMisc::types.Add(&TA_const_taSubString_ref);
    TA_const_taSubString_ref.AddParents(&TA_const_taSubString);
  taMisc::types.Add(&TA_taSubString_ref);
    TA_taSubString_ref.AddParents(&TA_taSubString);
  taMisc::types.Add(&TA_const_taString);
    TA_const_taString.AddParents(&TA_const, &TA_taString);
  taMisc::types.Add(&TA_const_taString_ref);
    TA_const_taString_ref.AddParents(&TA_const_taString);
  taMisc::types.Add(&TA_unsigned_int);
    TA_unsigned_int.AddParents(&TA_unsigned, &TA_int);
  taMisc::types.Add(&TA_taStrRep_ptr);
    TA_taStrRep_ptr.AddParents(&TA_taStrRep);
  taMisc::types.Add(&TA_char_ref);
    TA_char_ref.AddParents(&TA_char);
  taMisc::types.Add(&TA_const_char_ref);
    TA_const_char_ref.AddParents(&TA_const_char);
  taMisc::types.Add(&TA_uint);
    TA_uint.AddParents(&TA_unsigned_int);
  taMisc::types.Add(&TA_unsigned_long);
    TA_unsigned_long.AddParents(&TA_unsigned, &TA_long);
  taMisc::types.Add(&TA_ulong);
    TA_ulong.AddParents(&TA_unsigned_long);
  taMisc::types.Add(&TA_taPtrList_impl);
    TA_taPtrList_impl.AddParFormal(&TA_class);
    tac_AddMembers(TA_taPtrList_impl,TA_taPtrList_impl_MemberDef);
    tac_AddMethods(TA_taPtrList_impl,TA_taPtrList_impl_MethodDef);
  taMisc::types.Add(&TA_taPtrList_impl_ptr);
    TA_taPtrList_impl_ptr.AddParents(&TA_taPtrList_impl);
  taMisc::types.Add(&TA_TALPtr);
    TA_TALPtr.AddParents(&TA_taPtrList_impl_ptr);
  taMisc::types.Add(&TA_void_ptr_ptr);
    TA_void_ptr_ptr.AddParents(&TA_void);
  taMisc::types.Add(&TA_const_taPtrList_impl);
    TA_const_taPtrList_impl.AddParents(&TA_const, &TA_taPtrList_impl);
  taMisc::types.Add(&TA_const_taPtrList_impl_ref);
    TA_const_taPtrList_impl_ref.AddParents(&TA_const_taPtrList_impl);
  taMisc::types.Add(&TA_int_ref);
    TA_int_ref.AddParents(&TA_int);
  taMisc::types.Add(&TA_taArray_impl);
    TA_taArray_impl.AddParFormal(&TA_class);
    tac_AddMembers(TA_taArray_impl,TA_taArray_impl_MemberDef);
    tac_AddMethods(TA_taArray_impl,TA_taArray_impl_MethodDef);
  taMisc::types.Add(&TA_const_taArray_impl);
    TA_const_taArray_impl.AddParents(&TA_const, &TA_taArray_impl);
  taMisc::types.Add(&TA_taPtrList);
    TA_taPtrList.AddParFormal(&TA_class, &TA_template);
    TA_taPtrList.AddParents(&TA_taPtrList_impl);
  taMisc::types.Add(&TA_const_taArray_impl_ref);
    TA_const_taArray_impl_ref.AddParents(&TA_const_taArray_impl);
  taMisc::types.Add(&TA_taHashVal);
    TA_taHashVal.AddParents(&TA_unsigned_long);
  taMisc::types.Add(&TA_const_taPtrList);
    TA_const_taPtrList.AddParents(&TA_const, &TA_taPtrList);
  taMisc::types.Add(&TA_taHashEl);
    TA_taHashEl.AddParFormal(&TA_class);
    tac_AddMembers(TA_taHashEl,TA_taHashEl_MemberDef);
    tac_AddMethods(TA_taHashEl,TA_taHashEl_MethodDef);
  taMisc::types.Add(&TA_const_taPtrList_ref);
    TA_const_taPtrList_ref.AddParents(&TA_const_taPtrList);
  taMisc::types.Add(&TA_taPtrList_taHashEl_);
    TAI_taPtrList_taHashEl_ = new taPtrList<taHashEl>;
    TA_taPtrList_taHashEl_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taHashEl_.AddClassPar(&TA_taPtrList,0);
    sbt = new TypeDef("taHashEl_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taHashEl);
    TA_taPtrList_taHashEl_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_taHashEl_,TA_taPtrList_taHashEl__MethodDef);
  taMisc::types.Add(&TA_taHashEl_ptr);
    TA_taHashEl_ptr.AddParents(&TA_taHashEl);
  taMisc::types.Add(&TA_taHashBucket);
    TA_taHashBucket.AddParFormal(&TA_class);
    TA_taHashBucket.AddClassPar(&TA_taPtrList_taHashEl_,0);
    tac_AddMethods(TA_taHashBucket,TA_taHashBucket_MethodDef);
  taMisc::types.Add(&TA_taPtrList_taHashBucket_);
    TAI_taPtrList_taHashBucket_ = new taPtrList<taHashBucket>;
    TA_taPtrList_taHashBucket_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taHashBucket_.AddClassPar(&TA_taPtrList,0);
    sbt = new TypeDef("taHashBucket_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taHashBucket);
    TA_taPtrList_taHashBucket_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_taHashBucket_,TA_taPtrList_taHashBucket__MethodDef);
  taMisc::types.Add(&TA_int_ary);
    TA_int_ary.AddParFormal(&TA_ta_array);
    TA_int_ary.AddParents(&TA_int);
  taMisc::types.Add(&TA_taHashTable);
    TA_taHashTable.AddParFormal(&TA_class);
    TA_taHashTable.AddClassPar(&TA_taPtrList_taHashBucket_,0);
    tac_AddMembers(TA_taHashTable,TA_taHashTable_MemberDef);
    tac_AddMethods(TA_taHashTable,TA_taHashTable_MethodDef);
  taMisc::types.Add(&TA_taHashBucket_ptr);
    TA_taHashBucket_ptr.AddParents(&TA_taHashBucket);
  taMisc::types.Add(&TA_taHashTable_ptr);
    TA_taHashTable_ptr.AddParents(&TA_taHashTable);
  taMisc::types.Add(&TA_const_taHashTable);
    TA_const_taHashTable.AddParents(&TA_const, &TA_taHashTable);
  taMisc::types.Add(&TA_const_taHashTable_ref);
    TA_const_taHashTable_ref.AddParents(&TA_const_taHashTable);
  taMisc::types.Add(&TA_taPtrList_base);
    TA_taPtrList_base.AddParFormal(&TA_class, &TA_template);
    TA_taPtrList_base.AddParents(&TA_taPtrList_impl);
  taMisc::types.Add(&TA_const_taPtrList_base);
    TA_const_taPtrList_base.AddParents(&TA_const, &TA_taPtrList_base);
  taMisc::types.Add(&TA_taPlainArray);
    TA_taPlainArray.AddParFormal(&TA_class, &TA_template);
    TA_taPlainArray.AddParents(&TA_taArray_impl);
  taMisc::types.Add(&TA_const_taPtrList_base_ref);
    TA_const_taPtrList_base_ref.AddParents(&TA_const_taPtrList_base);
  taMisc::types.Add(&TA_const_taPlainArray);
    TA_const_taPlainArray.AddParents(&TA_const, &TA_taPlainArray);
  taMisc::types.Add(&TA_const_taPlainArray_ref);
    TA_const_taPlainArray_ref.AddParents(&TA_const_taPlainArray);
  taMisc::types.Add(&TA_taivType);
    TAI_taivType = new taivType;
    TA_taivType.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taivEdit);
    TAI_taivEdit = new taivEdit;
    TA_taivEdit.AddParFormal(&TA_class);
    TA_taivEdit.AddClassPar(&TA_taivType,0);
  taMisc::types.Add(&TA_taivMember);
    TAI_taivMember = new taivMember;
    TA_taivMember.AddParFormal(&TA_class);
    TA_taivMember.AddClassPar(&TA_taivType,0);
  taMisc::types.Add(&TA_taivMethod);
    TAI_taivMethod = new taivMethod;
    TA_taivMethod.AddParFormal(&TA_class);
    TA_taivMethod.AddClassPar(&TA_taivType,0);
  taMisc::types.Add(&TA_css_fun_stub_ptr);
    TA_css_fun_stub_ptr.AddParents(&TA_void_ptr);
  taMisc::types.Add(&TA_ta_void_fun);
    TA_ta_void_fun.AddParents(&TA_void_ptr);
  taMisc::types.Add(&TA_ta_memb_ptr_class);
    TA_ta_memb_ptr_class.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_int_ta_memb_ptr_class);
    TA_int_ta_memb_ptr_class.AddParents(&TA_int, &TA_ta_memb_ptr_class);
  taMisc::types.Add(&TA_ta_memb_ptr);
    TA_ta_memb_ptr.AddParents(&TA_void_ptr);
  taMisc::types.Add(&TA_taBase_ptr);
    TA_taBase_ptr.AddParents(&TA_taBase);
  taMisc::types.Add(&TA_TAPtr);
    TAI_TAPtr = new taBase*;
    TA_TAPtr.AddParents(&TA_taBase_ptr);
  taMisc::types.Add(&TA_taPlainArray_taString_);
    TAI_taPlainArray_taString_ = new taPlainArray<taString>;
    TA_taPlainArray_taString_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPlainArray_taString_.AddClassPar(&TA_taPlainArray,0);
    sbt = new TypeDef("taString_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taString);
    TA_taPlainArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("taString_ref", 1, 0, 1);
    sbt->AddParents(&TA_taString);
    TA_taPlainArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taString", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taString);
    TA_taPlainArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taString_ref", 1, 0, 1);
    sbt->AddParents(TA_taPlainArray_taString_.sub_types.FindName("const_taString"));
    TA_taPlainArray_taString_.sub_types.Add(sbt);
    tac_AddMembers(TA_taPlainArray_taString_,TA_taPlainArray_taString__MemberDef);
    tac_AddMethods(TA_taPlainArray_taString_,TA_taPlainArray_taString__MethodDef);
  taMisc::types.Add(&TA_String_PArray);
    TA_String_PArray.AddParFormal(&TA_class);
    TA_String_PArray.AddClassPar(&TA_taPlainArray_taString_,0);
    tac_AddMethods(TA_String_PArray,TA_String_PArray_MethodDef);
  taMisc::types.Add(&TA_taPlainArray_int_);
    TAI_taPlainArray_int_ = new taPlainArray<int>;
    TA_taPlainArray_int_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPlainArray_int_.AddClassPar(&TA_taPlainArray,0);
    sbt = new TypeDef("int_ptr", 1, 1, 0);
    sbt->AddParents(&TA_int);
    TA_taPlainArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("int_ref", 1, 0, 1);
    sbt->AddParents(&TA_int);
    TA_taPlainArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("const_int", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_int);
    TA_taPlainArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("const_int_ref", 1, 0, 1);
    sbt->AddParents(TA_taPlainArray_int_.sub_types.FindName("const_int"));
    TA_taPlainArray_int_.sub_types.Add(sbt);
    tac_AddMembers(TA_taPlainArray_int_,TA_taPlainArray_int__MemberDef);
    tac_AddMethods(TA_taPlainArray_int_,TA_taPlainArray_int__MethodDef);
  taMisc::types.Add(&TA_const_String_PArray);
    TA_const_String_PArray.AddParents(&TA_const, &TA_String_PArray);
  taMisc::types.Add(&TA_int_PArray);
    TA_int_PArray.AddParFormal(&TA_class, &TA_templ_inst);
    TA_int_PArray.AddClassPar(&TA_taPlainArray_int_,0);
  taMisc::types.Add(&TA_const_String_PArray_ref);
    TA_const_String_PArray_ref.AddParents(&TA_const_String_PArray);
  taMisc::types.Add(&TA_String_PArray_ref);
    TA_String_PArray_ref.AddParents(&TA_String_PArray);
  taMisc::types.Add(&TA_taMisc);
    TAI_taMisc = new taMisc;
    TA_taMisc.AddParFormal(&TA_class);
    tac_AddEnum(TA_taMisc, "ShowMembs", "", "", "", "", TA_taMisc_ShowMembs);
    tac_AddEnum(TA_taMisc, "TypeInfo", "", "", "", "", TA_taMisc_TypeInfo);
    tac_AddEnum(TA_taMisc, "KeepTokens", "", "", "", "", TA_taMisc_KeepTokens);
    tac_AddEnum(TA_taMisc, "SaveFormat", "", "", "", "", TA_taMisc_SaveFormat);
    tac_AddEnum(TA_taMisc, "LoadVerbosity", "", "", "", "", TA_taMisc_LoadVerbosity);
    tac_AddEnum(TA_taMisc, "AutoRevert", "", "", "", "", TA_taMisc_AutoRevert);
    tac_AddMembers(TA_taMisc,TA_taMisc_MemberDef);
    tac_AddMethods(TA_taMisc,TA_taMisc_MethodDef);
  taMisc::types.Add(&TA_taRefN);
    TA_taRefN.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taPtrList_EnumDef_);
    TAI_taPtrList_EnumDef_ = new taPtrList<EnumDef>;
    TA_taPtrList_EnumDef_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_EnumDef_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_taRefN_ref);
    TA_taRefN_ref.AddParents(&TA_taRefN);
  taMisc::types.Add(&TA_MemberDef);
    TA_MemberDef.AddParents(&TA_taRefN);
  taMisc::types.Add(&TA_taRefN_ptr);
    TA_taRefN_ptr.AddParents(&TA_taRefN);
  taMisc::types.Add(&TA_EnumDef);
    TAI_EnumDef = new EnumDef;
    TA_EnumDef.AddParFormal(&TA_class);
    TA_EnumDef.AddClassPar(&TA_taRefN,0);
  taMisc::types.Add(&TA_MethodDef);
    TA_MethodDef.AddParents(&TA_taRefN);
  taMisc::types.Add(&TA_EnumSpace);
    TAI_EnumSpace = new EnumSpace;
    TA_EnumSpace.AddParFormal(&TA_class);
    TA_EnumSpace.AddClassPar(&TA_taPtrList_EnumDef_,0);
  taMisc::types.Add(&TA_TypeDef);
    TA_TypeDef.AddParents(&TA_taRefN);
  taMisc::types.Add(&TA_const_EnumSpace);
    TA_const_EnumSpace.AddParents(&TA_const, &TA_EnumSpace);
  taMisc::types.Add(&TA_TypeDef_ptr);
    TA_TypeDef_ptr.AddParents(&TA_TypeDef);
  taMisc::types.Add(&TA_const_EnumSpace_ref);
    TA_const_EnumSpace_ref.AddParents(&TA_const_EnumSpace);
  taMisc::types.Add(&TA_EnumDef_ptr);
    TA_EnumDef_ptr.AddParents(&TA_EnumDef);
  taMisc::types.Add(&TA_taPtrList_void_);
    TAI_taPtrList_void_ = new taPtrList<void>;
    TA_taPtrList_void_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_void_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_TokenSpace);
    TAI_TokenSpace = new TokenSpace;
    TA_TokenSpace.AddParFormal(&TA_class);
    TA_TokenSpace.AddClassPar(&TA_taPtrList_void_,0);
  taMisc::types.Add(&TA_taPtrList_MemberDef_);
    TAI_taPtrList_MemberDef_ = new taPtrList<MemberDef>;
    TA_taPtrList_MemberDef_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_MemberDef_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_const_TokenSpace);
    TA_const_TokenSpace.AddParents(&TA_const, &TA_TokenSpace);
  taMisc::types.Add(&TA_MemberSpace);
    TAI_MemberSpace = new MemberSpace;
    TA_MemberSpace.AddParFormal(&TA_class);
    TA_MemberSpace.AddClassPar(&TA_taPtrList_MemberDef_,0);
  taMisc::types.Add(&TA_const_TokenSpace_ref);
    TA_const_TokenSpace_ref.AddParents(&TA_const_TokenSpace);
  taMisc::types.Add(&TA_const_MemberSpace);
    TA_const_MemberSpace.AddParents(&TA_const, &TA_MemberSpace);
  taMisc::types.Add(&TA_MemberDef_ptr);
    TA_MemberDef_ptr.AddParents(&TA_MemberDef);
  taMisc::types.Add(&TA_const_MemberSpace_ref);
    TA_const_MemberSpace_ref.AddParents(&TA_const_MemberSpace);
  taMisc::types.Add(&TA_taPtrList_MethodDef_);
    TAI_taPtrList_MethodDef_ = new taPtrList<MethodDef>;
    TA_taPtrList_MethodDef_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_MethodDef_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_MethodSpace);
    TAI_MethodSpace = new MethodSpace;
    TA_MethodSpace.AddParFormal(&TA_class);
    TA_MethodSpace.AddClassPar(&TA_taPtrList_MethodDef_,0);
  taMisc::types.Add(&TA_const_MethodSpace);
    TA_const_MethodSpace.AddParents(&TA_const, &TA_MethodSpace);
  taMisc::types.Add(&TA_MethodDef_ptr);
    TA_MethodDef_ptr.AddParents(&TA_MethodDef);
  taMisc::types.Add(&TA_const_MethodSpace_ref);
    TA_const_MethodSpace_ref.AddParents(&TA_const_MethodSpace);
  taMisc::types.Add(&TA_taPtrList_TypeDef_);
    TAI_taPtrList_TypeDef_ = new taPtrList<TypeDef>;
    TA_taPtrList_TypeDef_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_TypeDef_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_TypeSpace);
    TAI_TypeSpace = new TypeSpace;
    TA_TypeSpace.AddParFormal(&TA_class);
    TA_TypeSpace.AddClassPar(&TA_taPtrList_TypeDef_,0);
  taMisc::types.Add(&TA_const_TypeSpace);
    TA_const_TypeSpace.AddParents(&TA_const, &TA_TypeSpace);
  taMisc::types.Add(&TA_EnumSpace_ptr);
    TA_EnumSpace_ptr.AddParents(&TA_EnumSpace);
  taMisc::types.Add(&TA_const_TypeSpace_ref);
    TA_const_TypeSpace_ref.AddParents(&TA_const_TypeSpace);
  taMisc::types.Add(&TA_const_EnumDef);
    TA_const_EnumDef.AddParents(&TA_const, &TA_EnumDef);
  taMisc::types.Add(&TA_const_EnumDef_ref);
    TA_const_EnumDef_ref.AddParents(&TA_const_EnumDef);
  taMisc::types.Add(&TA_MemberSpace_ptr);
    TA_MemberSpace_ptr.AddParents(&TA_MemberSpace);
  taMisc::types.Add(&TA_taivMember_ptr);
    TA_taivMember_ptr.AddParents(&TA_taivMember);
  taMisc::types.Add(&TA_const_MemberDef);
    TA_const_MemberDef.AddParents(&TA_const, &TA_MemberDef);
  taMisc::types.Add(&TA_const_MemberDef_ref);
    TA_const_MemberDef_ref.AddParents(&TA_const_MemberDef);
  taMisc::types.Add(&TA_MethodSpace_ptr);
    TA_MethodSpace_ptr.AddParents(&TA_MethodSpace);
  taMisc::types.Add(&TA_taivMethod_ptr);
    TA_taivMethod_ptr.AddParents(&TA_taivMethod);
  taMisc::types.Add(&TA_const_MethodDef);
    TA_const_MethodDef.AddParents(&TA_const, &TA_MethodDef);
  taMisc::types.Add(&TA_const_MethodDef_ref);
    TA_const_MethodDef_ref.AddParents(&TA_const_MethodDef);
  taMisc::types.Add(&TA_TypeSpace_ptr);
    TA_TypeSpace_ptr.AddParents(&TA_TypeSpace);
  taMisc::types.Add(&TA_taivType_ptr);
    TA_taivType_ptr.AddParents(&TA_taivType);
  taMisc::types.Add(&TA_taivEdit_ptr);
    TA_taivEdit_ptr.AddParents(&TA_taivEdit);
  taMisc::types.Add(&TA_const_TypeDef);
    TA_const_TypeDef.AddParents(&TA_const, &TA_TypeDef);
  taMisc::types.Add(&TA_const_TypeDef_ref);
    TA_const_TypeDef_ref.AddParents(&TA_const_TypeDef);
  taMisc::types.Add(&TA_const_TypeDef_ptr);
    TA_const_TypeDef_ptr.AddParents(&TA_const_TypeDef);
  taMisc::types.Add(&TA_TypeDef_ptr_ref);
    TA_TypeDef_ptr_ref.AddParents(&TA_TypeDef_ptr);
  taMisc::types.Add(&TA_MemberDef_ptr_ptr);
    TA_MemberDef_ptr_ptr.AddParents(&TA_MemberDef);
  taMisc::types.Add(&TA_taivGetFile);
    TA_taivGetFile.AddParFormal(&TA_class);
    TA_taivGetFile.AddClassPar(&TA_taRefN,0);
    tac_AddMembers(TA_taivGetFile,TA_taivGetFile_MemberDef);
    tac_AddMethods(TA_taivGetFile,TA_taivGetFile_MethodDef);
  taMisc::types.Add(&TA_tabMisc);
    TAI_tabMisc = new tabMisc;
    TA_tabMisc.AddParFormal(&TA_class);
    tac_AddMembers(TA_tabMisc,TA_tabMisc_MemberDef);
    tac_AddMethods(TA_tabMisc,TA_tabMisc_MethodDef);
  taMisc::types.Add(&TA_const_taBase);
    TA_const_taBase.AddParents(&TA_const, &TA_taBase);
  taMisc::types.Add(&TA_const_taBase_ref);
    TA_const_taBase_ref.AddParents(&TA_const_taBase);
  taMisc::types.Add(&TA_taBase_ref);
    TA_taBase_ref.AddParents(&TA_taBase);
  taMisc::types.Add(&TA_TAPtr_ptr);
    TA_TAPtr_ptr.AddParents(&TA_TAPtr);
  taMisc::types.Add(&TA_MemberDef_ptr_ref);
    TA_MemberDef_ptr_ref.AddParents(&TA_MemberDef_ptr);
  taMisc::types.Add(&TA_taivGetFile_ptr);
    TA_taivGetFile_ptr.AddParents(&TA_taivGetFile);
  taMisc::types.Add(&TA_const_ivColor_ptr);
  taMisc::types.Add(&TA_taNBase);
    TAI_taNBase = new taNBase;
    TA_taNBase.AddParFormal(&TA_class);
    TA_taNBase.AddParCache(&TA_taBase);
    TA_taNBase.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_taNBase,TA_taNBase_MemberDef);
    tac_AddMethods(TA_taNBase,TA_taNBase_MethodDef);
  taMisc::types.Add(&TA_taNBase_ptr);
    TA_taNBase_ptr.AddParents(&TA_taNBase);
  taMisc::types.Add(&TA_const_taNBase);
    TA_const_taNBase.AddParents(&TA_const, &TA_taNBase);
  taMisc::types.Add(&TA_SelectEdit);
    TAI_SelectEdit = new SelectEdit;
    TA_SelectEdit.AddParFormal(&TA_class);
    TA_SelectEdit.AddParCache(&TA_taBase);
    TA_SelectEdit.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_SelectEdit,TA_SelectEdit_MemberDef);
    tac_AddMethods(TA_SelectEdit,TA_SelectEdit_MethodDef);
  taMisc::types.Add(&TA_const_taNBase_ref);
    TA_const_taNBase_ref.AddParents(&TA_const_taNBase);
  taMisc::types.Add(&TA_TANPtr);
    TAI_TANPtr = new taNBase*;
    TA_TANPtr.AddParents(&TA_taNBase_ptr);
  taMisc::types.Add(&TA_SelectEdit_ptr);
    TA_SelectEdit_ptr.AddParents(&TA_SelectEdit);
  taMisc::types.Add(&TA_taOBase);
    TAI_taOBase = new taOBase;
    TA_taOBase.AddParFormal(&TA_class);
    TA_taOBase.AddParCache(&TA_taBase);
    TA_taOBase.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_taOBase,TA_taOBase_MemberDef);
    tac_AddMethods(TA_taOBase,TA_taOBase_MethodDef);
  taMisc::types.Add(&TA_taPtrList_base_taBase_);
    TAI_taPtrList_base_taBase_ = new taPtrList_base<taBase>;
    TA_taPtrList_base_taBase_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_base_taBase_.AddClassPar(&TA_taPtrList_base,0);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taPtrList_base_taBase_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_base_taBase_,TA_taPtrList_base_taBase__MethodDef);
  taMisc::types.Add(&TA_const_taOBase);
    TA_const_taOBase.AddParents(&TA_const, &TA_taOBase);
  taMisc::types.Add(&TA_taPtrList_ta_base);
    TA_taPtrList_ta_base.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_ta_base.AddClassPar(&TA_taPtrList_base_taBase_,0);
  taMisc::types.Add(&TA_const_taOBase_ref);
    TA_const_taOBase_ref.AddParents(&TA_const_taOBase);
  taMisc::types.Add(&TA_taList_impl);
    TAI_taList_impl = new taList_impl;
    TA_taList_impl.AddParFormal(&TA_class);
    TA_taList_impl.AddParCache(&TA_taBase);
    TA_taList_impl.AddClassPar(&TA_taBase,(int)((unsigned long)((taBase*)TAI_taList_impl)-(unsigned long)TAI_taList_impl), &TA_taPtrList_ta_base,(int)((unsigned long)((taPtrList_ta_base*)TAI_taList_impl)-(unsigned long)TAI_taList_impl));
    tac_AddMembers(TA_taList_impl,TA_taList_impl_MemberDef);
    tac_AddMethods(TA_taList_impl,TA_taList_impl_MethodDef);
  taMisc::types.Add(&TA_taList_impl_ptr);
    TA_taList_impl_ptr.AddParents(&TA_taList_impl);
  taMisc::types.Add(&TA_TABLPtr);
    TA_TABLPtr.AddParents(&TA_taList_impl_ptr);
  taMisc::types.Add(&TA_const_taList_impl);
    TA_const_taList_impl.AddParents(&TA_const, &TA_taList_impl);
  taMisc::types.Add(&TA_const_taList_impl_ref);
    TA_const_taList_impl_ref.AddParents(&TA_const_taList_impl);
  taMisc::types.Add(&TA_taArray_base);
    TAI_taArray_base = new taArray_base;
    TA_taArray_base.AddParFormal(&TA_class);
    TA_taArray_base.AddParCache(&TA_taBase);
    TA_taArray_base.AddClassPar(&TA_taBase,(int)((unsigned long)((taBase*)TAI_taArray_base)-(unsigned long)TAI_taArray_base), &TA_taArray_impl,(int)((unsigned long)((taArray_impl*)TAI_taArray_base)-(unsigned long)TAI_taArray_base));
    tac_AddMembers(TA_taArray_base,TA_taArray_base_MemberDef);
    tac_AddMethods(TA_taArray_base,TA_taArray_base_MethodDef);
  taMisc::types.Add(&TA_const_taArray_base);
    TA_const_taArray_base.AddParents(&TA_const, &TA_taArray_base);
  taMisc::types.Add(&TA_taList);
    TA_taList.AddParFormal(&TA_class, &TA_template);
    TA_taList.AddParCache(&TA_taBase);
    TA_taList.AddParents(&TA_taList_impl);
  taMisc::types.Add(&TA_const_taArray_base_ref);
    TA_const_taArray_base_ref.AddParents(&TA_const_taArray_base);
  taMisc::types.Add(&TA_taList_taBase_);
    TAI_taList_taBase_ = new taList<taBase>;
    TA_taList_taBase_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_taBase_.AddParCache(&TA_taBase);
    TA_taList_taBase_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_taBase_.sub_types.Add(sbt);
    tac_AddMethods(TA_taList_taBase_,TA_taList_taBase__MethodDef);
  taMisc::types.Add(&TA_const_taList);
    TA_const_taList.AddParents(&TA_const, &TA_taList);
  taMisc::types.Add(&TA_const_taList_ref);
    TA_const_taList_ref.AddParents(&TA_const_taList);
  taMisc::types.Add(&TA_taBase_List);
    TAI_taBase_List = new taBase_List;
    TA_taBase_List.AddParFormal(&TA_class);
    TA_taBase_List.AddParCache(&TA_taBase);
    TA_taBase_List.AddClassPar(&TA_taList_taBase_,0);
  taMisc::types.Add(&TA_const_taBase_List);
    TA_const_taBase_List.AddParents(&TA_const, &TA_taBase_List);
  taMisc::types.Add(&TA_taBase_List_ptr);
    TA_taBase_List_ptr.AddParents(&TA_taBase_List);
  taMisc::types.Add(&TA_const_taBase_List_ref);
    TA_const_taBase_List_ref.AddParents(&TA_const_taBase_List);
  taMisc::types.Add(&TA_taArray);
    TA_taArray.AddParFormal(&TA_class, &TA_template);
    TA_taArray.AddParCache(&TA_taBase);
    TA_taArray.AddParents(&TA_taArray_base);
  taMisc::types.Add(&TA_taArray_int_);
    TAI_taArray_int_ = new taArray<int>;
    TA_taArray_int_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_int_.AddParCache(&TA_taBase);
    TA_taArray_int_.AddClassPar(&TA_taArray,0);
    sbt = new TypeDef("int_ptr", 1, 1, 0);
    sbt->AddParents(&TA_int);
    TA_taArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("int_ref", 1, 0, 1);
    sbt->AddParents(&TA_int);
    TA_taArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("const_int", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_int);
    TA_taArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("const_int_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_int_.sub_types.FindName("const_int"));
    TA_taArray_int_.sub_types.Add(sbt);
    tac_AddMembers(TA_taArray_int_,TA_taArray_int__MemberDef);
    tac_AddMethods(TA_taArray_int_,TA_taArray_int__MethodDef);
  taMisc::types.Add(&TA_const_taArray);
    TA_const_taArray.AddParents(&TA_const, &TA_taArray);
  taMisc::types.Add(&TA_const_taArray_ref);
    TA_const_taArray_ref.AddParents(&TA_const_taArray);
  taMisc::types.Add(&TA_int_Array);
    TAI_int_Array = new int_Array;
    TA_int_Array.AddParFormal(&TA_class);
    TA_int_Array.AddParCache(&TA_taBase);
    TA_int_Array.AddClassPar(&TA_taArray_int_,0);
    tac_AddMethods(TA_int_Array,TA_int_Array_MethodDef);
  taMisc::types.Add(&TA_taArray_float_);
    TAI_taArray_float_ = new taArray<float>;
    TA_taArray_float_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_float_.AddParCache(&TA_taBase);
    TA_taArray_float_.AddClassPar(&TA_taArray,0);
    sbt = new TypeDef("float_ptr", 1, 1, 0);
    sbt->AddParents(&TA_float);
    TA_taArray_float_.sub_types.Add(sbt);
    sbt = new TypeDef("float_ref", 1, 0, 1);
    sbt->AddParents(&TA_float);
    TA_taArray_float_.sub_types.Add(sbt);
    sbt = new TypeDef("const_float", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_float);
    TA_taArray_float_.sub_types.Add(sbt);
    sbt = new TypeDef("const_float_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_float_.sub_types.FindName("const_float"));
    TA_taArray_float_.sub_types.Add(sbt);
    tac_AddMembers(TA_taArray_float_,TA_taArray_float__MemberDef);
    tac_AddMethods(TA_taArray_float_,TA_taArray_float__MethodDef);
  taMisc::types.Add(&TA_const_int_Array);
    TA_const_int_Array.AddParents(&TA_const, &TA_int_Array);
  taMisc::types.Add(&TA_const_int_Array_ref);
    TA_const_int_Array_ref.AddParents(&TA_const_int_Array);
  taMisc::types.Add(&TA_float_Array);
    TAI_float_Array = new float_Array;
    TA_float_Array.AddParFormal(&TA_class);
    TA_float_Array.AddParCache(&TA_taBase);
    TA_float_Array.AddClassPar(&TA_taArray_float_,0);
  taMisc::types.Add(&TA_taArray_double_);
    TAI_taArray_double_ = new taArray<double>;
    TA_taArray_double_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_double_.AddParCache(&TA_taBase);
    TA_taArray_double_.AddClassPar(&TA_taArray,0);
    sbt = new TypeDef("double_ptr", 1, 1, 0);
    sbt->AddParents(&TA_double);
    TA_taArray_double_.sub_types.Add(sbt);
    sbt = new TypeDef("double_ref", 1, 0, 1);
    sbt->AddParents(&TA_double);
    TA_taArray_double_.sub_types.Add(sbt);
    sbt = new TypeDef("const_double", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_double);
    TA_taArray_double_.sub_types.Add(sbt);
    sbt = new TypeDef("const_double_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_double_.sub_types.FindName("const_double"));
    TA_taArray_double_.sub_types.Add(sbt);
    tac_AddMembers(TA_taArray_double_,TA_taArray_double__MemberDef);
    tac_AddMethods(TA_taArray_double_,TA_taArray_double__MethodDef);
  taMisc::types.Add(&TA_const_float_Array);
    TA_const_float_Array.AddParents(&TA_const, &TA_float_Array);
  taMisc::types.Add(&TA_const_float_Array_ref);
    TA_const_float_Array_ref.AddParents(&TA_const_float_Array);
  taMisc::types.Add(&TA_double_Array);
    TAI_double_Array = new double_Array;
    TA_double_Array.AddParFormal(&TA_class);
    TA_double_Array.AddParCache(&TA_taBase);
    TA_double_Array.AddClassPar(&TA_taArray_double_,0);
  taMisc::types.Add(&TA_taArray_taString_);
    TAI_taArray_taString_ = new taArray<taString>;
    TA_taArray_taString_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_taString_.AddParCache(&TA_taBase);
    TA_taArray_taString_.AddClassPar(&TA_taArray,0);
    sbt = new TypeDef("taString_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taString);
    TA_taArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("taString_ref", 1, 0, 1);
    sbt->AddParents(&TA_taString);
    TA_taArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taString", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taString);
    TA_taArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taString_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_taString_.sub_types.FindName("const_taString"));
    TA_taArray_taString_.sub_types.Add(sbt);
    tac_AddMembers(TA_taArray_taString_,TA_taArray_taString__MemberDef);
    tac_AddMethods(TA_taArray_taString_,TA_taArray_taString__MethodDef);
  taMisc::types.Add(&TA_const_double_Array);
    TA_const_double_Array.AddParents(&TA_const, &TA_double_Array);
  taMisc::types.Add(&TA_const_double_Array_ref);
    TA_const_double_Array_ref.AddParents(&TA_const_double_Array);
  taMisc::types.Add(&TA_String_Array);
    TAI_String_Array = new String_Array;
    TA_String_Array.AddParFormal(&TA_class);
    TA_String_Array.AddParCache(&TA_taBase);
    TA_String_Array.AddClassPar(&TA_taArray_taString_,0);
  taMisc::types.Add(&TA_taArray_long_);
    TAI_taArray_long_ = new taArray<long>;
    TA_taArray_long_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_long_.AddParCache(&TA_taBase);
    TA_taArray_long_.AddClassPar(&TA_taArray,0);
    sbt = new TypeDef("long_ptr", 1, 1, 0);
    sbt->AddParents(&TA_long);
    TA_taArray_long_.sub_types.Add(sbt);
    sbt = new TypeDef("long_ref", 1, 0, 1);
    sbt->AddParents(&TA_long);
    TA_taArray_long_.sub_types.Add(sbt);
    sbt = new TypeDef("const_long", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_long);
    TA_taArray_long_.sub_types.Add(sbt);
    sbt = new TypeDef("const_long_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_long_.sub_types.FindName("const_long"));
    TA_taArray_long_.sub_types.Add(sbt);
    tac_AddMembers(TA_taArray_long_,TA_taArray_long__MemberDef);
    tac_AddMethods(TA_taArray_long_,TA_taArray_long__MethodDef);
  taMisc::types.Add(&TA_const_String_Array);
    TA_const_String_Array.AddParents(&TA_const, &TA_String_Array);
  taMisc::types.Add(&TA_const_String_Array_ref);
    TA_const_String_Array_ref.AddParents(&TA_const_String_Array);
  taMisc::types.Add(&TA_long_Array);
    TAI_long_Array = new long_Array;
    TA_long_Array.AddParFormal(&TA_class);
    TA_long_Array.AddParCache(&TA_taBase);
    TA_long_Array.AddClassPar(&TA_taArray_long_,0);
    tac_AddMethods(TA_long_Array,TA_long_Array_MethodDef);
  taMisc::types.Add(&TA_const_long_Array);
    TA_const_long_Array.AddParents(&TA_const, &TA_long_Array);
  taMisc::types.Add(&TA_voidptr_Array);
    TAI_voidptr_Array = new voidptr_Array;
    TA_voidptr_Array.AddParFormal(&TA_class);
    TA_voidptr_Array.AddParCache(&TA_taBase);
    TA_voidptr_Array.AddClassPar(&TA_taArray_base,0);
  taMisc::types.Add(&TA_const_long_Array_ref);
    TA_const_long_Array_ref.AddParents(&TA_const_long_Array);
  taMisc::types.Add(&TA_taGroup_impl);
    TAI_taGroup_impl = new taGroup_impl;
    TA_taGroup_impl.AddParFormal(&TA_class);
    TA_taGroup_impl.AddParCache(&TA_taBase);
    TA_taGroup_impl.AddClassPar(&TA_taList_impl,0);
    tac_AddMembers(TA_taGroup_impl,TA_taGroup_impl_MemberDef);
    tac_AddMethods(TA_taGroup_impl,TA_taGroup_impl_MethodDef);
  taMisc::types.Add(&TA_const_voidptr_Array);
    TA_const_voidptr_Array.AddParents(&TA_const, &TA_voidptr_Array);
  taMisc::types.Add(&TA_taGroup_impl_ptr);
    TA_taGroup_impl_ptr.AddParents(&TA_taGroup_impl);
  taMisc::types.Add(&TA_const_voidptr_Array_ref);
    TA_const_voidptr_Array_ref.AddParents(&TA_const_voidptr_Array);
  taMisc::types.Add(&TA_TAGPtr);
    TA_TAGPtr.AddParents(&TA_taGroup_impl_ptr);
  taMisc::types.Add(&TA_taList_taGroup_impl_);
    TAI_taList_taGroup_impl_ = new taList<taGroup_impl>;
    TA_taList_taGroup_impl_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_taGroup_impl_.AddParCache(&TA_taBase);
    TA_taList_taGroup_impl_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_taGroup_impl_.sub_types.Add(sbt);
    sbt = new TypeDef("taGroup_impl_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taGroup_impl);
    TA_taList_taGroup_impl_.sub_types.Add(sbt);
    tac_AddMethods(TA_taList_taGroup_impl_,TA_taList_taGroup_impl__MethodDef);
  taMisc::types.Add(&TA_TALOG);
    TAI_TALOG = new TALOG;
    TA_TALOG.AddParFormal(&TA_class, &TA_templ_inst);
    TA_TALOG.AddParCache(&TA_taBase);
    TA_TALOG.AddClassPar(&TA_taList_taGroup_impl_,0);
  taMisc::types.Add(&TA_taSubGroup);
    TAI_taSubGroup = new taSubGroup;
    TA_taSubGroup.AddParFormal(&TA_class);
    TA_taSubGroup.AddParCache(&TA_taBase);
    TA_taSubGroup.AddClassPar(&TA_TALOG,0);
    tac_AddMethods(TA_taSubGroup,TA_taSubGroup_MethodDef);
  taMisc::types.Add(&TA_taLeafItr);
    TA_taLeafItr.AddParFormal(&TA_class);
    tac_AddMembers(TA_taLeafItr,TA_taLeafItr_MemberDef);
  taMisc::types.Add(&TA_const_taSubGroup);
    TA_const_taSubGroup.AddParents(&TA_const, &TA_taSubGroup);
  taMisc::types.Add(&TA_TALOG_ptr);
    TA_TALOG_ptr.AddParents(&TA_TALOG);
  taMisc::types.Add(&TA_const_taSubGroup_ref);
    TA_const_taSubGroup_ref.AddParents(&TA_const_taSubGroup);
  taMisc::types.Add(&TA_taLeafItr_ref);
    TA_taLeafItr_ref.AddParents(&TA_taLeafItr);
  taMisc::types.Add(&TA_const_taGroup_impl);
    TA_const_taGroup_impl.AddParents(&TA_const, &TA_taGroup_impl);
  taMisc::types.Add(&TA_const_taGroup_impl_ref);
    TA_const_taGroup_impl_ref.AddParents(&TA_const_taGroup_impl);
  taMisc::types.Add(&TA_DMemShareVar);
    TAI_DMemShareVar = new DMemShareVar;
    TA_DMemShareVar.AddParFormal(&TA_class);
    TA_DMemShareVar.AddParCache(&TA_taBase);
    TA_DMemShareVar.AddClassPar(&TA_taBase,0);
  taMisc::types.Add(&TA_taPtrList_impl_ref);
    TA_taPtrList_impl_ref.AddParents(&TA_taPtrList_impl);
  taMisc::types.Add(&TA_const_DMemShareVar);
    TA_const_DMemShareVar.AddParents(&TA_const, &TA_DMemShareVar);
  taMisc::types.Add(&TA_const_DMemShareVar_ref);
    TA_const_DMemShareVar_ref.AddParents(&TA_const_DMemShareVar);
  taMisc::types.Add(&TA_DMemShare);
    TAI_DMemShare = new DMemShare;
    TA_DMemShare.AddParFormal(&TA_class);
    TA_DMemShare.AddParCache(&TA_taBase);
    TA_DMemShare.AddClassPar(&TA_taBase_List,0);
  taMisc::types.Add(&TA_const_DMemShare);
    TA_const_DMemShare.AddParents(&TA_const, &TA_DMemShare);
  taMisc::types.Add(&TA_const_DMemShare_ref);
    TA_const_DMemShare_ref.AddParents(&TA_const_DMemShare);
  taMisc::types.Add(&TA_taGroup);
    TA_taGroup.AddParFormal(&TA_class, &TA_template);
    TA_taGroup.AddParCache(&TA_taBase);
    TA_taGroup.AddParents(&TA_taGroup_impl);
  taMisc::types.Add(&TA_taGroup_taBase_);
    TAI_taGroup_taBase_ = new taGroup<taBase>;
    TA_taGroup_taBase_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_taBase_.AddParCache(&TA_taBase);
    TA_taGroup_taBase_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_taBase_.sub_types.Add(sbt);
    tac_AddMethods(TA_taGroup_taBase_,TA_taGroup_taBase__MethodDef);
  taMisc::types.Add(&TA_const_taGroup);
    TA_const_taGroup.AddParents(&TA_const, &TA_taGroup);
  taMisc::types.Add(&TA_taGroup_ptr);
    TA_taGroup_ptr.AddParents(&TA_taGroup);
  taMisc::types.Add(&TA_const_taGroup_ref);
    TA_const_taGroup_ref.AddParents(&TA_const_taGroup);
  taMisc::types.Add(&TA_taBase_Group);
    TAI_taBase_Group = new taBase_Group;
    TA_taBase_Group.AddParFormal(&TA_class);
    TA_taBase_Group.AddParCache(&TA_taBase);
    TA_taBase_Group.AddClassPar(&TA_taGroup_taBase_,0);
  taMisc::types.Add(&TA_const_taBase_Group);
    TA_const_taBase_Group.AddParents(&TA_const, &TA_taBase_Group);
  taMisc::types.Add(&TA_const_taBase_Group_ref);
    TA_const_taBase_Group_ref.AddParents(&TA_const_taBase_Group);
  taMisc::types.Add(&TA_dumpMisc);
    TA_dumpMisc.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_VPUnref);
    TA_VPUnref.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taPtrList_VPUnref_);
    TAI_taPtrList_VPUnref_ = new taPtrList<VPUnref>;
    TA_taPtrList_VPUnref_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_VPUnref_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_VPUnref_ptr);
    TA_VPUnref_ptr.AddParents(&TA_VPUnref);
  taMisc::types.Add(&TA_VPUList);
    TA_VPUList.AddParFormal(&TA_class);
    TA_VPUList.AddClassPar(&TA_taPtrList_VPUnref_,0);
  taMisc::types.Add(&TA_DumpPathSub);
    TA_DumpPathSub.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taPtrList_DumpPathSub_);
    TAI_taPtrList_DumpPathSub_ = new taPtrList<DumpPathSub>;
    TA_taPtrList_DumpPathSub_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_DumpPathSub_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_DumpPathSub_ptr);
    TA_DumpPathSub_ptr.AddParents(&TA_DumpPathSub);
  taMisc::types.Add(&TA_DumpPathSubList);
    TA_DumpPathSubList.AddParFormal(&TA_class);
    TA_DumpPathSubList.AddClassPar(&TA_taPtrList_DumpPathSub_,0);
  taMisc::types.Add(&TA_DumpPathToken);
    TA_DumpPathToken.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taPtrList_DumpPathToken_);
    TAI_taPtrList_DumpPathToken_ = new taPtrList<DumpPathToken>;
    TA_taPtrList_DumpPathToken_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_DumpPathToken_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_DumpPathToken_ptr);
    TA_DumpPathToken_ptr.AddParents(&TA_DumpPathToken);
  taMisc::types.Add(&TA_DumpPathTokenList);
    TA_DumpPathTokenList.AddParFormal(&TA_class);
    TA_DumpPathTokenList.AddClassPar(&TA_taPtrList_DumpPathToken_,0);
  taMisc::types.Add(&TA_NameValue);
    TAI_NameValue = new NameValue;
    TA_NameValue.AddParFormal(&TA_class);
    TA_NameValue.AddParCache(&TA_taBase);
    TA_NameValue.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_NameValue,TA_NameValue_MemberDef);
  taMisc::types.Add(&TA_unsigned_long_ary);
    TA_unsigned_long_ary.AddParFormal(&TA_ta_array);
    TA_unsigned_long_ary.AddParents(&TA_unsigned_long);
  taMisc::types.Add(&TA_const_NameValue);
    TA_const_NameValue.AddParents(&TA_const, &TA_NameValue);
  taMisc::types.Add(&TA_const_NameValue_ref);
    TA_const_NameValue_ref.AddParents(&TA_const_NameValue);
  taMisc::types.Add(&TA_TypeDefault);
    TAI_TypeDefault = new TypeDefault;
    TA_TypeDefault.AddParFormal(&TA_class);
    TA_TypeDefault.AddParCache(&TA_taBase);
    TA_TypeDefault.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_TypeDefault,TA_TypeDefault_MemberDef);
    tac_AddMethods(TA_TypeDefault,TA_TypeDefault_MethodDef);
  taMisc::types.Add(&TA_taivData);
    TA_taivData.AddParFormal(&TA_class);
    TA_taivData.AddClassPar(&TA_taRefN,0);
  taMisc::types.Add(&TA_const_TypeDefault);
    TA_const_TypeDefault.AddParents(&TA_const, &TA_TypeDefault);
  taMisc::types.Add(&TA_taivDialog);
    TA_taivDialog.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_TypeDefault_ref);
    TA_const_TypeDefault_ref.AddParents(&TA_const_TypeDefault);
  taMisc::types.Add(&TA_taivEditDialog);
    TA_taivEditDialog.AddParFormal(&TA_class);
    TA_taivEditDialog.AddClassPar(&TA_taivDialog,0);
  taMisc::types.Add(&TA_NoBlockDialog);
    TA_NoBlockDialog.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_NoBlockDialog_ptr);
    TA_NoBlockDialog_ptr.AddParents(&TA_NoBlockDialog);
  taMisc::types.Add(&TA_taivEditDialog_ptr);
    TA_taivEditDialog_ptr.AddParents(&TA_taivEditDialog);
  taMisc::types.Add(&TA_taivMisc);
    TAI_taivMisc = new taivMisc;
    TA_taivMisc.AddParFormal(&TA_class);
    tac_AddMembers(TA_taivMisc,TA_taivMisc_MemberDef);
    tac_AddMethods(TA_taivMisc,TA_taivMisc_MethodDef);
  taMisc::types.Add(&TA_const_ivAllocation);
    TA_const_ivAllocation.AddParents(&TA_const);
  taMisc::types.Add(&TA_const_ivAllocation_ref);
    TA_const_ivAllocation_ref.AddParents(&TA_const_ivAllocation);
  taMisc::types.Add(&TA_ivGlyph_ptr);
  taMisc::types.Add(&TA_ivExtension_ref);
  taMisc::types.Add(&TA_ivPrinter_ptr);
  taMisc::types.Add(&TA_HighlightBG);
    TA_HighlightBG.AddParFormal(&TA_class);
    tac_AddMembers(TA_HighlightBG,TA_HighlightBG_MemberDef);
    tac_AddMethods(TA_HighlightBG,TA_HighlightBG_MethodDef);
  taMisc::types.Add(&TA_taivData_ptr);
    TA_taivData_ptr.AddParents(&TA_taivData);
  taMisc::types.Add(&TA_taivDialog_ptr);
    TA_taivDialog_ptr.AddParents(&TA_taivDialog);
  taMisc::types.Add(&TA_HighlightBG_ptr);
    TA_HighlightBG_ptr.AddParents(&TA_HighlightBG);
  taMisc::types.Add(&TA_taPtrList_taivData_);
    TAI_taPtrList_taivData_ = new taPtrList<taivData>;
    TA_taPtrList_taivData_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taivData_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_taivDataList);
    TA_taivDataList.AddParFormal(&TA_class);
    TA_taivDataList.AddClassPar(&TA_taPtrList_taivData_,0);
  taMisc::types.Add(&TA_taivField);
    TA_taivField.AddParFormal(&TA_class);
    TA_taivField.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_taivIncrField);
    TA_taivIncrField.AddParFormal(&TA_class);
    TA_taivIncrField.AddClassPar(&TA_taivField,0);
  taMisc::types.Add(&TA_taivRO_Field);
    TA_taivRO_Field.AddParFormal(&TA_class);
    TA_taivRO_Field.AddClassPar(&TA_taivField,0);
  taMisc::types.Add(&TA_taivToggle);
    TA_taivToggle.AddParFormal(&TA_class);
    TA_taivToggle.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_taivLabel);
    TA_taivLabel.AddParFormal(&TA_class);
    TA_taivLabel.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_taivPlusToggle);
    TA_taivPlusToggle.AddParFormal(&TA_class);
    TA_taivPlusToggle.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_taivPolyData);
    TA_taivPolyData.AddParFormal(&TA_class);
    TA_taivPolyData.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_taivDataDeck);
    TA_taivDataDeck.AddParFormal(&TA_class);
    TA_taivDataDeck.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_taivMenu);
    TA_taivMenu.AddParFormal(&TA_class);
    TA_taivMenu.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_taivMenuEl);
    TA_taivMenuEl.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taivMenuEl_ptr);
    TA_taivMenuEl_ptr.AddParents(&TA_taivMenuEl);
  taMisc::types.Add(&TA_taivMenuAction);
    TA_taivMenuAction.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taivMenu_ptr);
    TA_taivMenu_ptr.AddParents(&TA_taivMenu);
  taMisc::types.Add(&TA_taivMenuAction_ptr);
    TA_taivMenuAction_ptr.AddParents(&TA_taivMenuAction);
  taMisc::types.Add(&TA_taPtrList_taivMenuEl_);
    TAI_taPtrList_taivMenuEl_ = new taPtrList<taivMenuEl>;
    TA_taPtrList_taivMenuEl_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taivMenuEl_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_taivMenuEl_List);
    TA_taivMenuEl_List.AddParFormal(&TA_class);
    TA_taivMenuEl_List.AddClassPar(&TA_taPtrList_taivMenuEl_,0);
  taMisc::types.Add(&TA_taPtrList_taivMenu_);
    TAI_taPtrList_taivMenu_ = new taPtrList<taivMenu>;
    TA_taPtrList_taivMenu_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taivMenu_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_taivMenu_List);
    TA_taivMenu_List.AddParFormal(&TA_class);
    TA_taivMenu_List.AddClassPar(&TA_taPtrList_taivMenu_,0);
  taMisc::types.Add(&TA_taivHierMenu);
    TA_taivHierMenu.AddParFormal(&TA_class);
    TA_taivHierMenu.AddClassPar(&TA_taivMenu,0);
  taMisc::types.Add(&TA_taivHierMenu_ptr);
    TA_taivHierMenu_ptr.AddParents(&TA_taivHierMenu);
  taMisc::types.Add(&TA_taivHierEl);
    TA_taivHierEl.AddParFormal(&TA_class);
    TA_taivHierEl.AddClassPar(&TA_taivMenuEl,0);
  taMisc::types.Add(&TA_taivHierSub);
    TA_taivHierSub.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taPtrList_taivHierSub_);
    TAI_taPtrList_taivHierSub_ = new taPtrList<taivHierSub>;
    TA_taPtrList_taivHierSub_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taivHierSub_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_taivHierSub_List);
    TA_taivHierSub_List.AddParFormal(&TA_class);
    TA_taivHierSub_List.AddClassPar(&TA_taPtrList_taivHierSub_,0);
  taMisc::types.Add(&TA_taivHierEl_ptr);
    TA_taivHierEl_ptr.AddParents(&TA_taivHierEl);
  taMisc::types.Add(&TA_taPtrList_taivHierMenu_);
    TAI_taPtrList_taivHierMenu_ = new taPtrList<taivHierMenu>;
    TA_taPtrList_taivHierMenu_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taivHierMenu_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_taivHierMenu_List);
    TA_taivHierMenu_List.AddParFormal(&TA_class);
    TA_taivHierMenu_List.AddClassPar(&TA_taPtrList_taivHierMenu_,0);
  taMisc::types.Add(&TA_taivEditButton);
    TA_taivEditButton.AddParFormal(&TA_class);
    TA_taivEditButton.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_ifstream_ptr);
    TA_ifstream_ptr.AddParents(&TA_ifstream);
  taMisc::types.Add(&TA_ofstream_ptr);
    TA_ofstream_ptr.AddParents(&TA_ofstream);
  taMisc::types.Add(&TA_fstream_ptr);
    TA_fstream_ptr.AddParents(&TA_fstream);
  taMisc::types.Add(&TA_istream_ptr);
    TA_istream_ptr.AddParents(&TA_istream);
  taMisc::types.Add(&TA_taivObjChooser);
    TA_taivObjChooser.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taivFileButton);
    TA_taivFileButton.AddParFormal(&TA_class);
    TA_taivFileButton.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_taivToken);
    TA_taivToken.AddParFormal(&TA_class);
    TA_taivToken.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_taivSubToken);
    TA_taivSubToken.AddParFormal(&TA_class);
    TA_taivSubToken.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_taivMemberDefMenu);
    TA_taivMemberDefMenu.AddParFormal(&TA_class);
    TA_taivMemberDefMenu.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_taivMethodDefMenu);
    TA_taivMethodDefMenu.AddParFormal(&TA_class);
    TA_taivMethodDefMenu.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_taivTypeHier);
    TA_taivTypeHier.AddParFormal(&TA_class);
    TA_taivTypeHier.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_taivMethMenu);
    TA_taivMethMenu.AddParFormal(&TA_class);
    TA_taivMethMenu.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_taivMethButton);
    TA_taivMethButton.AddParFormal(&TA_class);
    TA_taivMethButton.AddClassPar(&TA_taivMethMenu,0);
  taMisc::types.Add(&TA_taivToggle_ptr);
    TA_taivToggle_ptr.AddParents(&TA_taivToggle);
  taMisc::types.Add(&TA_taivMethToggle);
    TA_taivMethToggle.AddParFormal(&TA_class);
    TA_taivMethToggle.AddClassPar(&TA_taivMethMenu,0);
  taMisc::types.Add(&TA_const_ivEvent_ref);
  taMisc::types.Add(&TA_ivCoord_ref);
  taMisc::types.Add(&TA_taivChoiceDialog);
    TA_taivChoiceDialog.AddParFormal(&TA_class);
    TA_taivChoiceDialog.AddClassPar(&TA_taivDialog,0);
  taMisc::types.Add(&TA_const_taivDataList);
    TA_const_taivDataList.AddParents(&TA_const, &TA_taivDataList);
  taMisc::types.Add(&TA_const_taivDataList_ref);
    TA_const_taivDataList_ref.AddParents(&TA_const_taivDataList);
  taMisc::types.Add(&TA_taivDataList_ref);
    TA_taivDataList_ref.AddParents(&TA_taivDataList);
  taMisc::types.Add(&TA_taivToken_ptr);
    TA_taivToken_ptr.AddParents(&TA_taivToken);
  taMisc::types.Add(&TA_taivTokenDialog);
    TA_taivTokenDialog.AddParFormal(&TA_class);
    TA_taivTokenDialog.AddClassPar(&TA_taivDialog,0);
  taMisc::types.Add(&TA_taivTypeHier_ptr);
    TA_taivTypeHier_ptr.AddParents(&TA_taivTypeHier);
  taMisc::types.Add(&TA_taivTypeDialog);
    TA_taivTypeDialog.AddParFormal(&TA_class);
    TA_taivTypeDialog.AddClassPar(&TA_taivDialog,0);
  taMisc::types.Add(&TA_taivEnumDialog);
    TA_taivEnumDialog.AddParFormal(&TA_class);
    TA_taivEnumDialog.AddClassPar(&TA_taivDialog,0);
  taMisc::types.Add(&TA_taivArgType);
    TAI_taivArgType = new taivArgType;
    TA_taivArgType.AddParFormal(&TA_class);
    TA_taivArgType.AddClassPar(&TA_taivType,0);
  taMisc::types.Add(&TA_taPtrList_taivType_);
    TAI_taPtrList_taivType_ = new taPtrList<taivType>;
    TA_taPtrList_taivType_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taivType_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_taivType_List);
    TA_taivType_List.AddParFormal(&TA_class);
    TA_taivType_List.AddClassPar(&TA_taPtrList_taivType_,0);
  taMisc::types.Add(&TA_taivIntType);
    TAI_taivIntType = new taivIntType;
    TA_taivIntType.AddParFormal(&TA_class);
    TA_taivIntType.AddClassPar(&TA_taivType,0);
  taMisc::types.Add(&TA_taivEnumType);
    TAI_taivEnumType = new taivEnumType;
    TA_taivEnumType.AddParFormal(&TA_class);
    TA_taivEnumType.AddClassPar(&TA_taivType,0);
  taMisc::types.Add(&TA_taivBoolType);
    TAI_taivBoolType = new taivBoolType;
    TA_taivBoolType.AddParFormal(&TA_class);
    TA_taivBoolType.AddClassPar(&TA_taivType,0);
  taMisc::types.Add(&TA_taivClassType);
    TAI_taivClassType = new taivClassType;
    TA_taivClassType.AddParFormal(&TA_class);
    TA_taivClassType.AddClassPar(&TA_taivType,0);
  taMisc::types.Add(&TA_taivStringType);
    TAI_taivStringType = new taivStringType;
    TA_taivStringType.AddParFormal(&TA_class);
    TA_taivStringType.AddClassPar(&TA_taivClassType,0);
  taMisc::types.Add(&TA_taivTokenPtrType);
    TAI_taivTokenPtrType = new taivTokenPtrType;
    TA_taivTokenPtrType.AddParFormal(&TA_class);
    TA_taivTokenPtrType.AddClassPar(&TA_taivType,0);
  taMisc::types.Add(&TA_taivTypePtr);
    TAI_taivTypePtr = new taivTypePtr;
    TA_taivTypePtr.AddParFormal(&TA_class);
    TA_taivTypePtr.AddClassPar(&TA_taivType,0);
  taMisc::types.Add(&TA_taivFilePtrType);
    TAI_taivFilePtrType = new taivFilePtrType;
    TA_taivFilePtrType.AddParFormal(&TA_class);
    TA_taivFilePtrType.AddClassPar(&TA_taivType,0);
  taMisc::types.Add(&TA_taivDefaultEdit);
    TAI_taivDefaultEdit = new taivDefaultEdit;
    TA_taivDefaultEdit.AddParFormal(&TA_class);
    TA_taivDefaultEdit.AddClassPar(&TA_taivEdit,0);
  taMisc::types.Add(&TA_bool_ref);
    TA_bool_ref.AddParents(&TA_bool);
  taMisc::types.Add(&TA_taivROMember);
    TAI_taivROMember = new taivROMember;
    TA_taivROMember.AddParFormal(&TA_class);
    TA_taivROMember.AddClassPar(&TA_taivMember,0);
  taMisc::types.Add(&TA_taivTokenPtrMember);
    TAI_taivTokenPtrMember = new taivTokenPtrMember;
    TA_taivTokenPtrMember.AddParFormal(&TA_class);
    TA_taivTokenPtrMember.AddClassPar(&TA_taivMember,0);
  taMisc::types.Add(&TA_taivTypePtrMember);
    TAI_taivTypePtrMember = new taivTypePtrMember;
    TA_taivTypePtrMember.AddParFormal(&TA_class);
    TA_taivTypePtrMember.AddClassPar(&TA_taivMember,0);
  taMisc::types.Add(&TA_taivSubTokenPtrMember);
    TAI_taivSubTokenPtrMember = new taivSubTokenPtrMember;
    TA_taivSubTokenPtrMember.AddParFormal(&TA_class);
    TA_taivSubTokenPtrMember.AddClassPar(&TA_taivMember,0);
  taMisc::types.Add(&TA_taivMemberDefPtrMember);
    TAI_taivMemberDefPtrMember = new taivMemberDefPtrMember;
    TA_taivMemberDefPtrMember.AddParFormal(&TA_class);
    TA_taivMemberDefPtrMember.AddClassPar(&TA_taivMember,0);
  taMisc::types.Add(&TA_taivFunPtrMember);
    TAI_taivFunPtrMember = new taivFunPtrMember;
    TA_taivFunPtrMember.AddParFormal(&TA_class);
    TA_taivFunPtrMember.AddClassPar(&TA_taivMember,0);
  taMisc::types.Add(&TA_taivCondEditMember);
    TAI_taivCondEditMember = new taivCondEditMember;
    TA_taivCondEditMember.AddParFormal(&TA_class);
    TA_taivCondEditMember.AddClassPar(&TA_taivMember,0);
  taMisc::types.Add(&TA_TypeDefault_ptr);
    TA_TypeDefault_ptr.AddParents(&TA_TypeDefault);
  taMisc::types.Add(&TA_taivTDefaultMember);
    TAI_taivTDefaultMember = new taivTDefaultMember;
    TA_taivTDefaultMember.AddParFormal(&TA_class);
    TA_taivTDefaultMember.AddClassPar(&TA_taivMember,0);
  taMisc::types.Add(&TA_taivDefaultToken);
    TAI_taivDefaultToken = new taivDefaultToken;
    TA_taivDefaultToken.AddParFormal(&TA_class);
    TA_taivDefaultToken.AddClassPar(&TA_taivTokenPtrMember,0);
  taMisc::types.Add(&TA_taivMethMenu_ptr);
    TA_taivMethMenu_ptr.AddParents(&TA_taivMethMenu);
  taMisc::types.Add(&TA_taivButtonMethod);
    TAI_taivButtonMethod = new taivButtonMethod;
    TA_taivButtonMethod.AddParFormal(&TA_class);
    TA_taivButtonMethod.AddClassPar(&TA_taivMethod,0);
  taMisc::types.Add(&TA_taivMenuMethod);
    TAI_taivMenuMethod = new taivMenuMethod;
    TA_taivMenuMethod.AddParFormal(&TA_class);
    TA_taivMenuMethod.AddClassPar(&TA_taivMethod,0);
  taMisc::types.Add(&TA_taivMenuButtonMethod);
    TAI_taivMenuButtonMethod = new taivMenuButtonMethod;
    TA_taivMenuButtonMethod.AddParFormal(&TA_class);
    TA_taivMenuButtonMethod.AddClassPar(&TA_taivMethod,0);
  taMisc::types.Add(&TA_taivArgType_ptr);
    TA_taivArgType_ptr.AddParents(&TA_taivArgType);
  taMisc::types.Add(&TA_taivStreamArgType);
    TAI_taivStreamArgType = new taivStreamArgType;
    TA_taivStreamArgType.AddParFormal(&TA_class);
    TA_taivStreamArgType.AddClassPar(&TA_taivArgType,0);
  taMisc::types.Add(&TA_taivBoolArgType);
    TAI_taivBoolArgType = new taivBoolArgType;
    TA_taivBoolArgType.AddParFormal(&TA_class);
    TA_taivBoolArgType.AddClassPar(&TA_taivArgType,0);
  taMisc::types.Add(&TA_taivTokenPtrArgType);
    TAI_taivTokenPtrArgType = new taivTokenPtrArgType;
    TA_taivTokenPtrArgType.AddParFormal(&TA_class);
    TA_taivTokenPtrArgType.AddClassPar(&TA_taivArgType,0);
  taMisc::types.Add(&TA_taivTypePtrArgType);
    TAI_taivTypePtrArgType = new taivTypePtrArgType;
    TA_taivTypePtrArgType.AddParFormal(&TA_class);
    TA_taivTypePtrArgType.AddClassPar(&TA_taivArgType,0);
  taMisc::types.Add(&TA_taivMemberPtrArgType);
    TAI_taivMemberPtrArgType = new taivMemberPtrArgType;
    TA_taivMemberPtrArgType.AddParFormal(&TA_class);
    TA_taivMemberPtrArgType.AddClassPar(&TA_taivArgType,0);
  taMisc::types.Add(&TA_taivMethodPtrArgType);
    TAI_taivMethodPtrArgType = new taivMethodPtrArgType;
    TA_taivMethodPtrArgType.AddParFormal(&TA_class);
    TA_taivMethodPtrArgType.AddClassPar(&TA_taivArgType,0);
  taMisc::types.Add(&TA_gpivListEditButton);
    TA_gpivListEditButton.AddParFormal(&TA_class);
    TA_gpivListEditButton.AddClassPar(&TA_taivEditButton,0);
  taMisc::types.Add(&TA_gpivGroupEditButton);
    TA_gpivGroupEditButton.AddParFormal(&TA_class);
    TA_gpivGroupEditButton.AddClassPar(&TA_taivEditButton,0);
  taMisc::types.Add(&TA_gpivSubEditButton);
    TA_gpivSubEditButton.AddParFormal(&TA_class);
    TA_gpivSubEditButton.AddClassPar(&TA_taivEditButton,0);
  taMisc::types.Add(&TA_gpivLinkEditButton);
    TA_gpivLinkEditButton.AddParFormal(&TA_class);
    TA_gpivLinkEditButton.AddClassPar(&TA_gpivGroupEditButton,0);
  taMisc::types.Add(&TA_gpivListLinkEditButton);
    TA_gpivListLinkEditButton.AddParFormal(&TA_class);
    TA_gpivListLinkEditButton.AddClassPar(&TA_gpivListEditButton,0);
  taMisc::types.Add(&TA_gpivArrayEditButton);
    TA_gpivArrayEditButton.AddParFormal(&TA_class);
    TA_gpivArrayEditButton.AddClassPar(&TA_taivEditButton,0);
  taMisc::types.Add(&TA_gpivListEls);
    TA_gpivListEls.AddParFormal(&TA_class);
    TA_gpivListEls.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_gpivGroupEls);
    TA_gpivGroupEls.AddParFormal(&TA_class);
    TA_gpivGroupEls.AddClassPar(&TA_gpivListEls,0);
  taMisc::types.Add(&TA_gpivSubGroups);
    TA_gpivSubGroups.AddParFormal(&TA_class);
    TA_gpivSubGroups.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_gpivElTypes);
    TA_gpivElTypes.AddParFormal(&TA_class);
    TA_gpivElTypes.AddClassPar(&TA_taivTypeHier,0);
  taMisc::types.Add(&TA_gpivNewFuns);
    TA_gpivNewFuns.AddParFormal(&TA_class);
    TA_gpivNewFuns.AddClassPar(&TA_taivData,0);
  taMisc::types.Add(&TA_taivField_ptr);
    TA_taivField_ptr.AddParents(&TA_taivField);
  taMisc::types.Add(&TA_gpivElTypes_ptr);
    TA_gpivElTypes_ptr.AddParents(&TA_gpivElTypes);
  taMisc::types.Add(&TA_gpivNewFuns_ptr);
    TA_gpivNewFuns_ptr.AddParents(&TA_gpivNewFuns);
  taMisc::types.Add(&TA_gpivListNew);
    TA_gpivListNew.AddParFormal(&TA_class);
    TA_gpivListNew.AddClassPar(&TA_taivDialog,0);
  taMisc::types.Add(&TA_gpivSubGroups_ptr);
    TA_gpivSubGroups_ptr.AddParents(&TA_gpivSubGroups);
  taMisc::types.Add(&TA_gpivGroupNew);
    TA_gpivGroupNew.AddParFormal(&TA_class);
    TA_gpivGroupNew.AddClassPar(&TA_gpivListNew,0);
  taMisc::types.Add(&TA_gpivList_ElData);
    TA_gpivList_ElData.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taPtrList_gpivList_ElData_);
    TAI_taPtrList_gpivList_ElData_ = new taPtrList<gpivList_ElData>;
    TA_taPtrList_gpivList_ElData_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_gpivList_ElData_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_gpivList_ElDataList);
    TA_gpivList_ElDataList.AddParFormal(&TA_class);
    TA_gpivList_ElDataList.AddClassPar(&TA_taPtrList_gpivList_ElData_,0);
  taMisc::types.Add(&TA_gpivListDialog);
    TA_gpivListDialog.AddParFormal(&TA_class);
    TA_gpivListDialog.AddClassPar(&TA_taivEditDialog,0);
  taMisc::types.Add(&TA_gpivListEdit);
    TAI_gpivListEdit = new gpivListEdit;
    TA_gpivListEdit.AddParFormal(&TA_class);
    TA_gpivListEdit.AddClassPar(&TA_taivEdit,0);
  taMisc::types.Add(&TA_gpivGroupDialog);
    TA_gpivGroupDialog.AddParFormal(&TA_class);
    TA_gpivGroupDialog.AddClassPar(&TA_gpivListDialog,0);
  taMisc::types.Add(&TA_gpivGroupEdit);
    TAI_gpivGroupEdit = new gpivGroupEdit;
    TA_gpivGroupEdit.AddParFormal(&TA_class);
    TA_gpivGroupEdit.AddClassPar(&TA_gpivListEdit,0);
  taMisc::types.Add(&TA_gpivArrayEditDialog);
    TA_gpivArrayEditDialog.AddParFormal(&TA_class);
    TA_gpivArrayEditDialog.AddClassPar(&TA_taivEditDialog,0);
  taMisc::types.Add(&TA_gpivArrayEdit);
    TAI_gpivArrayEdit = new gpivArrayEdit;
    TA_gpivArrayEdit.AddParFormal(&TA_class);
    TA_gpivArrayEdit.AddClassPar(&TA_taivEdit,0);
  taMisc::types.Add(&TA_gpivListType);
    TAI_gpivListType = new gpivListType;
    TA_gpivListType.AddParFormal(&TA_class);
    TA_gpivListType.AddClassPar(&TA_taivClassType,0);
  taMisc::types.Add(&TA_gpivGroupType);
    TAI_gpivGroupType = new gpivGroupType;
    TA_gpivGroupType.AddParFormal(&TA_class);
    TA_gpivGroupType.AddClassPar(&TA_gpivListType,0);
  taMisc::types.Add(&TA_gpivArray_Type);
    TAI_gpivArray_Type = new gpivArray_Type;
    TA_gpivArray_Type.AddParFormal(&TA_class);
    TA_gpivArray_Type.AddClassPar(&TA_taivClassType,0);
  taMisc::types.Add(&TA_taivROListMember);
    TAI_taivROListMember = new taivROListMember;
    TA_taivROListMember.AddParFormal(&TA_class);
    TA_taivROListMember.AddClassPar(&TA_taivROMember,0);
  taMisc::types.Add(&TA_taivROGroupMember);
    TAI_taivROGroupMember = new taivROGroupMember;
    TA_taivROGroupMember.AddParFormal(&TA_class);
    TA_taivROGroupMember.AddClassPar(&TA_taivROMember,0);
  taMisc::types.Add(&TA_taivROArrayMember);
    TAI_taivROArrayMember = new taivROArrayMember;
    TA_taivROArrayMember.AddParFormal(&TA_class);
    TA_taivROArrayMember.AddClassPar(&TA_taivROMember,0);
  taMisc::types.Add(&TA_gpivDefaultEl);
    TAI_gpivDefaultEl = new gpivDefaultEl;
    TA_gpivDefaultEl.AddParFormal(&TA_class);
    TA_gpivDefaultEl.AddClassPar(&TA_taivMember,0);
  taMisc::types.Add(&TA_gpivLinkGP);
    TAI_gpivLinkGP = new gpivLinkGP;
    TA_gpivLinkGP.AddParFormal(&TA_class);
    TA_gpivLinkGP.AddClassPar(&TA_taivMember,0);
  taMisc::types.Add(&TA_gpivLinkList);
    TAI_gpivLinkList = new gpivLinkList;
    TA_gpivLinkList.AddParFormal(&TA_class);
    TA_gpivLinkList.AddClassPar(&TA_taivMember,0);
  taMisc::types.Add(&TA_gpivFromGpTokenPtrMember);
    TAI_gpivFromGpTokenPtrMember = new gpivFromGpTokenPtrMember;
    TA_gpivFromGpTokenPtrMember.AddParFormal(&TA_class);
    TA_gpivFromGpTokenPtrMember.AddClassPar(&TA_taivTokenPtrMember,0);
  taMisc::types.Add(&TA_gpivTAPtrArgType);
    TAI_gpivTAPtrArgType = new gpivTAPtrArgType;
    TA_gpivTAPtrArgType.AddParFormal(&TA_class);
    TA_gpivTAPtrArgType.AddClassPar(&TA_taivTokenPtrArgType,0);
  taMisc::types.Add(&TA_gpivInObjArgType);
    TAI_gpivInObjArgType = new gpivInObjArgType;
    TA_gpivInObjArgType.AddParFormal(&TA_class);
    TA_gpivInObjArgType.AddClassPar(&TA_gpivTAPtrArgType,0);
  taMisc::types.Add(&TA_gpivFromGpArgType);
    TAI_gpivFromGpArgType = new gpivFromGpArgType;
    TA_gpivFromGpArgType.AddParFormal(&TA_class);
    TA_gpivFromGpArgType.AddClassPar(&TA_taivTokenPtrArgType,0);
  taMisc::types.Add(&TA_SelectEditConfig);
    TAI_SelectEditConfig = new SelectEditConfig;
    TA_SelectEditConfig.AddParFormal(&TA_class);
    TA_SelectEditConfig.AddParCache(&TA_taBase);
    TA_SelectEditConfig.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_SelectEditConfig,TA_SelectEditConfig_MemberDef);
  taMisc::types.Add(&TA_const_SelectEdit);
    TA_const_SelectEdit.AddParents(&TA_const, &TA_SelectEdit);
  taMisc::types.Add(&TA_const_SelectEditConfig);
    TA_const_SelectEditConfig.AddParents(&TA_const, &TA_SelectEditConfig);
  taMisc::types.Add(&TA_const_SelectEdit_ref);
    TA_const_SelectEdit_ref.AddParents(&TA_const_SelectEdit);
  taMisc::types.Add(&TA_const_SelectEditConfig_ref);
    TA_const_SelectEditConfig_ref.AddParents(&TA_const_SelectEditConfig);
  taMisc::types.Add(&TA_gpivSelectEdit);
    TAI_gpivSelectEdit = new gpivSelectEdit;
    TA_gpivSelectEdit.AddParFormal(&TA_class);
    TA_gpivSelectEdit.AddClassPar(&TA_taivEdit,0);
  taMisc::types.Add(&TA_gpivSelectEditDialog);
    TA_gpivSelectEditDialog.AddParFormal(&TA_class);
    TA_gpivSelectEditDialog.AddClassPar(&TA_taivEditDialog,0);
  taMisc::types.Add(&TA_ivInputHandler_ptr);
    TA_ivInputHandler_ptr.AddParents(&TA_ivInputHandler);
  taMisc::types.Add(&TA_ivInputHandler);
    TA_ivInputHandler.AddParFormal(&TA_class);
    TA_ivInputHandler.AddParents(&TA_ivMonoGlyph);
  taMisc::types.Add(&TA_ivWindow_ptr);
    TA_ivWindow_ptr.AddParents(&TA_ivWindow);
  taMisc::types.Add(&TA_ivWindow);
    TA_ivWindow.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivWidgetKit_ptr);
    TA_ivWidgetKit_ptr.AddParents(&TA_ivWidgetKit);
  taMisc::types.Add(&TA_ivWidgetKit);
    TA_ivWidgetKit.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivDialogKit_ptr);
    TA_ivDialogKit_ptr.AddParents(&TA_ivDialogKit);
  taMisc::types.Add(&TA_ivDialogKit);
    TA_ivDialogKit.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivLayoutKit_ptr);
    TA_ivLayoutKit_ptr.AddParents(&TA_ivLayoutKit);
  taMisc::types.Add(&TA_ivLayoutKit);
    TA_ivLayoutKit.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivStyle_ptr);
    TA_ivStyle_ptr.AddParents(&TA_ivStyle);
  taMisc::types.Add(&TA_ivStyle);
    TA_ivStyle.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivButton_ptr);
    TA_ivButton_ptr.AddParents(&TA_ivButton);
  taMisc::types.Add(&TA_ivButton);
    TA_ivButton.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_HiLightButton_ptr);
    TA_HiLightButton_ptr.AddParents(&TA_HiLightButton);
  taMisc::types.Add(&TA_HiLightButton);
    TA_HiLightButton.AddParFormal(&TA_class);
    TA_HiLightButton.AddParents(&TA_ivDeck);
  taMisc::types.Add(&TA_ivPatch_ptr);
    TA_ivPatch_ptr.AddParents(&TA_ivPatch);
  taMisc::types.Add(&TA_ivPatch);
    TA_ivPatch.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivPolyGlyph_ptr);
    TA_ivPolyGlyph_ptr.AddParents(&TA_ivPolyGlyph);
  taMisc::types.Add(&TA_ivPolyGlyph);
    TA_ivPolyGlyph.AddParFormal(&TA_class);
    TA_ivPolyGlyph.AddParents(&TA_ivGlyph);
  taMisc::types.Add(&TA_ivCoord);
    TA_ivCoord.AddParents(&TA_float);
  taMisc::types.Add(&TA_ivMenu_ptr);
    TA_ivMenu_ptr.AddParents(&TA_ivMenu);
  taMisc::types.Add(&TA_ivMenu);
    TA_ivMenu.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivFont_ptr);
    TA_ivFont_ptr.AddParents(&TA_ivFont);
  taMisc::types.Add(&TA_ivFont);
    TA_ivFont.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivDialog);
    TA_ivDialog.AddParFormal(&TA_class);
    TA_ivDialog.AddParents(&TA_ivInputHandler);
  taMisc::types.Add(&TA_osboolean);
    TA_osboolean.AddParents(&TA_unsigned);
  taMisc::types.Add(&TA_ivTopLevelWindow_ptr);
    TA_ivTopLevelWindow_ptr.AddParents(&TA_ivTopLevelWindow);
  taMisc::types.Add(&TA_ivTopLevelWindow);
    TA_ivTopLevelWindow.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_ivResource_ptr);
    TA_const_ivResource_ptr.AddParents(&TA_const_ivResource);
  taMisc::types.Add(&TA_const_ivResource);
    TA_const_ivResource.AddParents(&TA_const, &TA_ivResource);
  taMisc::types.Add(&TA_ivResource);
    TA_ivResource.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivRequisition_ref);
    TA_ivRequisition_ref.AddParents(&TA_ivRequisition);
  taMisc::types.Add(&TA_ivRequisition);
    TA_ivRequisition.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivCanvas_ptr);
    TA_ivCanvas_ptr.AddParents(&TA_ivCanvas);
  taMisc::types.Add(&TA_ivCanvas);
    TA_ivCanvas.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivAllocation);
    TA_ivAllocation.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivExtension);
    TA_ivExtension.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivPrinter);
    TA_ivPrinter.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivHit_ref);
    TA_ivHit_ref.AddParents(&TA_ivHit);
  taMisc::types.Add(&TA_ivHit);
    TA_ivHit.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivGlyph);
    TA_ivGlyph.AddParFormal(&TA_class);
    TA_ivGlyph.AddParents(&TA_ivResource);
  taMisc::types.Add(&TA_ivGlyphBreakType);
    TA_ivGlyphBreakType.AddParents(&TA_unsigned_int);
  taMisc::types.Add(&TA_ivGlyphIndex);
    TA_ivGlyphIndex.AddParents(&TA_long);
  taMisc::types.Add(&TA_DimensionName);
    TA_DimensionName.AddParents(&TA_unsigned_int);
  taMisc::types.Add(&TA_ivAllotment_ref);
    TA_ivAllotment_ref.AddParents(&TA_ivAllotment);
  taMisc::types.Add(&TA_ivAllotment);
    TA_ivAllotment.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivHandler_ptr);
    TA_ivHandler_ptr.AddParents(&TA_ivHandler);
  taMisc::types.Add(&TA_ivHandler);
    TA_ivHandler.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_ivEvent);
    TA_const_ivEvent.AddParents(&TA_const, &TA_ivEvent);
  taMisc::types.Add(&TA_ivEvent);
    TA_ivEvent.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_ivTransformer_ref);
    TA_const_ivTransformer_ref.AddParents(&TA_const_ivTransformer);
  taMisc::types.Add(&TA_const_ivTransformer);
    TA_const_ivTransformer.AddParents(&TA_const, &TA_ivTransformer);
  taMisc::types.Add(&TA_ivTransformer);
    TA_ivTransformer.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivWindow_List);
    TA_ivWindow_List.AddParFormal(&TA_class, &TA_templ_inst);
  taMisc::types.Add(&TA_ivMonoGlyph);
    TA_ivMonoGlyph.AddParFormal(&TA_class);
    TA_ivMonoGlyph.AddParents(&TA_ivGlyph);
  taMisc::types.Add(&TA_ivFieldEditor_ptr);
    TA_ivFieldEditor_ptr.AddParents(&TA_ivFieldEditor);
  taMisc::types.Add(&TA_ivFieldEditor);
    TA_ivFieldEditor.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivDeck_ptr);
    TA_ivDeck_ptr.AddParents(&TA_ivDeck);
  taMisc::types.Add(&TA_ivDeck);
    TA_ivDeck.AddParFormal(&TA_class);
    TA_ivDeck.AddParents(&TA_ivPolyGlyph);
  taMisc::types.Add(&TA_ivMenuItem_ptr);
    TA_ivMenuItem_ptr.AddParents(&TA_ivMenuItem);
  taMisc::types.Add(&TA_ivMenuItem);
    TA_ivMenuItem.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivMonoGlyph_ptr);
    TA_ivMonoGlyph_ptr.AddParents(&TA_ivMonoGlyph);
  taMisc::types.Add(&TA_ivTelltaleGroup_ptr);
    TA_ivTelltaleGroup_ptr.AddParents(&TA_ivTelltaleGroup);
  taMisc::types.Add(&TA_ivTelltaleGroup);
    TA_ivTelltaleGroup.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivAction_ptr);
    TA_ivAction_ptr.AddParents(&TA_ivAction);
  taMisc::types.Add(&TA_ivAction);
    TA_ivAction.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ivDialog_ptr);
    TA_ivDialog_ptr.AddParents(&TA_ivDialog);
  taMisc::types.Add(&TA_ivFileBrowser_ptr);
    TA_ivFileBrowser_ptr.AddParents(&TA_ivFileBrowser);
  taMisc::types.Add(&TA_ivFileBrowser);
    TA_ivFileBrowser.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_cssClass_ptr);
    TA_cssClass_ptr.AddParents(&TA_cssClass);
  taMisc::types.Add(&TA_cssClass);
    TA_cssClass.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taivArgDialog_ptr);
    TA_taivArgDialog_ptr.AddParents(&TA_taivArgDialog);
  taMisc::types.Add(&TA_taivArgDialog);
    TA_taivArgDialog.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_cssEl_ptr);
    TA_cssEl_ptr.AddParents(&TA_cssEl);
  taMisc::types.Add(&TA_cssEl);
    TA_cssEl.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_lrScrollBox_ptr);
    TA_lrScrollBox_ptr.AddParents(&TA_lrScrollBox);
  taMisc::types.Add(&TA_lrScrollBox);
    TA_lrScrollBox.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_tbScrollBox_ptr);
    TA_tbScrollBox_ptr.AddParents(&TA_tbScrollBox);
  taMisc::types.Add(&TA_tbScrollBox);
    TA_tbScrollBox.AddParFormal(&TA_class);


  taMisc::in_init = false;
  taMisc::Initialize();
} 
