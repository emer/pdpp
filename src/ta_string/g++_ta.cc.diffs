*** g++-2.6-String.cc	Tue May 23 15:52:43 1995
--- ta_string.cc	Tue May 23 15:55:53 1995
***************
*** 1,3 ****
--- 1,41 ----
+ /* -*- C++ -*- */
+ /*=============================================================================
+ //									      //
+ // This file is part of the TypeAccess/C-Super-Script software package.	      //
+ //									      //
+ // Copyright (C) 1995 Randall C. O'Reilly, Chadley K. Dawson, 		      //
+ //		      James L. McClelland, and Carnegie Mellon University     //
+ //     									      //
+ // Permission to use, copy, and modify this software and its documentation    //
+ // for any purpose other than sale or distribution is hereby granted without  //
+ // fee, provided  that the above copyright notice and this permission notice  //
+ // appear in all copies of the software and related documentation.            //
+ //									      //
+ // PERMISSION TO MARKET, DISTRIBUTE, OR SELL THIS SOFTWARE OR ITS             //
+ // DOCUMENTATION IS EXPRESSLY *NOT* GRANTED AND IS RETAINED BY THE COPYRIGHT  //
+ // HOLDERS.					       			      //
+ // 									      //
+ // Note that the taString class, which is derived from the GNU String class,  //
+ // is Copyright (C) 1988 Free Software Foundation, written by Doug Lea, and   //
+ // is covered by the GNU General Public License, see ta_string.h.             //
+ // The iv_graphic library and some iv_misc classes were derived from the      //
+ // InterViews morpher example and other InterViews code, which is             //
+ // Copyright (C) 1987, 1988, 1989, 1990, 1991 Stanford University             //
+ // Copyright (C) 1991 Silicon Graphics, Inc.				      //
+ //									      //
+ // THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,         //
+ // EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 	      //
+ // WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  	      //
+ // 									      //
+ // IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE FOR		      //
+ // ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND,    //
+ // OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,     //
+ // WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF  //
+ // LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE     //
+ // OF THIS SOFTWARE.							      //
+ //     									      //
+ ==============================================================================*/
+ 
  /* 
  Copyright (C) 1988 Free Software Foundation
      written by Doug Lea (dl@rocky.oswego.edu)
***************
*** 22,37 ****
  #ifdef __GNUG__
  #pragma implementation
  #endif
! #include <String.h>
! #include <std.h>
  #include <ctype.h>
  #include <limits.h>
! #include <new.h>
  #include <builtin.h>
  
  void String::error(const char* msg) const
  {
!   (*lib_error_handler)("String", msg);
  }
  
  String::operator const char*() const
--- 60,76 ----
  #ifdef __GNUG__
  #pragma implementation
  #endif
! #include <ta_string/ta_string.h>
  #include <ctype.h>
  #include <limits.h>
! #ifdef __GNUG__
! #include <std.h>
  #include <builtin.h>
+ #endif
  
  void String::error(const char* msg) const
  {
!   cerr << "String:" <<  msg << "\n";
  }
  
  String::operator const char*() const
***************
*** 103,108 ****
--- 142,177 ----
    }
  }
  
+ // ta_string: added to support conversion of int, float, double to string
+ 
+ #include <stdio.h>
+ 
+ // static char init_charbuf[100];
+ 
+ String::String(int i,const char* format) : rep(&_nilStrRep) {
+   alloc(32);
+   sprintf((char*)chars(),format,i);
+   rep->len = slen(chars());
+ //   sprintf(init_charbuf,format,i);
+ //   cat(*this, init_charbuf, *this);
+ }
+ 
+ String::String(float f,const char* format) : rep(&_nilStrRep) {
+   alloc(32);
+   sprintf((char*)chars(),format,f);
+   rep->len = slen(chars());
+ //   sprintf(init_charbuf,format,f);
+ //   cat(*this, init_charbuf, *this);
+ }
+ 
+ String::String(double f,const char* format) : rep(&_nilStrRep) {
+   alloc(32);
+   sprintf((char*)chars(),format,f);
+   rep->len = slen(chars());
+ //   sprintf(init_charbuf,format,f);
+ //   cat(*this, init_charbuf, *this);
+ }
+ 
  // minimum & maximum representable rep size
  
  #define MAXStrRep_SIZE   ((1 << (sizeof(short) * CHAR_BIT - 1)) - 1)
***************
*** 127,133 ****
    while (allocsiz < siz) allocsiz <<= 1;
    allocsiz -= MALLOC_MIN_OVERHEAD;
    if (allocsiz >= MAXStrRep_SIZE)
!     (*lib_error_handler)("String", "Requested length out of range");
      
    StrRep* rep = (StrRep *) new char[allocsiz];
    rep->sz = allocsiz - sizeof(StrRep);
--- 196,202 ----
    while (allocsiz < siz) allocsiz <<= 1;
    allocsiz -= MALLOC_MIN_OVERHEAD;
    if (allocsiz >= MAXStrRep_SIZE)
!     cerr << "String: " << "Requested length out of range\n";
      
    StrRep* rep = (StrRep *) new char[allocsiz];
    rep->sz = allocsiz - sizeof(StrRep);
***************
*** 324,330 ****
      return *a != 0;
    else
    {
!     signed char diff = 0;
      while ((diff = *a - *b++) == 0 && *a++ != 0);
      return diff;
    }
--- 393,399 ----
      return *a != 0;
    else
    {
!     int diff;
      while ((diff = *a - *b++) == 0 && *a++ != 0);
      return diff;
    }
***************
*** 334,340 ****
  inline static int ncmp(const char* a, int al, const char* b, int bl)
  {
    int n = (al <= bl)? al : bl;
!   signed char diff;
    while (n-- > 0) if ((diff = *a++ - *b++) != 0) return diff;
    return al - bl;
  }
--- 403,409 ----
  inline static int ncmp(const char* a, int al, const char* b, int bl)
  {
    int n = (al <= bl)? al : bl;
!   int diff;
    while (n-- > 0) if ((diff = *a++ - *b++) != 0) return diff;
    return al - bl;
  }
***************
*** 346,352 ****
    int al = x.length();
    int bl = y.length();
    int n = (al <= bl)? al : bl;
!   signed char diff = 0;
    while (n-- > 0)
    {
      char ac = *a++;
--- 415,421 ----
    int al = x.length();
    int bl = y.length();
    int n = (al <= bl)? al : bl;
!   int diff;
    while (n-- > 0)
    {
      char ac = *a++;
***************
*** 400,406 ****
    {
      const char* a = x.chars();
      int n = x.length();
!     signed char diff;
      while (n-- > 0) if ((diff = *a++ - *b++) != 0) return diff;
      return (*b == 0) ? 0 : -1;
    }
--- 469,475 ----
    {
      const char* a = x.chars();
      int n = x.length();
!     int diff;
      while (n-- > 0) if ((diff = *a++ - *b++) != 0) return diff;
      return (*b == 0) ? 0 : -1;
    }
***************
*** 598,675 ****
    return nmatches;
  }
  
- int String::_gsub(const Regex& pat, const char* r, int rl)
- {
-   int nmatches = 0;
-   int sl = length();
-   if (sl <= 0)
-     return nmatches;
  
-   if (rl < 0) rl = slen(r);
- 
-   const char* s = chars();
- 
-   StrRep* nrep = 0;
-   int nsz = 0;
- 
-   char* x = 0;
- 
-   int si = 0;
-   int xi = 0;
-   int remaining = sl;
-   int  pos, pl = 0;				  // how long is a regular expression?
- 
-   while (remaining > 0)
-   {
-     pos = pat.search(s, sl, pl, si); // unlike string search, the pos returned here is absolute
-     if (pos < 0 || pl <= 0)
-       break;
-     else
-     {
-       ++nmatches;
-       int mustfit = xi + remaining + rl - pl;
-       if (mustfit >= nsz)
-       {
-         if (nrep != 0) nrep->len = xi;
-         nrep = Sresize(nrep, mustfit);
-         x = nrep->s;
-         nsz = nrep->sz;
-       }
-       pos -= si;
-       ncopy(&(s[si]), &(x[xi]), pos);
-       ncopy(r, &(x[xi + pos]), rl);
-       si += pos + pl;
-       remaining -= pos + pl;
-       xi += pos + rl;
-     }
-   }
- 
-   if (nrep == 0)
-   {
-     if (nmatches == 0)
-       return nmatches;
-     else
-       nrep = Sresize(nrep, xi+remaining);
-   }
- 
-   ncopy0(&(s[si]), &(x[xi]), remaining);
-   nrep->len = xi + remaining;
- 
-   if (nrep->len <= rep->sz)   // fit back in if possible
-   {
-     rep->len = nrep->len;
-     ncopy0(nrep->s, rep->s, rep->len);
-     delete(nrep);
-   }
-   else
-   {
-     delete(rep);
-     rep = nrep;
-   }
-   return nmatches;
- }
- 
- 
  /*
   * deletion
   */
--- 667,673 ----
***************
*** 683,695 ****
    rep->len = nlen;
  }
  
- void String::del(const Regex& r, int startpos)
- {
-   int mlen;
-   int first = r.search(chars(), length(), mlen, startpos);
-   del(first, mlen);
- }
- 
  void String::del(const char* t, int startpos)
  {
    int tlen = slen(t);
--- 681,686 ----
***************
*** 759,771 ****
    return _substr(first, y.length());
  }
  
- SubString String::at(const Regex& r, int startpos)
- {
-   int mlen;
-   int first = r.search(chars(), length(), mlen, startpos);
-   return _substr(first, mlen);
- }
- 
  SubString String::at(const char* t, int startpos)
  {
    int tlen = slen(t);
--- 750,755 ----
***************
*** 791,803 ****
    return _substr(0, last);
  }
  
- SubString String::before(const Regex& r, int startpos)
- {
-   int mlen;
-   int first = r.search(chars(), length(), mlen, startpos);
-   return _substr(0, first);
- }
- 
  SubString String::before(char c, int startpos)
  {
    int last = search(startpos, length(), c);
--- 775,780 ----
***************
*** 825,838 ****
    return _substr(0, last);
  }
  
- SubString String::through(const Regex& r, int startpos)
- {
-   int mlen;
-   int first = r.search(chars(), length(), mlen, startpos);
-   if (first >= 0) first += mlen;
-   return _substr(0, first);
- }
- 
  SubString String::through(char c, int startpos)
  {
    int last = search(startpos, length(), c);
--- 802,807 ----
***************
*** 869,882 ****
    return _substr(first, length() - first);
  }
  
- SubString String::after(const Regex& r, int startpos)
- {
-   int mlen;
-   int first = r.search(chars(), length(), mlen, startpos);
-   if (first >= 0) first += mlen;
-   return _substr(first, length() - first);
- }
- 
  SubString String::after(const char* t, int startpos)
  {
    int tlen = slen(t);
--- 838,843 ----
***************
*** 897,909 ****
    return _substr(first, length() - first);
  }
  
- SubString String::from(const Regex& r, int startpos)
- {
-   int mlen;
-   int first = r.search(chars(), length(), mlen, startpos);
-   return _substr(first, length() - first);
- }
- 
  SubString String::from(char c, int startpos)
  {
    int first = search(startpos, length(), c);
--- 858,863 ----
***************
*** 939,964 ****
      results[i].rep = Salloc(results[i].rep, &(s[pos]), p - pos, p - pos);
      i++;
      pos = p + sep.length();
-   }
-   return i;
- }
- 
- int split(const String& src, String results[], int n, const Regex& r)
- {
-   String x = src;
-   const char* s = x.chars();
-   int sl = x.length();
-   int i = 0;
-   int pos = 0;
-   int p, matchlen;
-   while (i < n && pos < sl)
-   {
-     p = r.search(s, sl, matchlen, pos);
-     if (p < 0)
-       p = sl;
-     results[i].rep = Salloc(results[i].rep, &(s[pos]), p - pos, p - pos);
-     i++;
-     pos = p + matchlen;
    }
    return i;
  }
--- 893,898 ----
