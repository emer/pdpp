// File Automatically Generated by MakeTA
// DO NOT EDIT


#include <ta/typea.h>
#include <ta/typea_constr.h>
#include <css/basic_types.h>
#include <css/c_ptr_types.h>
#include <css/ta_css.h>
#include <win_base.h>
#include <win_base_tmplt.h>
#include <minmax.h>
#include <random.h>
#include <tdgeometry.h>
#include <aggregate.h>
#include <colorscale.h>
#include <array_iv.h>
#include <fontspec.h>
#include <datatable.h>
#include <datatable_tmplt.h>
#include <datatable_iv.h>
#include <ta_file.h>
#include <script_base.h>
#include <fun_lookup.h>
#include "ta_misc_TA_type.h"
#include "ta_misc_TA_inst.h"


// Types

TypeDef TA_MenuGroup_impl("MenuGroup_impl", " a group that generates menus", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(MenuGroup_impl), (void**)&TAI_MenuGroup_impl, 0, 0, 0,1);
TypeDef TA_WinGeometry("WinGeometry", " Window geometry (position, size) ", 
	"", "INLINE ", "", sizeof(WinGeometry), (void**)&TAI_WinGeometry, 0, 0, 0,1);
TypeDef TA_WinBase("WinBase", " the base type for objects with a window and a menu", 
	"", "", "", sizeof(WinBase), (void**)&TAI_WinBase, 0, 0, 0,1);
TypeDef TA_WinView("WinView", " objects that can be actively updated and have multiple views", 
	"", "", "", sizeof(WinView), (void**)&TAI_WinView, 0, 0, 0,1);
TypeDef TA_WinMgr("WinMgr", " managers own views ", 
	"MEMB_IN_GPMENU ", "MEMB_IN_GPMENU ", "", sizeof(WinMgr), (void**)&TAI_WinMgr, 0, 0, 0,1);
TypeDef TA_winbMisc("winbMisc", " miscellaneous things for winbase", 
	"", "", "", sizeof(winbMisc), (void**)&TAI_winbMisc, 0, 0, 0,1);
TypeDef TA_WinBase_ptr("WinBase_ptr", 1, 1, 0, 0,1);
TypeDef TA_gpivGroupEls_ptr("gpivGroupEls_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_MenuGroup_impl("const_MenuGroup_impl", 1, 0, 0, 0,1);
TypeDef TA_const_MenuGroup_impl_ref("const_MenuGroup_impl_ref", 1, 0, 1, 0,1);
TypeDef TA_const_WinGeometry("const_WinGeometry", 1, 0, 0, 0,1);
TypeDef TA_const_WinGeometry_ref("const_WinGeometry_ref", 1, 0, 1, 0,1);
TypeDef TA_taivMenu_List_ptr("taivMenu_List_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivDataList_ptr("taivDataList_ptr", 1, 1, 0, 0,1);
TypeDef TA_taivMenu_List_ref("taivMenu_List_ref", 1, 0, 1, 0,1);
TypeDef TA_const_WinBase("const_WinBase", 1, 0, 0, 0,1);
TypeDef TA_const_WinBase_ref("const_WinBase_ref", 1, 0, 1, 0,1);
TypeDef TA_AnimImgCapture("AnimImgCapture", " capture images for animations", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(AnimImgCapture), (void**)&TAI_AnimImgCapture, 0, 0, 0,1);
TypeDef TA_taivHierMenu_List_ptr("taivHierMenu_List_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_AnimImgCapture("const_AnimImgCapture", 1, 0, 0, 0,1);
TypeDef TA_WinMgr_ptr("WinMgr_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_AnimImgCapture_ref("const_AnimImgCapture_ref", 1, 0, 1, 0,1);
TypeDef TA_const_WinView("const_WinView", 1, 0, 0, 0,1);
TypeDef TA_const_WinView_ref("const_WinView_ref", 1, 0, 1, 0,1);
TypeDef TA_WinView_Group("WinView_Group", "", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(WinView_Group), (void**)&TAI_WinView_Group, 0, 0, 0,1);
TypeDef TA_const_WinView_Group("const_WinView_Group", 1, 0, 0, 0,1);
TypeDef TA_WinView_MGroup("WinView_MGroup", "", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(WinView_MGroup), (void**)&TAI_WinView_MGroup, 0, 0, 0,1);
TypeDef TA_const_WinView_Group_ref("const_WinView_Group_ref", 1, 0, 1, 0,1);
TypeDef TA_WinView_ptr("WinView_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_WinView_MGroup("const_WinView_MGroup", 1, 0, 0, 0,1);
TypeDef TA_const_WinMgr("const_WinMgr", 1, 0, 0, 0,1);
TypeDef TA_const_WinView_MGroup_ref("const_WinView_MGroup_ref", 1, 0, 1, 0,1);
TypeDef TA_const_WinMgr_ref("const_WinMgr_ref", 1, 0, 1, 0,1);
TypeDef TA_const_float("const_float", 1, 0, 0, 0,1);
TypeDef TA_MinMax("MinMax", " minimum-maximum values ", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(MinMax), (void**)&TAI_MinMax, 0, 0, 0,1);
TypeDef TA_MinMax_ref("MinMax_ref", 1, 0, 1, 0,1);
TypeDef TA_const_MinMax("const_MinMax", 1, 0, 0, 0,1);
TypeDef TA_MinMaxRange("MinMaxRange", " min-max values plus scale and range ", 
	"", "INLINE ", "", sizeof(MinMaxRange), (void**)&TAI_MinMaxRange, 0, 0, 0,1);
TypeDef TA_const_MinMax_ref("const_MinMax_ref", 1, 0, 1, 0,1);
TypeDef TA_const_MinMaxRange("const_MinMaxRange", 1, 0, 0, 0,1);
TypeDef TA_const_MinMaxRange_ref("const_MinMaxRange_ref", 1, 0, 1, 0,1);
TypeDef TA_FixedMinMax("FixedMinMax", " minimum-maximum values with toggles for usage", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(FixedMinMax), (void**)&TAI_FixedMinMax, 0, 0, 0,1);
TypeDef TA_const_FixedMinMax("const_FixedMinMax", 1, 0, 0, 0,1);
TypeDef TA_const_FixedMinMax_ref("const_FixedMinMax_ref", 1, 0, 1, 0,1);
TypeDef TA_Modulo("Modulo", " modulo for things that happen periodically", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER INLINE ", "", sizeof(Modulo), (void**)&TAI_Modulo, 0, 0, 0,1);
TypeDef TA_const_Modulo("const_Modulo", 1, 0, 0, 0,1);
TypeDef TA_const_Modulo_ref("const_Modulo_ref", 1, 0, 1, 0,1);
TypeDef TA_const_int("const_int", 1, 0, 0, 0,1);
TypeDef TA_MinMaxInt("MinMaxInt", " minimum-maximum values ", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(MinMaxInt), (void**)&TAI_MinMaxInt, 0, 0, 0,1);
TypeDef TA_MinMaxInt_ref("MinMaxInt_ref", 1, 0, 1, 0,1);
TypeDef TA_const_MinMaxInt("const_MinMaxInt", 1, 0, 0, 0,1);
TypeDef TA_const_MinMaxInt_ref("const_MinMaxInt_ref", 1, 0, 1, 0,1);
TypeDef TA_RndSeed("RndSeed", " random seed support", 
	"", "NO_UPDATE_AFTER ", "", sizeof(RndSeed), (void**)&TAI_RndSeed, 0, 0, 0,1);
TypeDef TA_const_RndSeed("const_RndSeed", 1, 0, 0, 0,1);
TypeDef TA_const_RndSeed_ref("const_RndSeed_ref", 1, 0, 1, 0,1);
TypeDef TA_Random("Random", " Random Number Generation", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(Random), (void**)&TAI_Random, 0, 0, 0,1);
TypeDef TA_const_Random("const_Random", 1, 0, 0, 0,1);
TypeDef TA_const_Random_ref("const_Random_ref", 1, 0, 1, 0,1);
TypeDef TA_TimeUsed("TimeUsed", " stores and computes time used for processing information", 
	"", "INLINE NO_UPDATE_AFTER ", "", sizeof(TimeUsed), (void**)&TAI_TimeUsed, 0, 0, 0,1);
TypeDef TA_TwoDCoord("TwoDCoord", " a value in 2D coordinate space", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(TwoDCoord), (void**)&TAI_TwoDCoord, 0, 0, 0,1);
TypeDef TA_const_TimeUsed("const_TimeUsed", 1, 0, 0, 0,1);
TypeDef TA_PosTwoDCoord("PosTwoDCoord", " positive-only value in 2D coordinate space", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(PosTwoDCoord), (void**)&TAI_PosTwoDCoord, 0, 0, 0,1);
TypeDef TA_const_TimeUsed_ref("const_TimeUsed_ref", 1, 0, 1, 0,1);
TypeDef TA_TDCoord("TDCoord", " a value in 3D coordinate space", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(TDCoord), (void**)&TAI_TDCoord, 0, 0, 0,1);
TypeDef TA_PosTDCoord("PosTDCoord", " positive-only value in 3D coordinate space", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(PosTDCoord), (void**)&TAI_PosTDCoord, 0, 0, 0,1);
TypeDef TA_FloatTwoDCoord("FloatTwoDCoord", " a value in 2D coordinate space", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(FloatTwoDCoord), (void**)&TAI_FloatTwoDCoord, 0, 0, 0,1);
TypeDef TA_FloatTDCoord("FloatTDCoord", " a real value in 3D coordinate space", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(FloatTDCoord), (void**)&TAI_FloatTDCoord, 0, 0, 0,1);
TypeDef TA_float_ref("float_ref", 1, 0, 1, 0,1);
TypeDef TA_const_TwoDCoord("const_TwoDCoord", 1, 0, 0, 0,1);
TypeDef TA_const_TwoDCoord_ref("const_TwoDCoord_ref", 1, 0, 1, 0,1);
TypeDef TA_const_FloatTwoDCoord("const_FloatTwoDCoord", 1, 0, 0, 0,1);
TypeDef TA_const_FloatTwoDCoord_ref("const_FloatTwoDCoord_ref", 1, 0, 1, 0,1);
TypeDef TA_TwoDCoord_ref("TwoDCoord_ref", 1, 0, 1, 0,1);
TypeDef TA_const_PosTwoDCoord("const_PosTwoDCoord", 1, 0, 0, 0,1);
TypeDef TA_const_PosTwoDCoord_ref("const_PosTwoDCoord_ref", 1, 0, 1, 0,1);
TypeDef TA_const_TDCoord("const_TDCoord", 1, 0, 0, 0,1);
TypeDef TA_const_TDCoord_ref("const_TDCoord_ref", 1, 0, 1, 0,1);
TypeDef TA_const_FloatTDCoord("const_FloatTDCoord", 1, 0, 0, 0,1);
TypeDef TA_const_FloatTDCoord_ref("const_FloatTDCoord_ref", 1, 0, 1, 0,1);
TypeDef TA_TDCoord_ref("TDCoord_ref", 1, 0, 1, 0,1);
TypeDef TA_const_PosTDCoord("const_PosTDCoord", 1, 0, 0, 0,1);
TypeDef TA_const_PosTDCoord_ref("const_PosTDCoord_ref", 1, 0, 1, 0,1);
TypeDef TA_ValIdx("ValIdx", " a float value and an index: very useful for sorting!", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(ValIdx), (void**)&TAI_ValIdx, 0, 0, 0,1);
TypeDef TA_taArray_ValIdx_("taArray_ValIdx_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taArray<ValIdx>), (void**)&TAI_taArray_ValIdx_, 0, 0, 0,1);
TypeDef TA_const_ValIdx("const_ValIdx", 1, 0, 0, 0,1);
TypeDef TA_const_ValIdx_ref("const_ValIdx_ref", 1, 0, 1, 0,1);
TypeDef TA_ValIdx_Array("ValIdx_Array", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(ValIdx_Array), (void**)&TAI_ValIdx_Array, 0, 0, 0,1);
TypeDef TA_const_ValIdx_Array("const_ValIdx_Array", 1, 0, 0, 0,1);
TypeDef TA_CountParam("CountParam", " counting criteria params", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER INLINE ", "", sizeof(CountParam), (void**)&TAI_CountParam, 0, 0, 0,1);
TypeDef TA_const_ValIdx_Array_ref("const_ValIdx_Array_ref", 1, 0, 1, 0,1);
TypeDef TA_const_CountParam("const_CountParam", 1, 0, 0, 0,1);
TypeDef TA_const_CountParam_ref("const_CountParam_ref", 1, 0, 1, 0,1);
TypeDef TA_Aggregate("Aggregate", " Basic aggregation operations", 
	"", "NO_UPDATE_AFTER INLINE ", "", sizeof(Aggregate), (void**)&TAI_Aggregate, 0, 0, 0,1);
TypeDef TA_const_Aggregate("const_Aggregate", 1, 0, 0, 0,1);
TypeDef TA_const_Aggregate_ref("const_Aggregate_ref", 1, 0, 1, 0,1);
TypeDef TA_SimpleMathSpec("SimpleMathSpec", " params for std kinds of simple math operators", 
	"", "INLINE NO_UPDATE_AFTER ", "", sizeof(SimpleMathSpec), (void**)&TAI_SimpleMathSpec, 0, 0, 0,1);
TypeDef TA_const_SimpleMathSpec("const_SimpleMathSpec", 1, 0, 0, 0,1);
TypeDef TA_const_SimpleMathSpec_ref("const_SimpleMathSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_RGBA("RGBA", " Red Green Blue Alpha color specification", 
	"INLINE ", "INLINE ", "", sizeof(RGBA), (void**)&TAI_RGBA, 0, 0, 0,1);
TypeDef TA_taList_RGBA_("taList_RGBA_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<RGBA>), (void**)&TAI_taList_RGBA_, 0, 0, 0,1);
TypeDef TA_const_RGBA("const_RGBA", 1, 0, 0, 0,1);
TypeDef TA_const_RGBA_ref("const_RGBA_ref", 1, 0, 1, 0,1);
TypeDef TA_RGBA_List("RGBA_List", " list of RGBA objects", 
	"", "NO_UPDATE_AFTER ", "", sizeof(RGBA_List), (void**)&TAI_RGBA_List, 0, 0, 0,1);
TypeDef TA_RGBA_ptr("RGBA_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_RGBA_List("const_RGBA_List", 1, 0, 0, 0,1);
TypeDef TA_const_RGBA_List_ref("const_RGBA_List_ref", 1, 0, 1, 0,1);
TypeDef TA_TAColor("TAColor", " Color", 
	"", "", "", sizeof(TAColor), (void**)&TAI_TAColor, 0, 0, 0,1);
TypeDef TA_taList_TAColor_("taList_TAColor_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<TAColor>), (void**)&TAI_taList_TAColor_, 0, 0, 0,1);
TypeDef TA_const_TAColor("const_TAColor", 1, 0, 0, 0,1);
TypeDef TA_const_TAColor_ref("const_TAColor_ref", 1, 0, 1, 0,1);
TypeDef TA_TAColor_List("TAColor_List", " list of TAColor objects", 
	"", "NO_UPDATE_AFTER ", "", sizeof(TAColor_List), (void**)&TAI_TAColor_List, 0, 0, 0,1);
TypeDef TA_TAColor_List_ptr("TAColor_List_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_TAColor_List("const_TAColor_List", 1, 0, 0, 0,1);
TypeDef TA_const_TAColor_List_ref("const_TAColor_List_ref", 1, 0, 1, 0,1);
TypeDef TA_ColorScaleSpec("ColorScaleSpec", " Color Spectrum Data", 
	"", "", "", sizeof(ColorScaleSpec), (void**)&TAI_ColorScaleSpec, 1, 0, 0,1);
TypeDef TA_const_ColorScaleSpec("const_ColorScaleSpec", 1, 0, 0, 0,1);
TypeDef TA_const_ColorScaleSpec_ref("const_ColorScaleSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_ColorScaleSpec_MGroup("ColorScaleSpec_MGroup", "", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(ColorScaleSpec_MGroup), (void**)&TAI_ColorScaleSpec_MGroup, 0, 0, 0,1);
TypeDef TA_ColorScaleSpec_ptr("ColorScaleSpec_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_ColorScaleSpec_MGroup("const_ColorScaleSpec_MGroup", 1, 0, 0, 0,1);
TypeDef TA_const_ColorScaleSpec_MGroup_ref("const_ColorScaleSpec_MGroup_ref", 1, 0, 1, 0,1);
TypeDef TA_const_ColorScale("const_ColorScale", 1, 0, 0, 0,1);
TypeDef TA_const_ColorScale_ref("const_ColorScale_ref", 1, 0, 1, 0,1);
TypeDef TA_ColorScale("ColorScale", 1, 0, 0, 0,1);
TypeDef TA_gpivArrayC_Type("gpivArrayC_Type", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivArrayC_Type), (void**)&TAI_gpivArrayC_Type, 0, 0, 0,1);
TypeDef TA_gpivArrayCEditButton("gpivArrayCEditButton", " array edit button with coloredit option", 
	"NO_CSS NO_MEMBERS NO_INSTANCE ", "NO_CSS NO_MEMBERS NO_INSTANCE ", "", sizeof(gpivArrayCEditButton), (void**)0, 0, 0, 0,1);
TypeDef TA_gpivArrayCEdit("gpivArrayCEdit", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(gpivArrayCEdit), (void**)&TAI_gpivArrayCEdit, 0, 0, 0,1);
TypeDef TA_FontSpec("FontSpec", " a specification of a font (for Unix - X logical font description)", 
	"", "INLINE ", "", sizeof(FontSpec), (void**)&TAI_FontSpec, 1, 0, 0,1);
TypeDef TA_const_FontSpec("const_FontSpec", 1, 0, 0, 0,1);
TypeDef TA_const_FontSpec_ref("const_FontSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_Xform_ptr("Xform_ptr", 1, 1, 0, 0,1);
TypeDef TA_ViewLabel("ViewLabel", " contains a label in a view display", 
	"", "", "", sizeof(ViewLabel), (void**)&TAI_ViewLabel, 1, 0, 0,1);
TypeDef TA_taList_ViewLabel_("taList_ViewLabel_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<ViewLabel>), (void**)&TAI_taList_ViewLabel_, 0, 0, 0,1);
TypeDef TA_const_ViewLabel("const_ViewLabel", 1, 0, 0, 0,1);
TypeDef TA_const_ViewLabel_ref("const_ViewLabel_ref", 1, 0, 1, 0,1);
TypeDef TA_ViewLabel_List("ViewLabel_List", " list of ViewLabel objects", 
	"", "NO_UPDATE_AFTER ", "", sizeof(ViewLabel_List), (void**)&TAI_ViewLabel_List, 0, 0, 0,1);
TypeDef TA_const_float_ref("const_float_ref", 1, 0, 1, 0,1);
TypeDef TA_const_ViewLabel_List("const_ViewLabel_List", 1, 0, 0, 0,1);
TypeDef TA_const_ViewLabel_List_ref("const_ViewLabel_List_ref", 1, 0, 1, 0,1);
TypeDef TA_Aggregate_ref("Aggregate_ref", 1, 0, 1, 0,1);
TypeDef TA_float_RArray("float_RArray", " float array with range, plus a lot of other mathematical functions", 
	"", "NO_UPDATE_AFTER ", "", sizeof(float_RArray), (void**)&TAI_float_RArray, 0, 0, 0,1);
TypeDef TA_taArray_base_ptr("taArray_base_ptr", 1, 1, 0, 0,1);
TypeDef TA_float_RArray_ref("float_RArray_ref", 1, 0, 1, 0,1);
TypeDef TA_const_float_RArray("const_float_RArray", 1, 0, 0, 0,1);
TypeDef TA_const_float_RArray_ref("const_float_RArray_ref", 1, 0, 1, 0,1);
TypeDef TA_DataArray_impl("DataArray_impl", " holds array data", 
	"", "NO_UPDATE_AFTER ", "", sizeof(DataArray_impl), (void**)&TAI_DataArray_impl, 0, 0, 0,1);
TypeDef TA_const_DataArray_impl("const_DataArray_impl", 1, 0, 0, 0,1);
TypeDef TA_taGroup_DataArray_impl_("taGroup_DataArray_impl_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taGroup<DataArray_impl>), (void**)&TAI_taGroup_DataArray_impl_, 0, 0, 0,1);
TypeDef TA_const_DataArray_impl_ref("const_DataArray_impl_ref", 1, 0, 1, 0,1);
TypeDef TA_DataArray_impl_ptr("DataArray_impl_ptr", 1, 1, 0, 0,1);
TypeDef TA_float_RArray_ptr("float_RArray_ptr", 1, 1, 0, 0,1);
TypeDef TA_String_Array_ptr("String_Array_ptr", 1, 1, 0, 0,1);
TypeDef TA_DataTable("DataTable", " table of data", 
	"", "NO_UPDATE_AFTER ", "", sizeof(DataTable), (void**)&TAI_DataTable, 0, 0, 0,1);
TypeDef TA_ClustNode("ClustNode", " node in clustering algorithm use one with leaves as children as a root node for cluster ", 
	"INLINE ", "INLINE NO_UPDATE_AFTER ", "", sizeof(ClustNode), (void**)&TAI_ClustNode, 0, 0, 0,1);
TypeDef TA_const_DataTable("const_DataTable", 1, 0, 0, 0,1);
TypeDef TA_DataTable_ptr("DataTable_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_DataTable_ref("const_DataTable_ref", 1, 0, 1, 0,1);
TypeDef TA_ClustNode_ptr("ClustNode_ptr", 1, 1, 0, 0,1);
TypeDef TA_ClustLink("ClustLink", " a link in the cluster tree with distance", 
	"NO_UPDATE_AFTER ", "INLINE NO_UPDATE_AFTER ", "", sizeof(ClustLink), (void**)&TAI_ClustLink, 0, 0, 0,1);
TypeDef TA_const_ClustNode("const_ClustNode", 1, 0, 0, 0,1);
TypeDef TA_const_ClustLink("const_ClustLink", 1, 0, 0, 0,1);
TypeDef TA_const_ClustNode_ref("const_ClustNode_ref", 1, 0, 1, 0,1);
TypeDef TA_const_ClustLink_ref("const_ClustLink_ref", 1, 0, 1, 0,1);
TypeDef TA_DA_ViewSpec("DA_ViewSpec", " base specification for the display of log data_array (DA)", 
	"SCOPE_DT_ViewSpec ", "SCOPE_DT_ViewSpec ", "", sizeof(DA_ViewSpec), (void**)&TAI_DA_ViewSpec, 1, 0, 0,1);
TypeDef TA_taGroup_DA_ViewSpec_("taGroup_DA_ViewSpec_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taGroup<DA_ViewSpec>), (void**)&TAI_taGroup_DA_ViewSpec_, 0, 0, 0,1);
TypeDef TA_const_DA_ViewSpec("const_DA_ViewSpec", 1, 0, 0, 0,1);
TypeDef TA_const_DA_ViewSpec_ref("const_DA_ViewSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_DT_ViewSpec("DT_ViewSpec", " base specification for the display of log data_table (DT)", 
	"", "", "", sizeof(DT_ViewSpec), (void**)&TAI_DT_ViewSpec, 0, 0, 0,1);
TypeDef TA_const_DT_ViewSpec("const_DT_ViewSpec", 1, 0, 0, 0,1);
TypeDef TA_DA_TextViewSpec("DA_TextViewSpec", " data-array view spec for text-based display", 
	"SCOPE_DT_ViewSpec ", "SCOPE_DT_ViewSpec ", "", sizeof(DA_TextViewSpec), (void**)&TAI_DA_TextViewSpec, 1, 0, 0,1);
TypeDef TA_const_DT_ViewSpec_ref("const_DT_ViewSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_const_DA_TextViewSpec("const_DA_TextViewSpec", 1, 0, 0, 0,1);
TypeDef TA_const_DA_TextViewSpec_ref("const_DA_TextViewSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_DA_NetViewSpec("DA_NetViewSpec", " data-array view spec for netview based display", 
	"SCOPE_DT_ViewSpec ", "SCOPE_DT_ViewSpec ", "", sizeof(DA_NetViewSpec), (void**)&TAI_DA_NetViewSpec, 1, 0, 0,1);
TypeDef TA_const_DA_NetViewSpec("const_DA_NetViewSpec", 1, 0, 0, 0,1);
TypeDef TA_const_DA_NetViewSpec_ref("const_DA_NetViewSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_DA_GraphViewSpec("DA_GraphViewSpec", " data-array view spec for graph-based display", 
	"SCOPE_DT_ViewSpec ", "SCOPE_DT_ViewSpec BUTROWS_1 ", "", sizeof(DA_GraphViewSpec), (void**)&TAI_DA_GraphViewSpec, 1, 0, 0,1);
TypeDef TA_const_DA_GraphViewSpec("const_DA_GraphViewSpec", 1, 0, 0, 0,1);
TypeDef TA_DA_GraphViewSpec_ptr("DA_GraphViewSpec_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_DA_GraphViewSpec_ref("const_DA_GraphViewSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_DT_GraphViewSpec("DT_GraphViewSpec", " controls display of datatable in a graph format", 
	"", "", "", sizeof(DT_GraphViewSpec), (void**)&TAI_DT_GraphViewSpec, 0, 0, 0,1);
TypeDef TA_const_DT_GraphViewSpec("const_DT_GraphViewSpec", 1, 0, 0, 0,1);
TypeDef TA_const_DT_GraphViewSpec_ref("const_DT_GraphViewSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_DA_GridViewSpec("DA_GridViewSpec", " information for display of a data array in a grid display", 
	"SCOPE_DT_ViewSpec ", "SCOPE_DT_ViewSpec ", "", sizeof(DA_GridViewSpec), (void**)&TAI_DA_GridViewSpec, 1, 0, 0,1);
TypeDef TA_const_DA_GridViewSpec("const_DA_GridViewSpec", 1, 0, 0, 0,1);
TypeDef TA_const_DA_GridViewSpec_ref("const_DA_GridViewSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_DT_GridViewSpec("DT_GridViewSpec", " information for display of a datatable in a grid display", 
	"", "", "", sizeof(DT_GridViewSpec), (void**)&TAI_DT_GridViewSpec, 0, 0, 0,1);
TypeDef TA_const_DT_GridViewSpec("const_DT_GridViewSpec", 1, 0, 0, 0,1);
TypeDef TA_const_DT_GridViewSpec_ref("const_DT_GridViewSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_DataArray("DataArray", 1, 0, 0, 0,1);
TypeDef TA_DataArray_float_RArray_("DataArray_float_RArray_", "", 
	"", "NO_UPDATE_AFTER ", "", sizeof(DataArray<float_RArray>), (void**)&TAI_DataArray_float_RArray_, 0, 0, 0,1);
TypeDef TA_const_DataArray("const_DataArray", 1, 0, 0, 0,1);
TypeDef TA_const_DataArray_ref("const_DataArray_ref", 1, 0, 1, 0,1);
TypeDef TA_float_Data("float_Data", " floating point data", 
	"", "NO_UPDATE_AFTER ", "", sizeof(float_Data), (void**)&TAI_float_Data, 0, 0, 0,1);
TypeDef TA_const_float_Data("const_float_Data", 1, 0, 0, 0,1);
TypeDef TA_float_Data_ptr("float_Data_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_float_Data_ref("const_float_Data_ref", 1, 0, 1, 0,1);
TypeDef TA_DataArray_String_Array_("DataArray_String_Array_", "", 
	"", "NO_UPDATE_AFTER ", "", sizeof(DataArray<String_Array>), (void**)&TAI_DataArray_String_Array_, 0, 0, 0,1);
TypeDef TA_String_Data("String_Data", " string data", 
	"", "NO_UPDATE_AFTER ", "", sizeof(String_Data), (void**)&TAI_String_Data, 0, 0, 0,1);
TypeDef TA_const_String_Data("const_String_Data", 1, 0, 0, 0,1);
TypeDef TA_String_Data_ptr("String_Data_ptr", 1, 1, 0, 0,1);
TypeDef TA_DataLineBox_G("DataLineBox_G", " box representing DataLine (actually draws as a horizontal line)", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(DataLineBox_G), (void**)0, 0, 0, 0,1);
TypeDef TA_const_String_Data_ref("const_String_Data_ref", 1, 0, 1, 0,1);
TypeDef TA_DataLine_G("DataLine_G", " represents one line of data (or its template)", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(DataLine_G), (void**)0, 0, 0, 0,1);
TypeDef TA_DTViewer("DTViewer", " viewer for DataTable", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(DTViewer), (void**)0, 0, 0, 0,1);
TypeDef TA_DTEditor("DTEditor", " ", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(DTEditor), (void**)0, 0, 0, 0,1);
TypeDef TA_DT_GridViewSpec_ptr("DT_GridViewSpec_ptr", 1, 1, 0, 0,1);
TypeDef TA_DTEditor_ptr("DTEditor_ptr", 1, 1, 0, 0,1);
TypeDef TA_DataTable_G("DataTable_G", " ", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(DataTable_G), (void**)0, 0, 0, 0,1);
TypeDef TA_DataTable_G_ptr("DataTable_G_ptr", 1, 1, 0, 0,1);
TypeDef TA_DataLine_G_ptr("DataLine_G_ptr", 1, 1, 0, 0,1);
TypeDef TA_DA_GridViewSpec_ptr("DA_GridViewSpec_ptr", 1, 1, 0, 0,1);
TypeDef TA_TextData_G("TextData_G", " represents textual data element", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(TextData_G), (void**)0, 0, 0, 0,1);
TypeDef TA_ScaleBar_ptr("ScaleBar_ptr", 1, 1, 0, 0,1);
TypeDef TA_FloatTwoDCoord_ref("FloatTwoDCoord_ref", 1, 0, 1, 0,1);
TypeDef TA_Block_G("Block_G", " represents a colored block data element", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(Block_G), (void**)0, 0, 0, 0,1);
TypeDef TA_Grid_G("Grid_G", " represents a grid data element (colored squares)", 
	"NO_INSTANCE NO_MEMBERS NO_CSS ", "NO_INSTANCE NO_MEMBERS NO_CSS ", "", sizeof(Grid_G), (void**)0, 0, 0, 0,1);
TypeDef TA_DTViewer_ptr("DTViewer_ptr", 1, 1, 0, 0,1);
TypeDef TA_taFile("taFile", " wrapper for getfile class ", 
	"", "INLINE ", "", sizeof(taFile), (void**)&TAI_taFile, 0, 0, 0,1);
TypeDef TA_cssProgSpace("cssProgSpace", " ", 
	"", "NO_INSTANCE ", "", sizeof(cssProgSpace), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taFile("const_taFile", 1, 0, 0, 0,1);
TypeDef TA_cssProgSpace_ptr("cssProgSpace_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_taFile_ref("const_taFile_ref", 1, 0, 1, 0,1);
TypeDef TA_ScriptBase("ScriptBase", " class for adding a script to other objects", 
	"", "", "", sizeof(ScriptBase), (void**)&TAI_ScriptBase, 1, 0, 0,1);
TypeDef TA_taPtrList_ScriptBase_("taPtrList_ScriptBase_", " ", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(taPtrList<ScriptBase>), (void**)&TAI_taPtrList_ScriptBase_, 0, 0, 0,1);
TypeDef TA_ScriptBase_List("ScriptBase_List", " list of script base objects (doesn't own anything)", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(ScriptBase_List), (void**)&TAI_ScriptBase_List, 0, 0, 0,1);
TypeDef TA_SArg_Array("SArg_Array", " string argument array: has labels for each argument to make it easier in the interface", 
	"", "", "", sizeof(SArg_Array), (void**)&TAI_SArg_Array, 0, 0, 0,1);
TypeDef TA_SArgEditDialog("SArgEditDialog", " ", 
	"NO_CSS NO_MEMBERS NO_INSTANCE ", "NO_CSS NO_MEMBERS NO_INSTANCE ", "", sizeof(SArgEditDialog), (void**)0, 0, 0, 0,1);
TypeDef TA_const_SArg_Array("const_SArg_Array", 1, 0, 0, 0,1);
TypeDef TA_SArgEdit("SArgEdit", "", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(SArgEdit), (void**)&TAI_SArgEdit, 0, 0, 0,1);
TypeDef TA_const_SArg_Array_ref("const_SArg_Array_ref", 1, 0, 1, 0,1);
TypeDef TA_Script("Script", " an object for maintaining and running arbitrary scripts", 
	"EXT_scr ", "MULT_INHERIT EXT_scr ", "", sizeof(Script), (void**)&TAI_Script, 1, 0, 0,1);
TypeDef TA_const_Script("const_Script", 1, 0, 0, 0,1);
TypeDef TA_Script_MGroup("Script_MGroup", "", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(Script_MGroup), (void**)&TAI_Script_MGroup, 0, 0, 0,1);
TypeDef TA_const_Script_ref("const_Script_ref", 1, 0, 1, 0,1);
TypeDef TA_const_Script_MGroup("const_Script_MGroup", 1, 0, 0, 0,1);
TypeDef TA_const_Script_MGroup_ref("const_Script_MGroup_ref", 1, 0, 1, 0,1);
TypeDef TA_FunLookup("FunLookup", " function lookup for non-computable functions and optimization", 
	"", "", "", sizeof(FunLookup), (void**)&TAI_FunLookup, 0, 0, 0,1);
TypeDef TA_int_ptr("int_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_FunLookup("const_FunLookup", 1, 0, 0, 0,1);
TypeDef TA_float_ptr("float_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_FunLookup_ref("const_FunLookup_ref", 1, 0, 1, 0,1);
TypeDef TA_FunLookupND("FunLookupND", " n-dimensional function lookup: function is defined for n_dims inputs and produces a corresponding interpolated output", 
	"", "NO_UPDATE_AFTER ", "", sizeof(FunLookupND), (void**)&TAI_FunLookupND, 1, 0, 0,1);
TypeDef TA_const_FunLookupND("const_FunLookupND", 1, 0, 0, 0,1);
TypeDef TA_const_FunLookupND_ref("const_FunLookupND_ref", 1, 0, 1, 0,1);
TypeDef TA_ivColor_ptr("ivColor_ptr", 1, 1, 0, 0,1);
TypeDef TA_ivColor("ivColor", 1, 0, 0, 0,1);
TypeDef TA_NoScale_Text_G_ptr("NoScale_Text_G_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_ivBrush("const_ivBrush", 1, 0, 0, 0,1);
TypeDef TA_ivBrush("ivBrush", 1, 0, 0, 0,1);
TypeDef TA_const_ivColor("const_ivColor", 1, 0, 0, 0,1);
TypeDef TA_const_ivFont("const_ivFont", 1, 0, 0, 0,1);
TypeDef TA_PointObj("PointObj", 1, 0, 0, 0,1);
TypeDef TA_BoxObj("BoxObj", 1, 0, 0, 0,1);
TypeDef TA_ColorScale_ptr("ColorScale_ptr", 1, 1, 0, 0,1);
TypeDef TA_HCScaleBar_ptr("HCScaleBar_ptr", 1, 1, 0, 0,1);
TypeDef TA_HCScaleBar("HCScaleBar", 1, 0, 0, 0,1);

// Instances

MenuGroup_impl*		 TAI_MenuGroup_impl=NULL;
WinGeometry*		 TAI_WinGeometry=NULL;
  static cssEl* cssElCFun_WinGeometry_GetOwner_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((WinGeometry*)ths)->GetOwner(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_WinGeometry_GetWinPos_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinGeometry*)ths)->GetWinPos();
    return rval;}
  static cssEl* cssElCFun_WinGeometry_SetWinPos_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinGeometry*)ths)->SetWinPos();
    return rval;}
  static cssEl* cssElCFun_WinGeometry_ScriptWinPos_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((WinGeometry*)ths)->ScriptWinPos();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((WinGeometry*)ths)->ScriptWinPos(refarg_0);}
    return rval;}
WinBase*		 TAI_WinBase=NULL;
  static cssEl* cssElCFun_WinBase_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((WinBase*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((WinBase*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_WinBase_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((WinBase*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((WinBase*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((WinBase*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_WinBase_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((WinBase*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((WinBase*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((WinBase*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_WinBase_Print_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((WinBase*)ths)->Print((WinBase::PrintFmt)(int)*arg[1]);}
    if(na == 2) {
      ((WinBase*)ths)->Print((WinBase::PrintFmt)(int)*arg[1], (const char*)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_WinBase_Print_Data_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((WinBase*)ths)->Print_Data((WinBase::PrintFmt)(int)*arg[1]);}
    if(na == 2) {
      ((WinBase*)ths)->Print_Data((WinBase::PrintFmt)(int)*arg[1], (const char*)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_WinBase_UpdateMenus_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinBase*)ths)->UpdateMenus();
    return rval;}
  static cssEl* cssElCFun_WinBase_GetAllWinPos_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinBase*)ths)->GetAllWinPos();
    return rval;}
  static cssEl* cssElCFun_WinBase_ScriptAllWinPos_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinBase*)ths)->ScriptAllWinPos();
    return rval;}
  static cssEl* cssElCFun_WinBase_SetWinPos_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((WinBase*)ths)->SetWinPos();}
    if(na == 1) {
      ((WinBase*)ths)->SetWinPos((float)*arg[1]);}
    if(na == 2) {
      ((WinBase*)ths)->SetWinPos((float)*arg[1], (float)*arg[2]);}
    if(na == 3) {
      ((WinBase*)ths)->SetWinPos((float)*arg[1], (float)*arg[2], (float)*arg[3]);}
    if(na == 4) {
      ((WinBase*)ths)->SetWinPos((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_WinBase_GetWinPos_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinBase*)ths)->GetWinPos();
    return rval;}
  static cssEl* cssElCFun_WinBase_ScriptWinPos_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinBase*)ths)->ScriptWinPos();
    return rval;}
  static cssEl* cssElCFun_WinBase_Iconify_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinBase*)ths)->Iconify();
    return rval;}
  static cssEl* cssElCFun_WinBase_DeIconify_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinBase*)ths)->DeIconify();
    return rval;}
  static cssEl* cssElCFun_WinBase_IsMapped_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((WinBase*)ths)->IsMapped());
    return rval;}
  static cssEl* cssElCFun_WinBase_ViewWindow_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((WinBase*)ths)->ViewWindow();}
    if(na == 1) {
      ((WinBase*)ths)->ViewWindow((float)*arg[1]);}
    if(na == 2) {
      ((WinBase*)ths)->ViewWindow((float)*arg[1], (float)*arg[2]);}
    if(na == 3) {
      ((WinBase*)ths)->ViewWindow((float)*arg[1], (float)*arg[2], (float)*arg[3]);}
    if(na == 4) {
      ((WinBase*)ths)->ViewWindow((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_WinBase_GetPrintFileExt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((WinBase*)ths)->GetPrintFileExt((WinBase::PrintFmt)(int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_WinBase_ReSize_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((WinBase*)ths)->ReSize();}
    if(na == 1) {
      ((WinBase*)ths)->ReSize((float)*arg[1]);}
    if(na == 2) {
      ((WinBase*)ths)->ReSize((float)*arg[1], (float)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_WinBase_Place_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((WinBase*)ths)->Place();}
    if(na == 1) {
      ((WinBase*)ths)->Place((float)*arg[1]);}
    if(na == 2) {
      ((WinBase*)ths)->Place((float)*arg[1], (float)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_WinBase_Move_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((WinBase*)ths)->Move();}
    if(na == 1) {
      ((WinBase*)ths)->Move((float)*arg[1]);}
    if(na == 2) {
      ((WinBase*)ths)->Move((float)*arg[1], (float)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_WinBase_Raise_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinBase*)ths)->Raise();
    return rval;}
  static cssEl* cssElCFun_WinBase_Lower_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinBase*)ths)->Lower();
    return rval;}
WinView*		 TAI_WinView=NULL;
  static cssEl* cssElCFun_WinView_AddUpdater_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((WinView*)ths)->AddUpdater((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_WinView_NotifyAllUpdaters_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinView*)ths)->NotifyAllUpdaters();
    return rval;}
  static cssEl* cssElCFun_WinView_RemoveUpdater_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((WinView*)ths)->RemoveUpdater((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_WinView_RemoveAllUpdaters_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinView*)ths)->RemoveAllUpdaters();
    return rval;}
  static cssEl* cssElCFun_WinView_InitDisplay_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinView*)ths)->InitDisplay();
    return rval;}
  static cssEl* cssElCFun_WinView_UpdateDisplay_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((WinView*)ths)->UpdateDisplay();}
    if(na == 1) {
      ((WinView*)ths)->UpdateDisplay((taBase*)(void*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_WinView_CaptureAnimImg_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinView*)ths)->CaptureAnimImg();
    return rval;}
  static cssEl* cssElCFun_WinView_StartAnimCapture_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((WinView*)ths)->StartAnimCapture();}
    if(na == 1) {
      ((WinView*)ths)->StartAnimCapture((WinBase::PrintFmt)(int)*arg[1]);}
    if(na == 2) {
      ((WinView*)ths)->StartAnimCapture((WinBase::PrintFmt)(int)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((WinView*)ths)->StartAnimCapture((WinBase::PrintFmt)(int)*arg[1], (int)*arg[2], (const char*)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_WinView_StopAnimCapture_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinView*)ths)->StopAnimCapture();
    return rval;}
WinMgr*		 TAI_WinMgr=NULL;
  static cssEl* cssElCFun_WinMgr_CloseAllWindows_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinMgr*)ths)->CloseAllWindows();
    return rval;}
  static cssEl* cssElCFun_WinMgr_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinMgr*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_WinMgr_InitAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((WinMgr*)ths)->InitAllViews();
    return rval;}
winbMisc*		 TAI_winbMisc=NULL;
  static cssEl* cssElCFun_winbMisc_OpenWindows_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((winbMisc*)ths)->OpenWindows();
    return rval;}
  static cssEl* cssElCFun_winbMisc_DamageCanvas_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((winbMisc*)ths)->DamageCanvas((ivCanvas*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_winbMisc_DamageWindow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((winbMisc*)ths)->DamageWindow((ivWindow*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_winbMisc_WaitProc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((winbMisc*)ths)->WaitProc());
    return rval;}
  static cssEl* cssElCFun_winbMisc_Wait_UpdateMenus_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((winbMisc*)ths)->Wait_UpdateMenus();
    return rval;}
  static cssEl* cssElCFun_winbMisc_Wait_UpdateWinPos_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((winbMisc*)ths)->Wait_UpdateWinPos();
    return rval;}
  static cssEl* cssElCFun_winbMisc_MenuUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((winbMisc*)ths)->MenuUpdate((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_winbMisc_DelayedMenuUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((winbMisc*)ths)->DelayedMenuUpdate((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_winbMisc_ScriptIconify_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((winbMisc*)ths)->ScriptIconify((void*)(void*)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_winbMisc_SetIconify_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((winbMisc*)ths)->SetIconify((void*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
AnimImgCapture*		 TAI_AnimImgCapture=NULL;
WinView_Group*		 TAI_WinView_Group=NULL;
WinView_MGroup*		 TAI_WinView_MGroup=NULL;
MinMax*		 TAI_MinMax=NULL;
  static cssEl* cssElCFun_MinMax_RangeTest_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMax*)ths)->RangeTest((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_MinMax_RangeTestEq_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMax*)ths)->RangeTestEq((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_MinMax_Init_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMax*)ths)->Init((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MinMax_Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMax*)ths)->Set((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_MinMax_Range_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((MinMax*)ths)->Range());
    return rval;}
  static cssEl* cssElCFun_MinMax_Scale_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((MinMax*)ths)->Scale());
    return rval;}
  static cssEl* cssElCFun_MinMax_MidPoint_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((MinMax*)ths)->MidPoint());
    return rval;}
  static cssEl* cssElCFun_MinMax_UpdateRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMax*)ths)->UpdateRange((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MinMax_MaxLT_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMax*)ths)->MaxLT((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MinMax_MinGT_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMax*)ths)->MinGT((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MinMax_WithinRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    MinMax& refarg_0=*(MinMax*)arg[1]->GetVoidPtrOfType(&TA_MinMax);
    ((MinMax*)ths)->WithinRange(refarg_0);
    return rval;}
  static cssEl* cssElCFun_MinMax_Normalize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((MinMax*)ths)->Normalize((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_MinMax_Project_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((MinMax*)ths)->Project((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_MinMax_Clip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((MinMax*)ths)->Clip((float)*arg[1]));
    return rval;}
MinMaxRange*		 TAI_MinMaxRange=NULL;
FixedMinMax*		 TAI_FixedMinMax=NULL;
  static cssEl* cssElCFun_FixedMinMax_Init_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FixedMinMax*)ths)->Init((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FixedMinMax_InitFix_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((FixedMinMax*)ths)->InitFix();}
    if(na == 1) {
      ((FixedMinMax*)ths)->InitFix((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_FixedMinMax_Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FixedMinMax*)ths)->Set((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_FixedMinMax_SetMin_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FixedMinMax*)ths)->SetMin((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FixedMinMax_SetMax_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FixedMinMax*)ths)->SetMax((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FixedMinMax_FixRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    MinMax& refarg_0=*(MinMax*)arg[1]->GetVoidPtrOfType(&TA_MinMax);
    ((FixedMinMax*)ths)->FixRange(refarg_0);
    return rval;}
Modulo*		 TAI_Modulo=NULL;
MinMaxInt*		 TAI_MinMaxInt=NULL;
  static cssEl* cssElCFun_MinMaxInt_RangeTest_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMaxInt*)ths)->RangeTest((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_RangeTestEq_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMaxInt*)ths)->RangeTestEq((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_Init_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMaxInt*)ths)->Init((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_Range_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMaxInt*)ths)->Range());
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_Scale_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((MinMaxInt*)ths)->Scale());
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_MidPoint_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMaxInt*)ths)->MidPoint());
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_UpdateRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMaxInt*)ths)->UpdateRange((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_MaxLT_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMaxInt*)ths)->MaxLT((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_MinGT_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MinMaxInt*)ths)->MinGT((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_WithinRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    MinMaxInt& refarg_0=*(MinMaxInt*)arg[1]->GetVoidPtrOfType(&TA_MinMaxInt);
    ((MinMaxInt*)ths)->WithinRange(refarg_0);
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_Normalize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((MinMaxInt*)ths)->Normalize((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_Project_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMaxInt*)ths)->Project((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_MinMaxInt_Clip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((MinMaxInt*)ths)->Clip((int)*arg[1]));
    return rval;}
RndSeed*		 TAI_RndSeed=NULL;
  static cssEl* cssElCFun_RndSeed_NewSeed_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RndSeed*)ths)->NewSeed();
    return rval;}
  static cssEl* cssElCFun_RndSeed_OldSeed_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RndSeed*)ths)->OldSeed();
    return rval;}
  static cssEl* cssElCFun_RndSeed_GetCurrent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((RndSeed*)ths)->GetCurrent();
    return rval;}
  static cssEl* cssElCFun_RndSeed_Init_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((RndSeed*)ths)->Init((ulong)*arg[1]);
    return rval;}
Random*		 TAI_Random=NULL;
  static cssEl* cssElCFun_Random_IntZeroN_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Random*)ths)->IntZeroN((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Random_ZeroOne_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->ZeroOne());
    return rval;}
  static cssEl* cssElCFun_Random_Range_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->Range((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Random_Uniform_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->Uniform((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Random_Binom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->Binom((int)*arg[1], (float)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Random_Poisson_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->Poisson((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Random_Gamma_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->Gamma((float)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Random_Gauss_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->Gauss((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Random_UniformDen_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->UniformDen((float)*arg[1], (float)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Random_BinomDen_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->BinomDen((int)*arg[1], (int)*arg[2], (float)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_Random_PoissonDen_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->PoissonDen((int)*arg[1], (float)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Random_GammaDen_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->GammaDen((int)*arg[1], (float)*arg[2], (float)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_Random_GaussDen_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->GaussDen((float)*arg[1], (float)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Random_Gen_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->Gen());
    return rval;}
  static cssEl* cssElCFun_Random_Density_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Random*)ths)->Density((float)*arg[1]));
    return rval;}
TimeUsed*		 TAI_TimeUsed=NULL;
  static cssEl* cssElCFun_TimeUsed_InitTimes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((TimeUsed*)ths)->InitTimes();
    return rval;}
  static cssEl* cssElCFun_TimeUsed_GetTimes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((TimeUsed*)ths)->GetTimes();
    return rval;}
  static cssEl* cssElCFun_TimeUsed_GetUsed_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TimeUsed*)ths)->GetUsed(*(TimeUsed*)arg[1]->GetVoidPtrOfType(&TA_TimeUsed));
    return rval;}
  static cssEl* cssElCFun_TimeUsed_GetString_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((TimeUsed*)ths)->GetString());
    return rval;}
TwoDCoord*		 TAI_TwoDCoord=NULL;
  static cssEl* cssElCFun_TwoDCoord_SetXY_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TwoDCoord*)ths)->SetXY((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_GetXY_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];    float refarg_1=(float)*arg[2];
    ((TwoDCoord*)ths)->GetXY(refarg_0, refarg_1);
    *arg[1]=(Real)refarg_0;    *arg[2]=(Real)refarg_1;
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_OrEq_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->OrEq(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord)));
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_SqMag_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->SqMag());
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Mag_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((TwoDCoord*)ths)->Mag());
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_SqDist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((TwoDCoord*)ths)->SqDist(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord)));
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Dist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((TwoDCoord*)ths)->Dist(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord)));
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Sum_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->Sum());
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Sgn_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->Sgn((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Absv_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->Absv((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Invert_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((TwoDCoord*)ths)->Invert();
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_SumNorm_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((TwoDCoord*)ths)->SumNorm();
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Abs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((TwoDCoord*)ths)->Abs();
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Min_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    TwoDCoord& refarg_0=*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord);
    ((TwoDCoord*)ths)->Min(refarg_0);
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Max_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    TwoDCoord& refarg_0=*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord);
    ((TwoDCoord*)ths)->Max(refarg_0);
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_Product_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->Product());
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_MaxVal_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->MaxVal());
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_MinVal_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->MinVal());
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_GetStr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((TwoDCoord*)ths)->GetStr());
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_FitN_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->FitN((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_SetGtEq_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TwoDCoord*)ths)->SetGtEq((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_SetLtEq_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TwoDCoord*)ths)->SetLtEq((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_WrapClipOne_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_1=(int)*arg[2];
    rval=new cssInt((int)((TwoDCoord*)ths)->WrapClipOne((bool)*arg[1], refarg_1, (int)*arg[3]));
    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_TwoDCoord_WrapClip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TwoDCoord*)ths)->WrapClip((bool)*arg[1], *(TwoDCoord*)arg[2]->GetVoidPtrOfType(&TA_TwoDCoord)));
    return rval;}
PosTwoDCoord*		 TAI_PosTwoDCoord=NULL;
TDCoord*		 TAI_TDCoord=NULL;
  static cssEl* cssElCFun_TDCoord_OrEq_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TDCoord*)ths)->OrEq(*(TDCoord*)arg[1]->GetVoidPtrOfType(&TA_TDCoord)));
    return rval;}
  static cssEl* cssElCFun_TDCoord_SqDist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((TDCoord*)ths)->SqDist(*(TDCoord*)arg[1]->GetVoidPtrOfType(&TA_TDCoord)));
    return rval;}
  static cssEl* cssElCFun_TDCoord_Dist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((TDCoord*)ths)->Dist(*(TDCoord*)arg[1]->GetVoidPtrOfType(&TA_TDCoord)));
    return rval;}
  static cssEl* cssElCFun_TDCoord_Sgn_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TDCoord*)ths)->Sgn((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_TDCoord_Absv_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TDCoord*)ths)->Absv((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_TDCoord_Min_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    TDCoord& refarg_0=*(TDCoord*)arg[1]->GetVoidPtrOfType(&TA_TDCoord);
    ((TDCoord*)ths)->Min(refarg_0);
    return rval;}
  static cssEl* cssElCFun_TDCoord_Max_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    TDCoord& refarg_0=*(TDCoord*)arg[1]->GetVoidPtrOfType(&TA_TDCoord);
    ((TDCoord*)ths)->Max(refarg_0);
    return rval;}
  static cssEl* cssElCFun_TDCoord_WrapClip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TDCoord*)ths)->WrapClip((bool)*arg[1], *(TDCoord*)arg[2]->GetVoidPtrOfType(&TA_TDCoord)));
    return rval;}
  static cssEl* cssElCFun_TDCoord_SetXYZ_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((TDCoord*)ths)->SetXYZ((float)*arg[1], (float)*arg[2], (float)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_TDCoord_GetXYZ_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];    float refarg_1=(float)*arg[2];    float refarg_2=(float)*arg[3];
    ((TDCoord*)ths)->GetXYZ(refarg_0, refarg_1, refarg_2);
    *arg[1]=(Real)refarg_0;    *arg[2]=(Real)refarg_1;    *arg[3]=(Real)refarg_2;
    return rval;}
  static cssEl* cssElCFun_TDCoord_FitNinXY_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((TDCoord*)ths)->FitNinXY((int)*arg[1]));
    return rval;}
PosTDCoord*		 TAI_PosTDCoord=NULL;
FloatTwoDCoord*		 TAI_FloatTwoDCoord=NULL;
  static cssEl* cssElCFun_FloatTwoDCoord_SetXY_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FloatTwoDCoord*)ths)->SetXY((float)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_GetXY_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];    float refarg_1=(float)*arg[2];
    ((FloatTwoDCoord*)ths)->GetXY(refarg_0, refarg_1);
    *arg[1]=(Real)refarg_0;    *arg[2]=(Real)refarg_1;
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_SqMag_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTwoDCoord*)ths)->SqMag());
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_Mag_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTwoDCoord*)ths)->Mag());
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_SqDist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTwoDCoord*)ths)->SqDist(*(FloatTwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_FloatTwoDCoord)));
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_Dist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTwoDCoord*)ths)->Dist(*(FloatTwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_FloatTwoDCoord)));
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_Sum_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTwoDCoord*)ths)->Sum());
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_Invert_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FloatTwoDCoord*)ths)->Invert();
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_MagNorm_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FloatTwoDCoord*)ths)->MagNorm();
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_SumNorm_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FloatTwoDCoord*)ths)->SumNorm();
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_Abs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FloatTwoDCoord*)ths)->Abs();
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_MaxVal_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTwoDCoord*)ths)->MaxVal());
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_MinVal_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTwoDCoord*)ths)->MinVal());
    return rval;}
  static cssEl* cssElCFun_FloatTwoDCoord_GetStr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((FloatTwoDCoord*)ths)->GetStr());
    return rval;}
FloatTDCoord*		 TAI_FloatTDCoord=NULL;
  static cssEl* cssElCFun_FloatTDCoord_SqDist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTDCoord*)ths)->SqDist(*(FloatTDCoord*)arg[1]->GetVoidPtrOfType(&TA_FloatTDCoord)));
    return rval;}
  static cssEl* cssElCFun_FloatTDCoord_Dist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTDCoord*)ths)->Dist(*(FloatTDCoord*)arg[1]->GetVoidPtrOfType(&TA_FloatTDCoord)));
    return rval;}
  static cssEl* cssElCFun_FloatTDCoord_SetXYZ_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FloatTDCoord*)ths)->SetXYZ((float)*arg[1], (float)*arg[2], (float)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_FloatTDCoord_GetXYZ_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];    float refarg_1=(float)*arg[2];    float refarg_2=(float)*arg[3];
    ((FloatTDCoord*)ths)->GetXYZ(refarg_0, refarg_1, refarg_2);
    *arg[1]=(Real)refarg_0;    *arg[2]=(Real)refarg_1;    *arg[3]=(Real)refarg_2;
    return rval;}
  static cssEl* cssElCFun_FloatTDCoord_Sgn_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FloatTDCoord*)ths)->Sgn((float)*arg[1]));
    return rval;}
ValIdx*		 TAI_ValIdx=NULL;
  static cssEl* cssElCFun_ValIdx_SetValIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ValIdx*)ths)->SetValIdx((float)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ValIdx_GetValIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];    int refarg_1=(int)*arg[2];
    ((ValIdx*)ths)->GetValIdx(refarg_0, refarg_1);
    *arg[1]=(Real)refarg_0;    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_ValIdx_GetStr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((ValIdx*)ths)->GetStr());
    return rval;}
taArray<ValIdx>*		 TAI_taArray_ValIdx_=NULL;
  static cssEl* cssElCFun_taArray_ValIdx__Remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<ValIdx>*)ths)->Remove((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<ValIdx>*)ths)->Remove((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<ValIdx>*)ths)->SafeEl((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<ValIdx>*)ths)->FastEl((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<ValIdx>*)ths)->RevEl((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<ValIdx>*)ths)->Pop();
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<ValIdx>*)ths)->Peek();
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<ValIdx>*)ths)->Set((int)*arg[1], *(ValIdx*)arg[2]->GetVoidPtrOfType(&TA_ValIdx));
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<ValIdx>*)ths)->Add(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx));
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<ValIdx>*)ths)->AddUnique(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx)));
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<ValIdx>*)ths)->Push(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx));
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<ValIdx>*)ths)->Insert(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx), (int)*arg[2]);}
    if(na == 3) {
      ((taArray<ValIdx>*)ths)->Insert(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx), (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<ValIdx>*)ths)->Find(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx)));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<ValIdx>*)ths)->Find(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx), (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<ValIdx>*)ths)->RemoveEl(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx)));
    return rval;}
  static cssEl* cssElCFun_taArray_ValIdx__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<ValIdx>*)ths)->InitVals(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx));}
    if(na == 2) {
      ((taArray<ValIdx>*)ths)->InitVals(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx), (int)*arg[2]);}
    if(na == 3) {
      ((taArray<ValIdx>*)ths)->InitVals(*(ValIdx*)arg[1]->GetVoidPtrOfType(&TA_ValIdx), (int)*arg[2], (int)*arg[3]);}
    return rval;}
ValIdx_Array*		 TAI_ValIdx_Array=NULL;
CountParam*		 TAI_CountParam=NULL;
  static cssEl* cssElCFun_CountParam_Evaluate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((CountParam*)ths)->Evaluate((float)*arg[1]));
    return rval;}
Aggregate*		 TAI_Aggregate=NULL;
  static cssEl* cssElCFun_Aggregate_AggLAST_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->AggLAST(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_AggSUM_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->AggSUM(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_AggPROD_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->AggPROD(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_AggMIN_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->AggMIN(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_AggMAX_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->AggMAX(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_AggAVG_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->AggAVG(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_AggCOPY_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->AggCOPY(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_AggCOUNT_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->AggCOUNT(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_ComputeAgg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((Aggregate*)ths)->ComputeAgg(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_ComputeAggNoUpdt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    rval=new cssInt((int)((Aggregate*)ths)->ComputeAggNoUpdt(refarg_0, (float)*arg[2]));
    *arg[1]=(Real)refarg_0;
    return rval;}
  static cssEl* cssElCFun_Aggregate_IncUpdt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Aggregate*)ths)->IncUpdt();
    return rval;}
  static cssEl* cssElCFun_Aggregate_GetAggName_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssCPtr_char((void*)((Aggregate*)ths)->GetAggName(), 1);
    return rval;}
  static cssEl* cssElCFun_Aggregate_AppendAggName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((Aggregate*)ths)->AppendAggName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Aggregate_PrependAggName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((Aggregate*)ths)->PrependAggName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Aggregate_Init_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Aggregate*)ths)->Init();
    return rval;}
  static cssEl* cssElCFun_Aggregate_InitAggVal_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Aggregate*)ths)->InitAggVal());
    return rval;}
SimpleMathSpec*		 TAI_SimpleMathSpec=NULL;
  static cssEl* cssElCFun_SimpleMathSpec_Evaluate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((SimpleMathSpec*)ths)->Evaluate((float)*arg[1]));
    return rval;}
RGBA*		 TAI_RGBA=NULL;
taList<RGBA>*		 TAI_taList_RGBA_=NULL;
  static cssEl* cssElCFun_taList_RGBA__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<RGBA>*)ths)->MoveBefore((RGBA*)(void*)*arg[1], (RGBA*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<RGBA>*)ths)->MoveAfter((RGBA*)(void*)*arg[1], (RGBA*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->SafeEl((int)*arg[1]), 1, &TA_RGBA);
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->FastEl((int)*arg[1]), 1, &TA_RGBA);
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->DefaultEl(), 1, &TA_RGBA);
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->Edit_El((RGBA*)(void*)*arg[1]), 1, &TA_RGBA);
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->FindName((const char*)*arg[1]), 1, &TA_RGBA);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_RGBA);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_RGBA);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_RGBA);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->Pop(), 1, &TA_RGBA);
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->Peek(), 1, &TA_RGBA);
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->AddUniqNameOld((RGBA*)(void*)*arg[1]), 1, &TA_RGBA);
    return rval;}
  static cssEl* cssElCFun_taList_RGBA__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<RGBA>*)ths)->LinkUniqNameOld((RGBA*)(void*)*arg[1]), 1, &TA_RGBA);
    return rval;}
RGBA_List*		 TAI_RGBA_List=NULL;
TAColor*		 TAI_TAColor=NULL;
taList<TAColor>*		 TAI_taList_TAColor_=NULL;
  static cssEl* cssElCFun_taList_TAColor__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<TAColor>*)ths)->MoveBefore((TAColor*)(void*)*arg[1], (TAColor*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<TAColor>*)ths)->MoveAfter((TAColor*)(void*)*arg[1], (TAColor*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->SafeEl((int)*arg[1]), 1, &TA_TAColor);
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->FastEl((int)*arg[1]), 1, &TA_TAColor);
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->DefaultEl(), 1, &TA_TAColor);
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->Edit_El((TAColor*)(void*)*arg[1]), 1, &TA_TAColor);
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->FindName((const char*)*arg[1]), 1, &TA_TAColor);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_TAColor);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_TAColor);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_TAColor);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->Pop(), 1, &TA_TAColor);
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->Peek(), 1, &TA_TAColor);
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->AddUniqNameOld((TAColor*)(void*)*arg[1]), 1, &TA_TAColor);
    return rval;}
  static cssEl* cssElCFun_taList_TAColor__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<TAColor>*)ths)->LinkUniqNameOld((TAColor*)(void*)*arg[1]), 1, &TA_TAColor);
    return rval;}
TAColor_List*		 TAI_TAColor_List=NULL;
ColorScaleSpec*		 TAI_ColorScaleSpec=NULL;
  static cssEl* cssElCFun_ColorScaleSpec_GenRanges_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ColorScaleSpec*)ths)->GenRanges((TAColor_List*)(void*)*arg[1], (int)*arg[2]);
    return rval;}
ColorScaleSpec_MGroup*		 TAI_ColorScaleSpec_MGroup=NULL;
  static cssEl* cssElCFun_ColorScaleSpec_MGroup_NewDefaults_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ColorScaleSpec_MGroup*)ths)->NewDefaults();
    return rval;}
  static cssEl* cssElCFun_ColorScaleSpec_MGroup_SetDefaultColor_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ColorScaleSpec_MGroup*)ths)->SetDefaultColor();
    return rval;}
gpivArrayC_Type*		 TAI_gpivArrayC_Type=NULL;
gpivArrayCEdit*		 TAI_gpivArrayCEdit=NULL;
FontSpec*		 TAI_FontSpec=NULL;
  static cssEl* cssElCFun_FontSpec_XFontSel_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->XFontSel();
    return rval;}
  static cssEl* cssElCFun_FontSpec_SetFont_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->SetFont((char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FontSpec_SetFontSize_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((FontSpec*)ths)->SetFontSize();}
    if(na == 1) {
      ((FontSpec*)ths)->SetFontSize((int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_FontSpec_SetTextG_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FontSpec*)ths)->SetTextG((NoScale_Text_G*)(void*)*arg[1]);
    return rval;}
ViewLabel*		 TAI_ViewLabel=NULL;
  static cssEl* cssElCFun_ViewLabel_SetLabelXform_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ViewLabel*)ths)->SetLabelXform((Xform*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ViewLabel_XFontSel_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ViewLabel*)ths)->XFontSel();
    return rval;}
  static cssEl* cssElCFun_ViewLabel_GetMasterViewer_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ViewLabel*)ths)->GetMasterViewer();
    return rval;}
  static cssEl* cssElCFun_ViewLabel_MakeText_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ViewLabel*)ths)->MakeText();
    return rval;}
  static cssEl* cssElCFun_ViewLabel_AddToView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ViewLabel*)ths)->AddToView();
    return rval;}
  static cssEl* cssElCFun_ViewLabel_UpdateView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ViewLabel*)ths)->UpdateView());
    return rval;}
  static cssEl* cssElCFun_ViewLabel_RemoveFromView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ViewLabel*)ths)->RemoveFromView();
    return rval;}
taList<ViewLabel>*		 TAI_taList_ViewLabel_=NULL;
  static cssEl* cssElCFun_taList_ViewLabel__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<ViewLabel>*)ths)->MoveBefore((ViewLabel*)(void*)*arg[1], (ViewLabel*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<ViewLabel>*)ths)->MoveAfter((ViewLabel*)(void*)*arg[1], (ViewLabel*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->SafeEl((int)*arg[1]), 1, &TA_ViewLabel);
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->FastEl((int)*arg[1]), 1, &TA_ViewLabel);
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->DefaultEl(), 1, &TA_ViewLabel);
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->Edit_El((ViewLabel*)(void*)*arg[1]), 1, &TA_ViewLabel);
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->FindName((const char*)*arg[1]), 1, &TA_ViewLabel);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_ViewLabel);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_ViewLabel);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_ViewLabel);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->Pop(), 1, &TA_ViewLabel);
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->Peek(), 1, &TA_ViewLabel);
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->AddUniqNameOld((ViewLabel*)(void*)*arg[1]), 1, &TA_ViewLabel);
    return rval;}
  static cssEl* cssElCFun_taList_ViewLabel__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<ViewLabel>*)ths)->LinkUniqNameOld((ViewLabel*)(void*)*arg[1]), 1, &TA_ViewLabel);
    return rval;}
ViewLabel_List*		 TAI_ViewLabel_List=NULL;
float_RArray*		 TAI_float_RArray=NULL;
  static cssEl* cssElCFun_float_RArray_Remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((float_RArray*)ths)->Remove((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((float_RArray*)ths)->Remove((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_CopyVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((float_RArray*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));}
    if(na == 2) {
      ((float_RArray*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2]);}
    if(na == 3) {
      ((float_RArray*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((float_RArray*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((float_RArray*)ths)->Set((int)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_float_RArray_Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((float_RArray*)ths)->Add((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_float_RArray_Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((float_RArray*)ths)->Insert((float)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((float_RArray*)ths)->Insert((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_UpdateRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((float_RArray*)ths)->UpdateRange((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_float_RArray_UpdateAllRange_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((float_RArray*)ths)->UpdateAllRange();
    return rval;}
  static cssEl* cssElCFun_float_RArray_MaxVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->MaxVal(refarg_0));    *arg[1]=(Int)refarg_0;
}
    if(na == 2) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->MaxVal(refarg_0, (int)*arg[2]));    *arg[1]=(Int)refarg_0;
}
    if(na == 3) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->MaxVal(refarg_0, (int)*arg[2], (int)*arg[3]));    *arg[1]=(Int)refarg_0;
}
    return rval;}
  static cssEl* cssElCFun_float_RArray_AbsMaxVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->AbsMaxVal(refarg_0));    *arg[1]=(Int)refarg_0;
}
    if(na == 2) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->AbsMaxVal(refarg_0, (int)*arg[2]));    *arg[1]=(Int)refarg_0;
}
    if(na == 3) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->AbsMaxVal(refarg_0, (int)*arg[2], (int)*arg[3]));    *arg[1]=(Int)refarg_0;
}
    return rval;}
  static cssEl* cssElCFun_float_RArray_MinVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->MinVal(refarg_0));    *arg[1]=(Int)refarg_0;
}
    if(na == 2) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->MinVal(refarg_0, (int)*arg[2]));    *arg[1]=(Int)refarg_0;
}
    if(na == 3) {
      int refarg_0=(int)*arg[1];
    rval=new cssReal((double)((float_RArray*)ths)->MinVal(refarg_0, (int)*arg[2], (int)*arg[3]));    *arg[1]=(Int)refarg_0;
}
    return rval;}
  static cssEl* cssElCFun_float_RArray_Sum_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->Sum());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->Sum((int)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->Sum((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_Mean_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->Mean());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->Mean((int)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->Mean((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_Var_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->Var());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->Var((float)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->Var((float)*arg[1], (bool)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->Var((float)*arg[1], (bool)*arg[2], (int)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->Var((float)*arg[1], (bool)*arg[2], (int)*arg[3], (int)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_StdDev_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->StdDev());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->StdDev((float)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->StdDev((float)*arg[1], (bool)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->StdDev((float)*arg[1], (bool)*arg[2], (int)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->StdDev((float)*arg[1], (bool)*arg[2], (int)*arg[3], (int)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_SEM_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->SEM());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->SEM((float)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->SEM((float)*arg[1], (bool)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->SEM((float)*arg[1], (bool)*arg[2], (int)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->SEM((float)*arg[1], (bool)*arg[2], (int)*arg[3], (int)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_SSLength_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->SSLength());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->SSLength((int)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->SSLength((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_SumSquaresDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->SumSquaresDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray)));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->SumSquaresDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->SumSquaresDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->SumSquaresDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3], (int)*arg[4]));}
    if(na == 5) {
      rval=new cssReal((double)((float_RArray*)ths)->SumSquaresDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3], (int)*arg[4], (int)*arg[5]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_EuclidDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->EuclidDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray)));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->EuclidDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->EuclidDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->EuclidDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3], (int)*arg[4]));}
    if(na == 5) {
      rval=new cssReal((double)((float_RArray*)ths)->EuclidDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3], (int)*arg[4], (int)*arg[5]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_HammingDist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->HammingDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray)));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->HammingDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->HammingDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->HammingDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3], (int)*arg[4]));}
    if(na == 5) {
      rval=new cssReal((double)((float_RArray*)ths)->HammingDist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (float)*arg[3], (int)*arg[4], (int)*arg[5]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_Covar_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->Covar(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray)));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->Covar(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->Covar(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_Correl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->Correl(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray)));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->Correl(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->Correl(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_InnerProd_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->InnerProd(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray)));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->InnerProd(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->InnerProd(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (int)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->InnerProd(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (bool)*arg[2], (int)*arg[3], (int)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_CrossEntropy_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->CrossEntropy(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray)));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->CrossEntropy(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->CrossEntropy(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_Dist_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->Dist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (float_RArray::DistMetric)(int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->Dist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (float_RArray::DistMetric)(int)*arg[2], (bool)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->Dist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (float_RArray::DistMetric)(int)*arg[2], (bool)*arg[3], (float)*arg[4]));}
    if(na == 5) {
      rval=new cssReal((double)((float_RArray*)ths)->Dist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (float_RArray::DistMetric)(int)*arg[2], (bool)*arg[3], (float)*arg[4], (int)*arg[5]));}
    if(na == 6) {
      rval=new cssReal((double)((float_RArray*)ths)->Dist(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (float_RArray::DistMetric)(int)*arg[2], (bool)*arg[3], (float)*arg[4], (int)*arg[5], (int)*arg[6]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_LargerFurther_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((float_RArray*)ths)->LargerFurther((float_RArray::DistMetric)(int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_float_RArray_Histogram_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((float_RArray*)ths)->Histogram(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_float_RArray_AggToArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      Aggregate& refarg_1=*(Aggregate*)arg[2]->GetVoidPtrOfType(&TA_Aggregate);
    ((float_RArray*)ths)->AggToArray(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), refarg_1);}
    if(na == 3) {
      Aggregate& refarg_1=*(Aggregate*)arg[2]->GetVoidPtrOfType(&TA_Aggregate);
    ((float_RArray*)ths)->AggToArray(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), refarg_1, (int)*arg[3]);}
    if(na == 4) {
      Aggregate& refarg_1=*(Aggregate*)arg[2]->GetVoidPtrOfType(&TA_Aggregate);
    ((float_RArray*)ths)->AggToArray(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), refarg_1, (int)*arg[3], (int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_AggToVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      Aggregate& refarg_0=*(Aggregate*)arg[1]->GetVoidPtrOfType(&TA_Aggregate);
    rval=new cssReal((double)((float_RArray*)ths)->AggToVal(refarg_0));}
    if(na == 2) {
      Aggregate& refarg_0=*(Aggregate*)arg[1]->GetVoidPtrOfType(&TA_Aggregate);
    rval=new cssReal((double)((float_RArray*)ths)->AggToVal(refarg_0, (int)*arg[2]));}
    if(na == 3) {
      Aggregate& refarg_0=*(Aggregate*)arg[1]->GetVoidPtrOfType(&TA_Aggregate);
    rval=new cssReal((double)((float_RArray*)ths)->AggToVal(refarg_0, (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_NormLen_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->NormLen());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->NormLen((float)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->NormLen((float)*arg[1], (int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->NormLen((float)*arg[1], (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_NormSum_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->NormSum());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->NormSum((float)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->NormSum((float)*arg[1], (float)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->NormSum((float)*arg[1], (float)*arg[2], (int)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((float_RArray*)ths)->NormSum((float)*arg[1], (float)*arg[2], (int)*arg[3], (int)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_NormMax_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->NormMax());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->NormMax((float)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->NormMax((float)*arg[1], (int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->NormMax((float)*arg[1], (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_NormAbsMax_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((float_RArray*)ths)->NormAbsMax());}
    if(na == 1) {
      rval=new cssReal((double)((float_RArray*)ths)->NormAbsMax((float)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((float_RArray*)ths)->NormAbsMax((float)*arg[1], (int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((float_RArray*)ths)->NormAbsMax((float)*arg[1], (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_SimpleMath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((float_RArray*)ths)->SimpleMath(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec));}
    if(na == 2) {
      ((float_RArray*)ths)->SimpleMath(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec), (int)*arg[2]);}
    if(na == 3) {
      ((float_RArray*)ths)->SimpleMath(*(SimpleMathSpec*)arg[1]->GetVoidPtrOfType(&TA_SimpleMathSpec), (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_SimpleMathArg_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((float_RArray*)ths)->SimpleMathArg(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), *(SimpleMathSpec*)arg[2]->GetVoidPtrOfType(&TA_SimpleMathSpec));}
    if(na == 3) {
      ((float_RArray*)ths)->SimpleMathArg(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), *(SimpleMathSpec*)arg[2]->GetVoidPtrOfType(&TA_SimpleMathSpec), (int)*arg[3]);}
    if(na == 4) {
      ((float_RArray*)ths)->SimpleMathArg(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), *(SimpleMathSpec*)arg[2]->GetVoidPtrOfType(&TA_SimpleMathSpec), (int)*arg[3], (int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_Threshold_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((float_RArray*)ths)->Threshold());}
    if(na == 1) {
      rval=new cssInt((int)((float_RArray*)ths)->Threshold((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((float_RArray*)ths)->Threshold((float)*arg[1], (float)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((float_RArray*)ths)->Threshold((float)*arg[1], (float)*arg[2], (float)*arg[3]));}
    if(na == 4) {
      rval=new cssInt((int)((float_RArray*)ths)->Threshold((float)*arg[1], (float)*arg[2], (float)*arg[3], (int)*arg[4]));}
    if(na == 5) {
      rval=new cssInt((int)((float_RArray*)ths)->Threshold((float)*arg[1], (float)*arg[2], (float)*arg[3], (int)*arg[4], (int)*arg[5]));}
    return rval;}
  static cssEl* cssElCFun_float_RArray_WritePoint_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((float_RArray*)ths)->WritePoint(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((float_RArray*)ths)->WritePoint(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], (float)*arg[4]);}
    if(na == 5) {
      ((float_RArray*)ths)->WritePoint(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], (float)*arg[4], (bool)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_RenderLine_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 5) {
      ((float_RArray*)ths)->RenderLine(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5]);}
    if(na == 6) {
      ((float_RArray*)ths)->RenderLine(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5], (float)*arg[6]);}
    if(na == 7) {
      ((float_RArray*)ths)->RenderLine(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5], (float)*arg[6], (bool)*arg[7]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_WriteXPoints_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      ((float_RArray*)ths)->WriteXPoints(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], *(float_RArray*)arg[4]->GetVoidPtrOfType(&TA_float_RArray));}
    if(na == 5) {
      ((float_RArray*)ths)->WriteXPoints(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], *(float_RArray*)arg[4]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[5]);}
    if(na == 6) {
      ((float_RArray*)ths)->WriteXPoints(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], *(float_RArray*)arg[4]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[5], (bool)*arg[6]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_WriteYPoints_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      ((float_RArray*)ths)->WriteYPoints(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], *(float_RArray*)arg[4]->GetVoidPtrOfType(&TA_float_RArray));}
    if(na == 5) {
      ((float_RArray*)ths)->WriteYPoints(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], *(float_RArray*)arg[4]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[5]);}
    if(na == 6) {
      ((float_RArray*)ths)->WriteYPoints(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], *(float_RArray*)arg[4]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[5], (bool)*arg[6]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_RenderWideLine_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 6) {
      ((float_RArray*)ths)->RenderWideLine(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5], *(float_RArray*)arg[6]->GetVoidPtrOfType(&TA_float_RArray));}
    if(na == 7) {
      ((float_RArray*)ths)->RenderWideLine(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5], *(float_RArray*)arg[6]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[7]);}
    if(na == 8) {
      ((float_RArray*)ths)->RenderWideLine(*(TwoDCoord*)arg[1]->GetVoidPtrOfType(&TA_TwoDCoord), (int)*arg[2], (int)*arg[3], (int)*arg[4], (int)*arg[5], *(float_RArray*)arg[6]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[7], (bool)*arg[8]);}
    return rval;}
  static cssEl* cssElCFun_float_RArray_SafeMatEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((float_RArray*)ths)->SafeMatEl((int)*arg[1], (int)*arg[2], (int)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_float_RArray_FastMatEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((float_RArray*)ths)->FastMatEl((int)*arg[1], (int)*arg[2], (int)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_float_RArray_FastMatEl1_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((float_RArray*)ths)->FastMatEl1((int)*arg[1], (int)*arg[2], (int)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_float_RArray_FastEl1_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((float_RArray*)ths)->FastEl1((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_float_RArray_GetMatCol_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((float_RArray*)ths)->GetMatCol((int)*arg[1], refarg_1, (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_float_RArray_GetMatRow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    ((float_RArray*)ths)->GetMatRow((int)*arg[1], refarg_1, (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_float_RArray_SafeTriMatEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((float_RArray*)ths)->SafeTriMatEl((int)*arg[1], (int)*arg[2], (int)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_float_RArray_FastTriMatEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((float_RArray*)ths)->FastTriMatEl((int)*arg[1], (int)*arg[2], (int)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_float_RArray_AllocSqMatSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((float_RArray*)ths)->AllocSqMatSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_float_RArray_AllocTriMatSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((float_RArray*)ths)->AllocTriMatSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_float_RArray_CopyFmTriMat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((float_RArray*)ths)->CopyFmTriMat((int)*arg[1], *(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray));
    return rval;}
  static cssEl* cssElCFun_float_RArray_TriDiagMatRed_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_2=*(float_RArray*)arg[3]->GetVoidPtrOfType(&TA_float_RArray);
    rval=new cssInt((int)((float_RArray*)ths)->TriDiagMatRed((int)*arg[1], refarg_1, refarg_2));
    return rval;}
  static cssEl* cssElCFun_float_RArray_TriDiagQL_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_2=*(float_RArray*)arg[3]->GetVoidPtrOfType(&TA_float_RArray);
    rval=new cssInt((int)((float_RArray*)ths)->TriDiagQL((int)*arg[1], refarg_1, refarg_2));
    return rval;}
  static cssEl* cssElCFun_float_RArray_Eigens_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);
    rval=new cssInt((int)((float_RArray*)ths)->Eigens((int)*arg[1], refarg_1));
    return rval;}
  static cssEl* cssElCFun_float_RArray_MDS_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_2=*(float_RArray*)arg[3]->GetVoidPtrOfType(&TA_float_RArray);
    rval=new cssInt((int)((float_RArray*)ths)->MDS((int)*arg[1], refarg_1, refarg_2));}
    if(na == 4) {
      float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_2=*(float_RArray*)arg[3]->GetVoidPtrOfType(&TA_float_RArray);
    rval=new cssInt((int)((float_RArray*)ths)->MDS((int)*arg[1], refarg_1, refarg_2, (int)*arg[4]));}
    if(na == 5) {
      float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_2=*(float_RArray*)arg[3]->GetVoidPtrOfType(&TA_float_RArray);
    rval=new cssInt((int)((float_RArray*)ths)->MDS((int)*arg[1], refarg_1, refarg_2, (int)*arg[4], (int)*arg[5]));}
    if(na == 6) {
      float_RArray& refarg_1=*(float_RArray*)arg[2]->GetVoidPtrOfType(&TA_float_RArray);    float_RArray& refarg_2=*(float_RArray*)arg[3]->GetVoidPtrOfType(&TA_float_RArray);
    rval=new cssInt((int)((float_RArray*)ths)->MDS((int)*arg[1], refarg_1, refarg_2, (int)*arg[4], (int)*arg[5], (bool)*arg[6]));}
    return rval;}
DataArray_impl*		 TAI_DataArray_impl=NULL;
  static cssEl* cssElCFun_DataArray_impl_AR_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataArray_impl*)ths)->AR(), 1, &TA_taArray_base);
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_NewAR_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataArray_impl*)ths)->NewAR();
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_SetAR_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataArray_impl*)ths)->SetAR((taArray_base*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_HasDispOption_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DataArray_impl*)ths)->HasDispOption((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_DispOptionAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((DataArray_impl*)ths)->DispOptionAfter((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_DataArray_impl_AddDispOption_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataArray_impl*)ths)->AddDispOption((const char*)*arg[1]);
    return rval;}
taGroup<DataArray_impl>*		 TAI_taGroup_DataArray_impl_=NULL;
  static cssEl* cssElCFun_taGroup_DataArray_impl__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<DataArray_impl>*)ths)->MoveBefore((DataArray_impl*)(void*)*arg[1], (DataArray_impl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<DataArray_impl>*)ths)->MoveAfter((DataArray_impl*)(void*)*arg[1], (DataArray_impl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->SafeEl((int)*arg[1]), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FastEl((int)*arg[1]), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->DefaultEl(), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->Edit_El((DataArray_impl*)(void*)*arg[1]), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->Leaf((int)*arg[1]), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FirstEl(refarg_0), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->NextEl(refarg_0), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->NewEl(), 1, &TA_DataArray_impl);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->NewEl((int)*arg[1]), 1, &TA_DataArray_impl);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_DataArray_impl);}
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FindName((const char*)*arg[1]), 1, &TA_DataArray_impl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_DataArray_impl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_DataArray_impl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_DataArray_impl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->Pop(), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->Peek(), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->AddUniqNameOld((DataArray_impl*)(void*)*arg[1]), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->LinkUniqNameOld((DataArray_impl*)(void*)*arg[1]), 1, &TA_DataArray_impl);
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_DataArray_impl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_DataArray_impl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_DataArray_impl__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_DataArray_impl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<DataArray_impl>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_DataArray_impl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
DataTable*		 TAI_DataTable=NULL;
  static cssEl* cssElCFun_DataTable_ResetData_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->ResetData();
    return rval;}
  static cssEl* cssElCFun_DataTable_RemoveRow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->RemoveRow((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DataTable_AddBlankRow_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->AddBlankRow();
    return rval;}
  static cssEl* cssElCFun_DataTable_SetSaveToFile_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->SetSaveToFile((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DataTable_AddRowToArray_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((DataTable*)ths)->AddRowToArray(refarg_0, (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_DataTable_AggRowToArray_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);    Aggregate& refarg_2=*(Aggregate*)arg[3]->GetVoidPtrOfType(&TA_Aggregate);
    ((DataTable*)ths)->AggRowToArray(refarg_0, (int)*arg[2], refarg_2);
    return rval;}
  static cssEl* cssElCFun_DataTable_AggRowToVal_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    Aggregate& refarg_1=*(Aggregate*)arg[2]->GetVoidPtrOfType(&TA_Aggregate);
    rval=new cssReal((double)((DataTable*)ths)->AggRowToVal((int)*arg[1], refarg_1));
    return rval;}
  static cssEl* cssElCFun_DataTable_AddArrayToRow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((DataTable*)ths)->AddArrayToRow(refarg_0);
    return rval;}
  static cssEl* cssElCFun_DataTable_AggArrayToRow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    Aggregate& refarg_2=*(Aggregate*)arg[3]->GetVoidPtrOfType(&TA_Aggregate);
    ((DataTable*)ths)->AggArrayToRow(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2], refarg_2);
    return rval;}
  static cssEl* cssElCFun_DataTable_PutArrayToRow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->PutArrayToRow(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_DataTable_UpdateAllRanges_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataTable*)ths)->UpdateAllRanges();
    return rval;}
  static cssEl* cssElCFun_DataTable_NewColFloat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataTable*)ths)->NewColFloat((const char*)*arg[1]), 1, &TA_float_Data);
    return rval;}
  static cssEl* cssElCFun_DataTable_NewColInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataTable*)ths)->NewColInt((const char*)*arg[1]), 1, &TA_float_Data);
    return rval;}
  static cssEl* cssElCFun_DataTable_NewColString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataTable*)ths)->NewColString((const char*)*arg[1]), 1, &TA_String_Data);
    return rval;}
  static cssEl* cssElCFun_DataTable_NewGroupFloat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataTable*)ths)->NewGroupFloat((const char*)*arg[1], (int)*arg[2]), 1, &TA_DataTable);
    return rval;}
  static cssEl* cssElCFun_DataTable_NewGroupInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataTable*)ths)->NewGroupInt((const char*)*arg[1], (int)*arg[2]), 1, &TA_DataTable);
    return rval;}
  static cssEl* cssElCFun_DataTable_NewGroupString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataTable*)ths)->NewGroupString((const char*)*arg[1], (int)*arg[2]), 1, &TA_DataTable);
    return rval;}
  static cssEl* cssElCFun_DataTable_GetColData_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColData((int)*arg[1]), 1, &TA_DataArray_impl);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColData((int)*arg[1], (int)*arg[2]), 1, &TA_DataArray_impl);}
    return rval;}
  static cssEl* cssElCFun_DataTable_GetColFloatData_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColFloatData((int)*arg[1]), 1, &TA_float_Data);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColFloatData((int)*arg[1], (int)*arg[2]), 1, &TA_float_Data);}
    return rval;}
  static cssEl* cssElCFun_DataTable_GetColStringData_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColStringData((int)*arg[1]), 1, &TA_String_Data);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColStringData((int)*arg[1], (int)*arg[2]), 1, &TA_String_Data);}
    return rval;}
  static cssEl* cssElCFun_DataTable_GetColFloatArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColFloatArray((int)*arg[1]), 1, &TA_float_RArray);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColFloatArray((int)*arg[1], (int)*arg[2]), 1, &TA_float_RArray);}
    return rval;}
  static cssEl* cssElCFun_DataTable_GetColStringArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColStringArray((int)*arg[1]), 1, &TA_String_Array);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((DataTable*)ths)->GetColStringArray((int)*arg[1], (int)*arg[2]), 1, &TA_String_Array);}
    return rval;}
  static cssEl* cssElCFun_DataTable_PutArrayToCol_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((DataTable*)ths)->PutArrayToCol(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2]);}
    if(na == 3) {
      ((DataTable*)ths)->PutArrayToCol(*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray), (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_DataTable_SetColName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((DataTable*)ths)->SetColName((const char*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((DataTable*)ths)->SetColName((const char*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_DataTable_AddColDispOpt_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((DataTable*)ths)->AddColDispOpt((const char*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((DataTable*)ths)->AddColDispOpt((const char*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_DataTable_AddFloatVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((DataTable*)ths)->AddFloatVal((float)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((DataTable*)ths)->AddFloatVal((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_DataTable_AddStringVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((DataTable*)ths)->AddStringVal((const char*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((DataTable*)ths)->AddStringVal((const char*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_DataTable_SetFloatVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((DataTable*)ths)->SetFloatVal((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((DataTable*)ths)->SetFloatVal((float)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_DataTable_SetStringVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      ((DataTable*)ths)->SetStringVal((const char*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((DataTable*)ths)->SetStringVal((const char*)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_DataTable_SetLastFloatVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((DataTable*)ths)->SetLastFloatVal((float)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((DataTable*)ths)->SetLastFloatVal((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_DataTable_SetLastStringVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((DataTable*)ths)->SetLastStringVal((const char*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((DataTable*)ths)->SetLastStringVal((const char*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_DataTable_GetFloatVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssReal((double)((DataTable*)ths)->GetFloatVal((int)*arg[1], (int)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((DataTable*)ths)->GetFloatVal((int)*arg[1], (int)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_DataTable_GetStringVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssString(((DataTable*)ths)->GetStringVal((int)*arg[1], (int)*arg[2]));}
    if(na == 3) {
      rval=new cssString(((DataTable*)ths)->GetStringVal((int)*arg[1], (int)*arg[2], (int)*arg[3]));}
    return rval;}
ClustNode*		 TAI_ClustNode=NULL;
  static cssEl* cssElCFun_ClustNode_GetChild_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((ClustNode*)ths)->GetChild((int)*arg[1]), 1, &TA_ClustNode);
    return rval;}
  static cssEl* cssElCFun_ClustNode_GetNN_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((ClustNode*)ths)->GetNN((int)*arg[1]), 1, &TA_ClustNode);
    return rval;}
  static cssEl* cssElCFun_ClustNode_GetNNDist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((ClustNode*)ths)->GetNNDist((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ClustNode_SetPat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ClustNode*)ths)->SetPat((float_RArray*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ClustNode_AddChild_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((ClustNode*)ths)->AddChild((ClustNode*)(void*)*arg[1]);}
    if(na == 2) {
      ((ClustNode*)ths)->AddChild((ClustNode*)(void*)*arg[1], (float)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_ClustNode_LinkNN_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((ClustNode*)ths)->LinkNN((ClustNode*)(void*)*arg[1]);}
    if(na == 2) {
      ((ClustNode*)ths)->LinkNN((ClustNode*)(void*)*arg[1], (float)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_ClustNode_RemoveChild_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ClustNode*)ths)->RemoveChild((ClustNode*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ClustNode_FindChild_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ClustNode*)ths)->FindChild((ClustNode*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ClustNode_Cluster_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ClustNode*)ths)->Cluster();}
    if(na == 1) {
      ((ClustNode*)ths)->Cluster((float_RArray::DistMetric)(int)*arg[1]);}
    if(na == 2) {
      ((ClustNode*)ths)->Cluster((float_RArray::DistMetric)(int)*arg[1], (bool)*arg[2]);}
    if(na == 3) {
      ((ClustNode*)ths)->Cluster((float_RArray::DistMetric)(int)*arg[1], (bool)*arg[2], (float)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_ClustNode_Graph_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((ClustNode*)ths)->Graph(refarg_0);
    return rval;}
  static cssEl* cssElCFun_ClustNode_XGraph_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ClustNode*)ths)->XGraph((const char*)*arg[1], (const char*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ClustNode_GraphData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ClustNode*)ths)->GraphData((DataTable*)(void*)*arg[1]);
    return rval;}
ClustLink*		 TAI_ClustLink=NULL;
DA_ViewSpec*		 TAI_DA_ViewSpec=NULL;
  static cssEl* cssElCFun_DA_ViewSpec_UpdateView_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DA_ViewSpec*)ths)->UpdateView();
    return rval;}
  static cssEl* cssElCFun_DA_ViewSpec_SetGpVisibility_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DA_ViewSpec*)ths)->SetGpVisibility((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DA_ViewSpec_CopyToGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DA_ViewSpec*)ths)->CopyToGp((MemberDef*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DA_ViewSpec_BuildFromDataArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((DA_ViewSpec*)ths)->BuildFromDataArray());}
    if(na == 1) {
      rval=new cssInt((int)((DA_ViewSpec*)ths)->BuildFromDataArray((DataArray_impl*)(void*)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_DA_ViewSpec_CleanName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taString refarg_0=arg[1]->GetStr();
    rval=new cssString(((DA_ViewSpec*)ths)->CleanName(refarg_0));
    *arg[1]=(String)refarg_0;
    return rval;}
taGroup<DA_ViewSpec>*		 TAI_taGroup_DA_ViewSpec_=NULL;
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<DA_ViewSpec>*)ths)->MoveBefore((DA_ViewSpec*)(void*)*arg[1], (DA_ViewSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taGroup<DA_ViewSpec>*)ths)->MoveAfter((DA_ViewSpec*)(void*)*arg[1], (DA_ViewSpec*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->SafeEl((int)*arg[1]), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FastEl((int)*arg[1]), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->DefaultEl(), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->Edit_El((DA_ViewSpec*)(void*)*arg[1]), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__SafeGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->SafeGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FastGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->Leaf((int)*arg[1]), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->LeafGp((int)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FirstEl(refarg_0), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->NextEl(refarg_0), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->NewEl(), 1, &TA_DA_ViewSpec);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->NewEl((int)*arg[1]), 1, &TA_DA_ViewSpec);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->NewEl((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_DA_ViewSpec);}
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->NewGp((int)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->NewGp((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FindName((const char*)*arg[1]), 1, &TA_DA_ViewSpec);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_DA_ViewSpec);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_DA_ViewSpec);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_DA_ViewSpec);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->Pop(), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->Peek(), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->AddUniqNameOld((DA_ViewSpec*)(void*)*arg[1]), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->LinkUniqNameOld((DA_ViewSpec*)(void*)*arg[1]), 1, &TA_DA_ViewSpec);
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FindLeafName((const char*)*arg[1]), 1, &TA_DA_ViewSpec);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FindLeafName((const char*)*arg[1], refarg_1), 1, &TA_DA_ViewSpec);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taGroup_DA_ViewSpec__FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_DA_ViewSpec);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taGroup<DA_ViewSpec>*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_DA_ViewSpec);    *arg[2]=(Int)refarg_1;
}
    return rval;}
DT_ViewSpec*		 TAI_DT_ViewSpec=NULL;
  static cssEl* cssElCFun_DT_ViewSpec_BuildFromDataTable_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((DT_ViewSpec*)ths)->BuildFromDataTable());}
    if(na == 1) {
      rval=new cssInt((int)((DT_ViewSpec*)ths)->BuildFromDataTable((DataTable*)(void*)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_DT_ViewSpec_ReBuildFromDataTable_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DT_ViewSpec*)ths)->ReBuildFromDataTable();
    return rval;}
  static cssEl* cssElCFun_DT_ViewSpec_SetDispNms_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DT_ViewSpec*)ths)->SetDispNms((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DT_ViewSpec_RmvNmPrefix_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DT_ViewSpec*)ths)->RmvNmPrefix();
    return rval;}
  static cssEl* cssElCFun_DT_ViewSpec_SetVisibility_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DT_ViewSpec*)ths)->SetVisibility((bool)*arg[1]);
    return rval;}
DA_TextViewSpec*		 TAI_DA_TextViewSpec=NULL;
DA_NetViewSpec*		 TAI_DA_NetViewSpec=NULL;
DA_GraphViewSpec*		 TAI_DA_GraphViewSpec=NULL;
  static cssEl* cssElCFun_DA_GraphViewSpec_PlotRows_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DA_GraphViewSpec*)ths)->PlotRows();
    return rval;}
  static cssEl* cssElCFun_DA_GraphViewSpec_PlotCols_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DA_GraphViewSpec*)ths)->PlotCols();
    return rval;}
  static cssEl* cssElCFun_DA_GraphViewSpec_GpShareAxis_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DA_GraphViewSpec*)ths)->GpShareAxis();
    return rval;}
  static cssEl* cssElCFun_DA_GraphViewSpec_GpSepAxes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DA_GraphViewSpec*)ths)->GpSepAxes();
    return rval;}
  static cssEl* cssElCFun_DA_GraphViewSpec_FindStringCoords_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DA_GraphViewSpec*)ths)->FindStringCoords();
    return rval;}
  static cssEl* cssElCFun_DA_GraphViewSpec_SetAxis_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DA_GraphViewSpec*)ths)->SetAxis((DA_GraphViewSpec*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DA_GraphViewSpec_SetStringCoords_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DA_GraphViewSpec*)ths)->SetStringCoords((DA_GraphViewSpec*)(void*)*arg[1]);
    return rval;}
DT_GraphViewSpec*		 TAI_DT_GraphViewSpec=NULL;
  static cssEl* cssElCFun_DT_GraphViewSpec_ColorName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssCPtr_char((void*)((DT_GraphViewSpec*)ths)->ColorName((int)*arg[1]), 1);
    return rval;}
  static cssEl* cssElCFun_DT_GraphViewSpec_ColorCount_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((DT_GraphViewSpec*)ths)->ColorCount());
    return rval;}
  static cssEl* cssElCFun_DT_GraphViewSpec_SetBgColor_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DT_GraphViewSpec*)ths)->SetBgColor();
    return rval;}
  static cssEl* cssElCFun_DT_GraphViewSpec_UpdateLineFeatures_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((DT_GraphViewSpec*)ths)->UpdateLineFeatures();}
    if(na == 1) {
      ((DT_GraphViewSpec*)ths)->UpdateLineFeatures((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_DT_GraphViewSpec_SetLineWidths_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DT_GraphViewSpec*)ths)->SetLineWidths((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DT_GraphViewSpec_SetLineType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DT_GraphViewSpec*)ths)->SetLineType((DA_GraphViewSpec::LineType)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DT_GraphViewSpec_ShareAxes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DT_GraphViewSpec*)ths)->ShareAxes();
    return rval;}
  static cssEl* cssElCFun_DT_GraphViewSpec_SeparateAxes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DT_GraphViewSpec*)ths)->SeparateAxes();
    return rval;}
  static cssEl* cssElCFun_DT_GraphViewSpec_PlotRows_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DT_GraphViewSpec*)ths)->PlotRows();
    return rval;}
  static cssEl* cssElCFun_DT_GraphViewSpec_PlotCols_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DT_GraphViewSpec*)ths)->PlotCols();
    return rval;}
  static cssEl* cssElCFun_DT_GraphViewSpec_TraceIncrement_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((DT_GraphViewSpec*)ths)->TraceIncrement();}
    if(na == 1) {
      ((DT_GraphViewSpec*)ths)->TraceIncrement((float)*arg[1]);}
    if(na == 2) {
      ((DT_GraphViewSpec*)ths)->TraceIncrement((float)*arg[1], (float)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_DT_GraphViewSpec_StackTraces_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DT_GraphViewSpec*)ths)->StackTraces();
    return rval;}
  static cssEl* cssElCFun_DT_GraphViewSpec_UnStackTraces_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DT_GraphViewSpec*)ths)->UnStackTraces();
    return rval;}
  static cssEl* cssElCFun_DT_GraphViewSpec_StackSharedAxes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DT_GraphViewSpec*)ths)->StackSharedAxes();
    return rval;}
  static cssEl* cssElCFun_DT_GraphViewSpec_UnStackSharedAxes_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DT_GraphViewSpec*)ths)->UnStackSharedAxes();
    return rval;}
DA_GridViewSpec*		 TAI_DA_GridViewSpec=NULL;
DT_GridViewSpec*		 TAI_DT_GridViewSpec=NULL;
  static cssEl* cssElCFun_DT_GridViewSpec_UpdateLayout_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((DT_GridViewSpec*)ths)->UpdateLayout());}
    if(na == 1) {
      rval=new cssInt((int)((DT_GridViewSpec*)ths)->UpdateLayout((DT_GridViewSpec::MatrixLayout)(int)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_DT_GridViewSpec_UpdateGeom_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DT_GridViewSpec*)ths)->UpdateGeom();
    return rval;}
  static cssEl* cssElCFun_DT_GridViewSpec_GetMinMaxScale_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      MinMax& refarg_0=*(MinMax*)arg[1]->GetVoidPtrOfType(&TA_MinMax);
    ((DT_GridViewSpec*)ths)->GetMinMaxScale(refarg_0);}
    if(na == 2) {
      MinMax& refarg_0=*(MinMax*)arg[1]->GetVoidPtrOfType(&TA_MinMax);
    ((DT_GridViewSpec*)ths)->GetMinMaxScale(refarg_0, (bool)*arg[2]);}
    return rval;}
DataArray<float_RArray>*		 TAI_DataArray_float_RArray_=NULL;
float_Data*		 TAI_float_Data=NULL;
DataArray<String_Array>*		 TAI_DataArray_String_Array_=NULL;
String_Data*		 TAI_String_Data=NULL;
taFile*		 TAI_taFile=NULL;
  static cssEl* cssElCFun_taFile_OpenFile_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((taFile*)ths)->OpenFile(), 1, &TA_istream);}
    if(na == 1) {
      rval=new cssTA((void*)((taFile*)ths)->OpenFile((const char*)*arg[1]), 1, &TA_istream);}
    if(na == 2) {
      rval=new cssTA((void*)((taFile*)ths)->OpenFile((const char*)*arg[1], (bool)*arg[2]), 1, &TA_istream);}
    return rval;}
  static cssEl* cssElCFun_taFile_SaveFile_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((taFile*)ths)->SaveFile(), 1, &TA_ostream);}
    if(na == 1) {
      rval=new cssTA((void*)((taFile*)ths)->SaveFile((const char*)*arg[1]), 1, &TA_ostream);}
    if(na == 2) {
      rval=new cssTA((void*)((taFile*)ths)->SaveFile((const char*)*arg[1], (bool)*arg[2]), 1, &TA_ostream);}
    return rval;}
  static cssEl* cssElCFun_taFile_SaveAsFile_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((taFile*)ths)->SaveAsFile(), 1, &TA_ostream);}
    if(na == 1) {
      rval=new cssTA((void*)((taFile*)ths)->SaveAsFile((const char*)*arg[1]), 1, &TA_ostream);}
    if(na == 2) {
      rval=new cssTA((void*)((taFile*)ths)->SaveAsFile((const char*)*arg[1], (bool)*arg[2]), 1, &TA_ostream);}
    return rval;}
  static cssEl* cssElCFun_taFile_AppendFile_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((taFile*)ths)->AppendFile(), 1, &TA_ostream);}
    if(na == 1) {
      rval=new cssTA((void*)((taFile*)ths)->AppendFile((const char*)*arg[1]), 1, &TA_ostream);}
    if(na == 2) {
      rval=new cssTA((void*)((taFile*)ths)->AppendFile((const char*)*arg[1], (bool)*arg[2]), 1, &TA_ostream);}
    return rval;}
  static cssEl* cssElCFun_taFile_CloseFile_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taFile*)ths)->CloseFile();
    return rval;}
  static cssEl* cssElCFun_taFile_AutoOpen_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taFile*)ths)->AutoOpen();
    return rval;}
  static cssEl* cssElCFun_taFile_IsOpen_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taFile*)ths)->IsOpen());
    return rval;}
  static cssEl* cssElCFun_taFile_UpdateGF_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taFile*)ths)->UpdateGF();
    return rval;}
  static cssEl* cssElCFun_taFile_UpdateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taFile*)ths)->UpdateMe();
    return rval;}
  static cssEl* cssElCFun_taFile_GetGetFile_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taFile*)ths)->GetGetFile();
    return rval;}
ScriptBase*		 TAI_ScriptBase=NULL;
  static cssEl* cssElCFun_ScriptBase_HasScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptBase*)ths)->HasScript());
    return rval;}
  static cssEl* cssElCFun_ScriptBase_RunScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ScriptBase*)ths)->RunScript());
    return rval;}
  static cssEl* cssElCFun_ScriptBase_SetScript_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptBase*)ths)->SetScript((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ScriptBase_LoadScript_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ScriptBase*)ths)->LoadScript();}
    if(na == 1) {
      ((ScriptBase*)ths)->LoadScript((const char*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_ScriptBase_LoadScriptString_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ScriptBase*)ths)->LoadScriptString();}
    if(na == 1) {
      ((ScriptBase*)ths)->LoadScriptString((const char*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_ScriptBase_InteractScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ScriptBase*)ths)->InteractScript();
    return rval;}
taPtrList<ScriptBase>*		 TAI_taPtrList_ScriptBase_=NULL;
  static cssEl* cssElCFun_taPtrList_ScriptBase__Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->Remove((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->SafeEl((int)*arg[1]), 1, &TA_ScriptBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->FastEl((int)*arg[1]), 1, &TA_ScriptBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->Edit_El((ScriptBase*)(void*)*arg[1]), 1, &TA_ScriptBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->FindName((const char*)*arg[1]), 1, &TA_ScriptBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_ScriptBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->Pop(), 1, &TA_ScriptBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->Peek(), 1, &TA_ScriptBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->AddUniqNameOld((ScriptBase*)(void*)*arg[1]), 1, &TA_ScriptBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<ScriptBase>*)ths)->LinkUniqNameOld((ScriptBase*)(void*)*arg[1]), 1, &TA_ScriptBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->FindEl((ScriptBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<ScriptBase>*)ths)->AddEl((ScriptBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<ScriptBase>*)ths)->Add((ScriptBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->AddUnique((ScriptBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->AddUniqNameNew((ScriptBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->Insert((ScriptBase*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->Replace((int)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->ReplaceEl((ScriptBase*)(void*)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->ReplaceName((const char*)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->RemoveEl((ScriptBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->DuplicateEl((ScriptBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<ScriptBase>*)ths)->Link((ScriptBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->LinkUnique((ScriptBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->LinkUniqNameNew((ScriptBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->InsertLink((ScriptBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->InsertLink((ScriptBase*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->ReplaceLink((int)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->ReplaceLinkEl((ScriptBase*)(void*)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->ReplaceLinkName((const char*)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<ScriptBase>*)ths)->Push((ScriptBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->MoveEl((ScriptBase*)(void*)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->Transfer((ScriptBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->MoveBefore((ScriptBase*)(void*)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_ScriptBase__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<ScriptBase>*)ths)->MoveAfter((ScriptBase*)(void*)*arg[1], (ScriptBase*)(void*)*arg[2]));
    return rval;}
ScriptBase_List*		 TAI_ScriptBase_List=NULL;
SArg_Array*		 TAI_SArg_Array=NULL;
SArgEdit*		 TAI_SArgEdit=NULL;
Script*		 TAI_Script=NULL;
  static cssEl* cssElCFun_Script_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Script_CastCopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->CastCopyTo((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Script_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Script*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_Script_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((Script*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((Script*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((Script*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Script_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((Script*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((Script*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((Script*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_Script_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((Script*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((Script*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((Script*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_Script_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_Script_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Script_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((Script*)ths)->GetEnumString((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_Script_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((Script*)ths)->GetEnumVal((const char*)*arg[1]));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((Script*)ths)->GetEnumVal((const char*)*arg[1], refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_Script_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((Script*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((Script*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_Script_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Script*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Script*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Script*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_Script_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Script*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Script*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((Script*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_Script_Edit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((Script*)ths)->Edit());}
    if(na == 1) {
      rval=new cssInt((int)((Script*)ths)->Edit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_Script_CloseEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->CloseEdit());
    return rval;}
  static cssEl* cssElCFun_Script_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_Script_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Script_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Script_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_Script_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Script_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_Script_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], (const char*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_Script_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_Script_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->CallFun((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Script_HasScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->HasScript());
    return rval;}
  static cssEl* cssElCFun_Script_RunScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->RunScript());
    return rval;}
  static cssEl* cssElCFun_Script_SetScript_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->SetScript((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Script_LoadScript_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Script*)ths)->LoadScript();}
    if(na == 1) {
      ((Script*)ths)->LoadScript((const char*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_Script_LoadScriptString_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Script*)ths)->LoadScriptString();}
    if(na == 1) {
      ((Script*)ths)->LoadScriptString((const char*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_Script_InteractScript_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->InteractScript();
    return rval;}
  static cssEl* cssElCFun_Script_Run_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Script*)ths)->Run());
    return rval;}
  static cssEl* cssElCFun_Script_Record_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((Script*)ths)->Record();}
    if(na == 1) {
      ((Script*)ths)->Record((const char*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_Script_StopRecording_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->StopRecording();
    return rval;}
  static cssEl* cssElCFun_Script_Interact_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->Interact();
    return rval;}
  static cssEl* cssElCFun_Script_Clear_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->Clear();
    return rval;}
  static cssEl* cssElCFun_Script_Compile_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->Compile();
    return rval;}
  static cssEl* cssElCFun_Script_ScriptAllWinPos_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->ScriptAllWinPos();
    return rval;}
  static cssEl* cssElCFun_Script_AutoRun_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script*)ths)->AutoRun();
    return rval;}
Script_MGroup*		 TAI_Script_MGroup=NULL;
  static cssEl* cssElCFun_Script_MGroup_StopRecording_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script_MGroup*)ths)->StopRecording();
    return rval;}
  static cssEl* cssElCFun_Script_MGroup_AutoRun_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Script_MGroup*)ths)->AutoRun();
    return rval;}
  static cssEl* cssElCFun_Script_MGroup_Run_mc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Script_MGroup*)ths)->Run_mc((taivMenuEl*)(void*)*arg[1]);
    return rval;}
FunLookup*		 TAI_FunLookup=NULL;
  static cssEl* cssElCFun_FunLookup_Yval_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FunLookup*)ths)->Yval((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_FunLookup_Xval_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FunLookup*)ths)->Xval((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_FunLookup_Eval_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((FunLookup*)ths)->Eval((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_FunLookup_AllocForRange_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((FunLookup*)ths)->AllocForRange();
    return rval;}
  static cssEl* cssElCFun_FunLookup_Plot_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((FunLookup*)ths)->Plot(refarg_0);
    return rval;}
  static cssEl* cssElCFun_FunLookup_Convolve_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FunLookup*)ths)->Convolve(*(FunLookup*)arg[1]->GetVoidPtrOfType(&TA_FunLookup), *(FunLookup*)arg[2]->GetVoidPtrOfType(&TA_FunLookup));
    return rval;}
FunLookupND*		 TAI_FunLookupND=NULL;
  static cssEl* cssElCFun_FunLookupND_EvalArray_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArray((float*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArray((float*)(void*)*arg[1], (int*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_FunLookupND_EvalArgs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1]));}
    if(na == 2) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2]));}
    if(na == 3) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2], (float)*arg[3]));}
    if(na == 4) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4]));}
    if(na == 5) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4], (float)*arg[5]));}
    if(na == 6) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6]));}
    if(na == 7) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float)*arg[7]));}
    if(na == 8) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float)*arg[7], (float)*arg[8]));}
    if(na == 9) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float)*arg[7], (float)*arg[8], (float)*arg[9]));}
    if(na == 10) {
      rval=new cssReal((double)((FunLookupND*)ths)->EvalArgs((float)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float)*arg[7], (float)*arg[8], (float)*arg[9], (float)*arg[10]));}
    return rval;}
  static cssEl* cssElCFun_FunLookupND_LoadTable_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    istream& refarg_0=*(istream*)*arg[1];
    ((FunLookupND*)ths)->LoadTable(refarg_0);
    return rval;}
  static cssEl* cssElCFun_FunLookupND_ListTable_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((FunLookupND*)ths)->ListTable();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((FunLookupND*)ths)->ListTable(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_FunLookupND_ShiftNorm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FunLookupND*)ths)->ShiftNorm((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_FunLookupND_MulNorm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((FunLookupND*)ths)->MulNorm((float)*arg[1]);
    return rval;}

// Type Data

static int MenuGroup_impl::* TA_MenuGroup_impl_MbrOff;
static MemberDef_data TA_MenuGroup_impl_MemberDef[]={
  {&TA_WinBase_ptr,NULL,"win_owner"," owner that is a win_base","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_MenuGroup_impl_MbrOff=(int MenuGroup_impl::*)(&MenuGroup_impl::win_owner))),0,NULL,0},
  NULL};
static int WinGeometry::* TA_WinGeometry_MbrOff;
static MemberDef_data TA_WinGeometry_MemberDef[]={
  {&TA_WinBase_ptr,NULL,"owner"," pointer to owner","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_WinGeometry_MbrOff=(int WinGeometry::*)(&WinGeometry::owner))),0,NULL,0},
  {&TA_float,NULL,"lft"," left (horizontal)","","",
    *((ta_memb_ptr*)&(TA_WinGeometry_MbrOff=(int WinGeometry::*)(&WinGeometry::lft))),0,NULL,0},
  {&TA_float,NULL,"bot"," bottom (vertical)","","",
    *((ta_memb_ptr*)&(TA_WinGeometry_MbrOff=(int WinGeometry::*)(&WinGeometry::bot))),0,NULL,0},
  {&TA_float,NULL,"wd"," width","","",
    *((ta_memb_ptr*)&(TA_WinGeometry_MbrOff=(int WinGeometry::*)(&WinGeometry::wd))),0,NULL,0},
  {&TA_float,NULL,"ht"," height","","",
    *((ta_memb_ptr*)&(TA_WinGeometry_MbrOff=(int WinGeometry::*)(&WinGeometry::ht))),0,NULL,0},
  NULL};
static MethodArgs_data TA_WinGeometry_ScriptWinPos_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm"," cout"},
  NULL};
static MethodDef_data TA_WinGeometry_MethodDef[]={
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,0,-1,0,NULL,cssElCFun_WinGeometry_GetOwner_stub,NULL},
  {&TA_void,NULL,"GetWinPos"," get the window position from parent winbase","","",
    0,0,-1,0,NULL,cssElCFun_WinGeometry_GetWinPos_stub,NULL},
  {&TA_void,NULL,"SetWinPos"," set the window position from parent winbase","","",
    0,0,-1,0,NULL,cssElCFun_WinGeometry_SetWinPos_stub,NULL},
  {&TA_void,NULL,"ScriptWinPos","","","",
    0,1,0,0,NULL,cssElCFun_WinGeometry_ScriptWinPos_stub,TA_WinGeometry_ScriptWinPos_MethArgs},
  NULL};
static EnumDef_data TA_WinBase_PrintFmt[]={
  {"POSTSCRIPT","","",0},
  {"JPEG","","",1},
  {"TIFF","","",2},
  NULL};
static int WinBase::* TA_WinBase_MbrOff;
static MemberDef_data TA_WinBase_MemberDef[]={
  {&TA_taString,NULL,"win_name"," name field for the window","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_WinBase_MbrOff=(int WinBase::*)(&WinBase::win_name))),0,NULL,0},
  {&TA_taString,NULL,"file_name"," file name used in loading/saving","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_WinBase_MbrOff=(int WinBase::*)(&WinBase::file_name))),0,NULL,0},
  {&TA_WinBase_ptr,NULL,"win_owner"," owner that has a window","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_WinBase_MbrOff=(int WinBase::*)(&WinBase::win_owner))),0,NULL,0},
  {&TA_WinGeometry,NULL,"win_pos"," position/size of the window on the screen","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_WinBase_MbrOff=(int WinBase::*)(&WinBase::win_pos))),0,NULL,0},
  {&TA_taivGetFile_ptr,NULL,"ta_file"," file manager for this","NO_SAVE HIDDEN ","",
    *((ta_memb_ptr*)&(TA_WinBase_MbrOff=(int WinBase::*)(&WinBase::ta_file))),0,NULL,0},
  {&TA_taivGetFile_ptr,NULL,"print_file"," print file for this","NO_SAVE HIDDEN ","",
    *((ta_memb_ptr*)&(TA_WinBase_MbrOff=(int WinBase::*)(&WinBase::print_file))),0,NULL,0},
  {&TA_bool,NULL,"iconified"," whether window is iconified or not","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_WinBase_MbrOff=(int WinBase::*)(&WinBase::iconified))),0,NULL,0},
  NULL};
static MethodArgs_data TA_WinBase_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  NULL};
static MethodArgs_data TA_WinBase_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_WinBase_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_WinBase_Print_MethArgs[]={
  {NULL,"::PrintFmt","format",""},
  {&TA_const_char_ptr,NULL,"fname"," 0"},
  NULL};
static MethodArgs_data TA_WinBase_Print_Data_MethArgs[]={
  {NULL,"::PrintFmt","format",""},
  {&TA_const_char_ptr,NULL,"fname"," 0"},
  NULL};
static MethodArgs_data TA_WinBase_SetWinPos_MethArgs[]={
  {&TA_float,NULL,"left","0"},
  {&TA_float,NULL,"bottom","0"},
  {&TA_float,NULL,"width","0"},
  {&TA_float,NULL,"height","0"},
  NULL};
static MethodArgs_data TA_WinBase_ViewWindow_MethArgs[]={
  {&TA_float,NULL,"left","0"},
  {&TA_float,NULL,"bottom","0"},
  {&TA_float,NULL,"width","0"},
  {&TA_float,NULL,"height","0"},
  NULL};
static MethodArgs_data TA_WinBase_GetPrintFileExt_MethArgs[]={
  {NULL,"::PrintFmt","fmt",""},
  NULL};
static MethodArgs_data TA_WinBase_ReSize_MethArgs[]={
  {&TA_float,NULL,"width","0"},
  {&TA_float,NULL,"height","0"},
  NULL};
static MethodArgs_data TA_WinBase_Place_MethArgs[]={
  {&TA_float,NULL,"left","0"},
  {&TA_float,NULL,"bottom","0"},
  NULL};
static MethodArgs_data TA_WinBase_Move_MethArgs[]={
  {&TA_float,NULL,"left","0"},
  {&TA_float,NULL,"bottom","0"},
  NULL};
static MethodDef_data TA_WinBase_MethodDef[]={
  {&TA_int,NULL,"Load"," Load object data from a file load object from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS ","",
    1,2,1,0,NULL,cssElCFun_WinBase_Load_stub,TA_WinBase_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file Save object to a file","MENU ARGC_1 QUICK_SAVE ","",
    1,3,1,0,NULL,cssElCFun_WinBase_Save_stub,TA_WinBase_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file Save object to file","MENU ARGC_1 ","",
    1,3,1,0,NULL,cssElCFun_WinBase_SaveAs_stub,TA_WinBase_SaveAs_MethArgs},
  {&TA_void,NULL,"Print"," Print this object's entire window (including buttons, etc) to file (prompted next) in given format","MENU ARGC_1 MENU_SEP_BEFORE LABEL_Print_(Window) ","",
    0,2,1,0,NULL,cssElCFun_WinBase_Print_stub,TA_WinBase_Print_MethArgs},
  {&TA_void,NULL,"Print_Data"," Print only specific data associated with this window (not control buttons, etc) to file (prompted next) in given format","MENU ARGC_1 LABEL_Print_Data_(Only) ","",
    0,2,1,0,NULL,cssElCFun_WinBase_Print_Data_stub,TA_WinBase_Print_Data_MethArgs},
  {&TA_void,NULL,"UpdateMenus"," update all menus under me (inclusive)","MENU MENU_SEP_BEFORE ","",
    0,0,-1,0,NULL,cssElCFun_WinBase_UpdateMenus_stub,NULL},
  {&TA_void,NULL,"GetAllWinPos"," get current window position/size for all windows under me (inclusive)","MENU ","",
    0,0,-1,0,NULL,cssElCFun_WinBase_GetAllWinPos_stub,NULL},
  {&TA_void,NULL,"ScriptAllWinPos"," generate script code for all windows under me (inclusive)","MENU NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_WinBase_ScriptAllWinPos_stub,NULL},
  {&TA_void,NULL,"SetWinPos"," set current window position and size (0's mean use current vaues)","MENU ","",
    0,4,0,0,NULL,cssElCFun_WinBase_SetWinPos_stub,TA_WinBase_SetWinPos_MethArgs},
  {&TA_void,NULL,"GetWinPos"," get current window position","","",
    0,0,-1,0,NULL,cssElCFun_WinBase_GetWinPos_stub,NULL},
  {&TA_void,NULL,"ScriptWinPos"," generate script code to position the window","NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_WinBase_ScriptWinPos_stub,NULL},
  {&TA_void,NULL,"Iconify"," iconify the window (saves iconified state)","MENU ","",
    0,0,-1,0,NULL,cssElCFun_WinBase_Iconify_stub,NULL},
  {&TA_void,NULL,"DeIconify"," deiconify the window (saves deiconified state)","","",
    0,0,-1,0,NULL,cssElCFun_WinBase_DeIconify_stub,NULL},
  {&TA_bool,NULL,"IsMapped"," return the 'mapped' status of the window","","",
    0,0,-1,0,NULL,cssElCFun_WinBase_IsMapped_stub,NULL},
  {&TA_void,NULL,"ViewWindow"," either de-iconfiy or create a new view to view this object, and then locate/size it","","",
    0,4,0,0,NULL,cssElCFun_WinBase_ViewWindow_stub,TA_WinBase_ViewWindow_MethArgs},
  {&TA_taString,NULL,"GetPrintFileExt"," get string of file extension for given fmt","","",
    0,1,-1,0,NULL,cssElCFun_WinBase_GetPrintFileExt_stub,TA_WinBase_GetPrintFileExt_MethArgs},
  {&TA_void,NULL,"ReSize","","","",
    0,2,0,0,NULL,cssElCFun_WinBase_ReSize_stub,TA_WinBase_ReSize_MethArgs},
  {&TA_void,NULL,"Place","","","",
    0,2,0,0,NULL,cssElCFun_WinBase_Place_stub,TA_WinBase_Place_MethArgs},
  {&TA_void,NULL,"Move","","","",
    0,2,0,0,NULL,cssElCFun_WinBase_Move_stub,TA_WinBase_Move_MethArgs},
  {&TA_void,NULL,"Raise"," raise window to front","","",
    0,0,-1,0,NULL,cssElCFun_WinBase_Raise_stub,NULL},
  {&TA_void,NULL,"Lower"," lower window to back","","",
    0,0,-1,0,NULL,cssElCFun_WinBase_Lower_stub,NULL},
  NULL};
static int WinView::* TA_WinView_MbrOff;
static MemberDef_data TA_WinView_MemberDef[]={
  {&TA_taBase_Group,NULL,"updaters"," list of objects which update view","HIDDEN LINK_GROUP ","",
    *((ta_memb_ptr*)&(TA_WinView_MbrOff=(int WinView::*)(&WinView::updaters))),0,NULL,0},
  {&TA_int,NULL,"n_mgr_menus"," number of 'this' menus for the manager","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_WinView_MbrOff=(int WinView::*)(&WinView::n_mgr_menus))),0,NULL,0},
  {&TA_WinMgr_ptr,NULL,"mgr"," the manager for this window","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_WinView_MbrOff=(int WinView::*)(&WinView::mgr))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"updater_type"," Type of updater to use for this view","HIDDEN TYPE_taNBase ","",
    *((ta_memb_ptr*)&(TA_WinView_MbrOff=(int WinView::*)(&WinView::updater_type))),0,NULL,0},
  {&TA_bool,NULL,"display_toggle"," whether the display is being updated","","",
    *((ta_memb_ptr*)&(TA_WinView_MbrOff=(int WinView::*)(&WinView::display_toggle))),0,NULL,0},
  {&TA_AnimImgCapture,NULL,"anim"," capture images for making animations","","",
    *((ta_memb_ptr*)&(TA_WinView_MbrOff=(int WinView::*)(&WinView::anim))),0,NULL,0},
  NULL};
static MethodArgs_data TA_WinView_AddUpdater_MethArgs[]={
  {&TA_TAPtr,NULL,"updtr",""},
  NULL};
static MethodArgs_data TA_WinView_RemoveUpdater_MethArgs[]={
  {&TA_TAPtr,NULL,"updtr",""},
  NULL};
static MethodArgs_data TA_WinView_UpdateDisplay_MethArgs[]={
  {&TA_TAPtr,NULL,"na","0"},
  NULL};
static MethodArgs_data TA_WinView_StartAnimCapture_MethArgs[]={
  {NULL,"WinBase::PrintFmt","image_fmt"," JPEG"},
  {&TA_int,NULL,"image_ctr","0"},
  {&TA_const_char_ptr,NULL,"sub_dir"," anim"},
  NULL};
static MethodDef_data TA_WinView_MethodDef[]={
  {&TA_void,NULL,"AddUpdater"," Add object as an updater of this view","MENU MENU_SEP_BEFORE TYPE_ON_updater_type ","",
    0,1,-1,0,NULL,cssElCFun_WinView_AddUpdater_stub,TA_WinView_AddUpdater_MethArgs},
  {&TA_void,NULL,"NotifyAllUpdaters"," notify all updaters that they are updating us","","",
    0,0,-1,0,NULL,cssElCFun_WinView_NotifyAllUpdaters_stub,NULL},
  {&TA_void,NULL,"RemoveUpdater"," Remove object from those updating this view","MENU FROM_GROUP_updaters ","",
    0,1,-1,0,NULL,cssElCFun_WinView_RemoveUpdater_stub,TA_WinView_RemoveUpdater_MethArgs},
  {&TA_void,NULL,"RemoveAllUpdaters"," remove all updaters of this view","","",
    0,0,-1,0,NULL,cssElCFun_WinView_RemoveAllUpdaters_stub,NULL},
  {&TA_void,NULL,"InitDisplay"," re-initialize the display","MENU ","",
    0,0,-1,0,NULL,cssElCFun_WinView_InitDisplay_stub,NULL},
  {&TA_void,NULL,"UpdateDisplay"," update the display to reflect changes","MENU ARGC_0 ","",
    0,1,0,0,NULL,cssElCFun_WinView_UpdateDisplay_stub,TA_WinView_UpdateDisplay_MethArgs},
  {&TA_void,NULL,"CaptureAnimImg"," capture an image for animations: call this in Updatedisplay if desired","","",
    0,0,-1,0,NULL,cssElCFun_WinView_CaptureAnimImg_stub,NULL},
  {&TA_void,NULL,"StartAnimCapture"," start automatic capturing of window updates to files of given type saved in subdirectory sub_dir with incrementing counter starting at image_ctr, for use in creating an animation","MENU MENU_ON_Actions CONFIRM ","",
    0,3,0,0,NULL,cssElCFun_WinView_StartAnimCapture_stub,TA_WinView_StartAnimCapture_MethArgs},
  {&TA_void,NULL,"StopAnimCapture"," stop capturing images","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_WinView_StopAnimCapture_stub,NULL},
  NULL};
static int WinMgr::* TA_WinMgr_MbrOff;
static MemberDef_data TA_WinMgr_MemberDef[]={
  {&TA_WinView_MGroup,NULL,"views"," views of this object","","",
    *((ta_memb_ptr*)&(TA_WinMgr_MbrOff=(int WinMgr::*)(&WinMgr::views))),0,NULL,0},
  NULL};
static MethodDef_data TA_WinMgr_MethodDef[]={
  {&TA_void,NULL,"CloseAllWindows"," close all windows","","",
    0,0,-1,0,NULL,cssElCFun_WinMgr_CloseAllWindows_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," call this when something big happens","","",
    0,0,-1,0,NULL,cssElCFun_WinMgr_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"InitAllViews"," call this when something biger happens","","",
    0,0,-1,0,NULL,cssElCFun_WinMgr_InitAllViews_stub,NULL},
  NULL};
static MemberDef_data TA_winbMisc_MemberDef[]={
  {&TA_taBase_List,NULL,"update_menus"," winbase/menugroups that need menus updated in waitproc","HIDDEN ","",
    (ta_memb_ptr)NULL,1,(void*)(&winbMisc::update_menus),0},
  {&TA_taBase_List,NULL,"update_winpos"," winbase's that need positions updated in waitproc","HIDDEN ","",
    (ta_memb_ptr)NULL,1,(void*)(&winbMisc::update_winpos),0},
  {&TA_taBase_List,NULL,"unopened_windows"," unopened windows waiting to be opened","HIDDEN ","",
    (ta_memb_ptr)NULL,1,(void*)(&winbMisc::unopened_windows),0},
  NULL};
static MethodArgs_data TA_winbMisc_DamageCanvas_MethArgs[]={
  {&TA_ivCanvas_ptr,NULL,"can",""},
  NULL};
static MethodArgs_data TA_winbMisc_DamageWindow_MethArgs[]={
  {&TA_ivWindow_ptr,NULL,"win",""},
  NULL};
static MethodArgs_data TA_winbMisc_MenuUpdate_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodArgs_data TA_winbMisc_DelayedMenuUpdate_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodArgs_data TA_winbMisc_ScriptIconify_MethArgs[]={
  {&TA_void_ptr,NULL,"obj",""},
  {&TA_int,NULL,"onoff",""},
  NULL};
static MethodArgs_data TA_winbMisc_SetIconify_MethArgs[]={
  {&TA_void_ptr,NULL,"obj",""},
  {&TA_int,NULL,"onoff",""},
  NULL};
static MethodDef_data TA_winbMisc_MethodDef[]={
  {&TA_void,NULL,"OpenWindows"," open all unopened windows","","",
    0,0,-1,1,(ta_void_fun)(winbMisc::OpenWindows),cssElCFun_winbMisc_OpenWindows_stub,NULL},
  {&TA_void,NULL,"DamageCanvas","","","",
    0,1,-1,1,(ta_void_fun)(winbMisc::DamageCanvas),cssElCFun_winbMisc_DamageCanvas_stub,TA_winbMisc_DamageCanvas_MethArgs},
  {&TA_void,NULL,"DamageWindow","","","",
    0,1,-1,1,(ta_void_fun)(winbMisc::DamageWindow),cssElCFun_winbMisc_DamageWindow_stub,TA_winbMisc_DamageWindow_MethArgs},
  {&TA_int,NULL,"WaitProc"," waiting process function","","",
    0,0,-1,1,(ta_void_fun)(winbMisc::WaitProc),cssElCFun_winbMisc_WaitProc_stub,NULL},
  {&TA_void,NULL,"Wait_UpdateMenus"," update menus in waitproc","","",
    0,0,-1,1,(ta_void_fun)(winbMisc::Wait_UpdateMenus),cssElCFun_winbMisc_Wait_UpdateMenus_stub,NULL},
  {&TA_void,NULL,"Wait_UpdateWinPos"," update window position in waitproc","","",
    0,0,-1,1,(ta_void_fun)(winbMisc::Wait_UpdateWinPos),cssElCFun_winbMisc_Wait_UpdateWinPos_stub,NULL},
  {&TA_void,NULL,"MenuUpdate"," update menus relevant to the given object, which might have changed","","",
    0,1,-1,1,(ta_void_fun)(winbMisc::MenuUpdate),cssElCFun_winbMisc_MenuUpdate_stub,TA_winbMisc_MenuUpdate_MethArgs},
  {&TA_void,NULL,"DelayedMenuUpdate"," add object to list to be updated later (by Wait_UpdateMenus)","","",
    0,1,-1,1,(ta_void_fun)(winbMisc::DelayedMenuUpdate),cssElCFun_winbMisc_DelayedMenuUpdate_stub,TA_winbMisc_DelayedMenuUpdate_MethArgs},
  {&TA_void,NULL,"ScriptIconify"," record iconify command for obj to script","","",
    0,2,-1,1,(ta_void_fun)(winbMisc::ScriptIconify),cssElCFun_winbMisc_ScriptIconify_stub,TA_winbMisc_ScriptIconify_MethArgs},
  {&TA_int,NULL,"SetIconify"," set iconified field of winbase obj to onoff","","",
    0,2,-1,1,(ta_void_fun)(winbMisc::SetIconify),cssElCFun_winbMisc_SetIconify_stub,TA_winbMisc_SetIconify_MethArgs},
  NULL};
static int AnimImgCapture::* TA_AnimImgCapture_MbrOff;
static MemberDef_data TA_AnimImgCapture_MemberDef[]={
  {&TA_bool,NULL,"capture"," capture images of the display every time it is updated","","",
    *((ta_memb_ptr*)&(TA_AnimImgCapture_MbrOff=(int AnimImgCapture::*)(&AnimImgCapture::capture))),0,NULL,0},
  {NULL,"WinBase::PrintFmt","img_fmt"," format to save images for animation capture","","",
    *((ta_memb_ptr*)&(TA_AnimImgCapture_MbrOff=(int AnimImgCapture::*)(&AnimImgCapture::img_fmt))),0,NULL,0},
  {&TA_int,NULL,"ctr"," counter for identifying animation image capture","","",
    *((ta_memb_ptr*)&(TA_AnimImgCapture_MbrOff=(int AnimImgCapture::*)(&AnimImgCapture::ctr))),0,NULL,0},
  {&TA_taString,NULL,"subdir"," subdirectory to store images in","","",
    *((ta_memb_ptr*)&(TA_AnimImgCapture_MbrOff=(int AnimImgCapture::*)(&AnimImgCapture::subdir))),0,NULL,0},
  NULL};
static int MinMax::* TA_MinMax_MbrOff;
static MemberDef_data TA_MinMax_MemberDef[]={
  {&TA_float,NULL,"min"," minimum value","","",
    *((ta_memb_ptr*)&(TA_MinMax_MbrOff=(int MinMax::*)(&MinMax::min))),0,NULL,0},
  {&TA_float,NULL,"max"," maximum value","","",
    *((ta_memb_ptr*)&(TA_MinMax_MbrOff=(int MinMax::*)(&MinMax::max))),0,NULL,0},
  NULL};
static MethodArgs_data TA_MinMax_RangeTest_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_MinMax_RangeTestEq_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_MinMax_Init_MethArgs[]={
  {&TA_float,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMax_Set_MethArgs[]={
  {&TA_float,NULL,"mn",""},
  {&TA_float,NULL,"mx",""},
  NULL};
static MethodArgs_data TA_MinMax_UpdateRange_MethArgs[]={
  {&TA_float,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMax_MaxLT_MethArgs[]={
  {&TA_float,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMax_MinGT_MethArgs[]={
  {&TA_float,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMax_WithinRange_MethArgs[]={
  {&TA_MinMax_ref,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMax_Normalize_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_MinMax_Project_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_MinMax_Clip_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodDef_data TA_MinMax_MethodDef[]={
  {&TA_bool,NULL,"RangeTest"," test whether value is within the range (but not equal to max or min)","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_RangeTest_stub,TA_MinMax_RangeTest_MethArgs},
  {&TA_bool,NULL,"RangeTestEq"," test whether value is within the range (or equal)","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_RangeTestEq_stub,TA_MinMax_RangeTestEq_MethArgs},
  {&TA_void,NULL,"Init"," initializes the max and min to this value","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_Init_stub,TA_MinMax_Init_MethArgs},
  {&TA_void,NULL,"Set"," set values","","",
    0,2,-1,0,NULL,cssElCFun_MinMax_Set_stub,TA_MinMax_Set_MethArgs},
  {&TA_float,NULL,"Range","","","",
    0,0,-1,0,NULL,cssElCFun_MinMax_Range_stub,NULL},
  {&TA_float,NULL,"Scale"," scale is the inverse of range","","",
    0,0,-1,0,NULL,cssElCFun_MinMax_Scale_stub,NULL},
  {&TA_float,NULL,"MidPoint"," returns the range between the min and the max","","",
    0,0,-1,0,NULL,cssElCFun_MinMax_MidPoint_stub,NULL},
  {&TA_void,NULL,"UpdateRange"," updates the range","","",
    1,1,-1,0,NULL,cssElCFun_MinMax_UpdateRange_stub,TA_MinMax_UpdateRange_MethArgs},
  {&TA_void,NULL,"MaxLT"," max less than (or equal)","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_MaxLT_stub,TA_MinMax_MaxLT_MethArgs},
  {&TA_void,NULL,"MinGT"," min greater than (or equal)","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_MinGT_stub,TA_MinMax_MinGT_MethArgs},
  {&TA_void,NULL,"WithinRange"," put my range within given one","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_WithinRange_stub,TA_MinMax_WithinRange_MethArgs},
  {&TA_float,NULL,"Normalize"," normalize given value to 0-1 range given current in max","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_Normalize_stub,TA_MinMax_Normalize_MethArgs},
  {&TA_float,NULL,"Project"," project a normalized value into the current min-max range","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_Project_stub,TA_MinMax_Project_MethArgs},
  {&TA_float,NULL,"Clip"," clip given value within current range","","",
    0,1,-1,0,NULL,cssElCFun_MinMax_Clip_stub,TA_MinMax_Clip_MethArgs},
  NULL};
static int MinMaxRange::* TA_MinMaxRange_MbrOff;
static MemberDef_data TA_MinMaxRange_MemberDef[]={
  {&TA_float,NULL,"range"," distance between min and max","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_MinMaxRange_MbrOff=(int MinMaxRange::*)(&MinMaxRange::range))),0,NULL,0},
  {&TA_float,NULL,"scale"," scale (1.0 / range)","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_MinMaxRange_MbrOff=(int MinMaxRange::*)(&MinMaxRange::scale))),0,NULL,0},
  NULL};
static int FixedMinMax::* TA_FixedMinMax_MbrOff;
static MemberDef_data TA_FixedMinMax_MemberDef[]={
  {&TA_bool,NULL,"fix_min"," use fixed minimum value?","","",
    *((ta_memb_ptr*)&(TA_FixedMinMax_MbrOff=(int FixedMinMax::*)(&FixedMinMax::fix_min))),0,NULL,0},
  {&TA_float,NULL,"min"," minimum value","","",
    *((ta_memb_ptr*)&(TA_FixedMinMax_MbrOff=(int FixedMinMax::*)(&FixedMinMax::min))),0,NULL,0},
  {&TA_bool,NULL,"fix_max"," use fixed maximum value?","","",
    *((ta_memb_ptr*)&(TA_FixedMinMax_MbrOff=(int FixedMinMax::*)(&FixedMinMax::fix_max))),0,NULL,0},
  {&TA_float,NULL,"max"," maximum value","","",
    *((ta_memb_ptr*)&(TA_FixedMinMax_MbrOff=(int FixedMinMax::*)(&FixedMinMax::max))),0,NULL,0},
  NULL};
static MethodArgs_data TA_FixedMinMax_Init_MethArgs[]={
  {&TA_float,NULL,"it",""},
  NULL};
static MethodArgs_data TA_FixedMinMax_InitFix_MethArgs[]={
  {&TA_bool,NULL,"fx"," false"},
  NULL};
static MethodArgs_data TA_FixedMinMax_Set_MethArgs[]={
  {&TA_float,NULL,"mn",""},
  {&TA_float,NULL,"mx",""},
  NULL};
static MethodArgs_data TA_FixedMinMax_SetMin_MethArgs[]={
  {&TA_float,NULL,"mn",""},
  NULL};
static MethodArgs_data TA_FixedMinMax_SetMax_MethArgs[]={
  {&TA_float,NULL,"mx",""},
  NULL};
static MethodArgs_data TA_FixedMinMax_FixRange_MethArgs[]={
  {&TA_MinMax_ref,NULL,"mm",""},
  NULL};
static MethodDef_data TA_FixedMinMax_MethodDef[]={
  {&TA_void,NULL,"Init"," initializes the max and min to this value","","",
    0,1,-1,0,NULL,cssElCFun_FixedMinMax_Init_stub,TA_FixedMinMax_Init_MethArgs},
  {&TA_void,NULL,"InitFix","","","",
    0,1,0,0,NULL,cssElCFun_FixedMinMax_InitFix_stub,TA_FixedMinMax_InitFix_MethArgs},
  {&TA_void,NULL,"Set","","","",
    0,2,-1,0,NULL,cssElCFun_FixedMinMax_Set_stub,TA_FixedMinMax_Set_MethArgs},
  {&TA_void,NULL,"SetMin","","","",
    0,1,-1,0,NULL,cssElCFun_FixedMinMax_SetMin_stub,TA_FixedMinMax_SetMin_MethArgs},
  {&TA_void,NULL,"SetMax","","","",
    0,1,-1,0,NULL,cssElCFun_FixedMinMax_SetMax_stub,TA_FixedMinMax_SetMax_MethArgs},
  {&TA_void,NULL,"FixRange","","","",
    0,1,-1,0,NULL,cssElCFun_FixedMinMax_FixRange_stub,TA_FixedMinMax_FixRange_MethArgs},
  NULL};
static int Modulo::* TA_Modulo_MbrOff;
static MemberDef_data TA_Modulo_MemberDef[]={
  {&TA_bool,NULL,"flag"," Modulo is active?","","",
    *((ta_memb_ptr*)&(TA_Modulo_MbrOff=(int Modulo::*)(&Modulo::flag))),0,NULL,0},
  {&TA_int,NULL,"m"," Modulo N mod m, where N is counter","","",
    *((ta_memb_ptr*)&(TA_Modulo_MbrOff=(int Modulo::*)(&Modulo::m))),0,NULL,0},
  {&TA_int,NULL,"off"," Modulo Offset (actually (N - off) mod m","","",
    *((ta_memb_ptr*)&(TA_Modulo_MbrOff=(int Modulo::*)(&Modulo::off))),0,NULL,0},
  NULL};
static int MinMaxInt::* TA_MinMaxInt_MbrOff;
static MemberDef_data TA_MinMaxInt_MemberDef[]={
  {&TA_int,NULL,"min"," minimum value","","",
    *((ta_memb_ptr*)&(TA_MinMaxInt_MbrOff=(int MinMaxInt::*)(&MinMaxInt::min))),0,NULL,0},
  {&TA_int,NULL,"max"," maximum value","","",
    *((ta_memb_ptr*)&(TA_MinMaxInt_MbrOff=(int MinMaxInt::*)(&MinMaxInt::max))),0,NULL,0},
  NULL};
static MethodArgs_data TA_MinMaxInt_RangeTest_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_RangeTestEq_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_Init_MethArgs[]={
  {&TA_int,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_UpdateRange_MethArgs[]={
  {&TA_int,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_MaxLT_MethArgs[]={
  {&TA_int,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_MinGT_MethArgs[]={
  {&TA_int,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_WithinRange_MethArgs[]={
  {&TA_MinMaxInt_ref,NULL,"it",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_Normalize_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_Project_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_MinMaxInt_Clip_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodDef_data TA_MinMaxInt_MethodDef[]={
  {&TA_bool,NULL,"RangeTest"," test whether value is within the range (but not equal to max or min)","","",
    0,1,-1,0,NULL,cssElCFun_MinMaxInt_RangeTest_stub,TA_MinMaxInt_RangeTest_MethArgs},
  {&TA_bool,NULL,"RangeTestEq"," test whether value is within the range (or equal)","","",
    0,1,-1,0,NULL,cssElCFun_MinMaxInt_RangeTestEq_stub,TA_MinMaxInt_RangeTestEq_MethArgs},
  {&TA_void,NULL,"Init"," initializes the max and min to this value","","",
    0,1,-1,0,NULL,cssElCFun_MinMaxInt_Init_stub,TA_MinMaxInt_Init_MethArgs},
  {&TA_int,NULL,"Range","","","",
    0,0,-1,0,NULL,cssElCFun_MinMaxInt_Range_stub,NULL},
  {&TA_float,NULL,"Scale"," scale is the inverse of range","","",
    0,0,-1,0,NULL,cssElCFun_MinMaxInt_Scale_stub,NULL},
  {&TA_int,NULL,"MidPoint"," returns the range between the min and the max","","",
    0,0,-1,0,NULL,cssElCFun_MinMaxInt_MidPoint_stub,NULL},
  {&TA_void,NULL,"UpdateRange"," updates the range","","",
    1,1,-1,0,NULL,cssElCFun_MinMaxInt_UpdateRange_stub,TA_MinMaxInt_UpdateRange_MethArgs},
  {&TA_void,NULL,"MaxLT"," max less than (or equal)","","",
    0,1,-1,0,NULL,cssElCFun_MinMaxInt_MaxLT_stub,TA_MinMaxInt_MaxLT_MethArgs},
  {&TA_void,NULL,"MinGT"," min greater than (or equal)","","",
    0,1,-1,0,NULL,cssElCFun_MinMaxInt_MinGT_stub,TA_MinMaxInt_MinGT_MethArgs},
  {&TA_void,NULL,"WithinRange"," put my range within given one","","",
    0,1,-1,0,NULL,cssElCFun_MinMaxInt_WithinRange_stub,TA_MinMaxInt_WithinRange_MethArgs},
  {&TA_float,NULL,"Normalize"," normalize given value to 0-1 range given current in max","","",
    0,1,-1,0,NULL,cssElCFun_MinMaxInt_Normalize_stub,TA_MinMaxInt_Normalize_MethArgs},
  {&TA_int,NULL,"Project"," project a normalized value into the current min-max range","","",
    0,1,-1,0,NULL,cssElCFun_MinMaxInt_Project_stub,TA_MinMaxInt_Project_MethArgs},
  {&TA_int,NULL,"Clip"," clip given value within current range","","",
    0,1,-1,0,NULL,cssElCFun_MinMaxInt_Clip_stub,TA_MinMaxInt_Clip_MethArgs},
  NULL};
static int RndSeed::* TA_RndSeed_MbrOff;
static MemberDef_data TA_RndSeed_MemberDef[]={
  {&TA_long_Array,NULL,"seed"," the seed, 624 elements long","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_RndSeed_MbrOff=(int RndSeed::*)(&RndSeed::seed))),0,NULL,0},
  {&TA_int,NULL,"mti"," the index into the seed, also needs to be saved","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_RndSeed_MbrOff=(int RndSeed::*)(&RndSeed::mti))),0,NULL,0},
  NULL};
static MethodArgs_data TA_RndSeed_Init_MethArgs[]={
  {&TA_ulong,NULL,"i",""},
  NULL};
static MethodDef_data TA_RndSeed_MethodDef[]={
  {&TA_void,NULL,"NewSeed"," set the seed to a new random value (based on time and process id)","","",
    0,0,-1,0,NULL,cssElCFun_RndSeed_NewSeed_stub,NULL},
  {&TA_void,NULL,"OldSeed"," restore current seed to random num generator","","",
    0,0,-1,0,NULL,cssElCFun_RndSeed_OldSeed_stub,NULL},
  {&TA_void,NULL,"GetCurrent"," get the current seed in use by the generator","","",
    0,0,-1,0,NULL,cssElCFun_RndSeed_GetCurrent_stub,NULL},
  {&TA_void,NULL,"Init"," initialize the seed based on given initializer","","",
    0,1,-1,0,NULL,cssElCFun_RndSeed_Init_stub,TA_RndSeed_Init_MethArgs},
  NULL};
static EnumDef_data TA_Random_Type[]={
  {"UNIFORM"," uniform with var = half-range","",0},
  {"BINOMIAL"," binomial with var = p, par = n","",1},
  {"POISSON"," poisson with lambda = var","",2},
  {"GAMMA"," gamma with var and par = stages","",3},
  {"GAUSSIAN"," normal with var","",4},
  {"NONE"," just the mean","",5},
  NULL};
static int Random::* TA_Random_MbrOff;
static MemberDef_data TA_Random_MemberDef[]={
  {NULL,"::Type","type"," type of random variable to generate","","",
    *((ta_memb_ptr*)&(TA_Random_MbrOff=(int Random::*)(&Random::type))),0,NULL,0},
  {&TA_float,NULL,"mean"," mean of random distribution","","",
    *((ta_memb_ptr*)&(TA_Random_MbrOff=(int Random::*)(&Random::mean))),0,NULL,0},
  {&TA_float,NULL,"var"," 'varibility' parameter for the random numbers (gauss = SD, not variance; uniform = half-range)","CONDEDIT_OFF_type:NONE ","",
    *((ta_memb_ptr*)&(TA_Random_MbrOff=(int Random::*)(&Random::var))),0,NULL,0},
  {&TA_float,NULL,"par"," extra parameter for distribution (depends on each one)","CONDEDIT_ON_type:GAMMA,BINOMIAL ","",
    *((ta_memb_ptr*)&(TA_Random_MbrOff=(int Random::*)(&Random::par))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Random_IntZeroN_MethArgs[]={
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_Random_Range_MethArgs[]={
  {&TA_float,NULL,"rng",""},
  NULL};
static MethodArgs_data TA_Random_Uniform_MethArgs[]={
  {&TA_float,NULL,"half_rng",""},
  NULL};
static MethodArgs_data TA_Random_Binom_MethArgs[]={
  {&TA_int,NULL,"n",""},
  {&TA_float,NULL,"p",""},
  NULL};
static MethodArgs_data TA_Random_Poisson_MethArgs[]={
  {&TA_float,NULL,"l",""},
  NULL};
static MethodArgs_data TA_Random_Gamma_MethArgs[]={
  {&TA_float,NULL,"var",""},
  {&TA_int,NULL,"j",""},
  NULL};
static MethodArgs_data TA_Random_Gauss_MethArgs[]={
  {&TA_float,NULL,"var",""},
  NULL};
static MethodArgs_data TA_Random_UniformDen_MethArgs[]={
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"half_rng",""},
  NULL};
static MethodArgs_data TA_Random_BinomDen_MethArgs[]={
  {&TA_int,NULL,"n",""},
  {&TA_int,NULL,"j",""},
  {&TA_float,NULL,"p",""},
  NULL};
static MethodArgs_data TA_Random_PoissonDen_MethArgs[]={
  {&TA_int,NULL,"j",""},
  {&TA_float,NULL,"l",""},
  NULL};
static MethodArgs_data TA_Random_GammaDen_MethArgs[]={
  {&TA_int,NULL,"j",""},
  {&TA_float,NULL,"l",""},
  {&TA_float,NULL,"t",""},
  NULL};
static MethodArgs_data TA_Random_GaussDen_MethArgs[]={
  {&TA_float,NULL,"x",""},
  {&TA_float,NULL,"var",""},
  NULL};
static MethodArgs_data TA_Random_Density_MethArgs[]={
  {&TA_float,NULL,"x",""},
  NULL};
static MethodDef_data TA_Random_MethodDef[]={
  {&TA_int,NULL,"IntZeroN"," uniform random integer in the range between 0 and n, exclusive of n: [0,n)","","",
    0,1,-1,1,(ta_void_fun)(Random::IntZeroN),cssElCFun_Random_IntZeroN_stub,TA_Random_IntZeroN_MethArgs},
  {&TA_float,NULL,"ZeroOne"," uniform random number between zero and one (inclusive of 1 due to rounding!)","","",
    0,0,-1,1,(ta_void_fun)(Random::ZeroOne),cssElCFun_Random_ZeroOne_stub,NULL},
  {&TA_float,NULL,"Range"," uniform random number with given range centered at 0","","",
    0,1,-1,1,(ta_void_fun)(Random::Range),cssElCFun_Random_Range_stub,TA_Random_Range_MethArgs},
  {&TA_float,NULL,"Uniform"," uniform random number with given half_range (var) centered at 0","","",
    0,1,-1,1,(ta_void_fun)(Random::Uniform),cssElCFun_Random_Uniform_stub,TA_Random_Uniform_MethArgs},
  {&TA_float,NULL,"Binom"," binomial with n trials (par) each of probability p (var)","","",
    0,2,-1,1,(ta_void_fun)(Random::Binom),cssElCFun_Random_Binom_stub,TA_Random_Binom_MethArgs},
  {&TA_float,NULL,"Poisson"," poisson with parameter l (var)","","",
    0,1,-1,1,(ta_void_fun)(Random::Poisson),cssElCFun_Random_Poisson_stub,TA_Random_Poisson_MethArgs},
  {&TA_float,NULL,"Gamma"," gamma with given variance, number of exponential stages (par)","","",
    0,2,-1,1,(ta_void_fun)(Random::Gamma),cssElCFun_Random_Gamma_stub,TA_Random_Gamma_MethArgs},
  {&TA_float,NULL,"Gauss"," gaussian (normal) random number with given variance","","",
    0,1,-1,1,(ta_void_fun)(Random::Gauss),cssElCFun_Random_Gauss_stub,TA_Random_Gauss_MethArgs},
  {&TA_float,NULL,"UniformDen"," uniform density at x with given half_range (var) centered at 0 (subtr mean)","","",
    0,2,-1,1,(ta_void_fun)(Random::UniformDen),cssElCFun_Random_UniformDen_stub,TA_Random_UniformDen_MethArgs},
  {&TA_float,NULL,"BinomDen"," binomial density at j with n trials (par) each of probability p (var)","","",
    0,3,-1,1,(ta_void_fun)(Random::BinomDen),cssElCFun_Random_BinomDen_stub,TA_Random_BinomDen_MethArgs},
  {&TA_float,NULL,"PoissonDen"," poisson density with parameter l (var)","","",
    0,2,-1,1,(ta_void_fun)(Random::PoissonDen),cssElCFun_Random_PoissonDen_stub,TA_Random_PoissonDen_MethArgs},
  {&TA_float,NULL,"GammaDen"," gamma density at time t with given number of stages (par), lambda (var)","","",
    0,3,-1,1,(ta_void_fun)(Random::GammaDen),cssElCFun_Random_GammaDen_stub,TA_Random_GammaDen_MethArgs},
  {&TA_float,NULL,"GaussDen"," gaussian (normal) density for given variance (0 mean)","","",
    0,2,-1,1,(ta_void_fun)(Random::GaussDen),cssElCFun_Random_GaussDen_stub,TA_Random_GaussDen_MethArgs},
  {&TA_float,NULL,"Gen"," generate a random variable according to current parameters","","",
    0,0,-1,0,NULL,cssElCFun_Random_Gen_stub,NULL},
  {&TA_float,NULL,"Density"," get density of random variable according to current params","","",
    0,1,-1,0,NULL,cssElCFun_Random_Density_stub,TA_Random_Density_MethArgs},
  NULL};
static int TimeUsed::* TA_TimeUsed_MbrOff;
static MemberDef_data TA_TimeUsed_MemberDef[]={
  {&TA_bool,NULL,"rec"," flag that determines whether to record timing information: OFF by default","","",
    *((ta_memb_ptr*)&(TA_TimeUsed_MbrOff=(int TimeUsed::*)(&TimeUsed::rec))),0,NULL,0},
  {&TA_long,NULL,"usr"," user clock ticks used","","",
    *((ta_memb_ptr*)&(TA_TimeUsed_MbrOff=(int TimeUsed::*)(&TimeUsed::usr))),0,NULL,0},
  {&TA_long,NULL,"sys"," system clock ticks used","","",
    *((ta_memb_ptr*)&(TA_TimeUsed_MbrOff=(int TimeUsed::*)(&TimeUsed::sys))),0,NULL,0},
  {&TA_long,NULL,"tot"," total time ticks used (all clock ticks on the CPU)","","",
    *((ta_memb_ptr*)&(TA_TimeUsed_MbrOff=(int TimeUsed::*)(&TimeUsed::tot))),0,NULL,0},
  {&TA_long,NULL,"n"," number of times time used collected using GetUsed","","",
    *((ta_memb_ptr*)&(TA_TimeUsed_MbrOff=(int TimeUsed::*)(&TimeUsed::n))),0,NULL,0},
  NULL};
static MethodArgs_data TA_TimeUsed_GetUsed_MethArgs[]={
  {&TA_const_TimeUsed_ref,NULL,"start",""},
  NULL};
static MethodDef_data TA_TimeUsed_MethodDef[]={
  {&TA_void,NULL,"InitTimes"," initialize the times","","",
    0,0,-1,0,NULL,cssElCFun_TimeUsed_InitTimes_stub,NULL},
  {&TA_void,NULL,"GetTimes"," get the clock ticks used to this point","","",
    0,0,-1,0,NULL,cssElCFun_TimeUsed_GetTimes_stub,NULL},
  {&TA_void,NULL,"GetUsed"," get amount of time used by subtracting start from current time and adding to me, and incrementing n","","",
    0,1,-1,0,NULL,cssElCFun_TimeUsed_GetUsed_stub,TA_TimeUsed_GetUsed_MethArgs},
  {&TA_taString,NULL,"GetString"," get string output as seconds and fractions of seconds","","",
    0,0,-1,0,NULL,cssElCFun_TimeUsed_GetString_stub,NULL},
  NULL};
static int TwoDCoord::* TA_TwoDCoord_MbrOff;
static MemberDef_data TA_TwoDCoord_MemberDef[]={
  {&TA_int,NULL,"x"," horizontal","","",
    *((ta_memb_ptr*)&(TA_TwoDCoord_MbrOff=(int TwoDCoord::*)(&TwoDCoord::x))),0,NULL,0},
  {&TA_int,NULL,"y"," vertical","","",
    *((ta_memb_ptr*)&(TA_TwoDCoord_MbrOff=(int TwoDCoord::*)(&TwoDCoord::y))),0,NULL,0},
  NULL};
static MethodArgs_data TA_TwoDCoord_SetXY_MethArgs[]={
  {&TA_float,NULL,"xx",""},
  {&TA_float,NULL,"yy",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_GetXY_MethArgs[]={
  {&TA_float_ref,NULL,"xx",""},
  {&TA_float_ref,NULL,"yy",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_OrEq_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_SqDist_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_Dist_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_Sgn_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_Absv_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_Min_MethArgs[]={
  {&TA_TwoDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_Max_MethArgs[]={
  {&TA_TwoDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_FitN_MethArgs[]={
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_SetGtEq_MethArgs[]={
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_SetLtEq_MethArgs[]={
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_WrapClipOne_MethArgs[]={
  {&TA_bool,NULL,"wrap",""},
  {&TA_int_ref,NULL,"c",""},
  {&TA_int,NULL,"max",""},
  NULL};
static MethodArgs_data TA_TwoDCoord_WrapClip_MethArgs[]={
  {&TA_bool,NULL,"wrap",""},
  {&TA_const_TwoDCoord_ref,NULL,"max",""},
  NULL};
static MethodDef_data TA_TwoDCoord_MethodDef[]={
  {&TA_void,NULL,"SetXY","","","",
    1,2,-1,0,NULL,cssElCFun_TwoDCoord_SetXY_stub,TA_TwoDCoord_SetXY_MethArgs},
  {&TA_void,NULL,"GetXY","","","",
    0,2,-1,0,NULL,cssElCFun_TwoDCoord_GetXY_stub,TA_TwoDCoord_GetXY_MethArgs},
  {&TA_bool,NULL,"OrEq","","","",
    1,1,-1,0,NULL,cssElCFun_TwoDCoord_OrEq_stub,TA_TwoDCoord_OrEq_MethArgs},
  {&TA_int,NULL,"SqMag"," squared magnitude of vector","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_SqMag_stub,NULL},
  {&TA_float,NULL,"Mag","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_Mag_stub,NULL},
  {&TA_float,NULL,"SqDist","","","",
    0,1,-1,0,NULL,cssElCFun_TwoDCoord_SqDist_stub,TA_TwoDCoord_SqDist_MethArgs},
  {&TA_float,NULL,"Dist","","","",
    0,1,-1,0,NULL,cssElCFun_TwoDCoord_Dist_stub,TA_TwoDCoord_Dist_MethArgs},
  {&TA_int,NULL,"Sum","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_Sum_stub,NULL},
  {&TA_int,NULL,"Sgn","","","",
    0,1,-1,1,(ta_void_fun)(TwoDCoord::Sgn),cssElCFun_TwoDCoord_Sgn_stub,TA_TwoDCoord_Sgn_MethArgs},
  {&TA_int,NULL,"Absv","","","",
    0,1,-1,1,(ta_void_fun)(TwoDCoord::Absv),cssElCFun_TwoDCoord_Absv_stub,TA_TwoDCoord_Absv_MethArgs},
  {&TA_void,NULL,"Invert","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_Invert_stub,NULL},
  {&TA_void,NULL,"SumNorm","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_SumNorm_stub,NULL},
  {&TA_void,NULL,"Abs","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_Abs_stub,NULL},
  {&TA_void,NULL,"Min","","","",
    0,1,-1,0,NULL,cssElCFun_TwoDCoord_Min_stub,TA_TwoDCoord_Min_MethArgs},
  {&TA_void,NULL,"Max","","","",
    0,1,-1,0,NULL,cssElCFun_TwoDCoord_Max_stub,TA_TwoDCoord_Max_MethArgs},
  {&TA_int,NULL,"Product","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_Product_stub,NULL},
  {&TA_int,NULL,"MaxVal","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_MaxVal_stub,NULL},
  {&TA_int,NULL,"MinVal","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_MinVal_stub,NULL},
  {&TA_taString,NULL,"GetStr","","","",
    0,0,-1,0,NULL,cssElCFun_TwoDCoord_GetStr_stub,NULL},
  {&TA_bool,NULL,"FitN"," adjust x and y to fit x total elements","","",
    0,1,-1,0,NULL,cssElCFun_TwoDCoord_FitN_stub,TA_TwoDCoord_FitN_MethArgs},
  {&TA_void,NULL,"SetGtEq"," set each to be greater than or equal to n","","",
    0,1,-1,0,NULL,cssElCFun_TwoDCoord_SetGtEq_stub,TA_TwoDCoord_SetGtEq_MethArgs},
  {&TA_void,NULL,"SetLtEq"," set each to be less than or equal to n","","",
    0,1,-1,0,NULL,cssElCFun_TwoDCoord_SetLtEq_stub,TA_TwoDCoord_SetLtEq_MethArgs},
  {&TA_bool,NULL,"WrapClipOne"," wrap-around or clip one dimension, true if clipped (coord set to -1)","","",
    0,3,-1,1,(ta_void_fun)(TwoDCoord::WrapClipOne),cssElCFun_TwoDCoord_WrapClipOne_stub,TA_TwoDCoord_WrapClipOne_MethArgs},
  {&TA_bool,NULL,"WrapClip"," wrap-around or clip coordinates within 0,0 - max range, true if clipped","","",
    0,2,-1,0,NULL,cssElCFun_TwoDCoord_WrapClip_stub,TA_TwoDCoord_WrapClip_MethArgs},
  NULL};
static int TDCoord::* TA_TDCoord_MbrOff;
static MemberDef_data TA_TDCoord_MemberDef[]={
  {&TA_int,NULL,"z"," depth","","",
    *((ta_memb_ptr*)&(TA_TDCoord_MbrOff=(int TDCoord::*)(&TDCoord::z))),0,NULL,0},
  NULL};
static MethodArgs_data TA_TDCoord_OrEq_MethArgs[]={
  {&TA_const_TDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TDCoord_SqDist_MethArgs[]={
  {&TA_const_TDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TDCoord_Dist_MethArgs[]={
  {&TA_const_TDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TDCoord_Sgn_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_TDCoord_Absv_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_TDCoord_Min_MethArgs[]={
  {&TA_TDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TDCoord_Max_MethArgs[]={
  {&TA_TDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_TDCoord_WrapClip_MethArgs[]={
  {&TA_bool,NULL,"wrap",""},
  {&TA_const_TDCoord_ref,NULL,"max",""},
  NULL};
static MethodArgs_data TA_TDCoord_SetXYZ_MethArgs[]={
  {&TA_float,NULL,"xx",""},
  {&TA_float,NULL,"yy",""},
  {&TA_float,NULL,"zz",""},
  NULL};
static MethodArgs_data TA_TDCoord_GetXYZ_MethArgs[]={
  {&TA_float_ref,NULL,"xx",""},
  {&TA_float_ref,NULL,"yy",""},
  {&TA_float_ref,NULL,"zz",""},
  NULL};
static MethodArgs_data TA_TDCoord_FitNinXY_MethArgs[]={
  {&TA_int,NULL,"n",""},
  NULL};
static MethodDef_data TA_TDCoord_MethodDef[]={
  {&TA_bool,NULL,"OrEq","","","",
    3,1,-1,0,NULL,cssElCFun_TDCoord_OrEq_stub,TA_TDCoord_OrEq_MethArgs},
  {&TA_float,NULL,"SqDist","","","",
    1,1,-1,0,NULL,cssElCFun_TDCoord_SqDist_stub,TA_TDCoord_SqDist_MethArgs},
  {&TA_float,NULL,"Dist","","","",
    1,1,-1,0,NULL,cssElCFun_TDCoord_Dist_stub,TA_TDCoord_Dist_MethArgs},
  {&TA_int,NULL,"Sgn","","","",
    0,1,-1,1,(ta_void_fun)(TDCoord::Sgn),cssElCFun_TDCoord_Sgn_stub,TA_TDCoord_Sgn_MethArgs},
  {&TA_int,NULL,"Absv","","","",
    0,1,-1,1,(ta_void_fun)(TDCoord::Absv),cssElCFun_TDCoord_Absv_stub,TA_TDCoord_Absv_MethArgs},
  {&TA_void,NULL,"Min","","","",
    1,1,-1,0,NULL,cssElCFun_TDCoord_Min_stub,TA_TDCoord_Min_MethArgs},
  {&TA_void,NULL,"Max","","","",
    1,1,-1,0,NULL,cssElCFun_TDCoord_Max_stub,TA_TDCoord_Max_MethArgs},
  {&TA_bool,NULL,"WrapClip"," wrap-around or clip coordinates within 0,0 - max range, true if clipped wrap-around or clip coordinates within 0,0 - max range, -1 if clipped","","",
    1,2,-1,0,NULL,cssElCFun_TDCoord_WrapClip_stub,TA_TDCoord_WrapClip_MethArgs},
  {&TA_void,NULL,"SetXYZ","","","",
    1,3,-1,0,NULL,cssElCFun_TDCoord_SetXYZ_stub,TA_TDCoord_SetXYZ_MethArgs},
  {&TA_void,NULL,"GetXYZ","","","",
    0,3,-1,0,NULL,cssElCFun_TDCoord_GetXYZ_stub,TA_TDCoord_GetXYZ_MethArgs},
  {&TA_bool,NULL,"FitNinXY"," adjust x and y to fit x total elements","","",
    0,1,-1,0,NULL,cssElCFun_TDCoord_FitNinXY_stub,TA_TDCoord_FitNinXY_MethArgs},
  NULL};
static int FloatTwoDCoord::* TA_FloatTwoDCoord_MbrOff;
static MemberDef_data TA_FloatTwoDCoord_MemberDef[]={
  {&TA_float,NULL,"x"," horizontal","","",
    *((ta_memb_ptr*)&(TA_FloatTwoDCoord_MbrOff=(int FloatTwoDCoord::*)(&FloatTwoDCoord::x))),0,NULL,0},
  {&TA_float,NULL,"y"," vertical","","",
    *((ta_memb_ptr*)&(TA_FloatTwoDCoord_MbrOff=(int FloatTwoDCoord::*)(&FloatTwoDCoord::y))),0,NULL,0},
  NULL};
static MethodArgs_data TA_FloatTwoDCoord_SetXY_MethArgs[]={
  {&TA_float,NULL,"xx",""},
  {&TA_float,NULL,"yy",""},
  NULL};
static MethodArgs_data TA_FloatTwoDCoord_GetXY_MethArgs[]={
  {&TA_float_ref,NULL,"xx",""},
  {&TA_float_ref,NULL,"yy",""},
  NULL};
static MethodArgs_data TA_FloatTwoDCoord_SqDist_MethArgs[]={
  {&TA_const_FloatTwoDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_FloatTwoDCoord_Dist_MethArgs[]={
  {&TA_const_FloatTwoDCoord_ref,NULL,"td",""},
  NULL};
static MethodDef_data TA_FloatTwoDCoord_MethodDef[]={
  {&TA_void,NULL,"SetXY","","","",
    0,2,-1,0,NULL,cssElCFun_FloatTwoDCoord_SetXY_stub,TA_FloatTwoDCoord_SetXY_MethArgs},
  {&TA_void,NULL,"GetXY","","","",
    0,2,-1,0,NULL,cssElCFun_FloatTwoDCoord_GetXY_stub,TA_FloatTwoDCoord_GetXY_MethArgs},
  {&TA_float,NULL,"SqMag"," squared magnitude of vector","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_SqMag_stub,NULL},
  {&TA_float,NULL,"Mag","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_Mag_stub,NULL},
  {&TA_float,NULL,"SqDist","","","",
    0,1,-1,0,NULL,cssElCFun_FloatTwoDCoord_SqDist_stub,TA_FloatTwoDCoord_SqDist_MethArgs},
  {&TA_float,NULL,"Dist","","","",
    0,1,-1,0,NULL,cssElCFun_FloatTwoDCoord_Dist_stub,TA_FloatTwoDCoord_Dist_MethArgs},
  {&TA_float,NULL,"Sum","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_Sum_stub,NULL},
  {&TA_void,NULL,"Invert","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_Invert_stub,NULL},
  {&TA_void,NULL,"MagNorm","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_MagNorm_stub,NULL},
  {&TA_void,NULL,"SumNorm","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_SumNorm_stub,NULL},
  {&TA_void,NULL,"Abs","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_Abs_stub,NULL},
  {&TA_float,NULL,"MaxVal","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_MaxVal_stub,NULL},
  {&TA_float,NULL,"MinVal","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_MinVal_stub,NULL},
  {&TA_taString,NULL,"GetStr","","","",
    0,0,-1,0,NULL,cssElCFun_FloatTwoDCoord_GetStr_stub,NULL},
  NULL};
static int FloatTDCoord::* TA_FloatTDCoord_MbrOff;
static MemberDef_data TA_FloatTDCoord_MemberDef[]={
  {&TA_float,NULL,"z"," depth","","",
    *((ta_memb_ptr*)&(TA_FloatTDCoord_MbrOff=(int FloatTDCoord::*)(&FloatTDCoord::z))),0,NULL,0},
  NULL};
static MethodArgs_data TA_FloatTDCoord_SqDist_MethArgs[]={
  {&TA_const_FloatTDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_FloatTDCoord_Dist_MethArgs[]={
  {&TA_const_FloatTDCoord_ref,NULL,"td",""},
  NULL};
static MethodArgs_data TA_FloatTDCoord_SetXYZ_MethArgs[]={
  {&TA_float,NULL,"xx",""},
  {&TA_float,NULL,"yy",""},
  {&TA_float,NULL,"zz",""},
  NULL};
static MethodArgs_data TA_FloatTDCoord_GetXYZ_MethArgs[]={
  {&TA_float_ref,NULL,"xx",""},
  {&TA_float_ref,NULL,"yy",""},
  {&TA_float_ref,NULL,"zz",""},
  NULL};
static MethodArgs_data TA_FloatTDCoord_Sgn_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodDef_data TA_FloatTDCoord_MethodDef[]={
  {&TA_float,NULL,"SqDist","","","",
    1,1,-1,0,NULL,cssElCFun_FloatTDCoord_SqDist_stub,TA_FloatTDCoord_SqDist_MethArgs},
  {&TA_float,NULL,"Dist","","","",
    1,1,-1,0,NULL,cssElCFun_FloatTDCoord_Dist_stub,TA_FloatTDCoord_Dist_MethArgs},
  {&TA_void,NULL,"SetXYZ","","","",
    0,3,-1,0,NULL,cssElCFun_FloatTDCoord_SetXYZ_stub,TA_FloatTDCoord_SetXYZ_MethArgs},
  {&TA_void,NULL,"GetXYZ","","","",
    0,3,-1,0,NULL,cssElCFun_FloatTDCoord_GetXYZ_stub,TA_FloatTDCoord_GetXYZ_MethArgs},
  {&TA_float,NULL,"Sgn","","","",
    0,1,-1,1,(ta_void_fun)(FloatTDCoord::Sgn),cssElCFun_FloatTDCoord_Sgn_stub,TA_FloatTDCoord_Sgn_MethArgs},
  NULL};
static int ValIdx::* TA_ValIdx_MbrOff;
static MemberDef_data TA_ValIdx_MemberDef[]={
  {&TA_float,NULL,"val"," value","","",
    *((ta_memb_ptr*)&(TA_ValIdx_MbrOff=(int ValIdx::*)(&ValIdx::val))),0,NULL,0},
  {&TA_int,NULL,"idx"," index","","",
    *((ta_memb_ptr*)&(TA_ValIdx_MbrOff=(int ValIdx::*)(&ValIdx::idx))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ValIdx_SetValIdx_MethArgs[]={
  {&TA_float,NULL,"v",""},
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_ValIdx_GetValIdx_MethArgs[]={
  {&TA_float_ref,NULL,"v",""},
  {&TA_int_ref,NULL,"i",""},
  NULL};
static MethodDef_data TA_ValIdx_MethodDef[]={
  {&TA_void,NULL,"SetValIdx","","","",
    0,2,-1,0,NULL,cssElCFun_ValIdx_SetValIdx_stub,TA_ValIdx_SetValIdx_MethArgs},
  {&TA_void,NULL,"GetValIdx","","","",
    0,2,-1,0,NULL,cssElCFun_ValIdx_GetValIdx_stub,TA_ValIdx_GetValIdx_MethArgs},
  {&TA_taString,NULL,"GetStr","","","",
    0,0,-1,0,NULL,cssElCFun_ValIdx_GetStr_stub,NULL},
  NULL};
static int taArray<ValIdx>::* TA_taArray_ValIdx__MbrOff;
static MemberDef_data TA_taArray_ValIdx__MemberDef[]={
  {NULL,"::ValIdx_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_ValIdx__MbrOff=(int taArray<ValIdx>::*)(&taArray<ValIdx>::el))),0,NULL,0},
  {&TA_ValIdx,NULL,"err"," what is returned when out of range","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taArray_ValIdx__MbrOff=(int taArray<ValIdx>::*)(&taArray<ValIdx>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__Remove_MethArgs[]={
  {&TA_uint,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_ValIdx_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__Add_MethArgs[]={
  {NULL,"::const_ValIdx_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__AddUnique_MethArgs[]={
  {NULL,"::const_ValIdx_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__Push_MethArgs[]={
  {NULL,"::const_ValIdx_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__Insert_MethArgs[]={
  {NULL,"::const_ValIdx_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__Find_MethArgs[]={
  {NULL,"::const_ValIdx_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__RemoveEl_MethArgs[]={
  {NULL,"::const_ValIdx_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_ValIdx__InitVals_MethArgs[]={
  {NULL,"::const_ValIdx_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_ValIdx__MethodDef[]={
  {&TA_bool,NULL,"Remove"," Remove (n_els) item(s) at idx, returns success Remove (n_els) item(s) at indx, returns success","MENU MENU_ON_Edit ","",
    2,2,1,0,NULL,cssElCFun_taArray_ValIdx__Remove_stub,TA_taArray_ValIdx__Remove_MethArgs},
  {NULL,"::ValIdx_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,NULL,cssElCFun_taArray_ValIdx__SafeEl_stub,TA_taArray_ValIdx__SafeEl_MethArgs},
  {NULL,"::ValIdx_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_ValIdx__FastEl_stub,TA_taArray_ValIdx__FastEl_MethArgs},
  {NULL,"::ValIdx_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_ValIdx__RevEl_stub,TA_taArray_ValIdx__RevEl_MethArgs},
  {&TA_ValIdx,NULL,"Pop"," pop the last item in the array off","","",
    0,0,-1,0,NULL,cssElCFun_taArray_ValIdx__Pop_stub,NULL},
  {NULL,"::ValIdx_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,NULL,cssElCFun_taArray_ValIdx__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,NULL,cssElCFun_taArray_ValIdx__Set_stub,TA_taArray_ValIdx__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,NULL,cssElCFun_taArray_ValIdx__Add_stub,TA_taArray_ValIdx__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taArray_ValIdx__AddUnique_stub,TA_taArray_ValIdx__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,0,NULL,cssElCFun_taArray_ValIdx__Push_stub,TA_taArray_ValIdx__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,NULL,cssElCFun_taArray_ValIdx__Insert_stub,TA_taArray_ValIdx__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_taArray_ValIdx__Find_stub,TA_taArray_ValIdx__Find_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,0,NULL,cssElCFun_taArray_ValIdx__RemoveEl_stub,TA_taArray_ValIdx__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,0,NULL,cssElCFun_taArray_ValIdx__InitVals_stub,TA_taArray_ValIdx__InitVals_MethArgs},
  NULL};
static EnumDef_data TA_CountParam_Relation[]={
  {"EQUAL"," ","LABEL_= ",0},
  {"NOTEQUAL"," ","LABEL_!= ",1},
  {"LESSTHAN"," ","LABEL_< ",2},
  {"GREATERTHAN"," ","LABEL_> ",3},
  {"LESSTHANOREQUAL"," ","LABEL_<= ",4},
  {"GREATERTHANOREQUAL"," ","LABEL_>= ",5},
  NULL};
static int CountParam::* TA_CountParam_MbrOff;
static MemberDef_data TA_CountParam_MemberDef[]={
  {NULL,"::Relation","rel"," relation of statistic to target value","LABEL_ ","",
    *((ta_memb_ptr*)&(TA_CountParam_MbrOff=(int CountParam::*)(&CountParam::rel))),0,NULL,0},
  {&TA_float,NULL,"val"," target or comparison value","LABEL_ ","",
    *((ta_memb_ptr*)&(TA_CountParam_MbrOff=(int CountParam::*)(&CountParam::val))),0,NULL,0},
  NULL};
static MethodArgs_data TA_CountParam_Evaluate_MethArgs[]={
  {&TA_float,NULL,"cmp",""},
  NULL};
static MethodDef_data TA_CountParam_MethodDef[]={
  {&TA_bool,NULL,"Evaluate","","","",
    0,1,-1,0,NULL,cssElCFun_CountParam_Evaluate_stub,TA_CountParam_Evaluate_MethArgs},
  NULL};
static EnumDef_data TA_Aggregate_Operator[]={
  {"DEFAULT"," select the default specified for the object","",-1},
  {"LAST"," The most recent value","",0},
  {"SUM"," Summation","",1},
  {"PROD"," Product","",2},
  {"MIN"," Minimum","",3},
  {"MAX"," Maximum","",4},
  {"AVG"," Average (mean)","",5},
  {"COPY"," Copy (keep each individual value)","",6},
  {"COUNT"," Count of the number times count relation was true","",7},
  NULL};
static int Aggregate::* TA_Aggregate_MbrOff;
static MemberDef_data TA_Aggregate_MemberDef[]={
  {NULL,"::Operator","op"," how to aggregate over the network","","",
    *((ta_memb_ptr*)&(TA_Aggregate_MbrOff=(int Aggregate::*)(&Aggregate::op))),0,NULL,0},
  {&TA_bool,NULL,"no0"," don't aggregate when the value is zero","DEF_false ","",
    *((ta_memb_ptr*)&(TA_Aggregate_MbrOff=(int Aggregate::*)(&Aggregate::no0))),0,NULL,0},
  {&TA_CountParam,NULL,"count"," parameters for the COUNT aggregation","CONDEDIT_ON_op:COUNT ","",
    *((ta_memb_ptr*)&(TA_Aggregate_MbrOff=(int Aggregate::*)(&Aggregate::count))),0,NULL,0},
  {&TA_int,NULL,"n_updt"," number of times agg updated (for AVG)","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_Aggregate_MbrOff=(int Aggregate::*)(&Aggregate::n_updt))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Aggregate_AggLAST_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_AggSUM_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_AggPROD_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_AggMIN_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_AggMAX_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_AggAVG_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_AggCOPY_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_AggCOUNT_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_ComputeAgg_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_ComputeAggNoUpdt_MethArgs[]={
  {&TA_float_ref,NULL,"to",""},
  {&TA_float,NULL,"fm",""},
  NULL};
static MethodArgs_data TA_Aggregate_AppendAggName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_Aggregate_PrependAggName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodDef_data TA_Aggregate_MethodDef[]={
  {&TA_void,NULL,"AggLAST"," at this level..","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_AggLAST_stub,TA_Aggregate_AggLAST_MethArgs},
  {&TA_void,NULL,"AggSUM","","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_AggSUM_stub,TA_Aggregate_AggSUM_MethArgs},
  {&TA_void,NULL,"AggPROD","","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_AggPROD_stub,TA_Aggregate_AggPROD_MethArgs},
  {&TA_void,NULL,"AggMIN","","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_AggMIN_stub,TA_Aggregate_AggMIN_MethArgs},
  {&TA_void,NULL,"AggMAX","","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_AggMAX_stub,TA_Aggregate_AggMAX_MethArgs},
  {&TA_void,NULL,"AggAVG","","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_AggAVG_stub,TA_Aggregate_AggAVG_MethArgs},
  {&TA_void,NULL,"AggCOPY"," not defined at this level..","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_AggCOPY_stub,TA_Aggregate_AggCOPY_MethArgs},
  {&TA_void,NULL,"AggCOUNT","","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_AggCOUNT_stub,TA_Aggregate_AggCOUNT_MethArgs},
  {&TA_void,NULL,"ComputeAgg"," compute aggregation into `to' based on current op from `fm'","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_ComputeAgg_stub,TA_Aggregate_ComputeAgg_MethArgs},
  {&TA_bool,NULL,"ComputeAggNoUpdt"," compute aggregation but don't update the n_updt counter (for lists) (return false if fm = 0, else true)","","",
    0,2,-1,0,NULL,cssElCFun_Aggregate_ComputeAggNoUpdt_stub,TA_Aggregate_ComputeAggNoUpdt_MethArgs},
  {&TA_void,NULL,"IncUpdt"," increment the update counter","","",
    0,0,-1,0,NULL,cssElCFun_Aggregate_IncUpdt_stub,NULL},
  {&TA_const_char_ptr,NULL,"GetAggName"," get string representation of aggregation opr","","",
    0,0,-1,0,NULL,cssElCFun_Aggregate_GetAggName_stub,NULL},
  {&TA_taString,NULL,"AppendAggName"," append aggregation name to given name","","",
    0,1,-1,0,NULL,cssElCFun_Aggregate_AppendAggName_stub,TA_Aggregate_AppendAggName_MethArgs},
  {&TA_taString,NULL,"PrependAggName"," prepend aggregation name to given name","","",
    0,1,-1,0,NULL,cssElCFun_Aggregate_PrependAggName_stub,TA_Aggregate_PrependAggName_MethArgs},
  {&TA_void,NULL,"Init"," initialize agg variables","","",
    0,0,-1,0,NULL,cssElCFun_Aggregate_Init_stub,NULL},
  {&TA_float,NULL,"InitAggVal"," returns the initial aggregation value based on op (0,1,or FLT_MAX)","","",
    0,0,-1,0,NULL,cssElCFun_Aggregate_InitAggVal_stub,NULL},
  NULL};
static EnumDef_data TA_SimpleMathSpec_MathOpr[]={
  {"NONE"," no function","",0},
  {"THRESH"," threshold: if val >= arg then hi, else lo","",1},
  {"ABS"," take absolute-value","",2},
  {"SQUARE"," square (raise to 2nd power)","",3},
  {"SQRT"," square root","",4},
  {"LOG"," natural log","",5},
  {"LOG10"," log base 10","",6},
  {"EXP"," exponential (e^val)","",7},
  {"ADD"," add arg value","",8},
  {"SUB"," subtract arg value","",9},
  {"MUL"," multiply by arg value","",10},
  {"POWER"," raise to the power of arg","",11},
  {"DIV"," divide by arg value","",12},
  {"GTEQ"," make all values greater than or equal to arg","",13},
  {"LTEQ"," make all values less than or equal to arg","",14},
  {"GTLTEQ"," make all values greater than lw and less than hi","",15},
  NULL};
static int SimpleMathSpec::* TA_SimpleMathSpec_MbrOff;
static MemberDef_data TA_SimpleMathSpec_MemberDef[]={
  {NULL,"::MathOpr","opr"," what math operator to use","","",
    *((ta_memb_ptr*)&(TA_SimpleMathSpec_MbrOff=(int SimpleMathSpec::*)(&SimpleMathSpec::opr))),0,NULL,0},
  {&TA_float,NULL,"arg"," argument for ops (threshold add/sub/mul/div arg)","CONDEDIT_ON_opr:THRESH,ADD,SUB,MUL,POWER,DIV,GTEQ,LTEQ ","",
    *((ta_memb_ptr*)&(TA_SimpleMathSpec_MbrOff=(int SimpleMathSpec::*)(&SimpleMathSpec::arg))),0,NULL,0},
  {&TA_float,NULL,"lw"," the value to assign values below threshold","CONDEDIT_ON_opr:THRESH,GTLTEQ ","",
    *((ta_memb_ptr*)&(TA_SimpleMathSpec_MbrOff=(int SimpleMathSpec::*)(&SimpleMathSpec::lw))),0,NULL,0},
  {&TA_float,NULL,"hi"," the value to assign values above threshold","CONDEDIT_ON_opr:THRESH,GTLTEQ ","",
    *((ta_memb_ptr*)&(TA_SimpleMathSpec_MbrOff=(int SimpleMathSpec::*)(&SimpleMathSpec::hi))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SimpleMathSpec_Evaluate_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodDef_data TA_SimpleMathSpec_MethodDef[]={
  {&TA_float,NULL,"Evaluate"," evaluate math operator on given value","","",
    0,1,-1,0,NULL,cssElCFun_SimpleMathSpec_Evaluate_stub,TA_SimpleMathSpec_Evaluate_MethArgs},
  NULL};
static int RGBA::* TA_RGBA_MbrOff;
static MemberDef_data TA_RGBA_MemberDef[]={
  {&TA_float,NULL,"r"," red","","",
    *((ta_memb_ptr*)&(TA_RGBA_MbrOff=(int RGBA::*)(&RGBA::r))),0,NULL,0},
  {&TA_float,NULL,"g"," green","","",
    *((ta_memb_ptr*)&(TA_RGBA_MbrOff=(int RGBA::*)(&RGBA::g))),0,NULL,0},
  {&TA_float,NULL,"b"," blue","","",
    *((ta_memb_ptr*)&(TA_RGBA_MbrOff=(int RGBA::*)(&RGBA::b))),0,NULL,0},
  {&TA_float,NULL,"a"," alpha (intensity, ratio of fg to bg)","","",
    *((ta_memb_ptr*)&(TA_RGBA_MbrOff=(int RGBA::*)(&RGBA::a))),0,NULL,0},
  {&TA_taString,NULL,"desc"," description of what this color is","","",
    *((ta_memb_ptr*)&(TA_RGBA_MbrOff=(int RGBA::*)(&RGBA::desc))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taList_RGBA__MoveBefore_MethArgs[]={
  {NULL,"::RGBA_ptr","trg",""},
  {NULL,"::RGBA_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_RGBA__MoveAfter_MethArgs[]={
  {NULL,"::RGBA_ptr","trg",""},
  {NULL,"::RGBA_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_RGBA__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_RGBA__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_RGBA__Edit_El_MethArgs[]={
  {NULL,"::RGBA_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_RGBA__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_RGBA__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_RGBA__AddUniqNameOld_MethArgs[]={
  {NULL,"::RGBA_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_RGBA__LinkUniqNameOld_MethArgs[]={
  {NULL,"::RGBA_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_RGBA__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_RGBA__MoveBefore_stub,TA_taList_RGBA__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_RGBA__MoveAfter_stub,TA_taList_RGBA__MoveAfter_MethArgs},
  {NULL,"::RGBA_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_RGBA__SafeEl_stub,TA_taList_RGBA__SafeEl_MethArgs},
  {NULL,"::RGBA_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_RGBA__FastEl_stub,TA_taList_RGBA__FastEl_MethArgs},
  {NULL,"::RGBA_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_RGBA__DefaultEl_stub,NULL},
  {NULL,"::RGBA_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_RGBA__Edit_El_stub,TA_taList_RGBA__Edit_El_MethArgs},
  {NULL,"::RGBA_ptr","FindName"," Find element with given name (item_nm) ","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_RGBA__FindName_stub,TA_taList_RGBA__FindName_MethArgs},
  {NULL,"::RGBA_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_RGBA__FindType_stub,TA_taList_RGBA__FindType_MethArgs},
  {NULL,"::RGBA_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_RGBA__Pop_stub,NULL},
  {NULL,"::RGBA_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_RGBA__Peek_stub,NULL},
  {NULL,"::RGBA_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_RGBA__AddUniqNameOld_stub,TA_taList_RGBA__AddUniqNameOld_MethArgs},
  {NULL,"::RGBA_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_RGBA__LinkUniqNameOld_stub,TA_taList_RGBA__LinkUniqNameOld_MethArgs},
  NULL};
static MethodArgs_data TA_taList_TAColor__MoveBefore_MethArgs[]={
  {NULL,"::TAColor_ptr","trg",""},
  {NULL,"::TAColor_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_TAColor__MoveAfter_MethArgs[]={
  {NULL,"::TAColor_ptr","trg",""},
  {NULL,"::TAColor_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_TAColor__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_TAColor__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_TAColor__Edit_El_MethArgs[]={
  {NULL,"::TAColor_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_TAColor__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_TAColor__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_TAColor__AddUniqNameOld_MethArgs[]={
  {NULL,"::TAColor_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_TAColor__LinkUniqNameOld_MethArgs[]={
  {NULL,"::TAColor_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_TAColor__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_TAColor__MoveBefore_stub,TA_taList_TAColor__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_TAColor__MoveAfter_stub,TA_taList_TAColor__MoveAfter_MethArgs},
  {NULL,"::TAColor_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_TAColor__SafeEl_stub,TA_taList_TAColor__SafeEl_MethArgs},
  {NULL,"::TAColor_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_TAColor__FastEl_stub,TA_taList_TAColor__FastEl_MethArgs},
  {NULL,"::TAColor_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_TAColor__DefaultEl_stub,NULL},
  {NULL,"::TAColor_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_TAColor__Edit_El_stub,TA_taList_TAColor__Edit_El_MethArgs},
  {NULL,"::TAColor_ptr","FindName"," Find element with given name (item_nm) ","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_TAColor__FindName_stub,TA_taList_TAColor__FindName_MethArgs},
  {NULL,"::TAColor_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_TAColor__FindType_stub,TA_taList_TAColor__FindType_MethArgs},
  {NULL,"::TAColor_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_TAColor__Pop_stub,NULL},
  {NULL,"::TAColor_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_TAColor__Peek_stub,NULL},
  {NULL,"::TAColor_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_TAColor__AddUniqNameOld_stub,TA_taList_TAColor__AddUniqNameOld_MethArgs},
  {NULL,"::TAColor_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_TAColor__LinkUniqNameOld_stub,TA_taList_TAColor__LinkUniqNameOld_MethArgs},
  NULL};
static int ColorScaleSpec::* TA_ColorScaleSpec_MbrOff;
static MemberDef_data TA_ColorScaleSpec_MemberDef[]={
  {&TA_RGBA,NULL,"background"," background color","","",
    *((ta_memb_ptr*)&(TA_ColorScaleSpec_MbrOff=(int ColorScaleSpec::*)(&ColorScaleSpec::background))),0,NULL,0},
  {&TA_RGBA_List,NULL,"clr"," group of colors","","",
    *((ta_memb_ptr*)&(TA_ColorScaleSpec_MbrOff=(int ColorScaleSpec::*)(&ColorScaleSpec::clr))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ColorScaleSpec_GenRanges_MethArgs[]={
  {&TA_TAColor_List_ptr,NULL,"cl",""},
  {&TA_int,NULL,"chunks",""},
  NULL};
static MethodDef_data TA_ColorScaleSpec_MethodDef[]={
  {&TA_void,NULL,"GenRanges","","","",
    0,2,-1,0,NULL,cssElCFun_ColorScaleSpec_GenRanges_stub,TA_ColorScaleSpec_GenRanges_MethArgs},
  NULL};
static MethodDef_data TA_ColorScaleSpec_MGroup_MethodDef[]={
  {&TA_void,NULL,"NewDefaults"," create a set of default colors","","",
    0,0,-1,0,NULL,cssElCFun_ColorScaleSpec_MGroup_NewDefaults_stub,NULL},
  {&TA_void,NULL,"SetDefaultColor"," set the default color based on gui","","",
    0,0,-1,0,NULL,cssElCFun_ColorScaleSpec_MGroup_SetDefaultColor_stub,NULL},
  NULL};
static int FontSpec::* TA_FontSpec_MbrOff;
static MemberDef_data TA_FontSpec_MemberDef[]={
  {&TA_taString,NULL,"pattern"," the name of the font","","",
    *((ta_memb_ptr*)&(TA_FontSpec_MbrOff=(int FontSpec::*)(&FontSpec::pattern))),0,NULL,0},
  {&TA_taString,NULL,"prv_pat"," the previous font that was successfully obtained","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_FontSpec_MbrOff=(int FontSpec::*)(&FontSpec::prv_pat))),0,NULL,0},
  NULL};
static MethodArgs_data TA_FontSpec_SetFont_MethArgs[]={
  {&TA_char_ptr,NULL,"fn",""},
  NULL};
static MethodArgs_data TA_FontSpec_SetFontSize_MethArgs[]={
  {&TA_int,NULL,"point_size"," 10"},
  NULL};
static MethodArgs_data TA_FontSpec_SetTextG_MethArgs[]={
  {&TA_NoScale_Text_G_ptr,NULL,"txg",""},
  NULL};
static MethodDef_data TA_FontSpec_MethodDef[]={
  {&TA_void,NULL,"XFontSel"," launch xfontsel program to find desired font pattern","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_FontSpec_XFontSel_stub,NULL},
  {&TA_void,NULL,"SetFont","","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_SetFont_stub,TA_FontSpec_SetFont_MethArgs},
  {&TA_void,NULL,"SetFontSize"," set font to given point size","BUTTON ","",
    0,1,0,0,NULL,cssElCFun_FontSpec_SetFontSize_stub,TA_FontSpec_SetFontSize_MethArgs},
  {&TA_void,NULL,"SetTextG"," set the text_g to a new one","","",
    0,1,-1,0,NULL,cssElCFun_FontSpec_SetTextG_stub,TA_FontSpec_SetTextG_MethArgs},
  NULL};
static int ViewLabel::* TA_ViewLabel_MbrOff;
static MemberDef_data TA_ViewLabel_MemberDef[]={
  {&TA_FontSpec,NULL,"spec"," specification for the font","EDIT_INLINE ","",
    *((ta_memb_ptr*)&(TA_ViewLabel_MbrOff=(int ViewLabel::*)(&ViewLabel::spec))),0,NULL,0},
  {&TA_Xform_ptr,NULL,"label_xform"," xform for name label","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_ViewLabel_MbrOff=(int ViewLabel::*)(&ViewLabel::label_xform))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ViewLabel_SetLabelXform_MethArgs[]={
  {&TA_Xform_ptr,NULL,"xf",""},
  NULL};
static MethodDef_data TA_ViewLabel_MethodDef[]={
  {&TA_void,NULL,"SetLabelXform"," ","HIDDEN ","",
    0,1,-1,0,NULL,cssElCFun_ViewLabel_SetLabelXform_stub,TA_ViewLabel_SetLabelXform_MethArgs},
  {&TA_void,NULL,"XFontSel"," launch xfontsel program to find desired font pattern","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_ViewLabel_XFontSel_stub,NULL},
  {&TA_void,NULL,"GetMasterViewer"," have to create an overloaded one of these for each type of view label..","","",
    0,0,-1,0,NULL,cssElCFun_ViewLabel_GetMasterViewer_stub,NULL},
  {&TA_void,NULL,"MakeText"," make text object and insert into view","","",
    0,0,-1,0,NULL,cssElCFun_ViewLabel_MakeText_stub,NULL},
  {&TA_void,NULL,"AddToView"," add text object to view","","",
    0,0,-1,0,NULL,cssElCFun_ViewLabel_AddToView_stub,NULL},
  {&TA_bool,NULL,"UpdateView"," update the view with any changes","","",
    0,0,-1,0,NULL,cssElCFun_ViewLabel_UpdateView_stub,NULL},
  {&TA_void,NULL,"RemoveFromView"," remove from view","","",
    0,0,-1,0,NULL,cssElCFun_ViewLabel_RemoveFromView_stub,NULL},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__MoveBefore_MethArgs[]={
  {NULL,"::ViewLabel_ptr","trg",""},
  {NULL,"::ViewLabel_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__MoveAfter_MethArgs[]={
  {NULL,"::ViewLabel_ptr","trg",""},
  {NULL,"::ViewLabel_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__Edit_El_MethArgs[]={
  {NULL,"::ViewLabel_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__AddUniqNameOld_MethArgs[]={
  {NULL,"::ViewLabel_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_ViewLabel__LinkUniqNameOld_MethArgs[]={
  {NULL,"::ViewLabel_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_ViewLabel__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_ViewLabel__MoveBefore_stub,TA_taList_ViewLabel__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_ViewLabel__MoveAfter_stub,TA_taList_ViewLabel__MoveAfter_MethArgs},
  {NULL,"::ViewLabel_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_ViewLabel__SafeEl_stub,TA_taList_ViewLabel__SafeEl_MethArgs},
  {NULL,"::ViewLabel_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_ViewLabel__FastEl_stub,TA_taList_ViewLabel__FastEl_MethArgs},
  {NULL,"::ViewLabel_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_ViewLabel__DefaultEl_stub,NULL},
  {NULL,"::ViewLabel_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_ViewLabel__Edit_El_stub,TA_taList_ViewLabel__Edit_El_MethArgs},
  {NULL,"::ViewLabel_ptr","FindName"," Find element with given name (item_nm) ","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_ViewLabel__FindName_stub,TA_taList_ViewLabel__FindName_MethArgs},
  {NULL,"::ViewLabel_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_ViewLabel__FindType_stub,TA_taList_ViewLabel__FindType_MethArgs},
  {NULL,"::ViewLabel_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_ViewLabel__Pop_stub,NULL},
  {NULL,"::ViewLabel_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_ViewLabel__Peek_stub,NULL},
  {NULL,"::ViewLabel_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_ViewLabel__AddUniqNameOld_stub,TA_taList_ViewLabel__AddUniqNameOld_MethArgs},
  {NULL,"::ViewLabel_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_ViewLabel__LinkUniqNameOld_stub,TA_taList_ViewLabel__LinkUniqNameOld_MethArgs},
  NULL};
static EnumDef_data TA_float_RArray_DistMetric[]={
  {"SUM_SQUARES"," sum of squares: sum[(x-y)^2]","",0},
  {"EUCLIDIAN"," Euclidian distance (sqrt of sum of squares)","",1},
  {"HAMMING"," Hamming distance: sum[abs(x-y)]","",2},
  {"COVAR"," covariance: sum[(x-<x>)(y-<y>)]","",3},
  {"CORREL"," correlation: sum[(x-<x>)(y-<y>)] / sqrt(sum[x^2 y^2])","",4},
  {"INNER_PROD"," inner product: sum[x y]","",5},
  {"CROSS_ENTROPY"," cross entropy: sum[x ln(x/y) + (1-x)ln((1-x)/(1-y))]","",6},
  NULL};
static int float_RArray::* TA_float_RArray_MbrOff;
static MemberDef_data TA_float_RArray_MemberDef[]={
  {&TA_MinMax,NULL,"range"," min-max range of the data ","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_float_RArray_MbrOff=(int float_RArray::*)(&float_RArray::range))),0,NULL,0},
  NULL};
static MethodArgs_data TA_float_RArray_Remove_MethArgs[]={
  {&TA_uint,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_float_RArray_CopyVals_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"from",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  {&TA_int,NULL,"at","0"},
  NULL};
static MethodArgs_data TA_float_RArray_Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {&TA_const_float_ref,NULL,"item",""},
  NULL};
static MethodArgs_data TA_float_RArray_Add_MethArgs[]={
  {&TA_const_float_ref,NULL,"item",""},
  NULL};
static MethodArgs_data TA_float_RArray_Insert_MethArgs[]={
  {&TA_const_float_ref,NULL,"item",""},
  {&TA_int,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_float_RArray_UpdateRange_MethArgs[]={
  {&TA_float,NULL,"item",""},
  NULL};
static MethodArgs_data TA_float_RArray_MaxVal_MethArgs[]={
  {&TA_int_ref,NULL,"idx",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_AbsMaxVal_MethArgs[]={
  {&TA_int_ref,NULL,"idx",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_MinVal_MethArgs[]={
  {&TA_int_ref,NULL,"idx",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_Sum_MethArgs[]={
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_Mean_MethArgs[]={
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_Var_MethArgs[]={
  {&TA_float,NULL,"mean","0"},
  {&TA_bool,NULL,"use_mean","false"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_StdDev_MethArgs[]={
  {&TA_float,NULL,"mean","0"},
  {&TA_bool,NULL,"use_mean","false"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_SEM_MethArgs[]={
  {&TA_float,NULL,"mean","0"},
  {&TA_bool,NULL,"use_mean","false"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_SSLength_MethArgs[]={
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_SumSquaresDist_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {&TA_bool,NULL,"norm"," false"},
  {&TA_float,NULL,"tolerance","0.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_EuclidDist_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {&TA_bool,NULL,"norm"," false"},
  {&TA_float,NULL,"tolerance","0.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_HammingDist_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {&TA_bool,NULL,"norm"," false"},
  {&TA_float,NULL,"tolerance","0.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_Covar_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_Correl_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_InnerProd_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {&TA_bool,NULL,"norm"," false"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_CrossEntropy_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_Dist_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {NULL,"::DistMetric","metric",""},
  {&TA_bool,NULL,"norm"," false"},
  {&TA_float,NULL,"tolerance","0.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_LargerFurther_MethArgs[]={
  {NULL,"::DistMetric","metric",""},
  NULL};
static MethodArgs_data TA_float_RArray_Histogram_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"oth",""},
  {&TA_float,NULL,"bin_size",""},
  NULL};
static MethodArgs_data TA_float_RArray_AggToArray_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"from",""},
  {&TA_Aggregate_ref,NULL,"agg",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_AggToVal_MethArgs[]={
  {&TA_Aggregate_ref,NULL,"agg",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_NormLen_MethArgs[]={
  {&TA_float,NULL,"len","1.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_NormSum_MethArgs[]={
  {&TA_float,NULL,"sum","1.0f"},
  {&TA_float,NULL,"min_val","0.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_NormMax_MethArgs[]={
  {&TA_float,NULL,"max","1.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_NormAbsMax_MethArgs[]={
  {&TA_float,NULL,"max","1.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_SimpleMath_MethArgs[]={
  {&TA_const_SimpleMathSpec_ref,NULL,"math_spec",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_SimpleMathArg_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"arg_ary",""},
  {&TA_const_SimpleMathSpec_ref,NULL,"math_spec",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_Threshold_MethArgs[]={
  {&TA_float,NULL,"thresh",".5f"},
  {&TA_float,NULL,"low","0.0f"},
  {&TA_float,NULL,"high","1.0f"},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end"," -1"},
  NULL};
static MethodArgs_data TA_float_RArray_WritePoint_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"geom",""},
  {&TA_int,NULL,"x",""},
  {&TA_int,NULL,"y",""},
  {&TA_float,NULL,"color","1.0"},
  {&TA_bool,NULL,"wrap","true"},
  NULL};
static MethodArgs_data TA_float_RArray_RenderLine_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"geom",""},
  {&TA_int,NULL,"xs",""},
  {&TA_int,NULL,"ys",""},
  {&TA_int,NULL,"xe",""},
  {&TA_int,NULL,"ye",""},
  {&TA_float,NULL,"color","1.0"},
  {&TA_bool,NULL,"wrap","true"},
  NULL};
static MethodArgs_data TA_float_RArray_WriteXPoints_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"geom",""},
  {&TA_int,NULL,"x",""},
  {&TA_int,NULL,"y",""},
  {&TA_const_float_RArray_ref,NULL,"color",""},
  {&TA_int,NULL,"wdth","1"},
  {&TA_bool,NULL,"wrap","true"},
  NULL};
static MethodArgs_data TA_float_RArray_WriteYPoints_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"geom",""},
  {&TA_int,NULL,"x",""},
  {&TA_int,NULL,"y",""},
  {&TA_const_float_RArray_ref,NULL,"color",""},
  {&TA_int,NULL,"wdth","1"},
  {&TA_bool,NULL,"wrap","true"},
  NULL};
static MethodArgs_data TA_float_RArray_RenderWideLine_MethArgs[]={
  {&TA_const_TwoDCoord_ref,NULL,"geom",""},
  {&TA_int,NULL,"xs",""},
  {&TA_int,NULL,"ys",""},
  {&TA_int,NULL,"xe",""},
  {&TA_int,NULL,"ye",""},
  {&TA_const_float_RArray_ref,NULL,"color",""},
  {&TA_int,NULL,"wdth","1"},
  {&TA_bool,NULL,"wrap","true"},
  NULL};
static MethodArgs_data TA_float_RArray_SafeMatEl_MethArgs[]={
  {&TA_int,NULL,"col_dim",""},
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"col",""},
  NULL};
static MethodArgs_data TA_float_RArray_FastMatEl_MethArgs[]={
  {&TA_int,NULL,"col_dim",""},
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"col",""},
  NULL};
static MethodArgs_data TA_float_RArray_FastMatEl1_MethArgs[]={
  {&TA_int,NULL,"col_dim",""},
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"col",""},
  NULL};
static MethodArgs_data TA_float_RArray_FastEl1_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_float_RArray_GetMatCol_MethArgs[]={
  {&TA_int,NULL,"col_dim",""},
  {&TA_float_RArray_ref,NULL,"col_vec",""},
  {&TA_int,NULL,"col_no",""},
  NULL};
static MethodArgs_data TA_float_RArray_GetMatRow_MethArgs[]={
  {&TA_int,NULL,"col_dim",""},
  {&TA_float_RArray_ref,NULL,"row_vec",""},
  {&TA_int,NULL,"row_no",""},
  NULL};
static MethodArgs_data TA_float_RArray_SafeTriMatEl_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  {&TA_int,NULL,"x",""},
  {&TA_int,NULL,"y",""},
  NULL};
static MethodArgs_data TA_float_RArray_FastTriMatEl_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  {&TA_int,NULL,"x",""},
  {&TA_int,NULL,"y",""},
  NULL};
static MethodArgs_data TA_float_RArray_AllocSqMatSize_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  NULL};
static MethodArgs_data TA_float_RArray_AllocTriMatSize_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  NULL};
static MethodArgs_data TA_float_RArray_CopyFmTriMat_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  {&TA_const_float_RArray_ref,NULL,"tri_mat",""},
  NULL};
static MethodArgs_data TA_float_RArray_TriDiagMatRed_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  {&TA_float_RArray_ref,NULL,"diags",""},
  {&TA_float_RArray_ref,NULL,"off_diags",""},
  NULL};
static MethodArgs_data TA_float_RArray_TriDiagQL_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  {&TA_float_RArray_ref,NULL,"diags",""},
  {&TA_float_RArray_ref,NULL,"off_diags",""},
  NULL};
static MethodArgs_data TA_float_RArray_Eigens_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  {&TA_float_RArray_ref,NULL,"evals",""},
  NULL};
static MethodArgs_data TA_float_RArray_MDS_MethArgs[]={
  {&TA_int,NULL,"dim",""},
  {&TA_float_RArray_ref,NULL,"xcoords",""},
  {&TA_float_RArray_ref,NULL,"ycoords",""},
  {&TA_int,NULL,"x_axis_component"," 0"},
  {&TA_int,NULL,"y_axis_component"," 1"},
  {&TA_bool,NULL,"print_eigen_vals"," false"},
  NULL};
static MethodDef_data TA_float_RArray_MethodDef[]={
  {&TA_bool,NULL,"Remove"," Remove (n_els) item(s) at idx, returns success Remove (n_els) item(s) at indx, returns success","MENU MENU_ON_Edit ","",
    4,2,1,0,NULL,cssElCFun_float_RArray_Remove_stub,TA_float_RArray_Remove_MethArgs},
  {&TA_void,NULL,"CopyVals"," copy values from other array at given start and end points, and putting at given point in this","","",
    1,4,1,0,NULL,cssElCFun_float_RArray_CopyVals_stub,TA_float_RArray_CopyVals_MethArgs},
  {&TA_void,NULL,"Set"," use this for assigning values to items in the array (Set should update if needed)","","",
    1,2,-1,0,NULL,cssElCFun_float_RArray_Set_stub,TA_float_RArray_Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    1,1,-1,0,NULL,cssElCFun_float_RArray_Add_stub,TA_float_RArray_Add_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    1,3,2,0,NULL,cssElCFun_float_RArray_Insert_stub,TA_float_RArray_Insert_MethArgs},
  {&TA_void,NULL,"UpdateRange","","","",
    0,1,-1,0,NULL,cssElCFun_float_RArray_UpdateRange_stub,TA_float_RArray_UpdateRange_MethArgs},
  {&TA_void,NULL,"UpdateAllRange"," update range for all items in array","MENU MENU_ON_Actions ","",
    0,0,-1,0,NULL,cssElCFun_float_RArray_UpdateAllRange_stub,NULL},
  {&TA_float,NULL,"MaxVal"," value and index of the (first) element that has the maximum value","MENU MENU_ON_Actions USE_RVAL ","",
    0,3,1,0,NULL,cssElCFun_float_RArray_MaxVal_stub,TA_float_RArray_MaxVal_MethArgs},
  {&TA_float,NULL,"AbsMaxVal"," value and index of the (first) element that has the maximum absolute value","MENU MENU_ON_Actions USE_RVAL ","",
    0,3,1,0,NULL,cssElCFun_float_RArray_AbsMaxVal_stub,TA_float_RArray_AbsMaxVal_MethArgs},
  {&TA_float,NULL,"MinVal"," value and index of the (first) element that has the minimum value","MENU USE_RVAL ","",
    0,3,1,0,NULL,cssElCFun_float_RArray_MinVal_stub,TA_float_RArray_MinVal_MethArgs},
  {&TA_float,NULL,"Sum"," compute the sum of the values in the array","MENU MENU_ON_Actions USE_RVAL ","",
    0,2,0,0,NULL,cssElCFun_float_RArray_Sum_stub,TA_float_RArray_Sum_MethArgs},
  {&TA_float,NULL,"Mean"," compute the mean of the values in the array","MENU USE_RVAL ","",
    0,2,0,0,NULL,cssElCFun_float_RArray_Mean_stub,TA_float_RArray_Mean_MethArgs},
  {&TA_float,NULL,"Var"," compute the variance of the values, opt with given mean","MENU USE_RVAL ","",
    0,4,0,0,NULL,cssElCFun_float_RArray_Var_stub,TA_float_RArray_Var_MethArgs},
  {&TA_float,NULL,"StdDev"," compute the standard deviation of the values, opt with given mean","MENU USE_RVAL ","",
    0,4,0,0,NULL,cssElCFun_float_RArray_StdDev_stub,TA_float_RArray_StdDev_MethArgs},
  {&TA_float,NULL,"SEM"," compute the standard error of the mean of the values, opt with given mean","MENU USE_RVAL ","",
    0,4,0,0,NULL,cssElCFun_float_RArray_SEM_stub,TA_float_RArray_SEM_MethArgs},
  {&TA_float,NULL,"SSLength"," sum-of-squares length of the array","MENU USE_RVAL ","",
    0,2,0,0,NULL,cssElCFun_float_RArray_SSLength_stub,TA_float_RArray_SSLength_MethArgs},
  {&TA_float,NULL,"SumSquaresDist"," compute sum-squares dist between this and the oth, tolerance is by element","","",
    0,5,1,0,NULL,cssElCFun_float_RArray_SumSquaresDist_stub,TA_float_RArray_SumSquaresDist_MethArgs},
  {&TA_float,NULL,"EuclidDist"," compute Euclidian dist between this and the oth, tolerance is by element","","",
    0,5,1,0,NULL,cssElCFun_float_RArray_EuclidDist_stub,TA_float_RArray_EuclidDist_MethArgs},
  {&TA_float,NULL,"HammingDist"," compute Hamming dist between this and the oth, tolerance is by element","","",
    0,5,1,0,NULL,cssElCFun_float_RArray_HammingDist_stub,TA_float_RArray_HammingDist_MethArgs},
  {&TA_float,NULL,"Covar"," compute the covariance of this array the oth array","","",
    0,3,1,0,NULL,cssElCFun_float_RArray_Covar_stub,TA_float_RArray_Covar_MethArgs},
  {&TA_float,NULL,"Correl"," compute the correlation of this array with the oth array","","",
    0,3,1,0,NULL,cssElCFun_float_RArray_Correl_stub,TA_float_RArray_Correl_MethArgs},
  {&TA_float,NULL,"InnerProd"," compute the inner product of this array and the oth array","","",
    0,4,1,0,NULL,cssElCFun_float_RArray_InnerProd_stub,TA_float_RArray_InnerProd_MethArgs},
  {&TA_float,NULL,"CrossEntropy"," compute cross entropy between this and other array, this is 'p' other is 'q'","","",
    0,3,1,0,NULL,cssElCFun_float_RArray_CrossEntropy_stub,TA_float_RArray_CrossEntropy_MethArgs},
  {&TA_float,NULL,"Dist"," compute generalized distance metric with other array (calls appropriate fun above)","","",
    0,6,2,0,NULL,cssElCFun_float_RArray_Dist_stub,TA_float_RArray_Dist_MethArgs},
  {&TA_bool,NULL,"LargerFurther"," returns true if a larger value of given distance metric means further apart","","",
    0,1,-1,1,(ta_void_fun)(float_RArray::LargerFurther),cssElCFun_float_RArray_LargerFurther_stub,TA_float_RArray_LargerFurther_MethArgs},
  {&TA_void,NULL,"Histogram"," this gets a histogram (counts) of number of values in other array","","",
    0,2,-1,0,NULL,cssElCFun_float_RArray_Histogram_stub,TA_float_RArray_Histogram_MethArgs},
  {&TA_void,NULL,"AggToArray"," aggregate values from other array to this one using aggregation params of agg","","",
    0,4,2,0,NULL,cssElCFun_float_RArray_AggToArray_stub,TA_float_RArray_AggToArray_MethArgs},
  {&TA_float,NULL,"AggToVal"," compute aggregate of values in this array using aggregation params of agg","","",
    0,3,1,0,NULL,cssElCFun_float_RArray_AggToVal_stub,TA_float_RArray_AggToVal_MethArgs},
  {&TA_float,NULL,"NormLen"," normalize array to total given length (1.0), returns scale","MENU ","",
    0,3,0,0,NULL,cssElCFun_float_RArray_NormLen_stub,TA_float_RArray_NormLen_MethArgs},
  {&TA_float,NULL,"NormSum"," normalize array to total given sum (1.0) and min_val (0) (uses range), returns scale","MENU ","",
    0,4,0,0,NULL,cssElCFun_float_RArray_NormSum_stub,TA_float_RArray_NormSum_MethArgs},
  {&TA_float,NULL,"NormMax"," normalize array to given maximum value, returns scale","MENU ","",
    0,3,0,0,NULL,cssElCFun_float_RArray_NormMax_stub,TA_float_RArray_NormMax_MethArgs},
  {&TA_float,NULL,"NormAbsMax"," normalize array to given absolute maximum value, returns scale","MENU ","",
    0,3,0,0,NULL,cssElCFun_float_RArray_NormAbsMax_stub,TA_float_RArray_NormAbsMax_MethArgs},
  {&TA_void,NULL,"SimpleMath"," apply standard kinds of simple math operators to values in the array","MENU ","",
    0,3,1,0,NULL,cssElCFun_float_RArray_SimpleMath_stub,TA_float_RArray_SimpleMath_MethArgs},
  {&TA_void,NULL,"SimpleMathArg"," apply simple math operators to values, other array provides 'arg' value for math_spec","","",
    0,4,2,0,NULL,cssElCFun_float_RArray_SimpleMathArg_stub,TA_float_RArray_SimpleMathArg_MethArgs},
  {&TA_int,NULL,"Threshold"," threshold values in the array, low vals go to low, etc.","MENU ","",
    0,5,0,0,NULL,cssElCFun_float_RArray_Threshold_stub,TA_float_RArray_Threshold_MethArgs},
  {&TA_void,NULL,"WritePoint"," write a single point, assuming geometry geom","","",
    0,5,3,0,NULL,cssElCFun_float_RArray_WritePoint_stub,TA_float_RArray_WritePoint_MethArgs},
  {&TA_void,NULL,"RenderLine"," render a line from given x,y starting, ending coords in 2d space of geometry geom","MENU ","",
    0,7,5,0,NULL,cssElCFun_float_RArray_RenderLine_stub,TA_float_RArray_RenderLine_MethArgs},
  {&TA_void,NULL,"WriteXPoints"," write a series of points of given width in x dimension using colors in order","","",
    0,6,4,0,NULL,cssElCFun_float_RArray_WriteXPoints_stub,TA_float_RArray_WriteXPoints_MethArgs},
  {&TA_void,NULL,"WriteYPoints"," write a series of points of given width in y dimension using colors in order","","",
    0,6,4,0,NULL,cssElCFun_float_RArray_WriteYPoints_stub,TA_float_RArray_WriteYPoints_MethArgs},
  {&TA_void,NULL,"RenderWideLine"," render a wide line from given x,y starting, ending coords in 2d space of geometry geom","MENU ","",
    0,8,6,0,NULL,cssElCFun_float_RArray_RenderWideLine_stub,TA_float_RArray_RenderWideLine_MethArgs},
  {&TA_float_ref,NULL,"SafeMatEl"," safe get element assuming a matrix layout of values with column (inner) dimension size = col_dim","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_SafeMatEl_stub,TA_float_RArray_SafeMatEl_MethArgs},
  {&TA_float_ref,NULL,"FastMatEl"," fast get element assuming a matrix layout of values with column (inner) dimension size = col_dim","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_FastMatEl_stub,TA_float_RArray_FastMatEl_MethArgs},
  {&TA_float_ref,NULL,"FastMatEl1"," fast get element assuming a matrix layout of values with column (inner) dimension size = col_dim, indicies use 1-n range instead of 0-n-1!","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_FastMatEl1_stub,TA_float_RArray_FastMatEl1_MethArgs},
  {&TA_float_ref,NULL,"FastEl1"," fast get element with index in 1-n range instead of 0-n-1","","",
    0,1,-1,0,NULL,cssElCFun_float_RArray_FastEl1_stub,TA_float_RArray_FastEl1_MethArgs},
  {&TA_void,NULL,"GetMatCol"," extract given column from this matrix-formatted object","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_GetMatCol_stub,TA_float_RArray_GetMatCol_MethArgs},
  {&TA_void,NULL,"GetMatRow"," extract given row from this matrix-formatted object","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_GetMatRow_stub,TA_float_RArray_GetMatRow_MethArgs},
  {&TA_float_ref,NULL,"SafeTriMatEl"," get element assuming an upper-triangular symmetric matrix (e.g., distance matrix) of dimension dim for two items, x, y","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_SafeTriMatEl_stub,TA_float_RArray_SafeTriMatEl_MethArgs},
  {&TA_float_ref,NULL,"FastTriMatEl"," get element assuming an upper-triangular symmetric matrix (e.g., distance matrix) of dimension dim for two items, x, y","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_FastTriMatEl_stub,TA_float_RArray_FastTriMatEl_MethArgs},
  {&TA_void,NULL,"AllocSqMatSize"," allocate space (enforcesize) for a square matrix of size dim","","",
    0,1,-1,0,NULL,cssElCFun_float_RArray_AllocSqMatSize_stub,TA_float_RArray_AllocSqMatSize_MethArgs},
  {&TA_void,NULL,"AllocTriMatSize"," allocate space (enforcesize) for an upper-triangular matrix of size dim","","",
    0,1,-1,0,NULL,cssElCFun_float_RArray_AllocTriMatSize_stub,TA_float_RArray_AllocTriMatSize_MethArgs},
  {&TA_void,NULL,"CopyFmTriMat"," copy from upper-triangular symmetric matrix of given dimensionality into a full matrix","","",
    0,2,-1,0,NULL,cssElCFun_float_RArray_CopyFmTriMat_stub,TA_float_RArray_CopyFmTriMat_MethArgs},
  {&TA_bool,NULL,"TriDiagMatRed"," reduce current full square matrix to a tri-diagonal form using the Householder transformation (first step in computing eigenvectors/values) -- diags are eigenvalues","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_TriDiagMatRed_stub,TA_float_RArray_TriDiagMatRed_MethArgs},
  {&TA_bool,NULL,"TriDiagQL"," perform QL algorithm to compute eigenvector/values of a tri-diagonal matrix as computed by TriDiagMatRed (this = matrix)","","",
    0,3,-1,0,NULL,cssElCFun_float_RArray_TriDiagQL_stub,TA_float_RArray_TriDiagQL_MethArgs},
  {&TA_bool,NULL,"Eigens"," compute eigenvalue/vector decomposition of this square matrix of dimension dim. eigen values are in evals, and this matrix contains the eigenvectors","","",
    0,2,-1,0,NULL,cssElCFun_float_RArray_Eigens_stub,TA_float_RArray_Eigens_MethArgs},
  {&TA_bool,NULL,"MDS"," perform multidiminesional scaling of this distace matrix (must be full square matrix), returning two-dimensional coordinates that best capture the distance relationships among the items in x,y coords using specified components","","",
    0,6,3,0,NULL,cssElCFun_float_RArray_MDS_stub,TA_float_RArray_MDS_MethArgs},
  NULL};
static int DataArray_impl::* TA_DataArray_impl_MbrOff;
static MemberDef_data TA_DataArray_impl_MemberDef[]={
  {&TA_taString,NULL,"disp_opts"," viewer default display options","","",
    *((ta_memb_ptr*)&(TA_DataArray_impl_MbrOff=(int DataArray_impl::*)(&DataArray_impl::disp_opts))),0,NULL,0},
  {&TA_bool,NULL,"save_to_file"," save this data to a file (e.g., to a log file in PDP++)?","","",
    *((ta_memb_ptr*)&(TA_DataArray_impl_MbrOff=(int DataArray_impl::*)(&DataArray_impl::save_to_file))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DataArray_impl_SetAR_MethArgs[]={
  {&TA_taArray_base_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_DataArray_impl_HasDispOption_MethArgs[]={
  {&TA_const_char_ptr,NULL,"opt",""},
  NULL};
static MethodArgs_data TA_DataArray_impl_DispOptionAfter_MethArgs[]={
  {&TA_const_char_ptr,NULL,"opt",""},
  NULL};
static MethodArgs_data TA_DataArray_impl_AddDispOption_MethArgs[]={
  {&TA_const_char_ptr,NULL,"opt",""},
  NULL};
static MethodDef_data TA_DataArray_impl_MethodDef[]={
  {&TA_taArray_base_ptr,NULL,"AR"," the array pointer","","",
    0,0,-1,0,NULL,cssElCFun_DataArray_impl_AR_stub,NULL},
  {&TA_void,NULL,"NewAR"," create an array for yourself","MENU MENU_ON_Object ","",
    0,0,-1,0,NULL,cssElCFun_DataArray_impl_NewAR_stub,NULL},
  {&TA_void,NULL,"SetAR"," set AR to existing array","","",
    0,1,-1,0,NULL,cssElCFun_DataArray_impl_SetAR_stub,TA_DataArray_impl_SetAR_MethArgs},
  {&TA_bool,NULL,"HasDispOption"," check if a given display option is set","","",
    0,1,-1,0,NULL,cssElCFun_DataArray_impl_HasDispOption_stub,TA_DataArray_impl_HasDispOption_MethArgs},
  {&TA_taString_ref,NULL,"DispOptionAfter","","","",
    0,1,-1,0,NULL,cssElCFun_DataArray_impl_DispOptionAfter_stub,TA_DataArray_impl_DispOptionAfter_MethArgs},
  {&TA_void,NULL,"AddDispOption","","","",
    0,1,-1,0,NULL,cssElCFun_DataArray_impl_AddDispOption_stub,TA_DataArray_impl_AddDispOption_MethArgs},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__MoveBefore_MethArgs[]={
  {NULL,"::DataArray_impl_ptr","trg",""},
  {NULL,"::DataArray_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__MoveAfter_MethArgs[]={
  {NULL,"::DataArray_impl_ptr","trg",""},
  {NULL,"::DataArray_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__Edit_El_MethArgs[]={
  {NULL,"::DataArray_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","0"},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","0"},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__AddUniqNameOld_MethArgs[]={
  {NULL,"::DataArray_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__LinkUniqNameOld_MethArgs[]={
  {NULL,"::DataArray_impl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_DataArray_impl__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_DataArray_impl__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__MoveBefore_stub,TA_taGroup_DataArray_impl__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__MoveAfter_stub,TA_taGroup_DataArray_impl__MoveAfter_MethArgs},
  {NULL,"::DataArray_impl_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__SafeEl_stub,TA_taGroup_DataArray_impl__SafeEl_MethArgs},
  {NULL,"::DataArray_impl_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__FastEl_stub,TA_taGroup_DataArray_impl__FastEl_MethArgs},
  {NULL,"::DataArray_impl_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__DefaultEl_stub,NULL},
  {NULL,"::DataArray_impl_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__Edit_El_stub,TA_taGroup_DataArray_impl__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__SafeGp_stub,TA_taGroup_DataArray_impl__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__FastGp_stub,TA_taGroup_DataArray_impl__FastGp_MethArgs},
  {NULL,"::DataArray_impl_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__Leaf_stub,TA_taGroup_DataArray_impl__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__LeafGp_stub,TA_taGroup_DataArray_impl__LeafGp_MethArgs},
  {NULL,"::DataArray_impl_ptr","FirstEl"," returns first leaf element and inits indexes","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__FirstEl_stub,TA_taGroup_DataArray_impl__FirstEl_MethArgs},
  {NULL,"::DataArray_impl_ptr","NextEl"," returns next leaf element and incs indexes","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__NextEl_stub,TA_taGroup_DataArray_impl__NextEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__FirstGp_stub,TA_taGroup_DataArray_impl__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__NextGp_stub,TA_taGroup_DataArray_impl__NextGp_MethArgs},
  {NULL,"::DataArray_impl_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_DataArray_impl__NewEl_stub,TA_taGroup_DataArray_impl__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_DataArray_impl__NewGp_stub,TA_taGroup_DataArray_impl__NewGp_MethArgs},
  {NULL,"::DataArray_impl_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_DataArray_impl__FindName_stub,TA_taGroup_DataArray_impl__FindName_MethArgs},
  {NULL,"::DataArray_impl_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_DataArray_impl__FindType_stub,TA_taGroup_DataArray_impl__FindType_MethArgs},
  {NULL,"::DataArray_impl_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__Pop_stub,NULL},
  {NULL,"::DataArray_impl_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__Peek_stub,NULL},
  {NULL,"::DataArray_impl_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__AddUniqNameOld_stub,TA_taGroup_DataArray_impl__AddUniqNameOld_MethArgs},
  {NULL,"::DataArray_impl_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DataArray_impl__LinkUniqNameOld_stub,TA_taGroup_DataArray_impl__LinkUniqNameOld_MethArgs},
  {NULL,"::DataArray_impl_ptr","FindLeafName"," Find element with given name (el_nm) ","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_DataArray_impl__FindLeafName_stub,TA_taGroup_DataArray_impl__FindLeafName_MethArgs},
  {NULL,"::DataArray_impl_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_DataArray_impl__FindLeafType_stub,TA_taGroup_DataArray_impl__FindLeafType_MethArgs},
  NULL};
static MethodArgs_data TA_DataTable_RemoveRow_MethArgs[]={
  {&TA_int,NULL,"row_num",""},
  NULL};
static MethodArgs_data TA_DataTable_SetSaveToFile_MethArgs[]={
  {&TA_bool,NULL,"save_to_file",""},
  NULL};
static MethodArgs_data TA_DataTable_AddRowToArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"ar",""},
  {&TA_int,NULL,"row_num",""},
  NULL};
static MethodArgs_data TA_DataTable_AggRowToArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"ar",""},
  {&TA_int,NULL,"row_num",""},
  {&TA_Aggregate_ref,NULL,"agg",""},
  NULL};
static MethodArgs_data TA_DataTable_AggRowToVal_MethArgs[]={
  {&TA_int,NULL,"row_num",""},
  {&TA_Aggregate_ref,NULL,"agg",""},
  NULL};
static MethodArgs_data TA_DataTable_AddArrayToRow_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"ar",""},
  NULL};
static MethodArgs_data TA_DataTable_AggArrayToRow_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"ar",""},
  {&TA_int,NULL,"row_num",""},
  {&TA_Aggregate_ref,NULL,"agg",""},
  NULL};
static MethodArgs_data TA_DataTable_PutArrayToRow_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"ar",""},
  {&TA_int,NULL,"row_num",""},
  NULL};
static MethodArgs_data TA_DataTable_NewColFloat_MethArgs[]={
  {&TA_const_char_ptr,NULL,"col_nm",""},
  NULL};
static MethodArgs_data TA_DataTable_NewColInt_MethArgs[]={
  {&TA_const_char_ptr,NULL,"col_nm",""},
  NULL};
static MethodArgs_data TA_DataTable_NewColString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"col_nm",""},
  NULL};
static MethodArgs_data TA_DataTable_NewGroupFloat_MethArgs[]={
  {&TA_const_char_ptr,NULL,"base_nm",""},
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_DataTable_NewGroupInt_MethArgs[]={
  {&TA_const_char_ptr,NULL,"base_nm",""},
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_DataTable_NewGroupString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"base_nm",""},
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_DataTable_GetColData_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_GetColFloatData_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_GetColStringData_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_GetColFloatArray_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_GetColStringArray_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_PutArrayToCol_MethArgs[]={
  {&TA_const_float_RArray_ref,NULL,"ar",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_SetColName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"col_nm",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_AddColDispOpt_MethArgs[]={
  {&TA_const_char_ptr,NULL,"dsp_opt",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_AddFloatVal_MethArgs[]={
  {&TA_float,NULL,"val",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_AddStringVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"val",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_SetFloatVal_MethArgs[]={
  {&TA_float,NULL,"val",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_SetStringVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"val",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_SetLastFloatVal_MethArgs[]={
  {&TA_float,NULL,"val",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_SetLastStringVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"val",""},
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_GetFloatVal_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodArgs_data TA_DataTable_GetStringVal_MethArgs[]={
  {&TA_int,NULL,"col",""},
  {&TA_int,NULL,"row",""},
  {&TA_int,NULL,"subgp","-1"},
  NULL};
static MethodDef_data TA_DataTable_MethodDef[]={
  {&TA_void,NULL,"ResetData"," reset all of the data arrays","MENU MENU_ON_Actions ","",
    0,0,-1,0,NULL,cssElCFun_DataTable_ResetData_stub,NULL},
  {&TA_void,NULL,"RemoveRow"," Remove an entire row of data","MENU ","",
    0,1,-1,0,NULL,cssElCFun_DataTable_RemoveRow_stub,TA_DataTable_RemoveRow_MethArgs},
  {&TA_void,NULL,"AddBlankRow"," add a new row to the data table, returns new row number","MENU ","",
    0,0,-1,0,NULL,cssElCFun_DataTable_AddBlankRow_stub,NULL},
  {&TA_void,NULL,"SetSaveToFile"," set the save_to_file flag for entire group of data elements","MENU ","",
    0,1,-1,0,NULL,cssElCFun_DataTable_SetSaveToFile_stub,TA_DataTable_SetSaveToFile_MethArgs},
  {&TA_void,NULL,"AddRowToArray"," add a row of the datatable to given array","","",
    0,2,-1,0,NULL,cssElCFun_DataTable_AddRowToArray_stub,TA_DataTable_AddRowToArray_MethArgs},
  {&TA_void,NULL,"AggRowToArray"," aggregate a row of the datatable to given array using parameters in agg","","",
    0,3,-1,0,NULL,cssElCFun_DataTable_AggRowToArray_stub,TA_DataTable_AggRowToArray_MethArgs},
  {&TA_float,NULL,"AggRowToVal"," aggregate a row of the datatable to a value using parameters in agg","","",
    0,2,-1,0,NULL,cssElCFun_DataTable_AggRowToVal_stub,TA_DataTable_AggRowToVal_MethArgs},
  {&TA_void,NULL,"AddArrayToRow"," add contents of array to datatable","","",
    0,1,-1,0,NULL,cssElCFun_DataTable_AddArrayToRow_stub,TA_DataTable_AddArrayToRow_MethArgs},
  {&TA_void,NULL,"AggArrayToRow"," aggregate contents of array to datatable at given row","","",
    0,3,-1,0,NULL,cssElCFun_DataTable_AggArrayToRow_stub,TA_DataTable_AggArrayToRow_MethArgs},
  {&TA_void,NULL,"PutArrayToRow"," just put array values into given row of data","","",
    0,2,-1,0,NULL,cssElCFun_DataTable_PutArrayToRow_stub,TA_DataTable_PutArrayToRow_MethArgs},
  {&TA_void,NULL,"UpdateAllRanges"," update all min-max range data for all float_Data elements in log","","",
    0,0,-1,0,NULL,cssElCFun_DataTable_UpdateAllRanges_stub,NULL},
  {&TA_float_Data_ptr,NULL,"NewColFloat"," create new column of floating point data","","",
    0,1,-1,0,NULL,cssElCFun_DataTable_NewColFloat_stub,TA_DataTable_NewColFloat_MethArgs},
  {&TA_float_Data_ptr,NULL,"NewColInt"," create new column of integer-level data (= narrow display, actually stored as float)","","",
    0,1,-1,0,NULL,cssElCFun_DataTable_NewColInt_stub,TA_DataTable_NewColInt_MethArgs},
  {&TA_String_Data_ptr,NULL,"NewColString"," create new column of string data","","",
    0,1,-1,0,NULL,cssElCFun_DataTable_NewColString_stub,TA_DataTable_NewColString_MethArgs},
  {&TA_DataTable_ptr,NULL,"NewGroupFloat"," create new sub-group of floats of size n, named as base_nm_index ","","",
    0,2,-1,0,NULL,cssElCFun_DataTable_NewGroupFloat_stub,TA_DataTable_NewGroupFloat_MethArgs},
  {&TA_DataTable_ptr,NULL,"NewGroupInt"," create new sub-group of ints of size n, named as base_nm_index ","","",
    0,2,-1,0,NULL,cssElCFun_DataTable_NewGroupInt_stub,TA_DataTable_NewGroupInt_MethArgs},
  {&TA_DataTable_ptr,NULL,"NewGroupString"," create new sub-group of strings of size n, named as base_nm_index","","",
    0,2,-1,0,NULL,cssElCFun_DataTable_NewGroupString_stub,TA_DataTable_NewGroupString_MethArgs},
  {&TA_DataArray_impl_ptr,NULL,"GetColData"," get data for given column (if subgp >= 0, column is in given subgroup)","","",
    0,2,1,0,NULL,cssElCFun_DataTable_GetColData_stub,TA_DataTable_GetColData_MethArgs},
  {&TA_float_Data_ptr,NULL,"GetColFloatData"," get float_Data for given column (if subgp >= 0, column is in given subgroup)","","",
    0,2,1,0,NULL,cssElCFun_DataTable_GetColFloatData_stub,TA_DataTable_GetColFloatData_MethArgs},
  {&TA_String_Data_ptr,NULL,"GetColStringData"," get string data for given column (if subgp >= 0, column is in given subgroup)","","",
    0,2,1,0,NULL,cssElCFun_DataTable_GetColStringData_stub,TA_DataTable_GetColStringData_MethArgs},
  {&TA_float_RArray_ptr,NULL,"GetColFloatArray"," get float_RArray for given column (if subgp >= 0, column is in given subgroup)","","",
    0,2,1,0,NULL,cssElCFun_DataTable_GetColFloatArray_stub,TA_DataTable_GetColFloatArray_MethArgs},
  {&TA_String_Array_ptr,NULL,"GetColStringArray"," get string data for given column (if subgp >= 0, column is in given subgroup)","","",
    0,2,1,0,NULL,cssElCFun_DataTable_GetColStringArray_stub,TA_DataTable_GetColStringArray_MethArgs},
  {&TA_void,NULL,"PutArrayToCol"," just put array values into given column (if subgp >= 0, column is in given subgroup)","","",
    0,3,2,0,NULL,cssElCFun_DataTable_PutArrayToCol_stub,TA_DataTable_PutArrayToCol_MethArgs},
  {&TA_void,NULL,"SetColName"," set column name for given column (if subgp >= 0, column is in given subgroup)","","",
    0,3,2,0,NULL,cssElCFun_DataTable_SetColName_stub,TA_DataTable_SetColName_MethArgs},
  {&TA_void,NULL,"AddColDispOpt"," add display option for given column (if subgp >= 0, column is in given subgroup)","","",
    0,3,2,0,NULL,cssElCFun_DataTable_AddColDispOpt_stub,TA_DataTable_AddColDispOpt_MethArgs},
  {&TA_void,NULL,"AddFloatVal"," add float/int data for given column (if subgp >= 0, column is in given subgroup)","","",
    0,3,2,0,NULL,cssElCFun_DataTable_AddFloatVal_stub,TA_DataTable_AddFloatVal_MethArgs},
  {&TA_void,NULL,"AddStringVal"," add string data for given column (if subgp >= 0, column is in given subgroup)","","",
    0,3,2,0,NULL,cssElCFun_DataTable_AddStringVal_stub,TA_DataTable_AddStringVal_MethArgs},
  {&TA_void,NULL,"SetFloatVal"," set float/int data for given column, row (if subgp >= 0, column is in given subgroup)","","",
    0,4,3,0,NULL,cssElCFun_DataTable_SetFloatVal_stub,TA_DataTable_SetFloatVal_MethArgs},
  {&TA_void,NULL,"SetStringVal"," set string data for given column, row (if subgp >= 0, column is in given subgroup)","","",
    0,4,3,0,NULL,cssElCFun_DataTable_SetStringVal_stub,TA_DataTable_SetStringVal_MethArgs},
  {&TA_void,NULL,"SetLastFloatVal"," set last row float/int data for given column (if subgp >= 0, column is in given subgroup)","","",
    0,3,2,0,NULL,cssElCFun_DataTable_SetLastFloatVal_stub,TA_DataTable_SetLastFloatVal_MethArgs},
  {&TA_void,NULL,"SetLastStringVal"," set last row string data for given column (if subgp >= 0, column is in given subgroup)","","",
    0,3,2,0,NULL,cssElCFun_DataTable_SetLastStringVal_stub,TA_DataTable_SetLastStringVal_MethArgs},
  {&TA_float,NULL,"GetFloatVal"," get float data for given column, row (if subgp >= 0, column is in given subgroup)","","",
    0,3,2,0,NULL,cssElCFun_DataTable_GetFloatVal_stub,TA_DataTable_GetFloatVal_MethArgs},
  {&TA_taString,NULL,"GetStringVal"," get string data for given column, row (if subgp >= 0, column is in given subgroup)","","",
    0,3,2,0,NULL,cssElCFun_DataTable_GetStringVal_stub,TA_DataTable_GetStringVal_MethArgs},
  NULL};
static int ClustNode::* TA_ClustNode_MbrOff;
static MemberDef_data TA_ClustNode_MemberDef[]={
  {&TA_float_RArray_ptr,NULL,"pat"," pattern I point to (if leaf)","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::pat))),0,NULL,0},
  {&TA_int,NULL,"leaf_idx"," original leaf index, used for pointing into master distance table","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::leaf_idx))),0,NULL,0},
  {&TA_int,NULL,"leaf_max"," original max number of leaves","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::leaf_max))),0,NULL,0},
  {&TA_float_RArray_ptr,NULL,"leaf_dists"," distance matrix for all leaves","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::leaf_dists))),0,NULL,0},
  {&TA_float,NULL,"par_dist"," distance from parent cluster","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::par_dist))),0,NULL,0},
  {&TA_float,NULL,"nn_dist"," nearest neighbor (within cluster) distance","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::nn_dist))),0,NULL,0},
  {&TA_float,NULL,"tmp_dist"," temporary distance value (for computations)","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::tmp_dist))),0,NULL,0},
  {&TA_float,NULL,"y"," y axis value","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::y))),0,NULL,0},
  {&TA_taBase_List,NULL,"children"," my sub-nodes","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::children))),0,NULL,0},
  {&TA_taBase_List,NULL,"nns"," nearest neighbor(s)","","",
    *((ta_memb_ptr*)&(TA_ClustNode_MbrOff=(int ClustNode::*)(&ClustNode::nns))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ClustNode_GetChild_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_ClustNode_GetNN_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_ClustNode_GetNNDist_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_ClustNode_SetPat_MethArgs[]={
  {&TA_float_RArray_ptr,NULL,"pt",""},
  NULL};
static MethodArgs_data TA_ClustNode_AddChild_MethArgs[]={
  {&TA_ClustNode_ptr,NULL,"nd",""},
  {&TA_float,NULL,"dst"," 0.0f"},
  NULL};
static MethodArgs_data TA_ClustNode_LinkNN_MethArgs[]={
  {&TA_ClustNode_ptr,NULL,"nd",""},
  {&TA_float,NULL,"dst"," 0.0f"},
  NULL};
static MethodArgs_data TA_ClustNode_RemoveChild_MethArgs[]={
  {&TA_ClustNode_ptr,NULL,"nd",""},
  NULL};
static MethodArgs_data TA_ClustNode_FindChild_MethArgs[]={
  {&TA_ClustNode_ptr,NULL,"nd",""},
  NULL};
static MethodArgs_data TA_ClustNode_Cluster_MethArgs[]={
  {NULL,"float_RArray::DistMetric","metric","float_RArray::EUCLIDIAN"},
  {&TA_bool,NULL,"norm","false"},
  {&TA_float,NULL,"tol","0.0f"},
  NULL};
static MethodArgs_data TA_ClustNode_Graph_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_ClustNode_XGraph_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fnm",""},
  {&TA_const_char_ptr,NULL,"title",""},
  NULL};
static MethodArgs_data TA_ClustNode_GraphData_MethArgs[]={
  {&TA_DataTable_ptr,NULL,"dt",""},
  NULL};
static MethodDef_data TA_ClustNode_MethodDef[]={
  {&TA_ClustNode_ptr,NULL,"GetChild","","","",
    0,1,-1,0,NULL,cssElCFun_ClustNode_GetChild_stub,TA_ClustNode_GetChild_MethArgs},
  {&TA_ClustNode_ptr,NULL,"GetNN","","","",
    0,1,-1,0,NULL,cssElCFun_ClustNode_GetNN_stub,TA_ClustNode_GetNN_MethArgs},
  {&TA_float_ref,NULL,"GetNNDist","","","",
    0,1,-1,0,NULL,cssElCFun_ClustNode_GetNNDist_stub,TA_ClustNode_GetNNDist_MethArgs},
  {&TA_void,NULL,"SetPat"," use setpointer to set pat","","",
    0,1,-1,0,NULL,cssElCFun_ClustNode_SetPat_stub,TA_ClustNode_SetPat_MethArgs},
  {&TA_void,NULL,"AddChild"," add new child (via ClustLink)","","",
    0,2,1,0,NULL,cssElCFun_ClustNode_AddChild_stub,TA_ClustNode_AddChild_MethArgs},
  {&TA_void,NULL,"LinkNN"," add new neighbor (via ClustLink)","","",
    0,2,1,0,NULL,cssElCFun_ClustNode_LinkNN_stub,TA_ClustNode_LinkNN_MethArgs},
  {&TA_bool,NULL,"RemoveChild"," remove link with this node","","",
    0,1,-1,0,NULL,cssElCFun_ClustNode_RemoveChild_stub,TA_ClustNode_RemoveChild_MethArgs},
  {&TA_int,NULL,"FindChild"," find child with this node link","","",
    0,1,-1,0,NULL,cssElCFun_ClustNode_FindChild_stub,TA_ClustNode_FindChild_MethArgs},
  {&TA_void,NULL,"Cluster"," generate the cluster: call on a root node with a flat list of leaf children","","",
    0,3,0,0,NULL,cssElCFun_ClustNode_Cluster_stub,TA_ClustNode_Cluster_MethArgs},
  {&TA_void,NULL,"Graph"," generate commands to drive graph (or xgraph) for plotting cluster","","",
    0,1,-1,0,NULL,cssElCFun_ClustNode_Graph_stub,TA_ClustNode_Graph_MethArgs},
  {&TA_void,NULL,"XGraph"," generate graph in given file name with given title, and call xgraph on result","","",
    0,2,-1,0,NULL,cssElCFun_ClustNode_XGraph_stub,TA_ClustNode_XGraph_MethArgs},
  {&TA_void,NULL,"GraphData"," generate graph as X, Y, label points in a datatable, suitable for graphing","","",
    0,1,-1,0,NULL,cssElCFun_ClustNode_GraphData_stub,TA_ClustNode_GraphData_MethArgs},
  NULL};
static int ClustLink::* TA_ClustLink_MbrOff;
static MemberDef_data TA_ClustLink_MemberDef[]={
  {&TA_float,NULL,"dist"," distance to this node from parent","","",
    *((ta_memb_ptr*)&(TA_ClustLink_MbrOff=(int ClustLink::*)(&ClustLink::dist))),0,NULL,0},
  {&TA_ClustNode_ptr,NULL,"node"," cluster node","","",
    *((ta_memb_ptr*)&(TA_ClustLink_MbrOff=(int ClustLink::*)(&ClustLink::node))),0,NULL,0},
  NULL};
static int DA_ViewSpec::* TA_DA_ViewSpec_MbrOff;
static MemberDef_data TA_DA_ViewSpec_MemberDef[]={
  {&TA_DataArray_impl_ptr,NULL,"data_array"," the data array","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_DA_ViewSpec_MbrOff=(int DA_ViewSpec::*)(&DA_ViewSpec::data_array))),0,NULL,0},
  {&TA_taString,NULL,"display_name"," name used in display","","",
    *((ta_memb_ptr*)&(TA_DA_ViewSpec_MbrOff=(int DA_ViewSpec::*)(&DA_ViewSpec::display_name))),0,NULL,0},
  {&TA_bool,NULL,"visible"," visibility flag","","",
    *((ta_memb_ptr*)&(TA_DA_ViewSpec_MbrOff=(int DA_ViewSpec::*)(&DA_ViewSpec::visible))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DA_ViewSpec_SetGpVisibility_MethArgs[]={
  {&TA_bool,NULL,"visible",""},
  NULL};
static MethodArgs_data TA_DA_ViewSpec_CopyToGp_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  NULL};
static MethodArgs_data TA_DA_ViewSpec_BuildFromDataArray_MethArgs[]={
  {&TA_DataArray_impl_ptr,NULL,"tda","0"},
  NULL};
static MethodArgs_data TA_DA_ViewSpec_CleanName_MethArgs[]={
  {&TA_taString_ref,NULL,"name",""},
  NULL};
static MethodDef_data TA_DA_ViewSpec_MethodDef[]={
  {&TA_void,NULL,"UpdateView"," Update view to reflect current changes","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_DA_ViewSpec_UpdateView_stub,NULL},
  {&TA_void,NULL,"SetGpVisibility"," set the visibility of all members of this group of items","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_DA_ViewSpec_SetGpVisibility_stub,TA_DA_ViewSpec_SetGpVisibility_MethArgs},
  {&TA_void,NULL,"CopyToGp"," copy given member value setting to all view specs within this same group","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_DA_ViewSpec_CopyToGp_stub,TA_DA_ViewSpec_CopyToGp_MethArgs},
  {&TA_bool,NULL,"BuildFromDataArray","","","",
    0,1,0,0,NULL,cssElCFun_DA_ViewSpec_BuildFromDataArray_stub,TA_DA_ViewSpec_BuildFromDataArray_MethArgs},
  {&TA_taString,NULL,"CleanName","","","",
    0,1,-1,1,(ta_void_fun)(DA_ViewSpec::CleanName),cssElCFun_DA_ViewSpec_CleanName_stub,TA_DA_ViewSpec_CleanName_MethArgs},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__MoveBefore_MethArgs[]={
  {NULL,"::DA_ViewSpec_ptr","trg",""},
  {NULL,"::DA_ViewSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__MoveAfter_MethArgs[]={
  {NULL,"::DA_ViewSpec_ptr","trg",""},
  {NULL,"::DA_ViewSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__Edit_El_MethArgs[]={
  {NULL,"::DA_ViewSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__SafeGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__FastGp_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__Leaf_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__LeafGp_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__NewEl_MethArgs[]={
  {&TA_int,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ","0"},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__NewGp_MethArgs[]={
  {&TA_int,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ","0"},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__AddUniqNameOld_MethArgs[]={
  {NULL,"::DA_ViewSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__LinkUniqNameOld_MethArgs[]={
  {NULL,"::DA_ViewSpec_ptr","item",""},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__FindLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taGroup_DA_ViewSpec__FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodDef_data TA_taGroup_DA_ViewSpec__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__MoveBefore_stub,TA_taGroup_DA_ViewSpec__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__MoveAfter_stub,TA_taGroup_DA_ViewSpec__MoveAfter_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__SafeEl_stub,TA_taGroup_DA_ViewSpec__SafeEl_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__FastEl_stub,TA_taGroup_DA_ViewSpec__FastEl_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__DefaultEl_stub,NULL},
  {NULL,"::DA_ViewSpec_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__Edit_El_stub,TA_taGroup_DA_ViewSpec__Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"SafeGp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__SafeGp_stub,TA_taGroup_DA_ViewSpec__SafeGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__FastGp_stub,TA_taGroup_DA_ViewSpec__FastGp_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__Leaf_stub,TA_taGroup_DA_ViewSpec__Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__LeafGp_stub,TA_taGroup_DA_ViewSpec__LeafGp_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","FirstEl"," returns first leaf element and inits indexes","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__FirstEl_stub,TA_taGroup_DA_ViewSpec__FirstEl_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","NextEl"," returns next leaf element and incs indexes","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__NextEl_stub,TA_taGroup_DA_ViewSpec__NextEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__FirstGp_stub,TA_taGroup_DA_ViewSpec__FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__NextGp_stub,TA_taGroup_DA_ViewSpec__NextGp_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_DA_ViewSpec__NewEl_stub,TA_taGroup_DA_ViewSpec__NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_taGroup_DA_ViewSpec__NewGp_stub,TA_taGroup_DA_ViewSpec__NewGp_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__FindName_stub,TA_taGroup_DA_ViewSpec__FindName_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__FindType_stub,TA_taGroup_DA_ViewSpec__FindType_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__Pop_stub,NULL},
  {NULL,"::DA_ViewSpec_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__Peek_stub,NULL},
  {NULL,"::DA_ViewSpec_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__AddUniqNameOld_stub,TA_taGroup_DA_ViewSpec__AddUniqNameOld_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__LinkUniqNameOld_stub,TA_taGroup_DA_ViewSpec__LinkUniqNameOld_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","FindLeafName"," Find element with given name (el_nm) ","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__FindLeafName_stub,TA_taGroup_DA_ViewSpec__FindLeafName_MethArgs},
  {NULL,"::DA_ViewSpec_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taGroup_DA_ViewSpec__FindLeafType_stub,TA_taGroup_DA_ViewSpec__FindLeafType_MethArgs},
  NULL};
static int DT_ViewSpec::* TA_DT_ViewSpec_MbrOff;
static MemberDef_data TA_DT_ViewSpec_MemberDef[]={
  {&TA_DataTable_ptr,NULL,"data_table"," the data table;","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_DT_ViewSpec_MbrOff=(int DT_ViewSpec::*)(&DT_ViewSpec::data_table))),0,NULL,0},
  {&TA_taString,NULL,"display_name"," name used in display","","",
    *((ta_memb_ptr*)&(TA_DT_ViewSpec_MbrOff=(int DT_ViewSpec::*)(&DT_ViewSpec::display_name))),0,NULL,0},
  {&TA_bool,NULL,"visible"," visibility flag","","",
    *((ta_memb_ptr*)&(TA_DT_ViewSpec_MbrOff=(int DT_ViewSpec::*)(&DT_ViewSpec::visible))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DT_ViewSpec_BuildFromDataTable_MethArgs[]={
  {&TA_DataTable_ptr,NULL,"tdt","0"},
  NULL};
static MethodArgs_data TA_DT_ViewSpec_SetDispNms_MethArgs[]={
  {&TA_const_char_ptr,NULL,"base_name",""},
  NULL};
static MethodArgs_data TA_DT_ViewSpec_SetVisibility_MethArgs[]={
  {&TA_bool,NULL,"visible",""},
  NULL};
static MethodDef_data TA_DT_ViewSpec_MethodDef[]={
  {&TA_bool,NULL,"BuildFromDataTable","","","",
    0,1,0,0,NULL,cssElCFun_DT_ViewSpec_BuildFromDataTable_stub,TA_DT_ViewSpec_BuildFromDataTable_MethArgs},
  {&TA_void,NULL,"ReBuildFromDataTable","","","",
    0,0,-1,0,NULL,cssElCFun_DT_ViewSpec_ReBuildFromDataTable_stub,NULL},
  {&TA_void,NULL,"SetDispNms"," set display_name for all view specs in group to base_name + '_' + no where no is number in group","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_DT_ViewSpec_SetDispNms_stub,TA_DT_ViewSpec_SetDispNms_MethArgs},
  {&TA_void,NULL,"RmvNmPrefix"," set display_name for all view specs in group to current name without prefix (i.e., 'prefix_rest' -> 'rest')","BUTTON ","",
    0,0,-1,0,NULL,cssElCFun_DT_ViewSpec_RmvNmPrefix_stub,NULL},
  {&TA_void,NULL,"SetVisibility"," set the visibility of all members of this group of items ","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_DT_ViewSpec_SetVisibility_stub,TA_DT_ViewSpec_SetVisibility_MethArgs},
  NULL};
static int DA_TextViewSpec::* TA_DA_TextViewSpec_MbrOff;
static MemberDef_data TA_DA_TextViewSpec_MemberDef[]={
  {&TA_int,NULL,"width"," number of columns to use for display","","",
    *((ta_memb_ptr*)&(TA_DA_TextViewSpec_MbrOff=(int DA_TextViewSpec::*)(&DA_TextViewSpec::width))),0,NULL,0},
  NULL};
static int DA_NetViewSpec::* TA_DA_NetViewSpec_MbrOff;
static MemberDef_data TA_DA_NetViewSpec_MemberDef[]={
  {&TA_int,NULL,"label_index"," index into the netview's label list","","",
    *((ta_memb_ptr*)&(TA_DA_NetViewSpec_MbrOff=(int DA_NetViewSpec::*)(&DA_NetViewSpec::label_index))),0,NULL,0},
  NULL};
static EnumDef_data TA_DA_GraphViewSpec_LineType[]={
  {"LINE"," just a line, no pts","",0},
  {"POINTS"," just pts, no line","",1},
  {"LINE_AND_POINTS"," both","",2},
  {"STRINGS"," string (text) values -- no lines","",3},
  {"TRACE_COLORS"," subsequent traces (repeats through same X values) are color coded using colorscale","",4},
  {"VALUE_COLORS"," Y values are represented with colors using colorscale","",5},
  {"THRESH_POINTS"," Y values are thresholded with thresh parameter and displayed as points when above threshold","",6},
  NULL};
static EnumDef_data TA_DA_GraphViewSpec_LineStyle[]={
  {"SOLID"," -----","",0},
  {"DOT"," .....","",1},
  {"DASH"," - - -","",2},
  {"DASH_DOT"," _._._","",3},
  NULL};
static EnumDef_data TA_DA_GraphViewSpec_PointStyle[]={
  {"NONE"," ","",0},
  {"SMALL_DOT"," .","",1},
  {"BIG_DOT"," o","",2},
  {"TICK"," |","",3},
  {"PLUS"," +","",4},
  NULL};
static EnumDef_data TA_DA_GraphViewSpec_VerticalType[]={
  {"FULL_VERTICAL"," use the full vertical axis for displaying Y values","",0},
  {"STACK_TRACES"," arrange subsequent traces of data (pass through the same X axis values) in non-overlapping vertically-arranged stacks","",1},
  {"NO_VERTICAL"," don't draw any vertical dimension at all (for VALUE_COLORS or THESH_POINTS line_type","",2},
  NULL};
static EnumDef_data TA_DA_GraphViewSpec_SharedYType[]={
  {"OVERLAY_LINES"," overlay multiple graph lines sharing same Y axis","",0},
  {"STACK_LINES"," arrange lines that share the same Y axis in non-overlapping vertically-arranged stacks","",1},
  NULL};
static int DA_GraphViewSpec::* TA_DA_GraphViewSpec_MbrOff;
static MemberDef_data TA_DA_GraphViewSpec_MemberDef[]={
  {&TA_RGBA,NULL,"line_color"," color of the line","","",
    *((ta_memb_ptr*)&(TA_DA_GraphViewSpec_MbrOff=(int DA_GraphViewSpec::*)(&DA_GraphViewSpec::line_color))),0,NULL,0},
  {NULL,"::LineType","line_type"," the way the line is drawn","","",
    *((ta_memb_ptr*)&(TA_DA_GraphViewSpec_MbrOff=(int DA_GraphViewSpec::*)(&DA_GraphViewSpec::line_type))),0,NULL,0},
  {NULL,"::LineStyle","line_style"," the style in which the line is drawn","","",
    *((ta_memb_ptr*)&(TA_DA_GraphViewSpec_MbrOff=(int DA_GraphViewSpec::*)(&DA_GraphViewSpec::line_style))),0,NULL,0},
  {&TA_float,NULL,"line_width"," width of the line","","",
    *((ta_memb_ptr*)&(TA_DA_GraphViewSpec_MbrOff=(int DA_GraphViewSpec::*)(&DA_GraphViewSpec::line_width))),0,NULL,0},
  {NULL,"::PointStyle","point_style"," the style in which the points are drawn","","",
    *((ta_memb_ptr*)&(TA_DA_GraphViewSpec_MbrOff=(int DA_GraphViewSpec::*)(&DA_GraphViewSpec::point_style))),0,NULL,0},
  {&TA_Modulo,NULL,"point_mod"," when to skip the drawing of point","","",
    *((ta_memb_ptr*)&(TA_DA_GraphViewSpec_MbrOff=(int DA_GraphViewSpec::*)(&DA_GraphViewSpec::point_mod))),0,NULL,0},
  {&TA_bool,NULL,"negative_draw"," draw lines in the negative X axis direction?","","",
    *((ta_memb_ptr*)&(TA_DA_GraphViewSpec_MbrOff=(int DA_GraphViewSpec::*)(&DA_GraphViewSpec::negative_draw))),0,NULL,0},
  {NULL,"::SharedYType","shared_y"," what to do with multiple graph lines that share the Y axis","","",
    *((ta_memb_ptr*)&(TA_DA_GraphViewSpec_MbrOff=(int DA_GraphViewSpec::*)(&DA_GraphViewSpec::shared_y))),0,NULL,0},
  {NULL,"::VerticalType","vertical"," what to do with the vertical Y axis ","","",
    *((ta_memb_ptr*)&(TA_DA_GraphViewSpec_MbrOff=(int DA_GraphViewSpec::*)(&DA_GraphViewSpec::vertical))),0,NULL,0},
  {&TA_FloatTwoDCoord,NULL,"trace_incr"," increments in starting coordinates for each subsequent trace of a line across the same X axis values, producing a 3D-like effect","","",
    *((ta_memb_ptr*)&(TA_DA_GraphViewSpec_MbrOff=(int DA_GraphViewSpec::*)(&DA_GraphViewSpec::trace_incr))),0,NULL,0},
  {&TA_float,NULL,"thresh"," threshold for THRESH_POINTS line style","","",
    *((ta_memb_ptr*)&(TA_DA_GraphViewSpec_MbrOff=(int DA_GraphViewSpec::*)(&DA_GraphViewSpec::thresh))),0,NULL,0},
  {&TA_DA_GraphViewSpec_ptr,NULL,"axis_spec"," spec which indicates the axis to use","NO_NULL ","",
    *((ta_memb_ptr*)&(TA_DA_GraphViewSpec_MbrOff=(int DA_GraphViewSpec::*)(&DA_GraphViewSpec::axis_spec))),0,NULL,0},
  {&TA_FixedMinMax,NULL,"range"," specify fixed range of values to display (value only effective when corresponding fix button pressed)","","",
    *((ta_memb_ptr*)&(TA_DA_GraphViewSpec_MbrOff=(int DA_GraphViewSpec::*)(&DA_GraphViewSpec::range))),0,NULL,0},
  {&TA_int,NULL,"n_ticks"," maximum number of ticks to use in display of axis number labels (actual number may be less depending on the labels)","","",
    *((ta_memb_ptr*)&(TA_DA_GraphViewSpec_MbrOff=(int DA_GraphViewSpec::*)(&DA_GraphViewSpec::n_ticks))),0,NULL,0},
  {&TA_DA_GraphViewSpec_ptr,NULL,"string_coords"," column that contains vertical coordinate values for positioning String data labels","","",
    *((ta_memb_ptr*)&(TA_DA_GraphViewSpec_MbrOff=(int DA_GraphViewSpec::*)(&DA_GraphViewSpec::string_coords))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DA_GraphViewSpec_SetAxis_MethArgs[]={
  {&TA_DA_GraphViewSpec_ptr,NULL,"as",""},
  NULL};
static MethodArgs_data TA_DA_GraphViewSpec_SetStringCoords_MethArgs[]={
  {&TA_DA_GraphViewSpec_ptr,NULL,"as",""},
  NULL};
static MethodDef_data TA_DA_GraphViewSpec_MethodDef[]={
  {&TA_void,NULL,"PlotRows"," plot the data across rows of grouped columns (x axis = column index, y axis = values for each column in one row) instead of down the columns","BUTTON CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_DA_GraphViewSpec_PlotRows_stub,NULL},
  {&TA_void,NULL,"PlotCols"," plot the data down columns (standard mode)","BUTTON CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_DA_GraphViewSpec_PlotCols_stub,NULL},
  {&TA_void,NULL,"GpShareAxis"," make every element in this group share the same Y axis, which is the first in the group","BUTTON CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_DA_GraphViewSpec_GpShareAxis_stub,NULL},
  {&TA_void,NULL,"GpSepAxes"," make every element in this group have its own Y axis","BUTTON CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_DA_GraphViewSpec_GpSepAxes_stub,NULL},
  {&TA_void,NULL,"FindStringCoords"," find previous float_Data for default string coordinates","","",
    0,0,-1,0,NULL,cssElCFun_DA_GraphViewSpec_FindStringCoords_stub,NULL},
  {&TA_void,NULL,"SetAxis","","","",
    0,1,-1,0,NULL,cssElCFun_DA_GraphViewSpec_SetAxis_stub,TA_DA_GraphViewSpec_SetAxis_MethArgs},
  {&TA_void,NULL,"SetStringCoords","","","",
    0,1,-1,0,NULL,cssElCFun_DA_GraphViewSpec_SetStringCoords_stub,TA_DA_GraphViewSpec_SetStringCoords_MethArgs},
  NULL};
static EnumDef_data TA_DT_GraphViewSpec_ColorType[]={
  {"C_RAINBOW"," color, rainbow","",0},
  {"C_GREYSCALE"," color, greyscale","",1},
  {"M_MONO"," monochrome","",2},
  {"P_RAINBOW"," printer, rainbow","",3},
  {"P_GREYSCALE"," printer, greyscale","",4},
  {"P_MONO"," printer, monochrome","",5},
  {"CUSTOM"," custom, let user set colors","",6},
  NULL};
static EnumDef_data TA_DT_GraphViewSpec_SequenceType[]={
  {"COLORS"," use sequential colors","",0},
  {"LINES"," use sequential line styles","",1},
  {"POINTS"," use sequential point styles","",2},
  {"NONE"," no features","",3},
  NULL};
static int DT_GraphViewSpec::* TA_DT_GraphViewSpec_MbrOff;
static MemberDef_data TA_DT_GraphViewSpec_MemberDef[]={
  {&TA_RGBA,NULL,"background"," background color","","",
    *((ta_memb_ptr*)&(TA_DT_GraphViewSpec_MbrOff=(int DT_GraphViewSpec::*)(&DT_GraphViewSpec::background))),0,NULL,0},
  {NULL,"::ColorType","color_type"," palette of colors to use","","",
    *((ta_memb_ptr*)&(TA_DT_GraphViewSpec_MbrOff=(int DT_GraphViewSpec::*)(&DT_GraphViewSpec::color_type))),0,NULL,0},
  {NULL,"::SequenceType","sequence_1"," first (innermost) sequence of features","","",
    *((ta_memb_ptr*)&(TA_DT_GraphViewSpec_MbrOff=(int DT_GraphViewSpec::*)(&DT_GraphViewSpec::sequence_1))),0,NULL,0},
  {NULL,"::SequenceType","sequence_2"," second sequence of features","","",
    *((ta_memb_ptr*)&(TA_DT_GraphViewSpec_MbrOff=(int DT_GraphViewSpec::*)(&DT_GraphViewSpec::sequence_2))),0,NULL,0},
  {NULL,"::SequenceType","sequence_3"," third sequence of features","","",
    *((ta_memb_ptr*)&(TA_DT_GraphViewSpec_MbrOff=(int DT_GraphViewSpec::*)(&DT_GraphViewSpec::sequence_3))),0,NULL,0},
  {&TA_bool,NULL,"plot_rows"," plot the data across a row of columns (x axis = column index, y axis = values for each column in one row) instead of down the columns","","",
    *((ta_memb_ptr*)&(TA_DT_GraphViewSpec_MbrOff=(int DT_GraphViewSpec::*)(&DT_GraphViewSpec::plot_rows))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DT_GraphViewSpec_ColorName_MethArgs[]={
  {&TA_int,NULL,"color_no",""},
  NULL};
static MethodArgs_data TA_DT_GraphViewSpec_UpdateLineFeatures_MethArgs[]={
  {&TA_bool,NULL,"visible_only","true"},
  NULL};
static MethodArgs_data TA_DT_GraphViewSpec_SetLineWidths_MethArgs[]={
  {&TA_float,NULL,"line_width",""},
  NULL};
static MethodArgs_data TA_DT_GraphViewSpec_SetLineType_MethArgs[]={
  {NULL,"DA_GraphViewSpec::LineType","line_type",""},
  NULL};
static MethodArgs_data TA_DT_GraphViewSpec_TraceIncrement_MethArgs[]={
  {&TA_float,NULL,"x_increment"," -2.0f"},
  {&TA_float,NULL,"y_increment"," 2.0f"},
  NULL};
static MethodDef_data TA_DT_GraphViewSpec_MethodDef[]={
  {&TA_char_ptr,NULL,"ColorName"," gets color name for given line number for color_type","MENU MENU_ON_Actions USE_RVAL ","",
    0,1,-1,0,NULL,cssElCFun_DT_GraphViewSpec_ColorName_stub,TA_DT_GraphViewSpec_ColorName_MethArgs},
  {&TA_int,NULL,"ColorCount"," number of colors in palatte","","",
    0,0,-1,0,NULL,cssElCFun_DT_GraphViewSpec_ColorCount_stub,NULL},
  {&TA_void,NULL,"SetBgColor"," sets background color based on color type","","",
    0,0,-1,0,NULL,cssElCFun_DT_GraphViewSpec_SetBgColor_stub,NULL},
  {&TA_void,NULL,"UpdateLineFeatures"," apply specified sequences to update line features","MENU MENU_ON_Actions ","",
    0,1,0,0,NULL,cssElCFun_DT_GraphViewSpec_UpdateLineFeatures_stub,TA_DT_GraphViewSpec_UpdateLineFeatures_MethArgs},
  {&TA_void,NULL,"SetLineWidths"," set the line widths of all lines to this value","MENU ","",
    0,1,-1,0,NULL,cssElCFun_DT_GraphViewSpec_SetLineWidths_stub,TA_DT_GraphViewSpec_SetLineWidths_MethArgs},
  {&TA_void,NULL,"SetLineType"," set all line types to given type","MENU ","",
    0,1,-1,0,NULL,cssElCFun_DT_GraphViewSpec_SetLineType_stub,TA_DT_GraphViewSpec_SetLineType_MethArgs},
  {&TA_void,NULL,"ShareAxes"," make all columns share the same Y axis (first axis in group)","MENU MENU_SEP_BEFORE CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_DT_GraphViewSpec_ShareAxes_stub,NULL},
  {&TA_void,NULL,"SeparateAxes"," each column of data gets its own Y axis","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_DT_GraphViewSpec_SeparateAxes_stub,NULL},
  {&TA_void,NULL,"PlotRows"," plot the data across rows of grouped columns (x axis = column index, y axis = values for each column in one row) instead of down the columns","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_DT_GraphViewSpec_PlotRows_stub,NULL},
  {&TA_void,NULL,"PlotCols"," plot the data down columns (standard mode)","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_DT_GraphViewSpec_PlotCols_stub,NULL},
  {&TA_void,NULL,"TraceIncrement"," each subsequent trace of data (pass through the same X axis values) is incremented by given amount, producing a 3D-like effect","MENU MENU_SEP_BEFORE ","",
    0,2,0,0,NULL,cssElCFun_DT_GraphViewSpec_TraceIncrement_stub,TA_DT_GraphViewSpec_TraceIncrement_MethArgs},
  {&TA_void,NULL,"StackTraces"," arrange subsequent traces of data (pass through the same X axis values) in non-overlapping vertically-arranged stacks","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_DT_GraphViewSpec_StackTraces_stub,NULL},
  {&TA_void,NULL,"UnStackTraces"," subsequent traces of data (pass through the same X axis values) are plotted overlapping on top of each other","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_DT_GraphViewSpec_UnStackTraces_stub,NULL},
  {&TA_void,NULL,"StackSharedAxes"," arrange lines that share the same Y axis in non-overlapping vertically-arranged stacks","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_DT_GraphViewSpec_StackSharedAxes_stub,NULL},
  {&TA_void,NULL,"UnStackSharedAxes"," lines that share the same Y axis are plotted overlapping on top of each other","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_DT_GraphViewSpec_UnStackSharedAxes_stub,NULL},
  NULL};
static EnumDef_data TA_DA_GridViewSpec_DisplayStyle[]={
  {"TEXT"," Draw using text only","",0},
  {"BLOCK"," Draw using color block only","",1},
  {"TEXT_AND_BLOCK"," Draw using both color block with text","",2},
  NULL};
static int DA_GridViewSpec::* TA_DA_GridViewSpec_MbrOff;
static MemberDef_data TA_DA_GridViewSpec_MemberDef[]={
  {&TA_PosTDCoord,NULL,"pos"," position of the data in absolute coordinates","","",
    *((ta_memb_ptr*)&(TA_DA_GridViewSpec_MbrOff=(int DA_GridViewSpec::*)(&DA_GridViewSpec::pos))),0,NULL,0},
  {NULL,"::DisplayStyle","display_style"," can display as text, block, or both","","",
    *((ta_memb_ptr*)&(TA_DA_GridViewSpec_MbrOff=(int DA_GridViewSpec::*)(&DA_GridViewSpec::display_style))),0,NULL,0},
  {&TA_bool,NULL,"scale_on"," adjust overall scale including this data","","",
    *((ta_memb_ptr*)&(TA_DA_GridViewSpec_MbrOff=(int DA_GridViewSpec::*)(&DA_GridViewSpec::scale_on))),0,NULL,0},
  NULL};
static EnumDef_data TA_DT_GridViewSpec_BlockFill[]={
  {"COLOR"," color indicates value","",0},
  {"AREA"," area indicates value","",1},
  {"LINEAR"," linear size of square side indicates value","",2},
  NULL};
static EnumDef_data TA_DT_GridViewSpec_MatrixLayout[]={
  {"DEFAULT"," use current default layout","",0},
  {"LFT_RGT_BOT_TOP"," [3412] Incr col first, then decr row, start at bot left","",1},
  {"LFT_RGT_TOP_BOT"," [1234] Incr col first, then incr row, start at top left","",2},
  {"BOT_TOP_LFT_RGT"," [2413] Decr row first, then incr col, start at bot left","",3},
  {"TOP_BOT_LFT_RGT"," [1324] Incr row first, then incr col, start at top left","",4},
  NULL};
static int DT_GridViewSpec::* TA_DT_GridViewSpec_MbrOff;
static MemberDef_data TA_DT_GridViewSpec_MemberDef[]={
  {&TA_PosTDCoord,NULL,"pos"," position of the datatable in absolute coordinates","","",
    *((ta_memb_ptr*)&(TA_DT_GridViewSpec_MbrOff=(int DT_GridViewSpec::*)(&DT_GridViewSpec::pos))),0,NULL,0},
  {&TA_PosTDCoord,NULL,"geom"," relative geometry (maximum extent) of the datatable, just for El's, not subgroups","","",
    *((ta_memb_ptr*)&(TA_DT_GridViewSpec_MbrOff=(int DT_GridViewSpec::*)(&DT_GridViewSpec::geom))),0,NULL,0},
  {&TA_PosTDCoord,NULL,"full_geom"," full absolute geometry (maximum extent) of everything under this one","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_DT_GridViewSpec_MbrOff=(int DT_GridViewSpec::*)(&DT_GridViewSpec::full_geom))),0,NULL,0},
  {NULL,"::MatrixLayout","layout"," current layout of the data table","","",
    *((ta_memb_ptr*)&(TA_DT_GridViewSpec_MbrOff=(int DT_GridViewSpec::*)(&DT_GridViewSpec::layout))),0,NULL,0},
  {&TA_bool,NULL,"use_gp_name"," use the group name instead of the El names","","",
    *((ta_memb_ptr*)&(TA_DT_GridViewSpec_MbrOff=(int DT_GridViewSpec::*)(&DT_GridViewSpec::use_gp_name))),0,NULL,0},
  {NULL,"DA_GridViewSpec::DisplayStyle","display_style"," can display as text, block, or both","","",
    *((ta_memb_ptr*)&(TA_DT_GridViewSpec_MbrOff=(int DT_GridViewSpec::*)(&DT_GridViewSpec::display_style))),0,NULL,0},
  {&TA_bool,NULL,"scale_on"," adjust overall scale including this data (or not)","","",
    *((ta_memb_ptr*)&(TA_DT_GridViewSpec_MbrOff=(int DT_GridViewSpec::*)(&DT_GridViewSpec::scale_on))),0,NULL,0},
  {&TA_bool,NULL,"customized"," did the use customize the positions of elements in here? if so, don't redo layout with new items","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_DT_GridViewSpec_MbrOff=(int DT_GridViewSpec::*)(&DT_GridViewSpec::customized))),0,NULL,0},
  NULL};
static MethodArgs_data TA_DT_GridViewSpec_UpdateLayout_MethArgs[]={
  {NULL,"::MatrixLayout","ml","DEFAULT"},
  NULL};
static MethodArgs_data TA_DT_GridViewSpec_GetMinMaxScale_MethArgs[]={
  {&TA_MinMax_ref,NULL,"mm",""},
  {&TA_bool,NULL,"first","true"},
  NULL};
static MethodDef_data TA_DT_GridViewSpec_MethodDef[]={
  {&TA_int,NULL,"UpdateLayout"," enforce the geometry to fit with no spaces or overlap, returns maxx","MENU MENU_ON_Actions ","",
    0,1,0,0,NULL,cssElCFun_DT_GridViewSpec_UpdateLayout_stub,TA_DT_GridViewSpec_UpdateLayout_MethArgs},
  {&TA_void,NULL,"UpdateGeom"," Get the Geometry from the positions of visibles","MENU ","",
    0,0,-1,0,NULL,cssElCFun_DT_GridViewSpec_UpdateGeom_stub,NULL},
  {&TA_void,NULL,"GetMinMaxScale"," get min and max data range for scaling","","",
    0,2,1,0,NULL,cssElCFun_DT_GridViewSpec_GetMinMaxScale_stub,TA_DT_GridViewSpec_GetMinMaxScale_MethArgs},
  NULL};
static int DataArray<float_RArray>::* TA_DataArray_float_RArray__MbrOff;
static MemberDef_data TA_DataArray_float_RArray__MemberDef[]={
  {NULL,"::float_RArray_ptr","ar"," the array itself","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_DataArray_float_RArray__MbrOff=(int DataArray<float_RArray>::*)(&DataArray<float_RArray>::ar))),0,NULL,0},
  NULL};
static int DataArray<String_Array>::* TA_DataArray_String_Array__MbrOff;
static MemberDef_data TA_DataArray_String_Array__MemberDef[]={
  {NULL,"::String_Array_ptr","ar"," the array itself","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_DataArray_String_Array__MbrOff=(int DataArray<String_Array>::*)(&DataArray<String_Array>::ar))),0,NULL,0},
  NULL};
static EnumDef_data TA_taFile_OpenMode[]={
  {"NO_AUTO"," don't automatically open","",0},
  {"READ"," auto open in READ mode..","",1},
  {"WRITE","","",2},
  {"APPEND","","",3},
  NULL};
static int taFile::* TA_taFile_MbrOff;
static MemberDef_data TA_taFile_MemberDef[]={
  {&TA_taString,NULL,"fname"," file name","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taFile_MbrOff=(int taFile::*)(&taFile::fname))),0,NULL,0},
  {NULL,"::OpenMode","mode"," auto-open file in this mode (for auto)","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taFile_MbrOff=(int taFile::*)(&taFile::mode))),0,NULL,0},
  {&TA_bool,NULL,"cmp"," compressed mode","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taFile_MbrOff=(int taFile::*)(&taFile::cmp))),0,NULL,0},
  {&TA_bool,NULL,"file_selected"," was a file selected last operation?","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taFile_MbrOff=(int taFile::*)(&taFile::file_selected))),0,NULL,0},
  {&TA_taivGetFile_ptr,NULL,"gf"," ","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taFile_MbrOff=(int taFile::*)(&taFile::gf))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taFile_OpenFile_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm"," 0"},
  {&TA_bool,NULL,"no_dlg"," false"},
  NULL};
static MethodArgs_data TA_taFile_SaveFile_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm"," 0"},
  {&TA_bool,NULL,"no_dlg"," false"},
  NULL};
static MethodArgs_data TA_taFile_SaveAsFile_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm"," 0"},
  {&TA_bool,NULL,"no_dlg"," false"},
  NULL};
static MethodArgs_data TA_taFile_AppendFile_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm"," 0"},
  {&TA_bool,NULL,"no_dlg"," false"},
  NULL};
static MethodDef_data TA_taFile_MethodDef[]={
  {&TA_istream_ptr,NULL,"OpenFile"," to get a file for reading (already exists)","","",
    0,2,0,0,NULL,cssElCFun_taFile_OpenFile_stub,TA_taFile_OpenFile_MethArgs},
  {&TA_ostream_ptr,NULL,"SaveFile"," to save to an existing file","","",
    0,2,0,0,NULL,cssElCFun_taFile_SaveFile_stub,TA_taFile_SaveFile_MethArgs},
  {&TA_ostream_ptr,NULL,"SaveAsFile"," to save with a new file","","",
    0,2,0,0,NULL,cssElCFun_taFile_SaveAsFile_stub,TA_taFile_SaveAsFile_MethArgs},
  {&TA_ostream_ptr,NULL,"AppendFile"," to save a file for appending (already exists)","","",
    0,2,0,0,NULL,cssElCFun_taFile_AppendFile_stub,TA_taFile_AppendFile_MethArgs},
  {&TA_void,NULL,"CloseFile"," close the stream","","",
    0,0,-1,0,NULL,cssElCFun_taFile_CloseFile_stub,NULL},
  {&TA_void,NULL,"AutoOpen"," auto-open a file based on mode","","",
    0,0,-1,0,NULL,cssElCFun_taFile_AutoOpen_stub,NULL},
  {&TA_bool,NULL,"IsOpen"," check if file is open","","",
    0,0,-1,0,NULL,cssElCFun_taFile_IsOpen_stub,NULL},
  {&TA_void,NULL,"UpdateGF"," transfer stuff to the getfile","","",
    0,0,-1,0,NULL,cssElCFun_taFile_UpdateGF_stub,NULL},
  {&TA_void,NULL,"UpdateMe"," transfer stuff to me from getfile","","",
    0,0,-1,0,NULL,cssElCFun_taFile_UpdateMe_stub,NULL},
  {&TA_void,NULL,"GetGetFile"," make sure we have a getfile","","",
    0,0,-1,0,NULL,cssElCFun_taFile_GetGetFile_stub,NULL},
  NULL};
static int ScriptBase::* TA_ScriptBase_MbrOff;
static MemberDef_data TA_ScriptBase_MemberDef[]={
  {&TA_cssProgSpace_ptr,NULL,"script"," the script, if defined","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_ScriptBase_MbrOff=(int ScriptBase::*)(&ScriptBase::script))),0,NULL,0},
  {&TA_taFile,NULL,"script_file"," file to use for the script","","",
    *((ta_memb_ptr*)&(TA_ScriptBase_MbrOff=(int ScriptBase::*)(&ScriptBase::script_file))),0,NULL,0},
  {&TA_taString,NULL,"script_string"," script code to be run, instead of loading from file","","",
    *((ta_memb_ptr*)&(TA_ScriptBase_MbrOff=(int ScriptBase::*)(&ScriptBase::script_string))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ScriptBase_SetScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"file_nm",""},
  NULL};
static MethodArgs_data TA_ScriptBase_LoadScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"file_nm"," 0"},
  NULL};
static MethodArgs_data TA_ScriptBase_LoadScriptString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"string"," 0"},
  NULL};
static MethodDef_data TA_ScriptBase_MethodDef[]={
  {&TA_bool,NULL,"HasScript"," returns true if we have some kind of script file or string to run","","",
    0,0,-1,0,NULL,cssElCFun_ScriptBase_HasScript_stub,NULL},
  {&TA_bool,NULL,"RunScript"," run the script (returns false for no scr)","","",
    0,0,-1,0,NULL,cssElCFun_ScriptBase_RunScript_stub,NULL},
  {&TA_void,NULL,"SetScript"," set the script file (e.g. from the script)","","",
    0,1,-1,0,NULL,cssElCFun_ScriptBase_SetScript_stub,TA_ScriptBase_SetScript_MethArgs},
  {&TA_void,NULL,"LoadScript"," compile script from script file into internal runnable format","MENU LABEL_Compile MENU_ON_Actions ARGC_0 ","",
    0,1,0,0,NULL,cssElCFun_ScriptBase_LoadScript_stub,TA_ScriptBase_LoadScript_MethArgs},
  {&TA_void,NULL,"LoadScriptString"," load and recompile the script string","","",
    0,1,0,0,NULL,cssElCFun_ScriptBase_LoadScriptString_stub,TA_ScriptBase_LoadScriptString_MethArgs},
  {&TA_void,NULL,"InteractScript"," change to this shell in script (terminal) window to interact, debug etc script","MENU LABEL_Interact ","",
    0,0,-1,0,NULL,cssElCFun_ScriptBase_InteractScript_stub,NULL},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Remove_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Edit_El_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__AddUniqNameOld_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__LinkUniqNameOld_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__FindEl_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__AddEl_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Add_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__AddUnique_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__AddUniqNameNew_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Insert_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Replace_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::ScriptBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__ReplaceEl_MethArgs[]={
  {NULL,"::ScriptBase_ptr","old_it",""},
  {NULL,"::ScriptBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::ScriptBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__RemoveEl_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__DuplicateEl_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Link_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__LinkUnique_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__LinkUniqNameNew_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__InsertLink_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__ReplaceLink_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::ScriptBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__ReplaceLinkEl_MethArgs[]={
  {NULL,"::ScriptBase_ptr","old_it",""},
  {NULL,"::ScriptBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::ScriptBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Push_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__MoveEl_MethArgs[]={
  {NULL,"::ScriptBase_ptr","from",""},
  {NULL,"::ScriptBase_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__Transfer_MethArgs[]={
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__MoveBefore_MethArgs[]={
  {NULL,"::ScriptBase_ptr","trg",""},
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_ScriptBase__MoveAfter_MethArgs[]={
  {NULL,"::ScriptBase_ptr","trg",""},
  {NULL,"::ScriptBase_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_ScriptBase__MethodDef[]={
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there)","","",
    2,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Find_stub,TA_taPtrList_ScriptBase__Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove element at given index","","",
    4,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Remove_stub,TA_taPtrList_ScriptBase__Remove_MethArgs},
  {NULL,"::ScriptBase_ptr","SafeEl"," element at index","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__SafeEl_stub,TA_taPtrList_ScriptBase__SafeEl_MethArgs},
  {NULL,"::ScriptBase_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__FastEl_stub,TA_taPtrList_ScriptBase__FastEl_MethArgs},
  {NULL,"::ScriptBase_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Edit_El_stub,TA_taPtrList_ScriptBase__Edit_El_MethArgs},
  {NULL,"::ScriptBase_ptr","FindName"," find given named element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taPtrList_ScriptBase__FindName_stub,TA_taPtrList_ScriptBase__FindName_MethArgs},
  {NULL,"::ScriptBase_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Pop_stub,NULL},
  {NULL,"::ScriptBase_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Peek_stub,NULL},
  {NULL,"::ScriptBase_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__AddUniqNameOld_stub,TA_taPtrList_ScriptBase__AddUniqNameOld_MethArgs},
  {NULL,"::ScriptBase_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__LinkUniqNameOld_stub,TA_taPtrList_ScriptBase__LinkUniqNameOld_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__FindEl_stub,TA_taPtrList_ScriptBase__FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__AddEl_stub,TA_taPtrList_ScriptBase__AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Add_stub,TA_taPtrList_ScriptBase__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__AddUnique_stub,TA_taPtrList_ScriptBase__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__AddUniqNameNew_stub,TA_taPtrList_ScriptBase__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," Add or insert element at idx (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Insert_stub,TA_taPtrList_ScriptBase__Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Replace_stub,TA_taPtrList_ScriptBase__Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__ReplaceEl_stub,TA_taPtrList_ScriptBase__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__ReplaceName_stub,TA_taPtrList_ScriptBase__ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__RemoveEl_stub,TA_taPtrList_ScriptBase__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__DuplicateEl_stub,TA_taPtrList_ScriptBase__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Link_stub,TA_taPtrList_ScriptBase__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__LinkUnique_stub,TA_taPtrList_ScriptBase__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__LinkUniqNameNew_stub,TA_taPtrList_ScriptBase__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taPtrList_ScriptBase__InsertLink_stub,TA_taPtrList_ScriptBase__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__ReplaceLink_stub,TA_taPtrList_ScriptBase__ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__ReplaceLinkEl_stub,TA_taPtrList_ScriptBase__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__ReplaceLinkName_stub,TA_taPtrList_ScriptBase__ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Push_stub,TA_taPtrList_ScriptBase__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__MoveEl_stub,TA_taPtrList_ScriptBase__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer item to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__Transfer_stub,TA_taPtrList_ScriptBase__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__MoveBefore_stub,TA_taPtrList_ScriptBase__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_ScriptBase__MoveAfter_stub,TA_taPtrList_ScriptBase__MoveAfter_MethArgs},
  NULL};
static int SArg_Array::* TA_SArg_Array_MbrOff;
static MemberDef_data TA_SArg_Array_MemberDef[]={
  {&TA_String_Array,NULL,"labels"," labels for each argument","","",
    *((ta_memb_ptr*)&(TA_SArg_Array_MbrOff=(int SArg_Array::*)(&SArg_Array::labels))),0,NULL,0},
  NULL};
static int Script::* TA_Script_MbrOff;
static MemberDef_data TA_Script_MemberDef[]={
  {&TA_ScriptBase_List,NULL,"recompile_scripts"," list of scripts to be recompiled in wait proc","HIDDEN ","",
    (ta_memb_ptr)NULL,1,(void*)(&Script::recompile_scripts),0},
  {&TA_bool,NULL,"recording"," currently recording?","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_Script_MbrOff=(int Script::*)(&Script::recording))),0,NULL,0},
  {&TA_bool,NULL,"auto_run"," run automatically at startup?","","",
    *((ta_memb_ptr*)&(TA_Script_MbrOff=(int Script::*)(&Script::auto_run))),0,NULL,0},
  {&TA_SArg_Array,NULL,"s_args"," string-valued arguments to pass to script","","",
    *((ta_memb_ptr*)&(TA_Script_MbrOff=(int Script::*)(&Script::s_args))),0,NULL,0},
  NULL};
static MethodArgs_data TA_Script_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_Script_CastCopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_Script_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_Script_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","0"},
  {&TA_TAPtr,NULL,"par_stop","0"},
  NULL};
static MethodArgs_data TA_Script_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_Script_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"type","0"},
  NULL};
static MethodArgs_data TA_Script_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_Script_GetEnumString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_Script_GetEnumVal_MethArgs[]={
  {&TA_const_char_ptr,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_Script_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  NULL};
static MethodArgs_data TA_Script_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_Script_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","0"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_Script_Edit_MethArgs[]={
  {&TA_bool,NULL,"wait","false"},
  NULL};
static MethodArgs_data TA_Script_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_Script_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_Script_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_Script_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_Script_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_char_ptr,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_Script_CallFun_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_Script_SetScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"file_nm",""},
  NULL};
static MethodArgs_data TA_Script_LoadScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"file_nm"," 0"},
  NULL};
static MethodArgs_data TA_Script_LoadScriptString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"string"," 0"},
  NULL};
static MethodArgs_data TA_Script_Record_MethArgs[]={
  {&TA_const_char_ptr,NULL,"file_nm"," 0"},
  NULL};
static MethodDef_data TA_Script_MethodDef[]={
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_Script_UnSafeCopy_stub,TA_Script_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"CastCopyTo","","","",
    0,1,-1,0,NULL,cssElCFun_Script_CastCopyTo_stub,TA_Script_CastCopyTo_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_Script_GetOwner_stub,TA_Script_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_Script_GetPath_stub,TA_Script_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_Script_FindFromPath_stub,TA_Script_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    0,2,0,0,NULL,cssElCFun_Script_New_stub,TA_Script_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_Script_UpdateAfterEdit_stub,NULL},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_Script_InheritsFrom_stub,TA_Script_InheritsFrom_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","","",
    0,2,-1,0,NULL,cssElCFun_Script_GetEnumString_stub,TA_Script_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","","",
    0,2,1,0,NULL,cssElCFun_Script_GetEnumVal_stub,TA_Script_GetEnumVal_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_Script_Load_stub,TA_Script_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_Script_Save_stub,TA_Script_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_Script_SaveAs_stub,TA_Script_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object NO_SCRIPT ","",
    0,1,0,0,NULL,cssElCFun_Script_Edit_stub,TA_Script_Edit_MethArgs},
  {&TA_bool,NULL,"CloseEdit"," close any open edit dialogs for this object","","",
    0,0,-1,0,NULL,cssElCFun_Script_CloseEdit_stub,NULL},
  {&TA_void,NULL,"Close"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) ","",
    0,0,-1,0,NULL,cssElCFun_Script_Close_stub,NULL},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_Script_CopyFrom_stub,TA_Script_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_Script_CopyTo_stub,TA_Script_CopyTo_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_Script_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_Script_ChangeMyType_stub,TA_Script_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing in a select edit dialog -- if already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_Script_SelectForEdit_stub,TA_Script_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog -- if already on dialog, removes it & returns false (else true)","MENU ","",
    0,3,-1,0,NULL,cssElCFun_Script_SelectFunForEdit_stub,TA_Script_SelectFunForEdit_MethArgs},
  {&TA_void,NULL,"Help"," get help on using this object","MENU ","",
    0,0,-1,0,NULL,cssElCFun_Script_Help_stub,NULL},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","","",
    0,1,-1,0,NULL,cssElCFun_Script_CallFun_stub,TA_Script_CallFun_MethArgs},
  {&TA_bool,NULL,"HasScript"," returns true if we have some kind of script file or string to run","","",
    0,0,-1,0,NULL,cssElCFun_Script_HasScript_stub,NULL},
  {&TA_bool,NULL,"RunScript"," run the script (returns false for no scr)","","",
    0,0,-1,0,NULL,cssElCFun_Script_RunScript_stub,NULL},
  {&TA_void,NULL,"SetScript"," set the script file (e.g. from the script)","","",
    0,1,-1,0,NULL,cssElCFun_Script_SetScript_stub,TA_Script_SetScript_MethArgs},
  {&TA_void,NULL,"LoadScript"," compile script from script file into internal runnable format","MENU LABEL_Compile MENU_ON_Actions ARGC_0 ","",
    0,1,0,0,NULL,cssElCFun_Script_LoadScript_stub,TA_Script_LoadScript_MethArgs},
  {&TA_void,NULL,"LoadScriptString"," load and recompile the script string","","",
    0,1,0,0,NULL,cssElCFun_Script_LoadScriptString_stub,TA_Script_LoadScriptString_MethArgs},
  {&TA_void,NULL,"InteractScript"," change to this shell in script (terminal) window to interact, debug etc script","MENU LABEL_Interact ","",
    0,0,-1,0,NULL,cssElCFun_Script_InteractScript_stub,NULL},
  {&TA_bool,NULL,"Run"," run the script (returns false for no scr)","BUTTON GHOST_OFF_recording ","",
    0,0,-1,0,NULL,cssElCFun_Script_Run_stub,NULL},
  {&TA_void,NULL,"Record"," record script code for interface actions","BUTTON GHOST_OFF_recording ARGC_0 NO_SCRIPT ","",
    0,1,0,0,NULL,cssElCFun_Script_Record_stub,TA_Script_Record_MethArgs},
  {&TA_void,NULL,"StopRecording"," stop recording script code","BUTTON LABEL_StopRec GHOST_ON_recording ","",
    0,0,-1,0,NULL,cssElCFun_Script_StopRecording_stub,NULL},
  {&TA_void,NULL,"Interact"," change to this shell in script (terminal) window to interact, debug etc script","BUTTON GHOST_OFF_recording ","",
    0,0,-1,0,NULL,cssElCFun_Script_Interact_stub,NULL},
  {&TA_void,NULL,"Clear"," clear script file","BUTTON CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_Script_Clear_stub,NULL},
  {&TA_void,NULL,"Compile"," compile script from script file into internal runnable format","BUTTON GHOST_OFF_recording ","",
    0,0,-1,0,NULL,cssElCFun_Script_Compile_stub,NULL},
  {&TA_void,NULL,"ScriptAllWinPos"," record script code to set window positions, iconified","MENU MENU_ON_Actions NO_SCRIPT ","",
    0,0,-1,0,NULL,cssElCFun_Script_ScriptAllWinPos_stub,NULL},
  {&TA_void,NULL,"AutoRun"," run this script if auto_run is set","","",
    0,0,-1,0,NULL,cssElCFun_Script_AutoRun_stub,NULL},
  NULL};
static MethodArgs_data TA_Script_MGroup_Run_mc_MethArgs[]={
  {&TA_taivMenuEl_ptr,NULL,"sel",""},
  NULL};
static MethodDef_data TA_Script_MGroup_MethodDef[]={
  {&TA_void,NULL,"StopRecording","","","",
    0,0,-1,0,NULL,cssElCFun_Script_MGroup_StopRecording_stub,NULL},
  {&TA_void,NULL,"AutoRun","","","",
    0,0,-1,0,NULL,cssElCFun_Script_MGroup_AutoRun_stub,NULL},
  {&TA_void,NULL,"Run_mc","","","",
    0,1,-1,0,NULL,cssElCFun_Script_MGroup_Run_mc_stub,TA_Script_MGroup_Run_mc_MethArgs},
  NULL};
static int FunLookup::* TA_FunLookup_MbrOff;
static MemberDef_data TA_FunLookup_MemberDef[]={
  {&TA_MinMaxRange,NULL,"x_range"," range of the x axis","","",
    *((ta_memb_ptr*)&(TA_FunLookup_MbrOff=(int FunLookup::*)(&FunLookup::x_range))),0,NULL,0},
  {&TA_float,NULL,"res"," resolution of the function","","",
    *((ta_memb_ptr*)&(TA_FunLookup_MbrOff=(int FunLookup::*)(&FunLookup::res))),0,NULL,0},
  {&TA_float,NULL,"res_inv"," 1/res: speeds computation because multiplies are faster than divides","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_FunLookup_MbrOff=(int FunLookup::*)(&FunLookup::res_inv))),0,NULL,0},
  NULL};
static MethodArgs_data TA_FunLookup_Yval_MethArgs[]={
  {&TA_float,NULL,"x",""},
  NULL};
static MethodArgs_data TA_FunLookup_Xval_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_FunLookup_Eval_MethArgs[]={
  {&TA_float,NULL,"x",""},
  NULL};
static MethodArgs_data TA_FunLookup_Plot_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_FunLookup_Convolve_MethArgs[]={
  {&TA_const_FunLookup_ref,NULL,"src",""},
  {&TA_const_FunLookup_ref,NULL,"con",""},
  NULL};
static MethodDef_data TA_FunLookup_MethodDef[]={
  {&TA_float_ref,NULL,"Yval"," get y value at given x value (no interpolation)","","",
    0,1,-1,0,NULL,cssElCFun_FunLookup_Yval_stub,TA_FunLookup_Yval_MethArgs},
  {&TA_float,NULL,"Xval"," get x value for given index position within list","","",
    0,1,-1,0,NULL,cssElCFun_FunLookup_Xval_stub,TA_FunLookup_Xval_MethArgs},
  {&TA_float,NULL,"Eval","","","",
    0,1,-1,0,NULL,cssElCFun_FunLookup_Eval_stub,TA_FunLookup_Eval_MethArgs},
  {&TA_void,NULL,"AllocForRange"," allocate values for given range and resolution","","",
    0,0,-1,0,NULL,cssElCFun_FunLookup_AllocForRange_stub,NULL},
  {&TA_void,NULL,"Plot"," generate file for plotting function","","",
    0,1,-1,0,NULL,cssElCFun_FunLookup_Plot_stub,TA_FunLookup_Plot_MethArgs},
  {&TA_void,NULL,"Convolve"," convolve source array with convolve array and put result here","","",
    0,2,-1,0,NULL,cssElCFun_FunLookup_Convolve_stub,TA_FunLookup_Convolve_MethArgs},
  NULL};
static int FunLookupND::* TA_FunLookupND_MbrOff;
static MemberDef_data TA_FunLookupND_MemberDef[]={
  {&TA_int,NULL,"n_dims"," number of dimensions","","",
    *((ta_memb_ptr*)&(TA_FunLookupND_MbrOff=(int FunLookupND::*)(&FunLookupND::n_dims))),0,NULL,0},
  {&TA_float_Array,NULL,"mesh_pts"," the n-dimensional mesh of function values at specific points in n_dims space","","",
    *((ta_memb_ptr*)&(TA_FunLookupND_MbrOff=(int FunLookupND::*)(&FunLookupND::mesh_pts))),0,NULL,0},
  {&TA_int_Array,NULL,"mesh_dim_sz"," [n_dims] number of points along each dimension","","",
    *((ta_memb_ptr*)&(TA_FunLookupND_MbrOff=(int FunLookupND::*)(&FunLookupND::mesh_dim_sz))),0,NULL,0},
  {&TA_float_Array,NULL,"deltas"," [n_dims] size of the mesh increment for each dimension","","",
    *((ta_memb_ptr*)&(TA_FunLookupND_MbrOff=(int FunLookupND::*)(&FunLookupND::deltas))),0,NULL,0},
  {&TA_float_Array,NULL,"range_mins"," [n_dims] minimum dimension values for each dimension","","",
    *((ta_memb_ptr*)&(TA_FunLookupND_MbrOff=(int FunLookupND::*)(&FunLookupND::range_mins))),0,NULL,0},
  {&TA_float_Array,NULL,"range_maxs"," [n_dims] maximum dimension values for each dimension","","",
    *((ta_memb_ptr*)&(TA_FunLookupND_MbrOff=(int FunLookupND::*)(&FunLookupND::range_maxs))),0,NULL,0},
  NULL};
static MethodArgs_data TA_FunLookupND_EvalArray_MethArgs[]={
  {&TA_float_ptr,NULL,"x",""},
  {&TA_int_ptr,NULL,"idx_map"," 0"},
  NULL};
static MethodArgs_data TA_FunLookupND_EvalArgs_MethArgs[]={
  {&TA_float,NULL,"d0",""},
  {&TA_float,NULL,"d1","0.0f"},
  {&TA_float,NULL,"d2","0.0f"},
  {&TA_float,NULL,"d3","0.0f"},
  {&TA_float,NULL,"d4","0.0f"},
  {&TA_float,NULL,"d5","0.0f"},
  {&TA_float,NULL,"d6","0.0f"},
  {&TA_float,NULL,"d7","0.0f"},
  {&TA_float,NULL,"d8","0.0f"},
  {&TA_float,NULL,"d9","0.0f"},
  NULL};
static MethodArgs_data TA_FunLookupND_LoadTable_MethArgs[]={
  {&TA_istream_ref,NULL,"is",""},
  NULL};
static MethodArgs_data TA_FunLookupND_ListTable_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm"," cout"},
  NULL};
static MethodArgs_data TA_FunLookupND_ShiftNorm_MethArgs[]={
  {&TA_float,NULL,"desired_mean",""},
  NULL};
static MethodArgs_data TA_FunLookupND_MulNorm_MethArgs[]={
  {&TA_float,NULL,"desired_mean",""},
  NULL};
static MethodDef_data TA_FunLookupND_MethodDef[]={
  {&TA_float,NULL,"EvalArray"," evaluate function given an n_dims array of dimension input values (index map for mapping the array onto internally-stored dimensions if non-NULL)","","",
    0,2,1,0,NULL,cssElCFun_FunLookupND_EvalArray_stub,TA_FunLookupND_EvalArray_MethArgs},
  {&TA_float,NULL,"EvalArgs"," evaluate function given n_dims supplied values as args (in direct correspondence with internally-stored dimensions)","BUTTON ","",
    0,10,1,0,NULL,cssElCFun_FunLookupND_EvalArgs_stub,TA_FunLookupND_EvalArgs_MethArgs},
  {&TA_void,NULL,"LoadTable"," load a lookup table of function values at specific points in n_dims space","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_FunLookupND_LoadTable_stub,TA_FunLookupND_LoadTable_MethArgs},
  {&TA_void,NULL,"ListTable"," output the lookup table in text format","BUTTON ARGC_0 CONFIRM ","",
    0,1,0,0,NULL,cssElCFun_FunLookupND_ListTable_stub,TA_FunLookupND_ListTable_MethArgs},
  {&TA_void,NULL,"ShiftNorm"," normalize the function values via an additive shift to achieve overall desired mean","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_FunLookupND_ShiftNorm_stub,TA_FunLookupND_ShiftNorm_MethArgs},
  {&TA_void,NULL,"MulNorm"," normalize the function values by multiplying positive and negative values by separate scaling factors to achieve desired mean","BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_FunLookupND_MulNorm_stub,TA_FunLookupND_MulNorm_MethArgs},
  NULL};

// Init Function


static bool ta_Init_ta_misc_done = false;

void ta_Init_ta_misc() {
  TypeDef* sbt;

  if(ta_Init_ta_misc_done) return;
  ta_Init_ta_misc_done = true;

  ta_Init_ta();
  ta_Init_iv_graphic();

  taMisc::in_init = true;

  taMisc::types.Add(&TA_MenuGroup_impl);
    TAI_MenuGroup_impl = new MenuGroup_impl;
    TA_MenuGroup_impl.AddParFormal(&TA_class);
    TA_MenuGroup_impl.AddParCache(&TA_taBase);
    TA_MenuGroup_impl.AddClassPar(&TA_taBase_Group,0);
    tac_AddMembers(TA_MenuGroup_impl,TA_MenuGroup_impl_MemberDef);
  taMisc::types.Add(&TA_WinGeometry);
    TAI_WinGeometry = new WinGeometry;
    TA_WinGeometry.AddParFormal(&TA_class);
    TA_WinGeometry.AddParCache(&TA_taBase);
    TA_WinGeometry.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_WinGeometry,TA_WinGeometry_MemberDef);
    tac_AddMethods(TA_WinGeometry,TA_WinGeometry_MethodDef);
  taMisc::types.Add(&TA_WinBase);
    TAI_WinBase = new WinBase;
    TA_WinBase.AddParFormal(&TA_class);
    TA_WinBase.AddParCache(&TA_taBase);
    TA_WinBase.AddClassPar(&TA_taNBase,0);
    tac_AddEnum(TA_WinBase, "PrintFmt", "", "", "", "", TA_WinBase_PrintFmt);
    tac_AddMembers(TA_WinBase,TA_WinBase_MemberDef);
    tac_AddMethods(TA_WinBase,TA_WinBase_MethodDef);
  taMisc::types.Add(&TA_WinView);
    TAI_WinView = new WinView;
    TA_WinView.AddParFormal(&TA_class);
    TA_WinView.AddParCache(&TA_taBase);
    TA_WinView.AddClassPar(&TA_WinBase,0);
    tac_AddMembers(TA_WinView,TA_WinView_MemberDef);
    tac_AddMethods(TA_WinView,TA_WinView_MethodDef);
  taMisc::types.Add(&TA_WinMgr);
    TAI_WinMgr = new WinMgr;
    TA_WinMgr.AddParFormal(&TA_class);
    TA_WinMgr.AddParCache(&TA_taBase);
    TA_WinMgr.AddClassPar(&TA_WinBase,0);
    tac_AddMembers(TA_WinMgr,TA_WinMgr_MemberDef);
    tac_AddMethods(TA_WinMgr,TA_WinMgr_MethodDef);
  taMisc::types.Add(&TA_winbMisc);
    TAI_winbMisc = new winbMisc;
    TA_winbMisc.AddParFormal(&TA_class);
    tac_AddMembers(TA_winbMisc,TA_winbMisc_MemberDef);
    tac_AddMethods(TA_winbMisc,TA_winbMisc_MethodDef);
  taMisc::types.Add(&TA_WinBase_ptr);
    TA_WinBase_ptr.AddParents(&TA_WinBase);
  taMisc::types.Add(&TA_gpivGroupEls_ptr);
    TA_gpivGroupEls_ptr.AddParents(&TA_gpivGroupEls);
  taMisc::types.Add(&TA_const_MenuGroup_impl);
    TA_const_MenuGroup_impl.AddParents(&TA_const, &TA_MenuGroup_impl);
  taMisc::types.Add(&TA_const_MenuGroup_impl_ref);
    TA_const_MenuGroup_impl_ref.AddParents(&TA_const_MenuGroup_impl);
  taMisc::types.Add(&TA_const_WinGeometry);
    TA_const_WinGeometry.AddParents(&TA_const, &TA_WinGeometry);
  taMisc::types.Add(&TA_const_WinGeometry_ref);
    TA_const_WinGeometry_ref.AddParents(&TA_const_WinGeometry);
  taMisc::types.Add(&TA_taivMenu_List_ptr);
    TA_taivMenu_List_ptr.AddParents(&TA_taivMenu_List);
  taMisc::types.Add(&TA_taivDataList_ptr);
    TA_taivDataList_ptr.AddParents(&TA_taivDataList);
  taMisc::types.Add(&TA_taivMenu_List_ref);
    TA_taivMenu_List_ref.AddParents(&TA_taivMenu_List);
  taMisc::types.Add(&TA_const_WinBase);
    TA_const_WinBase.AddParents(&TA_const, &TA_WinBase);
  taMisc::types.Add(&TA_const_WinBase_ref);
    TA_const_WinBase_ref.AddParents(&TA_const_WinBase);
  taMisc::types.Add(&TA_AnimImgCapture);
    TAI_AnimImgCapture = new AnimImgCapture;
    TA_AnimImgCapture.AddParFormal(&TA_class);
    TA_AnimImgCapture.AddParCache(&TA_taBase);
    TA_AnimImgCapture.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_AnimImgCapture,TA_AnimImgCapture_MemberDef);
  taMisc::types.Add(&TA_taivHierMenu_List_ptr);
    TA_taivHierMenu_List_ptr.AddParents(&TA_taivHierMenu_List);
  taMisc::types.Add(&TA_const_AnimImgCapture);
    TA_const_AnimImgCapture.AddParents(&TA_const, &TA_AnimImgCapture);
  taMisc::types.Add(&TA_WinMgr_ptr);
    TA_WinMgr_ptr.AddParents(&TA_WinMgr);
  taMisc::types.Add(&TA_const_AnimImgCapture_ref);
    TA_const_AnimImgCapture_ref.AddParents(&TA_const_AnimImgCapture);
  taMisc::types.Add(&TA_const_WinView);
    TA_const_WinView.AddParents(&TA_const, &TA_WinView);
  taMisc::types.Add(&TA_const_WinView_ref);
    TA_const_WinView_ref.AddParents(&TA_const_WinView);
  taMisc::types.Add(&TA_WinView_Group);
    TAI_WinView_Group = new WinView_Group;
    TA_WinView_Group.AddParFormal(&TA_class);
    TA_WinView_Group.AddParCache(&TA_taBase);
    TA_WinView_Group.AddClassPar(&TA_taBase_Group,0);
  taMisc::types.Add(&TA_const_WinView_Group);
    TA_const_WinView_Group.AddParents(&TA_const, &TA_WinView_Group);
  taMisc::types.Add(&TA_WinView_MGroup);
    TAI_WinView_MGroup = new WinView_MGroup;
    TA_WinView_MGroup.AddParFormal(&TA_class);
    TA_WinView_MGroup.AddParCache(&TA_taBase);
    TA_WinView_MGroup.AddClassPar(&TA_MenuGroup_impl,0);
  taMisc::types.Add(&TA_const_WinView_Group_ref);
    TA_const_WinView_Group_ref.AddParents(&TA_const_WinView_Group);
  taMisc::types.Add(&TA_WinView_ptr);
    TA_WinView_ptr.AddParents(&TA_WinView);
  taMisc::types.Add(&TA_const_WinView_MGroup);
    TA_const_WinView_MGroup.AddParents(&TA_const, &TA_WinView_MGroup);
  taMisc::types.Add(&TA_const_WinMgr);
    TA_const_WinMgr.AddParents(&TA_const, &TA_WinMgr);
  taMisc::types.Add(&TA_const_WinView_MGroup_ref);
    TA_const_WinView_MGroup_ref.AddParents(&TA_const_WinView_MGroup);
  taMisc::types.Add(&TA_const_WinMgr_ref);
    TA_const_WinMgr_ref.AddParents(&TA_const_WinMgr);
  taMisc::types.Add(&TA_const_float);
    TA_const_float.AddParents(&TA_const, &TA_float);
  taMisc::types.Add(&TA_MinMax);
    TAI_MinMax = new MinMax;
    TA_MinMax.AddParFormal(&TA_class);
    TA_MinMax.AddParCache(&TA_taBase);
    TA_MinMax.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_MinMax,TA_MinMax_MemberDef);
    tac_AddMethods(TA_MinMax,TA_MinMax_MethodDef);
  taMisc::types.Add(&TA_MinMax_ref);
    TA_MinMax_ref.AddParents(&TA_MinMax);
  taMisc::types.Add(&TA_const_MinMax);
    TA_const_MinMax.AddParents(&TA_const, &TA_MinMax);
  taMisc::types.Add(&TA_MinMaxRange);
    TAI_MinMaxRange = new MinMaxRange;
    TA_MinMaxRange.AddParFormal(&TA_class);
    TA_MinMaxRange.AddParCache(&TA_taBase);
    TA_MinMaxRange.AddClassPar(&TA_MinMax,0);
    tac_AddMembers(TA_MinMaxRange,TA_MinMaxRange_MemberDef);
  taMisc::types.Add(&TA_const_MinMax_ref);
    TA_const_MinMax_ref.AddParents(&TA_const_MinMax);
  taMisc::types.Add(&TA_const_MinMaxRange);
    TA_const_MinMaxRange.AddParents(&TA_const, &TA_MinMaxRange);
  taMisc::types.Add(&TA_const_MinMaxRange_ref);
    TA_const_MinMaxRange_ref.AddParents(&TA_const_MinMaxRange);
  taMisc::types.Add(&TA_FixedMinMax);
    TAI_FixedMinMax = new FixedMinMax;
    TA_FixedMinMax.AddParFormal(&TA_class);
    TA_FixedMinMax.AddParCache(&TA_taBase);
    TA_FixedMinMax.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_FixedMinMax,TA_FixedMinMax_MemberDef);
    tac_AddMethods(TA_FixedMinMax,TA_FixedMinMax_MethodDef);
  taMisc::types.Add(&TA_const_FixedMinMax);
    TA_const_FixedMinMax.AddParents(&TA_const, &TA_FixedMinMax);
  taMisc::types.Add(&TA_const_FixedMinMax_ref);
    TA_const_FixedMinMax_ref.AddParents(&TA_const_FixedMinMax);
  taMisc::types.Add(&TA_Modulo);
    TAI_Modulo = new Modulo;
    TA_Modulo.AddParFormal(&TA_class);
    TA_Modulo.AddParCache(&TA_taBase);
    TA_Modulo.AddClassPar(&TA_taOBase,0);
    tac_AddMembers(TA_Modulo,TA_Modulo_MemberDef);
  taMisc::types.Add(&TA_const_Modulo);
    TA_const_Modulo.AddParents(&TA_const, &TA_Modulo);
  taMisc::types.Add(&TA_const_Modulo_ref);
    TA_const_Modulo_ref.AddParents(&TA_const_Modulo);
  taMisc::types.Add(&TA_const_int);
    TA_const_int.AddParents(&TA_const, &TA_int);
  taMisc::types.Add(&TA_MinMaxInt);
    TAI_MinMaxInt = new MinMaxInt;
    TA_MinMaxInt.AddParFormal(&TA_class);
    TA_MinMaxInt.AddParCache(&TA_taBase);
    TA_MinMaxInt.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_MinMaxInt,TA_MinMaxInt_MemberDef);
    tac_AddMethods(TA_MinMaxInt,TA_MinMaxInt_MethodDef);
  taMisc::types.Add(&TA_MinMaxInt_ref);
    TA_MinMaxInt_ref.AddParents(&TA_MinMaxInt);
  taMisc::types.Add(&TA_const_MinMaxInt);
    TA_const_MinMaxInt.AddParents(&TA_const, &TA_MinMaxInt);
  taMisc::types.Add(&TA_const_MinMaxInt_ref);
    TA_const_MinMaxInt_ref.AddParents(&TA_const_MinMaxInt);
  taMisc::types.Add(&TA_RndSeed);
    TAI_RndSeed = new RndSeed;
    TA_RndSeed.AddParFormal(&TA_class);
    TA_RndSeed.AddParCache(&TA_taBase);
    TA_RndSeed.AddClassPar(&TA_taOBase,0);
    tac_AddMembers(TA_RndSeed,TA_RndSeed_MemberDef);
    tac_AddMethods(TA_RndSeed,TA_RndSeed_MethodDef);
  taMisc::types.Add(&TA_const_RndSeed);
    TA_const_RndSeed.AddParents(&TA_const, &TA_RndSeed);
  taMisc::types.Add(&TA_const_RndSeed_ref);
    TA_const_RndSeed_ref.AddParents(&TA_const_RndSeed);
  taMisc::types.Add(&TA_Random);
    TAI_Random = new Random;
    TA_Random.AddParFormal(&TA_class);
    TA_Random.AddParCache(&TA_taBase);
    TA_Random.AddClassPar(&TA_taBase,0);
    tac_AddEnum(TA_Random, "Type", "", "", "", "", TA_Random_Type);
    tac_AddMembers(TA_Random,TA_Random_MemberDef);
    tac_AddMethods(TA_Random,TA_Random_MethodDef);
  taMisc::types.Add(&TA_const_Random);
    TA_const_Random.AddParents(&TA_const, &TA_Random);
  taMisc::types.Add(&TA_const_Random_ref);
    TA_const_Random_ref.AddParents(&TA_const_Random);
  taMisc::types.Add(&TA_TimeUsed);
    TAI_TimeUsed = new TimeUsed;
    TA_TimeUsed.AddParFormal(&TA_class);
    TA_TimeUsed.AddParCache(&TA_taBase);
    TA_TimeUsed.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_TimeUsed,TA_TimeUsed_MemberDef);
    tac_AddMethods(TA_TimeUsed,TA_TimeUsed_MethodDef);
  taMisc::types.Add(&TA_TwoDCoord);
    TAI_TwoDCoord = new TwoDCoord;
    TA_TwoDCoord.AddParFormal(&TA_class);
    TA_TwoDCoord.AddParCache(&TA_taBase);
    TA_TwoDCoord.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_TwoDCoord,TA_TwoDCoord_MemberDef);
    tac_AddMethods(TA_TwoDCoord,TA_TwoDCoord_MethodDef);
  taMisc::types.Add(&TA_const_TimeUsed);
    TA_const_TimeUsed.AddParents(&TA_const, &TA_TimeUsed);
  taMisc::types.Add(&TA_PosTwoDCoord);
    TAI_PosTwoDCoord = new PosTwoDCoord;
    TA_PosTwoDCoord.AddParFormal(&TA_class);
    TA_PosTwoDCoord.AddParCache(&TA_taBase);
    TA_PosTwoDCoord.AddClassPar(&TA_TwoDCoord,0);
  taMisc::types.Add(&TA_const_TimeUsed_ref);
    TA_const_TimeUsed_ref.AddParents(&TA_const_TimeUsed);
  taMisc::types.Add(&TA_TDCoord);
    TAI_TDCoord = new TDCoord;
    TA_TDCoord.AddParFormal(&TA_class);
    TA_TDCoord.AddParCache(&TA_taBase);
    TA_TDCoord.AddClassPar(&TA_TwoDCoord,0);
    tac_AddMembers(TA_TDCoord,TA_TDCoord_MemberDef);
    tac_AddMethods(TA_TDCoord,TA_TDCoord_MethodDef);
  taMisc::types.Add(&TA_PosTDCoord);
    TAI_PosTDCoord = new PosTDCoord;
    TA_PosTDCoord.AddParFormal(&TA_class);
    TA_PosTDCoord.AddParCache(&TA_taBase);
    TA_PosTDCoord.AddClassPar(&TA_TDCoord,0);
  taMisc::types.Add(&TA_FloatTwoDCoord);
    TAI_FloatTwoDCoord = new FloatTwoDCoord;
    TA_FloatTwoDCoord.AddParFormal(&TA_class);
    TA_FloatTwoDCoord.AddParCache(&TA_taBase);
    TA_FloatTwoDCoord.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_FloatTwoDCoord,TA_FloatTwoDCoord_MemberDef);
    tac_AddMethods(TA_FloatTwoDCoord,TA_FloatTwoDCoord_MethodDef);
  taMisc::types.Add(&TA_FloatTDCoord);
    TAI_FloatTDCoord = new FloatTDCoord;
    TA_FloatTDCoord.AddParFormal(&TA_class);
    TA_FloatTDCoord.AddParCache(&TA_taBase);
    TA_FloatTDCoord.AddClassPar(&TA_FloatTwoDCoord,0);
    tac_AddMembers(TA_FloatTDCoord,TA_FloatTDCoord_MemberDef);
    tac_AddMethods(TA_FloatTDCoord,TA_FloatTDCoord_MethodDef);
  taMisc::types.Add(&TA_float_ref);
    TA_float_ref.AddParents(&TA_float);
  taMisc::types.Add(&TA_const_TwoDCoord);
    TA_const_TwoDCoord.AddParents(&TA_const, &TA_TwoDCoord);
  taMisc::types.Add(&TA_const_TwoDCoord_ref);
    TA_const_TwoDCoord_ref.AddParents(&TA_const_TwoDCoord);
  taMisc::types.Add(&TA_const_FloatTwoDCoord);
    TA_const_FloatTwoDCoord.AddParents(&TA_const, &TA_FloatTwoDCoord);
  taMisc::types.Add(&TA_const_FloatTwoDCoord_ref);
    TA_const_FloatTwoDCoord_ref.AddParents(&TA_const_FloatTwoDCoord);
  taMisc::types.Add(&TA_TwoDCoord_ref);
    TA_TwoDCoord_ref.AddParents(&TA_TwoDCoord);
  taMisc::types.Add(&TA_const_PosTwoDCoord);
    TA_const_PosTwoDCoord.AddParents(&TA_const, &TA_PosTwoDCoord);
  taMisc::types.Add(&TA_const_PosTwoDCoord_ref);
    TA_const_PosTwoDCoord_ref.AddParents(&TA_const_PosTwoDCoord);
  taMisc::types.Add(&TA_const_TDCoord);
    TA_const_TDCoord.AddParents(&TA_const, &TA_TDCoord);
  taMisc::types.Add(&TA_const_TDCoord_ref);
    TA_const_TDCoord_ref.AddParents(&TA_const_TDCoord);
  taMisc::types.Add(&TA_const_FloatTDCoord);
    TA_const_FloatTDCoord.AddParents(&TA_const, &TA_FloatTDCoord);
  taMisc::types.Add(&TA_const_FloatTDCoord_ref);
    TA_const_FloatTDCoord_ref.AddParents(&TA_const_FloatTDCoord);
  taMisc::types.Add(&TA_TDCoord_ref);
    TA_TDCoord_ref.AddParents(&TA_TDCoord);
  taMisc::types.Add(&TA_const_PosTDCoord);
    TA_const_PosTDCoord.AddParents(&TA_const, &TA_PosTDCoord);
  taMisc::types.Add(&TA_const_PosTDCoord_ref);
    TA_const_PosTDCoord_ref.AddParents(&TA_const_PosTDCoord);
  taMisc::types.Add(&TA_ValIdx);
    TAI_ValIdx = new ValIdx;
    TA_ValIdx.AddParFormal(&TA_class);
    TA_ValIdx.AddParCache(&TA_taBase);
    TA_ValIdx.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_ValIdx,TA_ValIdx_MemberDef);
    tac_AddMethods(TA_ValIdx,TA_ValIdx_MethodDef);
  taMisc::types.Add(&TA_taArray_ValIdx_);
    TAI_taArray_ValIdx_ = new taArray<ValIdx>;
    TA_taArray_ValIdx_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_ValIdx_.AddParCache(&TA_taBase);
    TA_taArray_ValIdx_.AddClassPar(&TA_taArray,0);
    sbt = new TypeDef("ValIdx_ptr", 1, 1, 0);
    sbt->AddParents(&TA_ValIdx);
    TA_taArray_ValIdx_.sub_types.Add(sbt);
    sbt = new TypeDef("ValIdx_ref", 1, 0, 1);
    sbt->AddParents(&TA_ValIdx);
    TA_taArray_ValIdx_.sub_types.Add(sbt);
    sbt = new TypeDef("const_ValIdx", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_ValIdx);
    TA_taArray_ValIdx_.sub_types.Add(sbt);
    sbt = new TypeDef("const_ValIdx_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_ValIdx_.sub_types.FindName("const_ValIdx"));
    TA_taArray_ValIdx_.sub_types.Add(sbt);
    tac_AddMembers(TA_taArray_ValIdx_,TA_taArray_ValIdx__MemberDef);
    tac_AddMethods(TA_taArray_ValIdx_,TA_taArray_ValIdx__MethodDef);
  taMisc::types.Add(&TA_const_ValIdx);
    TA_const_ValIdx.AddParents(&TA_const, &TA_ValIdx);
  taMisc::types.Add(&TA_const_ValIdx_ref);
    TA_const_ValIdx_ref.AddParents(&TA_const_ValIdx);
  taMisc::types.Add(&TA_ValIdx_Array);
    TAI_ValIdx_Array = new ValIdx_Array;
    TA_ValIdx_Array.AddParFormal(&TA_class);
    TA_ValIdx_Array.AddParCache(&TA_taBase);
    TA_ValIdx_Array.AddClassPar(&TA_taArray_ValIdx_,0);
  taMisc::types.Add(&TA_const_ValIdx_Array);
    TA_const_ValIdx_Array.AddParents(&TA_const, &TA_ValIdx_Array);
  taMisc::types.Add(&TA_CountParam);
    TAI_CountParam = new CountParam;
    TA_CountParam.AddParFormal(&TA_class);
    TA_CountParam.AddParCache(&TA_taBase);
    TA_CountParam.AddClassPar(&TA_taBase,0);
    tac_AddEnum(TA_CountParam, "Relation", "", "", "", "", TA_CountParam_Relation);
    tac_AddMembers(TA_CountParam,TA_CountParam_MemberDef);
    tac_AddMethods(TA_CountParam,TA_CountParam_MethodDef);
  taMisc::types.Add(&TA_const_ValIdx_Array_ref);
    TA_const_ValIdx_Array_ref.AddParents(&TA_const_ValIdx_Array);
  taMisc::types.Add(&TA_const_CountParam);
    TA_const_CountParam.AddParents(&TA_const, &TA_CountParam);
  taMisc::types.Add(&TA_const_CountParam_ref);
    TA_const_CountParam_ref.AddParents(&TA_const_CountParam);
  taMisc::types.Add(&TA_Aggregate);
    TAI_Aggregate = new Aggregate;
    TA_Aggregate.AddParFormal(&TA_class);
    TA_Aggregate.AddParCache(&TA_taBase);
    TA_Aggregate.AddClassPar(&TA_taOBase,0);
    tac_AddEnum(TA_Aggregate, "Operator", " Aggregate Operators", "", "", "", TA_Aggregate_Operator);
    tac_AddMembers(TA_Aggregate,TA_Aggregate_MemberDef);
    tac_AddMethods(TA_Aggregate,TA_Aggregate_MethodDef);
  taMisc::types.Add(&TA_const_Aggregate);
    TA_const_Aggregate.AddParents(&TA_const, &TA_Aggregate);
  taMisc::types.Add(&TA_const_Aggregate_ref);
    TA_const_Aggregate_ref.AddParents(&TA_const_Aggregate);
  taMisc::types.Add(&TA_SimpleMathSpec);
    TAI_SimpleMathSpec = new SimpleMathSpec;
    TA_SimpleMathSpec.AddParFormal(&TA_class);
    TA_SimpleMathSpec.AddParCache(&TA_taBase);
    TA_SimpleMathSpec.AddClassPar(&TA_taBase,0);
    tac_AddEnum(TA_SimpleMathSpec, "MathOpr", "", "", "", "", TA_SimpleMathSpec_MathOpr);
    tac_AddMembers(TA_SimpleMathSpec,TA_SimpleMathSpec_MemberDef);
    tac_AddMethods(TA_SimpleMathSpec,TA_SimpleMathSpec_MethodDef);
  taMisc::types.Add(&TA_const_SimpleMathSpec);
    TA_const_SimpleMathSpec.AddParents(&TA_const, &TA_SimpleMathSpec);
  taMisc::types.Add(&TA_const_SimpleMathSpec_ref);
    TA_const_SimpleMathSpec_ref.AddParents(&TA_const_SimpleMathSpec);
  taMisc::types.Add(&TA_RGBA);
    TAI_RGBA = new RGBA;
    TA_RGBA.AddParFormal(&TA_class);
    TA_RGBA.AddParCache(&TA_taBase);
    TA_RGBA.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_RGBA,TA_RGBA_MemberDef);
  taMisc::types.Add(&TA_taList_RGBA_);
    TAI_taList_RGBA_ = new taList<RGBA>;
    TA_taList_RGBA_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_RGBA_.AddParCache(&TA_taBase);
    TA_taList_RGBA_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_RGBA_.sub_types.Add(sbt);
    sbt = new TypeDef("RGBA_ptr", 1, 1, 0);
    sbt->AddParents(&TA_RGBA);
    TA_taList_RGBA_.sub_types.Add(sbt);
    tac_AddMethods(TA_taList_RGBA_,TA_taList_RGBA__MethodDef);
  taMisc::types.Add(&TA_const_RGBA);
    TA_const_RGBA.AddParents(&TA_const, &TA_RGBA);
  taMisc::types.Add(&TA_const_RGBA_ref);
    TA_const_RGBA_ref.AddParents(&TA_const_RGBA);
  taMisc::types.Add(&TA_RGBA_List);
    TAI_RGBA_List = new RGBA_List;
    TA_RGBA_List.AddParFormal(&TA_class);
    TA_RGBA_List.AddParCache(&TA_taBase);
    TA_RGBA_List.AddClassPar(&TA_taList_RGBA_,0);
  taMisc::types.Add(&TA_RGBA_ptr);
    TA_RGBA_ptr.AddParents(&TA_RGBA);
  taMisc::types.Add(&TA_const_RGBA_List);
    TA_const_RGBA_List.AddParents(&TA_const, &TA_RGBA_List);
  taMisc::types.Add(&TA_const_RGBA_List_ref);
    TA_const_RGBA_List_ref.AddParents(&TA_const_RGBA_List);
  taMisc::types.Add(&TA_TAColor);
    TAI_TAColor = new TAColor;
    TA_TAColor.AddParFormal(&TA_class);
    TA_TAColor.AddParCache(&TA_taBase);
    TA_TAColor.AddClassPar(&TA_taBase,0);
  taMisc::types.Add(&TA_taList_TAColor_);
    TAI_taList_TAColor_ = new taList<TAColor>;
    TA_taList_TAColor_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_TAColor_.AddParCache(&TA_taBase);
    TA_taList_TAColor_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_TAColor_.sub_types.Add(sbt);
    sbt = new TypeDef("TAColor_ptr", 1, 1, 0);
    sbt->AddParents(&TA_TAColor);
    TA_taList_TAColor_.sub_types.Add(sbt);
    tac_AddMethods(TA_taList_TAColor_,TA_taList_TAColor__MethodDef);
  taMisc::types.Add(&TA_const_TAColor);
    TA_const_TAColor.AddParents(&TA_const, &TA_TAColor);
  taMisc::types.Add(&TA_const_TAColor_ref);
    TA_const_TAColor_ref.AddParents(&TA_const_TAColor);
  taMisc::types.Add(&TA_TAColor_List);
    TAI_TAColor_List = new TAColor_List;
    TA_TAColor_List.AddParFormal(&TA_class);
    TA_TAColor_List.AddParCache(&TA_taBase);
    TA_TAColor_List.AddClassPar(&TA_taList_TAColor_,0);
  taMisc::types.Add(&TA_TAColor_List_ptr);
    TA_TAColor_List_ptr.AddParents(&TA_TAColor_List);
  taMisc::types.Add(&TA_const_TAColor_List);
    TA_const_TAColor_List.AddParents(&TA_const, &TA_TAColor_List);
  taMisc::types.Add(&TA_const_TAColor_List_ref);
    TA_const_TAColor_List_ref.AddParents(&TA_const_TAColor_List);
  taMisc::types.Add(&TA_ColorScaleSpec);
    TAI_ColorScaleSpec = new ColorScaleSpec;
    TA_ColorScaleSpec.AddParFormal(&TA_class);
    TA_ColorScaleSpec.AddParCache(&TA_taBase);
    TA_ColorScaleSpec.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_ColorScaleSpec,TA_ColorScaleSpec_MemberDef);
    tac_AddMethods(TA_ColorScaleSpec,TA_ColorScaleSpec_MethodDef);
  taMisc::types.Add(&TA_const_ColorScaleSpec);
    TA_const_ColorScaleSpec.AddParents(&TA_const, &TA_ColorScaleSpec);
  taMisc::types.Add(&TA_const_ColorScaleSpec_ref);
    TA_const_ColorScaleSpec_ref.AddParents(&TA_const_ColorScaleSpec);
  taMisc::types.Add(&TA_ColorScaleSpec_MGroup);
    TAI_ColorScaleSpec_MGroup = new ColorScaleSpec_MGroup;
    TA_ColorScaleSpec_MGroup.AddParFormal(&TA_class);
    TA_ColorScaleSpec_MGroup.AddParCache(&TA_taBase);
    TA_ColorScaleSpec_MGroup.AddClassPar(&TA_MenuGroup_impl,0);
    tac_AddMethods(TA_ColorScaleSpec_MGroup,TA_ColorScaleSpec_MGroup_MethodDef);
  taMisc::types.Add(&TA_ColorScaleSpec_ptr);
    TA_ColorScaleSpec_ptr.AddParents(&TA_ColorScaleSpec);
  taMisc::types.Add(&TA_const_ColorScaleSpec_MGroup);
    TA_const_ColorScaleSpec_MGroup.AddParents(&TA_const, &TA_ColorScaleSpec_MGroup);
  taMisc::types.Add(&TA_const_ColorScaleSpec_MGroup_ref);
    TA_const_ColorScaleSpec_MGroup_ref.AddParents(&TA_const_ColorScaleSpec_MGroup);
  taMisc::types.Add(&TA_const_ColorScale);
    TA_const_ColorScale.AddParents(&TA_const);
  taMisc::types.Add(&TA_const_ColorScale_ref);
    TA_const_ColorScale_ref.AddParents(&TA_const_ColorScale);
  taMisc::types.Add(&TA_ColorScale);
    TA_ColorScale.AddParFormal(&TA_class);
    TA_ColorScale.AddParCache(&TA_taBase);
    TA_ColorScale.AddParents(&TA_taNBase);
  taMisc::types.Add(&TA_gpivArrayC_Type);
    TAI_gpivArrayC_Type = new gpivArrayC_Type;
    TA_gpivArrayC_Type.AddParFormal(&TA_class);
    TA_gpivArrayC_Type.AddClassPar(&TA_gpivArray_Type,0);
  taMisc::types.Add(&TA_gpivArrayCEditButton);
    TA_gpivArrayCEditButton.AddParFormal(&TA_class);
    TA_gpivArrayCEditButton.AddClassPar(&TA_gpivArrayEditButton,0);
  taMisc::types.Add(&TA_gpivArrayCEdit);
    TAI_gpivArrayCEdit = new gpivArrayCEdit;
    TA_gpivArrayCEdit.AddParFormal(&TA_class);
    TA_gpivArrayCEdit.AddClassPar(&TA_gpivArrayEdit,0);
  taMisc::types.Add(&TA_FontSpec);
    TAI_FontSpec = new FontSpec;
    TA_FontSpec.AddParFormal(&TA_class);
    TA_FontSpec.AddParCache(&TA_taBase);
    TA_FontSpec.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_FontSpec,TA_FontSpec_MemberDef);
    tac_AddMethods(TA_FontSpec,TA_FontSpec_MethodDef);
  taMisc::types.Add(&TA_const_FontSpec);
    TA_const_FontSpec.AddParents(&TA_const, &TA_FontSpec);
  taMisc::types.Add(&TA_const_FontSpec_ref);
    TA_const_FontSpec_ref.AddParents(&TA_const_FontSpec);
  taMisc::types.Add(&TA_Xform_ptr);
    TA_Xform_ptr.AddParents(&TA_Xform);
  taMisc::types.Add(&TA_ViewLabel);
    TAI_ViewLabel = new ViewLabel;
    TA_ViewLabel.AddParFormal(&TA_class);
    TA_ViewLabel.AddParCache(&TA_taBase);
    TA_ViewLabel.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_ViewLabel,TA_ViewLabel_MemberDef);
    tac_AddMethods(TA_ViewLabel,TA_ViewLabel_MethodDef);
  taMisc::types.Add(&TA_taList_ViewLabel_);
    TAI_taList_ViewLabel_ = new taList<ViewLabel>;
    TA_taList_ViewLabel_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_ViewLabel_.AddParCache(&TA_taBase);
    TA_taList_ViewLabel_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_ViewLabel_.sub_types.Add(sbt);
    sbt = new TypeDef("ViewLabel_ptr", 1, 1, 0);
    sbt->AddParents(&TA_ViewLabel);
    TA_taList_ViewLabel_.sub_types.Add(sbt);
    tac_AddMethods(TA_taList_ViewLabel_,TA_taList_ViewLabel__MethodDef);
  taMisc::types.Add(&TA_const_ViewLabel);
    TA_const_ViewLabel.AddParents(&TA_const, &TA_ViewLabel);
  taMisc::types.Add(&TA_const_ViewLabel_ref);
    TA_const_ViewLabel_ref.AddParents(&TA_const_ViewLabel);
  taMisc::types.Add(&TA_ViewLabel_List);
    TAI_ViewLabel_List = new ViewLabel_List;
    TA_ViewLabel_List.AddParFormal(&TA_class);
    TA_ViewLabel_List.AddParCache(&TA_taBase);
    TA_ViewLabel_List.AddClassPar(&TA_taList_ViewLabel_,0);
  taMisc::types.Add(&TA_const_float_ref);
    TA_const_float_ref.AddParents(&TA_const_float);
  taMisc::types.Add(&TA_const_ViewLabel_List);
    TA_const_ViewLabel_List.AddParents(&TA_const, &TA_ViewLabel_List);
  taMisc::types.Add(&TA_const_ViewLabel_List_ref);
    TA_const_ViewLabel_List_ref.AddParents(&TA_const_ViewLabel_List);
  taMisc::types.Add(&TA_Aggregate_ref);
    TA_Aggregate_ref.AddParents(&TA_Aggregate);
  taMisc::types.Add(&TA_float_RArray);
    TAI_float_RArray = new float_RArray;
    TA_float_RArray.AddParFormal(&TA_class);
    TA_float_RArray.AddParCache(&TA_taBase);
    TA_float_RArray.AddClassPar(&TA_float_Array,0);
    tac_AddEnum(TA_float_RArray, "DistMetric", " generalized distance metrics", "", "", "", TA_float_RArray_DistMetric);
    tac_AddMembers(TA_float_RArray,TA_float_RArray_MemberDef);
    tac_AddMethods(TA_float_RArray,TA_float_RArray_MethodDef);
  taMisc::types.Add(&TA_taArray_base_ptr);
    TA_taArray_base_ptr.AddParents(&TA_taArray_base);
  taMisc::types.Add(&TA_float_RArray_ref);
    TA_float_RArray_ref.AddParents(&TA_float_RArray);
  taMisc::types.Add(&TA_const_float_RArray);
    TA_const_float_RArray.AddParents(&TA_const, &TA_float_RArray);
  taMisc::types.Add(&TA_const_float_RArray_ref);
    TA_const_float_RArray_ref.AddParents(&TA_const_float_RArray);
  taMisc::types.Add(&TA_DataArray_impl);
    TAI_DataArray_impl = new DataArray_impl;
    TA_DataArray_impl.AddParFormal(&TA_class);
    TA_DataArray_impl.AddParCache(&TA_taBase);
    TA_DataArray_impl.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_DataArray_impl,TA_DataArray_impl_MemberDef);
    tac_AddMethods(TA_DataArray_impl,TA_DataArray_impl_MethodDef);
  taMisc::types.Add(&TA_const_DataArray_impl);
    TA_const_DataArray_impl.AddParents(&TA_const, &TA_DataArray_impl);
  taMisc::types.Add(&TA_taGroup_DataArray_impl_);
    TAI_taGroup_DataArray_impl_ = new taGroup<DataArray_impl>;
    TA_taGroup_DataArray_impl_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_DataArray_impl_.AddParCache(&TA_taBase);
    TA_taGroup_DataArray_impl_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_DataArray_impl_.sub_types.Add(sbt);
    sbt = new TypeDef("DataArray_impl_ptr", 1, 1, 0);
    sbt->AddParents(&TA_DataArray_impl);
    TA_taGroup_DataArray_impl_.sub_types.Add(sbt);
    tac_AddMethods(TA_taGroup_DataArray_impl_,TA_taGroup_DataArray_impl__MethodDef);
  taMisc::types.Add(&TA_const_DataArray_impl_ref);
    TA_const_DataArray_impl_ref.AddParents(&TA_const_DataArray_impl);
  taMisc::types.Add(&TA_DataArray_impl_ptr);
    TA_DataArray_impl_ptr.AddParents(&TA_DataArray_impl);
  taMisc::types.Add(&TA_float_RArray_ptr);
    TA_float_RArray_ptr.AddParents(&TA_float_RArray);
  taMisc::types.Add(&TA_String_Array_ptr);
    TA_String_Array_ptr.AddParents(&TA_String_Array);
  taMisc::types.Add(&TA_DataTable);
    TAI_DataTable = new DataTable;
    TA_DataTable.AddParFormal(&TA_class);
    TA_DataTable.AddParCache(&TA_taBase);
    TA_DataTable.AddClassPar(&TA_taGroup_DataArray_impl_,0);
    tac_AddMethods(TA_DataTable,TA_DataTable_MethodDef);
  taMisc::types.Add(&TA_ClustNode);
    TAI_ClustNode = new ClustNode;
    TA_ClustNode.AddParFormal(&TA_class);
    TA_ClustNode.AddParCache(&TA_taBase);
    TA_ClustNode.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_ClustNode,TA_ClustNode_MemberDef);
    tac_AddMethods(TA_ClustNode,TA_ClustNode_MethodDef);
  taMisc::types.Add(&TA_const_DataTable);
    TA_const_DataTable.AddParents(&TA_const, &TA_DataTable);
  taMisc::types.Add(&TA_DataTable_ptr);
    TA_DataTable_ptr.AddParents(&TA_DataTable);
  taMisc::types.Add(&TA_const_DataTable_ref);
    TA_const_DataTable_ref.AddParents(&TA_const_DataTable);
  taMisc::types.Add(&TA_ClustNode_ptr);
    TA_ClustNode_ptr.AddParents(&TA_ClustNode);
  taMisc::types.Add(&TA_ClustLink);
    TAI_ClustLink = new ClustLink;
    TA_ClustLink.AddParFormal(&TA_class);
    TA_ClustLink.AddParCache(&TA_taBase);
    TA_ClustLink.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_ClustLink,TA_ClustLink_MemberDef);
  taMisc::types.Add(&TA_const_ClustNode);
    TA_const_ClustNode.AddParents(&TA_const, &TA_ClustNode);
  taMisc::types.Add(&TA_const_ClustLink);
    TA_const_ClustLink.AddParents(&TA_const, &TA_ClustLink);
  taMisc::types.Add(&TA_const_ClustNode_ref);
    TA_const_ClustNode_ref.AddParents(&TA_const_ClustNode);
  taMisc::types.Add(&TA_const_ClustLink_ref);
    TA_const_ClustLink_ref.AddParents(&TA_const_ClustLink);
  taMisc::types.Add(&TA_DA_ViewSpec);
    TAI_DA_ViewSpec = new DA_ViewSpec;
    TA_DA_ViewSpec.AddParFormal(&TA_class);
    TA_DA_ViewSpec.AddParCache(&TA_taBase);
    TA_DA_ViewSpec.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_DA_ViewSpec,TA_DA_ViewSpec_MemberDef);
    tac_AddMethods(TA_DA_ViewSpec,TA_DA_ViewSpec_MethodDef);
  taMisc::types.Add(&TA_taGroup_DA_ViewSpec_);
    TAI_taGroup_DA_ViewSpec_ = new taGroup<DA_ViewSpec>;
    TA_taGroup_DA_ViewSpec_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taGroup_DA_ViewSpec_.AddParCache(&TA_taBase);
    TA_taGroup_DA_ViewSpec_.AddClassPar(&TA_taGroup,0);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taGroup_DA_ViewSpec_.sub_types.Add(sbt);
    sbt = new TypeDef("DA_ViewSpec_ptr", 1, 1, 0);
    sbt->AddParents(&TA_DA_ViewSpec);
    TA_taGroup_DA_ViewSpec_.sub_types.Add(sbt);
    tac_AddMethods(TA_taGroup_DA_ViewSpec_,TA_taGroup_DA_ViewSpec__MethodDef);
  taMisc::types.Add(&TA_const_DA_ViewSpec);
    TA_const_DA_ViewSpec.AddParents(&TA_const, &TA_DA_ViewSpec);
  taMisc::types.Add(&TA_const_DA_ViewSpec_ref);
    TA_const_DA_ViewSpec_ref.AddParents(&TA_const_DA_ViewSpec);
  taMisc::types.Add(&TA_DT_ViewSpec);
    TAI_DT_ViewSpec = new DT_ViewSpec;
    TA_DT_ViewSpec.AddParFormal(&TA_class);
    TA_DT_ViewSpec.AddParCache(&TA_taBase);
    TA_DT_ViewSpec.AddClassPar(&TA_taGroup_DA_ViewSpec_,0);
    tac_AddMembers(TA_DT_ViewSpec,TA_DT_ViewSpec_MemberDef);
    tac_AddMethods(TA_DT_ViewSpec,TA_DT_ViewSpec_MethodDef);
  taMisc::types.Add(&TA_const_DT_ViewSpec);
    TA_const_DT_ViewSpec.AddParents(&TA_const, &TA_DT_ViewSpec);
  taMisc::types.Add(&TA_DA_TextViewSpec);
    TAI_DA_TextViewSpec = new DA_TextViewSpec;
    TA_DA_TextViewSpec.AddParFormal(&TA_class);
    TA_DA_TextViewSpec.AddParCache(&TA_taBase);
    TA_DA_TextViewSpec.AddClassPar(&TA_DA_ViewSpec,0);
    tac_AddMembers(TA_DA_TextViewSpec,TA_DA_TextViewSpec_MemberDef);
  taMisc::types.Add(&TA_const_DT_ViewSpec_ref);
    TA_const_DT_ViewSpec_ref.AddParents(&TA_const_DT_ViewSpec);
  taMisc::types.Add(&TA_const_DA_TextViewSpec);
    TA_const_DA_TextViewSpec.AddParents(&TA_const, &TA_DA_TextViewSpec);
  taMisc::types.Add(&TA_const_DA_TextViewSpec_ref);
    TA_const_DA_TextViewSpec_ref.AddParents(&TA_const_DA_TextViewSpec);
  taMisc::types.Add(&TA_DA_NetViewSpec);
    TAI_DA_NetViewSpec = new DA_NetViewSpec;
    TA_DA_NetViewSpec.AddParFormal(&TA_class);
    TA_DA_NetViewSpec.AddParCache(&TA_taBase);
    TA_DA_NetViewSpec.AddClassPar(&TA_DA_ViewSpec,0);
    tac_AddMembers(TA_DA_NetViewSpec,TA_DA_NetViewSpec_MemberDef);
  taMisc::types.Add(&TA_const_DA_NetViewSpec);
    TA_const_DA_NetViewSpec.AddParents(&TA_const, &TA_DA_NetViewSpec);
  taMisc::types.Add(&TA_const_DA_NetViewSpec_ref);
    TA_const_DA_NetViewSpec_ref.AddParents(&TA_const_DA_NetViewSpec);
  taMisc::types.Add(&TA_DA_GraphViewSpec);
    TAI_DA_GraphViewSpec = new DA_GraphViewSpec;
    TA_DA_GraphViewSpec.AddParFormal(&TA_class);
    TA_DA_GraphViewSpec.AddParCache(&TA_taBase);
    TA_DA_GraphViewSpec.AddClassPar(&TA_DA_ViewSpec,0);
    tac_AddEnum(TA_DA_GraphViewSpec, "LineType", "", "", "", "", TA_DA_GraphViewSpec_LineType);
    tac_AddEnum(TA_DA_GraphViewSpec, "LineStyle", "", "", "", "", TA_DA_GraphViewSpec_LineStyle);
    tac_AddEnum(TA_DA_GraphViewSpec, "PointStyle", "", "", "", "", TA_DA_GraphViewSpec_PointStyle);
    tac_AddEnum(TA_DA_GraphViewSpec, "VerticalType", "", "", "", "", TA_DA_GraphViewSpec_VerticalType);
    tac_AddEnum(TA_DA_GraphViewSpec, "SharedYType", "", "", "", "", TA_DA_GraphViewSpec_SharedYType);
    tac_AddMembers(TA_DA_GraphViewSpec,TA_DA_GraphViewSpec_MemberDef);
    tac_AddMethods(TA_DA_GraphViewSpec,TA_DA_GraphViewSpec_MethodDef);
  taMisc::types.Add(&TA_const_DA_GraphViewSpec);
    TA_const_DA_GraphViewSpec.AddParents(&TA_const, &TA_DA_GraphViewSpec);
  taMisc::types.Add(&TA_DA_GraphViewSpec_ptr);
    TA_DA_GraphViewSpec_ptr.AddParents(&TA_DA_GraphViewSpec);
  taMisc::types.Add(&TA_const_DA_GraphViewSpec_ref);
    TA_const_DA_GraphViewSpec_ref.AddParents(&TA_const_DA_GraphViewSpec);
  taMisc::types.Add(&TA_DT_GraphViewSpec);
    TAI_DT_GraphViewSpec = new DT_GraphViewSpec;
    TA_DT_GraphViewSpec.AddParFormal(&TA_class);
    TA_DT_GraphViewSpec.AddParCache(&TA_taBase);
    TA_DT_GraphViewSpec.AddClassPar(&TA_DT_ViewSpec,0);
    tac_AddEnum(TA_DT_GraphViewSpec, "ColorType", " defines standard color sequences", "", "", "", TA_DT_GraphViewSpec_ColorType);
    tac_AddEnum(TA_DT_GraphViewSpec, "SequenceType", " defines sequences of line features", "", "", "", TA_DT_GraphViewSpec_SequenceType);
    tac_AddMembers(TA_DT_GraphViewSpec,TA_DT_GraphViewSpec_MemberDef);
    tac_AddMethods(TA_DT_GraphViewSpec,TA_DT_GraphViewSpec_MethodDef);
  taMisc::types.Add(&TA_const_DT_GraphViewSpec);
    TA_const_DT_GraphViewSpec.AddParents(&TA_const, &TA_DT_GraphViewSpec);
  taMisc::types.Add(&TA_const_DT_GraphViewSpec_ref);
    TA_const_DT_GraphViewSpec_ref.AddParents(&TA_const_DT_GraphViewSpec);
  taMisc::types.Add(&TA_DA_GridViewSpec);
    TAI_DA_GridViewSpec = new DA_GridViewSpec;
    TA_DA_GridViewSpec.AddParFormal(&TA_class);
    TA_DA_GridViewSpec.AddParCache(&TA_taBase);
    TA_DA_GridViewSpec.AddClassPar(&TA_DA_ViewSpec,0);
    tac_AddEnum(TA_DA_GridViewSpec, "DisplayStyle", "", "", "", "", TA_DA_GridViewSpec_DisplayStyle);
    tac_AddMembers(TA_DA_GridViewSpec,TA_DA_GridViewSpec_MemberDef);
  taMisc::types.Add(&TA_const_DA_GridViewSpec);
    TA_const_DA_GridViewSpec.AddParents(&TA_const, &TA_DA_GridViewSpec);
  taMisc::types.Add(&TA_const_DA_GridViewSpec_ref);
    TA_const_DA_GridViewSpec_ref.AddParents(&TA_const_DA_GridViewSpec);
  taMisc::types.Add(&TA_DT_GridViewSpec);
    TAI_DT_GridViewSpec = new DT_GridViewSpec;
    TA_DT_GridViewSpec.AddParFormal(&TA_class);
    TA_DT_GridViewSpec.AddParCache(&TA_taBase);
    TA_DT_GridViewSpec.AddClassPar(&TA_DT_ViewSpec,0);
    tac_AddEnum(TA_DT_GridViewSpec, "BlockFill", " ways that grid blocks can be filled", "", "", "", TA_DT_GridViewSpec_BlockFill);
    tac_AddEnum(TA_DT_GridViewSpec, "MatrixLayout", " order of display of the grid elements", "", "", "", TA_DT_GridViewSpec_MatrixLayout);
    tac_AddMembers(TA_DT_GridViewSpec,TA_DT_GridViewSpec_MemberDef);
    tac_AddMethods(TA_DT_GridViewSpec,TA_DT_GridViewSpec_MethodDef);
  taMisc::types.Add(&TA_const_DT_GridViewSpec);
    TA_const_DT_GridViewSpec.AddParents(&TA_const, &TA_DT_GridViewSpec);
  taMisc::types.Add(&TA_const_DT_GridViewSpec_ref);
    TA_const_DT_GridViewSpec_ref.AddParents(&TA_const_DT_GridViewSpec);
  taMisc::types.Add(&TA_DataArray);
    TA_DataArray.AddParFormal(&TA_class, &TA_template);
    TA_DataArray.AddParCache(&TA_taBase);
    TA_DataArray.AddParents(&TA_DataArray_impl);
  taMisc::types.Add(&TA_DataArray_float_RArray_);
    TAI_DataArray_float_RArray_ = new DataArray<float_RArray>;
    TA_DataArray_float_RArray_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_DataArray_float_RArray_.AddParCache(&TA_taBase);
    TA_DataArray_float_RArray_.AddClassPar(&TA_DataArray,0);
    sbt = new TypeDef("float_RArray_ptr", 1, 1, 0);
    sbt->AddParents(&TA_float_RArray);
    TA_DataArray_float_RArray_.sub_types.Add(sbt);
    tac_AddMembers(TA_DataArray_float_RArray_,TA_DataArray_float_RArray__MemberDef);
  taMisc::types.Add(&TA_const_DataArray);
    TA_const_DataArray.AddParents(&TA_const, &TA_DataArray);
  taMisc::types.Add(&TA_const_DataArray_ref);
    TA_const_DataArray_ref.AddParents(&TA_const_DataArray);
  taMisc::types.Add(&TA_float_Data);
    TAI_float_Data = new float_Data;
    TA_float_Data.AddParFormal(&TA_class);
    TA_float_Data.AddParCache(&TA_taBase);
    TA_float_Data.AddClassPar(&TA_DataArray_float_RArray_,0);
  taMisc::types.Add(&TA_const_float_Data);
    TA_const_float_Data.AddParents(&TA_const, &TA_float_Data);
  taMisc::types.Add(&TA_float_Data_ptr);
    TA_float_Data_ptr.AddParents(&TA_float_Data);
  taMisc::types.Add(&TA_const_float_Data_ref);
    TA_const_float_Data_ref.AddParents(&TA_const_float_Data);
  taMisc::types.Add(&TA_DataArray_String_Array_);
    TAI_DataArray_String_Array_ = new DataArray<String_Array>;
    TA_DataArray_String_Array_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_DataArray_String_Array_.AddParCache(&TA_taBase);
    TA_DataArray_String_Array_.AddClassPar(&TA_DataArray,0);
    sbt = new TypeDef("String_Array_ptr", 1, 1, 0);
    sbt->AddParents(&TA_String_Array);
    TA_DataArray_String_Array_.sub_types.Add(sbt);
    tac_AddMembers(TA_DataArray_String_Array_,TA_DataArray_String_Array__MemberDef);
  taMisc::types.Add(&TA_String_Data);
    TAI_String_Data = new String_Data;
    TA_String_Data.AddParFormal(&TA_class);
    TA_String_Data.AddParCache(&TA_taBase);
    TA_String_Data.AddClassPar(&TA_DataArray_String_Array_,0);
  taMisc::types.Add(&TA_const_String_Data);
    TA_const_String_Data.AddParents(&TA_const, &TA_String_Data);
  taMisc::types.Add(&TA_String_Data_ptr);
    TA_String_Data_ptr.AddParents(&TA_String_Data);
  taMisc::types.Add(&TA_DataLineBox_G);
    TA_DataLineBox_G.AddParFormal(&TA_class);
    TA_DataLineBox_G.AddClassPar(&TA_Polygon,0);
  taMisc::types.Add(&TA_const_String_Data_ref);
    TA_const_String_Data_ref.AddParents(&TA_const_String_Data);
  taMisc::types.Add(&TA_DataLine_G);
    TA_DataLine_G.AddParFormal(&TA_class);
    TA_DataLine_G.AddClassPar(&TA_PolyGraphic,0);
  taMisc::types.Add(&TA_DTViewer);
    TA_DTViewer.AddParFormal(&TA_class);
    TA_DTViewer.AddClassPar(&TA_GlyphViewer,0);
  taMisc::types.Add(&TA_DTEditor);
    TA_DTEditor.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_DT_GridViewSpec_ptr);
    TA_DT_GridViewSpec_ptr.AddParents(&TA_DT_GridViewSpec);
  taMisc::types.Add(&TA_DTEditor_ptr);
    TA_DTEditor_ptr.AddParents(&TA_DTEditor);
  taMisc::types.Add(&TA_DataTable_G);
    TA_DataTable_G.AddParFormal(&TA_class);
    TA_DataTable_G.AddClassPar(&TA_GraphicMaster,0);
  taMisc::types.Add(&TA_DataTable_G_ptr);
    TA_DataTable_G_ptr.AddParents(&TA_DataTable_G);
  taMisc::types.Add(&TA_DataLine_G_ptr);
    TA_DataLine_G_ptr.AddParents(&TA_DataLine_G);
  taMisc::types.Add(&TA_DA_GridViewSpec_ptr);
    TA_DA_GridViewSpec_ptr.AddParents(&TA_DA_GridViewSpec);
  taMisc::types.Add(&TA_TextData_G);
    TA_TextData_G.AddParFormal(&TA_class);
    TA_TextData_G.AddClassPar(&TA_NoScale_Text_G,0);
  taMisc::types.Add(&TA_ScaleBar_ptr);
  taMisc::types.Add(&TA_FloatTwoDCoord_ref);
    TA_FloatTwoDCoord_ref.AddParents(&TA_FloatTwoDCoord);
  taMisc::types.Add(&TA_Block_G);
    TA_Block_G.AddParFormal(&TA_class);
    TA_Block_G.AddClassPar(&TA_Polygon,0);
  taMisc::types.Add(&TA_Grid_G);
    TA_Grid_G.AddParFormal(&TA_class);
    TA_Grid_G.AddClassPar(&TA_Block_G,0);
  taMisc::types.Add(&TA_DTViewer_ptr);
    TA_DTViewer_ptr.AddParents(&TA_DTViewer);
  taMisc::types.Add(&TA_taFile);
    TAI_taFile = new taFile;
    TA_taFile.AddParFormal(&TA_class);
    TA_taFile.AddParCache(&TA_taBase);
    TA_taFile.AddClassPar(&TA_taBase,0);
    tac_AddEnum(TA_taFile, "OpenMode", "", "", "", "", TA_taFile_OpenMode);
    tac_AddMembers(TA_taFile,TA_taFile_MemberDef);
    tac_AddMethods(TA_taFile,TA_taFile_MethodDef);
  taMisc::types.Add(&TA_cssProgSpace);
    TA_cssProgSpace.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_taFile);
    TA_const_taFile.AddParents(&TA_const, &TA_taFile);
  taMisc::types.Add(&TA_cssProgSpace_ptr);
    TA_cssProgSpace_ptr.AddParents(&TA_cssProgSpace);
  taMisc::types.Add(&TA_const_taFile_ref);
    TA_const_taFile_ref.AddParents(&TA_const_taFile);
  taMisc::types.Add(&TA_ScriptBase);
    TAI_ScriptBase = new ScriptBase;
    TA_ScriptBase.AddParFormal(&TA_class);
    tac_AddMembers(TA_ScriptBase,TA_ScriptBase_MemberDef);
    tac_AddMethods(TA_ScriptBase,TA_ScriptBase_MethodDef);
  taMisc::types.Add(&TA_taPtrList_ScriptBase_);
    TAI_taPtrList_ScriptBase_ = new taPtrList<ScriptBase>;
    TA_taPtrList_ScriptBase_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_ScriptBase_.AddClassPar(&TA_taPtrList,0);
    sbt = new TypeDef("ScriptBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_ScriptBase);
    TA_taPtrList_ScriptBase_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_ScriptBase_,TA_taPtrList_ScriptBase__MethodDef);
  taMisc::types.Add(&TA_ScriptBase_List);
    TAI_ScriptBase_List = new ScriptBase_List;
    TA_ScriptBase_List.AddParFormal(&TA_class);
    TA_ScriptBase_List.AddClassPar(&TA_taPtrList_ScriptBase_,0);
  taMisc::types.Add(&TA_SArg_Array);
    TAI_SArg_Array = new SArg_Array;
    TA_SArg_Array.AddParFormal(&TA_class);
    TA_SArg_Array.AddParCache(&TA_taBase);
    TA_SArg_Array.AddClassPar(&TA_String_Array,0);
    tac_AddMembers(TA_SArg_Array,TA_SArg_Array_MemberDef);
  taMisc::types.Add(&TA_SArgEditDialog);
    TA_SArgEditDialog.AddParFormal(&TA_class);
    TA_SArgEditDialog.AddClassPar(&TA_gpivArrayEditDialog,0);
  taMisc::types.Add(&TA_const_SArg_Array);
    TA_const_SArg_Array.AddParents(&TA_const, &TA_SArg_Array);
  taMisc::types.Add(&TA_SArgEdit);
    TAI_SArgEdit = new SArgEdit;
    TA_SArgEdit.AddParFormal(&TA_class);
    TA_SArgEdit.AddClassPar(&TA_gpivArrayEdit,0);
  taMisc::types.Add(&TA_const_SArg_Array_ref);
    TA_const_SArg_Array_ref.AddParents(&TA_const_SArg_Array);
  taMisc::types.Add(&TA_Script);
    TAI_Script = new Script;
    TA_Script.AddParFormal(&TA_class);
    TA_Script.AddParCache(&TA_taBase);
    TA_Script.AddClassPar(&TA_taNBase,(int)((unsigned long)((taNBase*)TAI_Script)-(unsigned long)TAI_Script), &TA_ScriptBase,(int)((unsigned long)((ScriptBase*)TAI_Script)-(unsigned long)TAI_Script));
    tac_AddMembers(TA_Script,TA_Script_MemberDef);
    tac_AddMethods(TA_Script,TA_Script_MethodDef);
  taMisc::types.Add(&TA_const_Script);
    TA_const_Script.AddParents(&TA_const, &TA_Script);
  taMisc::types.Add(&TA_Script_MGroup);
    TAI_Script_MGroup = new Script_MGroup;
    TA_Script_MGroup.AddParFormal(&TA_class);
    TA_Script_MGroup.AddParCache(&TA_taBase);
    TA_Script_MGroup.AddClassPar(&TA_MenuGroup_impl,0);
    tac_AddMethods(TA_Script_MGroup,TA_Script_MGroup_MethodDef);
  taMisc::types.Add(&TA_const_Script_ref);
    TA_const_Script_ref.AddParents(&TA_const_Script);
  taMisc::types.Add(&TA_const_Script_MGroup);
    TA_const_Script_MGroup.AddParents(&TA_const, &TA_Script_MGroup);
  taMisc::types.Add(&TA_const_Script_MGroup_ref);
    TA_const_Script_MGroup_ref.AddParents(&TA_const_Script_MGroup);
  taMisc::types.Add(&TA_FunLookup);
    TAI_FunLookup = new FunLookup;
    TA_FunLookup.AddParFormal(&TA_class);
    TA_FunLookup.AddParCache(&TA_taBase);
    TA_FunLookup.AddClassPar(&TA_float_RArray,0);
    tac_AddMembers(TA_FunLookup,TA_FunLookup_MemberDef);
    tac_AddMethods(TA_FunLookup,TA_FunLookup_MethodDef);
  taMisc::types.Add(&TA_int_ptr);
    TA_int_ptr.AddParents(&TA_int);
  taMisc::types.Add(&TA_const_FunLookup);
    TA_const_FunLookup.AddParents(&TA_const, &TA_FunLookup);
  taMisc::types.Add(&TA_float_ptr);
    TA_float_ptr.AddParents(&TA_float);
  taMisc::types.Add(&TA_const_FunLookup_ref);
    TA_const_FunLookup_ref.AddParents(&TA_const_FunLookup);
  taMisc::types.Add(&TA_FunLookupND);
    TAI_FunLookupND = new FunLookupND;
    TA_FunLookupND.AddParFormal(&TA_class);
    TA_FunLookupND.AddParCache(&TA_taBase);
    TA_FunLookupND.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_FunLookupND,TA_FunLookupND_MemberDef);
    tac_AddMethods(TA_FunLookupND,TA_FunLookupND_MethodDef);
  taMisc::types.Add(&TA_const_FunLookupND);
    TA_const_FunLookupND.AddParents(&TA_const, &TA_FunLookupND);
  taMisc::types.Add(&TA_const_FunLookupND_ref);
    TA_const_FunLookupND_ref.AddParents(&TA_const_FunLookupND);
  taMisc::types.Add(&TA_ivColor_ptr);
    TA_ivColor_ptr.AddParents(&TA_ivColor);
  taMisc::types.Add(&TA_ivColor);
    TA_ivColor.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_NoScale_Text_G_ptr);
    TA_NoScale_Text_G_ptr.AddParents(&TA_NoScale_Text_G);
  taMisc::types.Add(&TA_const_ivBrush);
    TA_const_ivBrush.AddParents(&TA_const, &TA_ivBrush);
  taMisc::types.Add(&TA_ivBrush);
    TA_ivBrush.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_ivColor);
    TA_const_ivColor.AddParents(&TA_const, &TA_ivColor);
  taMisc::types.Add(&TA_const_ivFont);
    TA_const_ivFont.AddParents(&TA_const, &TA_ivFont);
  taMisc::types.Add(&TA_PointObj);
    TA_PointObj.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_BoxObj);
    TA_BoxObj.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ColorScale_ptr);
    TA_ColorScale_ptr.AddParents(&TA_ColorScale);
  taMisc::types.Add(&TA_HCScaleBar_ptr);
    TA_HCScaleBar_ptr.AddParents(&TA_HCScaleBar);
  taMisc::types.Add(&TA_HCScaleBar);
    TA_HCScaleBar.AddParFormal(&TA_class);


  taMisc::in_init = false;
} 
