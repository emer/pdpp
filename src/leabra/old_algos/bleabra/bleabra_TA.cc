// File Automatically Generated by MakeTA
// DO NOT EDIT


#include <ta/typea.h>
#include <ta/typea_constr.h>
#include <css/basic_types.h>
#include <css/c_ptr_types.h>
#include <css/ta_css.h>
#include <biobel.h>
#include <bleabra.h>
#include "bleabra_TA_type.h"
#include "bleabra_TA_inst.h"


// Types

TypeDef TA_BioBelCon("BioBelCon", " BioBel connection", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(BioBelCon), (void**)&TAI_BioBelCon, 0, 0, 0,1);
TypeDef TA_BioBelConSpec("BioBelConSpec", " BioBel relative belief connection specs", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(BioBelConSpec), (void**)&TAI_BioBelConSpec, 1, 0, 0,1);
TypeDef TA_BioBelCon_Group("BioBelCon_Group", " BioBel relative belief connection group", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(BioBelCon_Group), (void**)&TAI_BioBelCon_Group, 0, 0, 0,1);
TypeDef TA_BioBelUnitSpec("BioBelUnitSpec", " BioBel relative belief unit specifications", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(BioBelUnitSpec), (void**)&TAI_BioBelUnitSpec, 1, 0, 0,1);
TypeDef TA_BioBelUnit("BioBelUnit", " BioBel relative belief unit", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(BioBelUnit), (void**)&TAI_BioBelUnit, 0, 0, 0,1);
TypeDef TA_BioBelInhib("BioBelInhib", " holds threshold-computation values, used as a parent class for layers, etc", 
	"", "", "", sizeof(BioBelInhib), (void**)&TAI_BioBelInhib, 1, 0, 0,1);
TypeDef TA_BioBelLayerSpec("BioBelLayerSpec", " BioBel relative belief layer specs, computes inhibitory input for all units in layer", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(BioBelLayerSpec), (void**)&TAI_BioBelLayerSpec, 1, 0, 0,1);
TypeDef TA_BioBelUnit_Group("BioBelUnit_Group", " for independent subgroups of competing units within a single layer", 
	"", "MULT_INHERIT ", "", sizeof(BioBelUnit_Group), (void**)&TAI_BioBelUnit_Group, 0, 0, 0,1);
TypeDef TA_BioBelLayer("BioBelLayer", " BioBel Layer: implicit inhibition for soft kWTA behavior", 
	"EXT_lay COMPRESS ", "EXT_lay COMPRESS MULT_INHERIT ", "", sizeof(BioBelLayer), (void**)&TAI_BioBelLayer, 1, 0, 0,1);
TypeDef TA_BioBelMaxDa("BioBelMaxDa", " _ stat that computes when equilibrium is", 
	"EXT_proc COMPUTE_IN_SettleProcess LOOP_STAT ", "EXT_proc COMPUTE_IN_SettleProcess LOOP_STAT ", "", sizeof(BioBelMaxDa), (void**)&TAI_BioBelMaxDa, 1, 0, 0,1);
TypeDef TA_const_BioBelCon("const_BioBelCon", 1, 0, 0, 0,1);
TypeDef TA_const_BioBelCon_ref("const_BioBelCon_ref", 1, 0, 1, 0,1);
TypeDef TA_BioBelCon_ptr("BioBelCon_ptr", 1, 1, 0, 0,1);
TypeDef TA_BioBelUnit_ptr("BioBelUnit_ptr", 1, 1, 0, 0,1);
TypeDef TA_BioBelCon_Group_ptr("BioBelCon_Group_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_BioBelConSpec("const_BioBelConSpec", 1, 0, 0, 0,1);
TypeDef TA_const_BioBelConSpec_ref("const_BioBelConSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_const_BioBelCon_Group("const_BioBelCon_Group", 1, 0, 0, 0,1);
TypeDef TA_const_BioBelCon_Group_ref("const_BioBelCon_Group_ref", 1, 0, 1, 0,1);
TypeDef TA_BioBelChannels("BioBelChannels", " channels used in BioBel", 
	"INLINE ", "INLINE NO_UPDATE_AFTER ", "", sizeof(BioBelChannels), (void**)&TAI_BioBelChannels, 0, 0, 0,1);
TypeDef TA_const_BioBelChannels("const_BioBelChannels", 1, 0, 0, 0,1);
TypeDef TA_const_BioBelChannels_ref("const_BioBelChannels_ref", 1, 0, 1, 0,1);
TypeDef TA_VChanSpecs("VChanSpecs", " voltage gated channel specs", 
	"INLINE ", "INLINE NO_UPDATE_AFTER ", "", sizeof(VChanSpecs), (void**)&TAI_VChanSpecs, 0, 0, 0,1);
TypeDef TA_const_VChanSpecs("const_VChanSpecs", 1, 0, 0, 0,1);
TypeDef TA_ActFunSpecs("ActFunSpecs", " activation function specifications", 
	"INLINE ", "INLINE NO_UPDATE_AFTER ", "", sizeof(ActFunSpecs), (void**)&TAI_ActFunSpecs, 0, 0, 0,1);
TypeDef TA_const_VChanSpecs_ref("const_VChanSpecs_ref", 1, 0, 1, 0,1);
TypeDef TA_BioBelLayer_ptr("BioBelLayer_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_ActFunSpecs("const_ActFunSpecs", 1, 0, 0, 0,1);
TypeDef TA_BioBelInhib_ptr("BioBelInhib_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_ActFunSpecs_ref("const_ActFunSpecs_ref", 1, 0, 1, 0,1);
TypeDef TA_const_BioBelUnitSpec("const_BioBelUnitSpec", 1, 0, 0, 0,1);
TypeDef TA_const_BioBelUnitSpec_ref("const_BioBelUnitSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_const_BioBelUnit("const_BioBelUnit", 1, 0, 0, 0,1);
TypeDef TA_const_BioBelUnit_ref("const_BioBelUnit_ref", 1, 0, 1, 0,1);
TypeDef TA_taPtrList_BioBelUnit_("taPtrList_BioBelUnit_", " ", 
	"", "", "", sizeof(taPtrList<BioBelUnit>), (void**)&TAI_taPtrList_BioBelUnit_, 0, 0, 0,1);
TypeDef TA_BioBelSort("BioBelSort", " use this for sorting..", 
	"", "", "", sizeof(BioBelSort), (void**)&TAI_BioBelSort, 0, 0, 0,1);
TypeDef TA_LayerLink("LayerLink", " Link strength between layers, affects threshold", 
	"", "NO_UPDATE_AFTER ", "", sizeof(LayerLink), (void**)&TAI_LayerLink, 0, 0, 0,1);
TypeDef TA_taList_LayerLink_("taList_LayerLink_", " ", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(taList<LayerLink>), (void**)&TAI_taList_LayerLink_, 0, 0, 0,1);
TypeDef TA_const_LayerLink("const_LayerLink", 1, 0, 0, 0,1);
TypeDef TA_const_LayerLink_ref("const_LayerLink_ref", 1, 0, 1, 0,1);
TypeDef TA_LayerLink_List("LayerLink_List", " list of LayerLink objects", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(LayerLink_List), (void**)&TAI_LayerLink_List, 0, 0, 0,1);
TypeDef TA_const_LayerLink_List("const_LayerLink_List", 1, 0, 0, 0,1);
TypeDef TA_AvgMaxVals("AvgMaxVals", " holds average and max statistics", 
	"", "INLINE NO_UPDATE_AFTER ", "", sizeof(AvgMaxVals), (void**)&TAI_AvgMaxVals, 0, 0, 0,1);
TypeDef TA_const_LayerLink_List_ref("const_LayerLink_List_ref", 1, 0, 1, 0,1);
TypeDef TA_const_AvgMaxVals("const_AvgMaxVals", 1, 0, 0, 0,1);
TypeDef TA_const_AvgMaxVals_ref("const_AvgMaxVals_ref", 1, 0, 1, 0,1);
TypeDef TA_BioBelDecays("BioBelDecays", " holds decay values", 
	"", "INLINE NO_UPDATE_AFTER ", "", sizeof(BioBelDecays), (void**)&TAI_BioBelDecays, 0, 0, 0,1);
TypeDef TA_const_BioBelDecays("const_BioBelDecays", 1, 0, 0, 0,1);
TypeDef TA_const_BioBelDecays_ref("const_BioBelDecays_ref", 1, 0, 1, 0,1);
TypeDef TA_KWTASpec("KWTASpec", " holds parameters specifying kwta params", 
	"", "INLINE NO_UPDATE_AFTER ", "", sizeof(KWTASpec), (void**)&TAI_KWTASpec, 0, 0, 0,1);
TypeDef TA_const_KWTASpec("const_KWTASpec", 1, 0, 0, 0,1);
TypeDef TA_const_KWTASpec_ref("const_KWTASpec_ref", 1, 0, 1, 0,1);
TypeDef TA_KWTAVals("KWTAVals", " holds values for kwta stuff", 
	"", "INLINE NO_UPDATE_AFTER ", "", sizeof(KWTAVals), (void**)&TAI_KWTAVals, 0, 0, 0,1);
TypeDef TA_const_KWTAVals("const_KWTAVals", 1, 0, 0, 0,1);
TypeDef TA_const_KWTAVals_ref("const_KWTAVals_ref", 1, 0, 1, 0,1);
TypeDef TA_ActInhibSpec("ActInhibSpec", " holds parameters for act-based inhibition", 
	"", "INLINE NO_UPDATE_AFTER ", "", sizeof(ActInhibSpec), (void**)&TAI_ActInhibSpec, 0, 0, 0,1);
TypeDef TA_const_ActInhibSpec("const_ActInhibSpec", 1, 0, 0, 0,1);
TypeDef TA_const_ActInhibSpec_ref("const_ActInhibSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_InhibVals("InhibVals", " holds values for inhibition", 
	"", "INLINE NO_UPDATE_AFTER ", "", sizeof(InhibVals), (void**)&TAI_InhibVals, 0, 0, 0,1);
TypeDef TA_const_InhibVals("const_InhibVals", 1, 0, 0, 0,1);
TypeDef TA_const_BioBelLayerSpec("const_BioBelLayerSpec", 1, 0, 0, 0,1);
TypeDef TA_const_InhibVals_ref("const_InhibVals_ref", 1, 0, 1, 0,1);
TypeDef TA_const_BioBelLayerSpec_ref("const_BioBelLayerSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_SpecPtr_BioBelLayerSpec_("SpecPtr_BioBelLayerSpec_", "", 
	"INLINE NO_UPDATE_AFTER ", "INLINE NO_UPDATE_AFTER ", "", sizeof(SpecPtr<BioBelLayerSpec>), (void**)&TAI_SpecPtr_BioBelLayerSpec_, 0, 0, 0,1);
TypeDef TA_BioBelLayerSpec_SPtr("BioBelLayerSpec_SPtr", "", 
	"INLINE NO_UPDATE_AFTER ", "INLINE NO_UPDATE_AFTER ", "", sizeof(BioBelLayerSpec_SPtr), (void**)&TAI_BioBelLayerSpec_SPtr, 0, 0, 0,1);
TypeDef TA_BioBelLayerSpec_ptr("BioBelLayerSpec_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_BioBelLayerSpec_SPtr("const_BioBelLayerSpec_SPtr", 1, 0, 0, 0,1);
TypeDef TA_const_BioBelLayerSpec_SPtr_ref("const_BioBelLayerSpec_SPtr_ref", 1, 0, 1, 0,1);
TypeDef TA_const_BioBelLayer("const_BioBelLayer", 1, 0, 0, 0,1);
TypeDef TA_const_BioBelLayer_ref("const_BioBelLayer_ref", 1, 0, 1, 0,1);
TypeDef TA_const_BioBelUnit_Group("const_BioBelUnit_Group", 1, 0, 0, 0,1);
TypeDef TA_const_BioBelUnit_Group_ref("const_BioBelUnit_Group_ref", 1, 0, 1, 0,1);
TypeDef TA_LeabraCon("LeabraCon", " LEABRA connection", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(LeabraCon), (void**)&TAI_LeabraCon, 0, 0, 0,1);
TypeDef TA_LeabraConSpec("LeabraConSpec", " LEABRA connection specs", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(LeabraConSpec), (void**)&TAI_LeabraConSpec, 1, 0, 0,1);
TypeDef TA_LeabraBiasSpec("LeabraBiasSpec", " LEABRA bias-weight connection specs (bias wts are a little bit special)", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(LeabraBiasSpec), (void**)&TAI_LeabraBiasSpec, 1, 0, 0,1);
TypeDef TA_LeabraCon_Group("LeabraCon_Group", " LEABRA connection group", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(LeabraCon_Group), (void**)&TAI_LeabraCon_Group, 0, 0, 0,1);
TypeDef TA_LeabraUnitSpec("LeabraUnitSpec", " LEABRA unit specs", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(LeabraUnitSpec), (void**)&TAI_LeabraUnitSpec, 1, 0, 0,1);
TypeDef TA_LeabraUnit("LeabraUnit", " LEABRA unit", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(LeabraUnit), (void**)&TAI_LeabraUnit, 0, 0, 0,1);
TypeDef TA_LeabraLayer("LeabraLayer", " LEABRA layer ", 
	"EXT_lay COMPRESS ", "EXT_lay COMPRESS ", "", sizeof(LeabraLayer), (void**)&TAI_LeabraLayer, 1, 0, 0,1);
TypeDef TA_LeabraLayerSpec("LeabraLayerSpec", " LEABRA layer specifications", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(LeabraLayerSpec), (void**)&TAI_LeabraLayerSpec, 1, 0, 0,1);
TypeDef TA_LeabraCycle("LeabraCycle", " one Leabra relative belief cycle of activation updating", 
	"EXT_proc MEMB_IN_GPMENU AGGOP_SUM ", "EXT_proc MEMB_IN_GPMENU AGGOP_SUM ", "", sizeof(LeabraCycle), (void**)&TAI_LeabraCycle, 1, 0, 0,1);
TypeDef TA_LeabraSettle("LeabraSettle", " Leabra relative belief settling phase of activation updating", 
	"EXT_proc MEMB_IN_GPMENU AGGOP_SUM ", "EXT_proc MEMB_IN_GPMENU AGGOP_SUM ", "", sizeof(LeabraSettle), (void**)&TAI_LeabraSettle, 1, 0, 0,1);
TypeDef TA_LeabraTrial("LeabraTrial", " Leabra relative belief trial process, iterates over phases", 
	"EXT_proc MEMB_IN_GPMENU AGGOP_SUM ", "EXT_proc MEMB_IN_GPMENU AGGOP_SUM ", "", sizeof(LeabraTrial), (void**)&TAI_LeabraTrial, 1, 0, 0,1);
TypeDef TA_const_LeabraCon("const_LeabraCon", 1, 0, 0, 0,1);
TypeDef TA_const_LeabraCon_ref("const_LeabraCon_ref", 1, 0, 1, 0,1);
TypeDef TA_LeabraCon_Group_ptr("LeabraCon_Group_ptr", 1, 1, 0, 0,1);
TypeDef TA_LeabraCon_ptr("LeabraCon_ptr", 1, 1, 0, 0,1);
TypeDef TA_LeabraUnit_ptr("LeabraUnit_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_LeabraConSpec("const_LeabraConSpec", 1, 0, 0, 0,1);
TypeDef TA_const_LeabraConSpec_ref("const_LeabraConSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_const_LeabraBiasSpec("const_LeabraBiasSpec", 1, 0, 0, 0,1);
TypeDef TA_const_LeabraBiasSpec_ref("const_LeabraBiasSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_const_LeabraCon_Group("const_LeabraCon_Group", 1, 0, 0, 0,1);
TypeDef TA_const_LeabraCon_Group_ref("const_LeabraCon_Group_ref", 1, 0, 1, 0,1);
TypeDef TA_LeabraLayer_ptr("LeabraLayer_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_LeabraUnitSpec("const_LeabraUnitSpec", 1, 0, 0, 0,1);
TypeDef TA_const_LeabraUnitSpec_ref("const_LeabraUnitSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_const_LeabraUnit("const_LeabraUnit", 1, 0, 0, 0,1);
TypeDef TA_const_LeabraUnit_ref("const_LeabraUnit_ref", 1, 0, 1, 0,1);
TypeDef TA_const_LeabraLayerSpec("const_LeabraLayerSpec", 1, 0, 0, 0,1);
TypeDef TA_const_LeabraLayerSpec_ref("const_LeabraLayerSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_const_LeabraLayer("const_LeabraLayer", 1, 0, 0, 0,1);
TypeDef TA_const_LeabraLayer_ref("const_LeabraLayer_ref", 1, 0, 1, 0,1);
TypeDef TA_LeabraSettle_ptr("LeabraSettle_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_LeabraCycle("const_LeabraCycle", 1, 0, 0, 0,1);
TypeDef TA_const_LeabraCycle_ref("const_LeabraCycle_ref", 1, 0, 1, 0,1);
TypeDef TA_CascadeParams("CascadeParams", " Holds cascading parameters", 
	"", "INLINE NO_UPDATE_AFTER ", "", sizeof(CascadeParams), (void**)&TAI_CascadeParams, 0, 0, 0,1);
TypeDef TA_LeabraTrial_ptr("LeabraTrial_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_CascadeParams("const_CascadeParams", 1, 0, 0, 0,1);
TypeDef TA_const_LeabraSettle("const_LeabraSettle", 1, 0, 0, 0,1);
TypeDef TA_const_CascadeParams_ref("const_CascadeParams_ref", 1, 0, 1, 0,1);
TypeDef TA_const_LeabraSettle_ref("const_LeabraSettle_ref", 1, 0, 1, 0,1);
TypeDef TA_const_LeabraTrial("const_LeabraTrial", 1, 0, 0, 0,1);
TypeDef TA_const_LeabraTrial_ref("const_LeabraTrial_ref", 1, 0, 1, 0,1);
TypeDef TA_const_BioBelMaxDa("const_BioBelMaxDa", 1, 0, 0, 0,1);
TypeDef TA_const_BioBelMaxDa_ref("const_BioBelMaxDa_ref", 1, 0, 1, 0,1);
TypeDef TA_LeabraAeSE_Stat("LeabraAeSE_Stat", " squared error for leabra auto-encoder", 
	"EXT_proc COMPUTE_IN_TrialProcess ", "EXT_proc COMPUTE_IN_TrialProcess ", "", sizeof(LeabraAeSE_Stat), (void**)&TAI_LeabraAeSE_Stat, 1, 0, 0,1);
TypeDef TA_const_LeabraAeSE_Stat("const_LeabraAeSE_Stat", 1, 0, 0, 0,1);
TypeDef TA_PhaseOrderEventSpec("PhaseOrderEventSpec", " event specification including order of phases", 
	"EXT_spec MEMB_IN_GPMENU SCOPE_Environment IMMEDIATE_UPDATE ", "EXT_spec MEMB_IN_GPMENU SCOPE_Environment IMMEDIATE_UPDATE ", "", sizeof(PhaseOrderEventSpec), (void**)&TAI_PhaseOrderEventSpec, 1, 0, 0,1);
TypeDef TA_const_LeabraAeSE_Stat_ref("const_LeabraAeSE_Stat_ref", 1, 0, 1, 0,1);
TypeDef TA_LeabraHistUnit("LeabraHistUnit", " LEABRA unit with an single step activation history", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(LeabraHistUnit), (void**)&TAI_LeabraHistUnit, 0, 0, 0,1);
TypeDef TA_const_PhaseOrderEventSpec("const_PhaseOrderEventSpec", 1, 0, 0, 0,1);
TypeDef TA_LeabraHistUnitSpec("LeabraHistUnitSpec", " adapts weights based on one step of activation history ", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(LeabraHistUnitSpec), (void**)&TAI_LeabraHistUnitSpec, 1, 0, 0,1);
TypeDef TA_const_PhaseOrderEventSpec_ref("const_PhaseOrderEventSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_LeabraHistConSpec("LeabraHistConSpec", " computes weight change based on recv current and send previous acts", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(LeabraHistConSpec), (void**)&TAI_LeabraHistConSpec, 1, 0, 0,1);
TypeDef TA_const_LeabraHistUnitSpec("const_LeabraHistUnitSpec", 1, 0, 0, 0,1);
TypeDef TA_const_LeabraHistConSpec("const_LeabraHistConSpec", 1, 0, 0, 0,1);
TypeDef TA_const_LeabraHistUnitSpec_ref("const_LeabraHistUnitSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_const_LeabraHistConSpec_ref("const_LeabraHistConSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_const_LeabraHistUnit("const_LeabraHistUnit", 1, 0, 0, 0,1);
TypeDef TA_const_LeabraHistUnit_ref("const_LeabraHistUnit_ref", 1, 0, 1, 0,1);

// Instances

BioBelCon*		 TAI_BioBelCon=NULL;
BioBelConSpec*		 TAI_BioBelConSpec=NULL;
  static cssEl* cssElCFun_BioBelConSpec_C_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((BioBelConSpec*)ths)->C_Compute_Net((Connection*)(void*)*arg[1], (Unit*)(void*)*arg[2], (Unit*)(void*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_BioBelConSpec_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((BioBelConSpec*)ths)->Compute_Net((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_BioBelConSpec_C_Send_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelConSpec*)ths)->C_Send_Net((Connection*)(void*)*arg[1], (Unit*)(void*)*arg[2], (Unit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelConSpec_Send_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelConSpec*)ths)->Send_Net((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BioBelConSpec_C_Compute_GausSig_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((BioBelConSpec*)ths)->C_Compute_GausSig_Net((BioBelCon*)(void*)*arg[1], (BioBelUnit*)(void*)*arg[2], (BioBelUnit*)(void*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_BioBelConSpec_Compute_GausSig_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((BioBelConSpec*)ths)->Compute_GausSig_Net((BioBelCon_Group*)(void*)*arg[1], (BioBelUnit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_BioBelConSpec_C_Send_GausSig_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelConSpec*)ths)->C_Send_GausSig_Net((BioBelCon*)(void*)*arg[1], (BioBelUnit*)(void*)*arg[2], (BioBelUnit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelConSpec_Send_GausSig_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelConSpec*)ths)->Send_GausSig_Net((BioBelCon_Group*)(void*)*arg[1], (BioBelUnit*)(void*)*arg[2]);
    return rval;}
BioBelCon_Group*		 TAI_BioBelCon_Group=NULL;
  static cssEl* cssElCFun_BioBelCon_Group_Compute_GausSig_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((BioBelCon_Group*)ths)->Compute_GausSig_Net((BioBelUnit*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelCon_Group_Send_GausSig_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelCon_Group*)ths)->Send_GausSig_Net((BioBelUnit*)(void*)*arg[1]);
    return rval;}
BioBelUnitSpec*		 TAI_BioBelUnitSpec=NULL;
  static cssEl* cssElCFun_BioBelUnitSpec_InitState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnitSpec*)ths)->InitState((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnitSpec_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnitSpec*)ths)->Compute_Net((BioBelUnit*)(void*)*arg[1], (BioBelLayer*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnitSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnitSpec*)ths)->Compute_Act((BioBelUnit*)(void*)*arg[1], (BioBelLayer*)(void*)*arg[2], (BioBelInhib*)(void*)*arg[3], (int)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnitSpec_CompToTarg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnitSpec*)ths)->CompToTarg((BioBelUnit*)(void*)*arg[1], (BioBelLayer*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnitSpec_Compute_ClampNet_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnitSpec*)ths)->Compute_ClampNet((BioBelUnit*)(void*)*arg[1], (BioBelLayer*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnitSpec_Compute_NetAvg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnitSpec*)ths)->Compute_NetAvg((BioBelUnit*)(void*)*arg[1], (BioBelLayer*)(void*)*arg[2], (BioBelInhib*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnitSpec_Compute_SoftClamp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnitSpec*)ths)->Compute_SoftClamp((BioBelUnit*)(void*)*arg[1], (BioBelLayer*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnitSpec_Compute_IThresh_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((BioBelUnitSpec*)ths)->Compute_IThresh((BioBelUnit*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnitSpec_DecayState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnitSpec*)ths)->DecayState((BioBelUnit*)(void*)*arg[1], (BioBelLayer*)(void*)*arg[2], (float)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnitSpec_PostSettle_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnitSpec*)ths)->PostSettle((BioBelUnit*)(void*)*arg[1], (BioBelLayer*)(void*)*arg[2], (BioBelInhib*)(void*)*arg[3], (int)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnitSpec_CreateNXX1Fun_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnitSpec*)ths)->CreateNXX1Fun();
    return rval;}
BioBelUnit*		 TAI_BioBelUnit=NULL;
  static cssEl* cssElCFun_BioBelUnit_InitState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit*)ths)->InitState((BioBelLayer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit*)ths)->Compute_Net((BioBelLayer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit*)ths)->Compute_Act((BioBelLayer*)(void*)*arg[1], (BioBelInhib*)(void*)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_CompToTarg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit*)ths)->CompToTarg((BioBelLayer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Compute_ClampNet_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit*)ths)->Compute_ClampNet((BioBelLayer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Compute_NetAvg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit*)ths)->Compute_NetAvg((BioBelLayer*)(void*)*arg[1], (BioBelInhib*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Compute_SoftClamp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit*)ths)->Compute_SoftClamp((BioBelLayer*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Compute_IThresh_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((BioBelUnit*)ths)->Compute_IThresh());
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_DecayState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit*)ths)->DecayState((BioBelLayer*)(void*)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_PostSettle_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit*)ths)->PostSettle((BioBelLayer*)(void*)*arg[1], (BioBelInhib*)(void*)*arg[2], (int)*arg[3]);
    return rval;}
BioBelInhib*		 TAI_BioBelInhib=NULL;
  static cssEl* cssElCFun_BioBelInhib_Inhib_SetVals_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelInhib*)ths)->Inhib_SetVals((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelInhib_Inhib_ResetSortBuf_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelInhib*)ths)->Inhib_ResetSortBuf();
    return rval;}
  static cssEl* cssElCFun_BioBelInhib_Inhib_InitState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelInhib*)ths)->Inhib_InitState((BioBelLayerSpec*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelInhib_Inhib_Initialize_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelInhib*)ths)->Inhib_Initialize();
    return rval;}
BioBelLayerSpec*		 TAI_BioBelLayerSpec=NULL;
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_HardClamp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_HardClamp((BioBelLayer*)(void*)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_InputDist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelLayerSpec*)ths)->Compute_InputDist((BioBelLayer*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_Cascade_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_Cascade((BioBelLayer*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_ClampNet_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_ClampNet((BioBelLayer*)(void*)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_Net((BioBelLayer*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_Clamp_NetAvg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_Clamp_NetAvg((BioBelLayer*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_NetAvg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_NetAvg((BioBelLayer*)(void*)*arg[1], (Unit_Group*)(void*)*arg[2], (BioBelInhib*)(void*)*arg[3], (int)*arg[4], (int)*arg[5]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_sAct_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_sAct((BioBelLayer*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_SoftClamp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_SoftClamp((BioBelLayer*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_InitInhib_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->InitInhib((BioBelLayer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_Inhib_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_Inhib((BioBelLayer*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_Inhib_impl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_Inhib_impl((BioBelLayer*)(void*)*arg[1], (Unit_Group*)(void*)*arg[2], (BioBelInhib*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_Inhib_kWTA_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_Inhib_kWTA((BioBelLayer*)(void*)*arg[1], (Unit_Group*)(void*)*arg[2], (BioBelInhib*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_Inhib_sAct_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_Inhib_sAct((BioBelLayer*)(void*)*arg[1], (Unit_Group*)(void*)*arg[2], (BioBelInhib*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_Inhib_rAct_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_Inhib_rAct((BioBelLayer*)(void*)*arg[1], (Unit_Group*)(void*)*arg[2], (BioBelInhib*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_LinkInhib_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_LinkInhib((BioBelLayer*)(void*)*arg[1], (Unit_Group*)(void*)*arg[2], (BioBelInhib*)(void*)*arg[3], (int)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_Active_K_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_Active_K((BioBelLayer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_Active_K_impl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_Active_K_impl((BioBelLayer*)(void*)*arg[1], (Unit_Group*)(void*)*arg[2], (BioBelInhib*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_Pat_K_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelLayerSpec*)ths)->Compute_Pat_K((BioBelLayer*)(void*)*arg[1], (Unit_Group*)(void*)*arg[2], (BioBelInhib*)(void*)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_Act((BioBelLayer*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_Compute_Act_impl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->Compute_Act_impl((BioBelLayer*)(void*)*arg[1], (Unit_Group*)(void*)*arg[2], (BioBelInhib*)(void*)*arg[3], (int)*arg[4], (int)*arg[5]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_DecayEvent_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->DecayEvent((BioBelLayer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_DecayPhase_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->DecayPhase((BioBelLayer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_DecayAE_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->DecayAE((BioBelLayer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_CompToTarg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->CompToTarg((BioBelLayer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayerSpec_PostSettle_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayerSpec*)ths)->PostSettle((BioBelLayer*)(void*)*arg[1], (int)*arg[2]);
    return rval;}
BioBelUnit_Group*		 TAI_BioBelUnit_Group=NULL;
  static cssEl* cssElCFun_BioBelUnit_Group_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_UnSafeReplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->UnSafeReplicate((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_GetOwner_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->GetOwner(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((BioBelUnit_Group*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((BioBelUnit_Group*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((BioBelUnit_Group*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)(void*)*arg[2];
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)(void*)*arg[2];
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->New((uint)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->New((uint)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Edit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((BioBelUnit_Group*)ths)->Edit());}
    if(na == 1) {
      rval=new cssInt((int)((BioBelUnit_Group*)ths)->Edit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->CopyFrom((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Alloc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Alloc((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_IsEmpty_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->IsEmpty());
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_BuildHashTable_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->BuildHashTable((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->Remove((uint)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_RemoveName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->RemoveName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_RemoveLast_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->RemoveLast());
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_RemoveAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->RemoveAll();
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Move_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->Move((uint)*arg[1], (uint)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Swap_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->Swap((uint)*arg[1], (uint)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_PopAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->PopAll();
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Permute_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Permute();
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Sort_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Sort();
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Duplicate(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_DupeUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->DupeUniqNameNew(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_DupeUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->DupeUniqNameOld(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Stealth_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Stealth_Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Borrow(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_BorrowUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->BorrowUnique(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_BorrowUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->BorrowUniqNameNew(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_BorrowUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->BorrowUniqNameOld(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Copy_Common_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Copy_Common(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Copy_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Copy_Duplicate(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Copy_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Copy_Borrow(*(taGroup_impl*)arg[1]->GetVoidPtrOfType(&TA_taGroup_impl));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_List_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((BioBelUnit_Group*)ths)->List();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    ((BioBelUnit_Group*)ths)->List(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->FindEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->AddEl((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Add((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->AddUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->AddUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->Insert((taBase*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->Replace((uint)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->ReplaceEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->ReplaceName((const char*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->RemoveEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->DuplicateEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Link((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->LinkUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->LinkUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((BioBelUnit_Group*)ths)->InsertLink((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((BioBelUnit_Group*)ths)->InsertLink((taBase*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->ReplaceLink((uint)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->ReplaceLinkEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->ReplaceLinkName((const char*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Push((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->MoveEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->Transfer((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Dump_Save_PathR_impl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->Dump_Save_PathR_impl(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->Dump_Save_PathR_impl(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->Dump_Save_PathR_impl(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_SetDefaultEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->SetDefaultEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_SetDefaultElName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->SetDefaultElName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_SetDefaultElType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->SetDefaultElType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_EnforceSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->EnforceSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_EnforceType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->EnforceType();
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_SetBaseType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->SetBaseType((TypeDef*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_InitLeafGp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->InitLeafGp();
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_RemoveLeaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->RemoveLeaf((uint)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_RemoveLeafName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->RemoveLeafName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_RemoveLeafEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->RemoveLeafEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_RemoveGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->RemoveGp((taGroup_impl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_EnforceLeaves_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->EnforceLeaves((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_FindLeaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->FindLeaf((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_FindLeafEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->FindLeafEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->El((uint)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->FastEl((uint)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->DefaultEl(), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->Edit_El((Unit*)(void*)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Gp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->Gp((uint)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_FastGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->FastGp((uint)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Leaf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->Leaf((uint)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_LeafGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->LeafGp((uint)*arg[1]), 1, &TA_taGroup);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->FirstEl(refarg_0), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taLeafItr& refarg_0=*(taLeafItr*)arg[1]->GetVoidPtrOfType(&TA_taLeafItr);
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->NextEl(refarg_0), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_FirstGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->FirstGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_NextGp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->NextGp(refarg_0), 1, &TA_taGroup);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_NewEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->NewEl(), 1, &TA_Unit);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->NewEl((uint)*arg[1]), 1, &TA_Unit);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->NewEl((uint)*arg[1], (TypeDef*)*arg[2]), 1, &TA_Unit);}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_NewGp_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->NewGp(), 1, &TA_taGroup);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->NewGp((uint)*arg[1]), 1, &TA_taGroup);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->NewGp((uint)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taGroup);}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->FindName((char*)*arg[1]), 1, &TA_Unit);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->FindName((char*)*arg[1], refarg_1), 1, &TA_Unit);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_Unit);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_Unit);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->Pop(), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->Peek(), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->AddUniqNameOld((Unit*)(void*)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->LinkUniqNameOld((Unit*)(void*)*arg[1]), 1, &TA_Unit);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_FindLeafName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->FindLeafName((char*)*arg[1]), 1, &TA_Unit);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->FindLeafName((char*)*arg[1], refarg_1), 1, &TA_Unit);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_FindLeafType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->FindLeafType((TypeDef*)*arg[1]), 1, &TA_Unit);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((BioBelUnit_Group*)ths)->FindLeafType((TypeDef*)*arg[1], refarg_1), 1, &TA_Unit);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Build_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->Build());
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_CheckBuild_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->CheckBuild());
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_RedistributeUnits_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((BioBelUnit_Group*)ths)->RedistributeUnits();}
    if(na == 1) {
      ((BioBelUnit_Group*)ths)->RedistributeUnits((Unit*)(void*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_RecomputeGeometry_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->RecomputeGeometry();
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_SetUnitSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->SetUnitSpec((UnitSpec*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_SetConSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->SetConSpec((ConSpec*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Copy_Weights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Copy_Weights((const Unit_Group*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_WriteWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((BioBelUnit_Group*)ths)->WriteWeights(refarg_0);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_ReadWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    istream& refarg_0=*(istream*)*arg[1];
    ((BioBelUnit_Group*)ths)->ReadWeights(refarg_0);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_TransformWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->TransformWeights(*(PreProcessVals*)arg[1]->GetVoidPtrOfType(&TA_PreProcessVals));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_AddNoiseToWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->AddNoiseToWeights(*(Random*)arg[1]->GetVoidPtrOfType(&TA_Random));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_PruneCons_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelUnit_Group*)ths)->PruneCons(*(PreProcessVals*)arg[1]->GetVoidPtrOfType(&TA_PreProcessVals), (CountParam::Relation)(int)*arg[2], (float)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_LesionCons_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((BioBelUnit_Group*)ths)->LesionCons((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((BioBelUnit_Group*)ths)->LesionCons((float)*arg[1], (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_UnitValuesToArray_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float_RArray& refarg_0=*(float_RArray*)arg[1]->GetVoidPtrOfType(&TA_float_RArray);
    ((BioBelUnit_Group*)ths)->UnitValuesToArray(refarg_0, (const char*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Inhib_SetVals_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Inhib_SetVals((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Inhib_ResetSortBuf_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Inhib_ResetSortBuf();
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Inhib_InitState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Inhib_InitState((BioBelLayerSpec*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelUnit_Group_Inhib_Initialize_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelUnit_Group*)ths)->Inhib_Initialize();
    return rval;}
BioBelLayer*		 TAI_BioBelLayer=NULL;
  static cssEl* cssElCFun_BioBelLayer_UnSafeCopy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->UnSafeCopy((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_UnSafeReplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->UnSafeReplicate((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BioBelLayer*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((BioBelLayer*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((BioBelLayer*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((BioBelLayer*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      taString refarg_0=arg[1]->GetStr();
    rval=new cssTA_Base((void*)((BioBelLayer*)ths)->FindFromPath(refarg_0), 1, &TA_taBase);    *arg[1]=(String)refarg_0;
}
    if(na == 2) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)(void*)*arg[2];
    rval=new cssTA_Base((void*)((BioBelLayer*)ths)->FindFromPath(refarg_0, refarg_1), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      taString refarg_0=arg[1]->GetStr();    MemberDef* refarg_1=(MemberDef*)(void*)*arg[2];
    rval=new cssTA_Base((void*)((BioBelLayer*)ths)->FindFromPath(refarg_0, refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[1]=(String)refarg_0;    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((BioBelLayer*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((BioBelLayer*)ths)->New((uint)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((BioBelLayer*)ths)->New((uint)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelLayer*)ths)->InheritsFrom((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((BioBelLayer*)ths)->Load(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)*arg[1];
    rval=new cssInt((int)((BioBelLayer*)ths)->Load(refarg_0, (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((BioBelLayer*)ths)->Save(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((BioBelLayer*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((BioBelLayer*)ths)->Save(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((BioBelLayer*)ths)->SaveAs(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((BioBelLayer*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)*arg[1];
    rval=new cssInt((int)((BioBelLayer*)ths)->SaveAs(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Edit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((BioBelLayer*)ths)->Edit());}
    if(na == 1) {
      rval=new cssInt((int)((BioBelLayer*)ths)->Edit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->CopyFrom((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Build_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Build();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_RecomputeGeometry_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->RecomputeGeometry();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_RedistributeUnits_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((BioBelLayer*)ths)->RedistributeUnits();}
    if(na == 1) {
      ((BioBelLayer*)ths)->RedistributeUnits((Unit*)(void*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Connect_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Connect();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_CheckBuild_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelLayer*)ths)->CheckBuild());
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_CheckConnect_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelLayer*)ths)->CheckConnect());
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_RemoveCons_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->RemoveCons();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_RemoveUnits_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->RemoveUnits();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_PreConnect_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->PreConnect();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_DisConnect_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->DisConnect();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_InitExterns_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->InitExterns();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_InitDelta_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->InitDelta();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_InitState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->InitState();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_ModifyState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->ModifyState();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_InitWtDelta_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->InitWtDelta();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_InitWtState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->InitWtState();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Compute_Net((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Compute_Act((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_UpdateWeights_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->UpdateWeights();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Compute_dWt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Compute_dWt();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Copy_Weights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Copy_Weights((const Layer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_WriteWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)*arg[1];
    ((BioBelLayer*)ths)->WriteWeights(refarg_0);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_ReadWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    istream& refarg_0=*(istream*)*arg[1];
    ((BioBelLayer*)ths)->ReadWeights(refarg_0);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_TransformWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->TransformWeights(*(PreProcessVals*)arg[1]->GetVoidPtrOfType(&TA_PreProcessVals));
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_AddNoiseToWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->AddNoiseToWeights(*(Random*)arg[1]->GetVoidPtrOfType(&TA_Random));
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_PruneCons_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelLayer*)ths)->PruneCons(*(PreProcessVals*)arg[1]->GetVoidPtrOfType(&TA_PreProcessVals), (CountParam::Relation)(int)*arg[2], (float)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_LesionCons_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((BioBelLayer*)ths)->LesionCons((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((BioBelLayer*)ths)->LesionCons((float)*arg[1], (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_SetLayerSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelLayer*)ths)->SetLayerSpec((LayerSpec*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_GetLayerSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((BioBelLayer*)ths)->GetLayerSpec(), 1, &TA_LayerSpec);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_SetUnitSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelLayer*)ths)->SetUnitSpec((UnitSpec*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_SetConSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelLayer*)ths)->SetConSpec((ConSpec*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_SetExtFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->SetExtFlag((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_UnSetExtFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->UnSetExtFlag((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Inhib_SetVals_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Inhib_SetVals((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Inhib_ResetSortBuf_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Inhib_ResetSortBuf();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Inhib_InitState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Inhib_InitState((BioBelLayerSpec*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Inhib_Initialize_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Inhib_Initialize();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_InitInhib_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->InitInhib();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Compute_HardClamp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Compute_HardClamp((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Compute_InputDist_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((BioBelLayer*)ths)->Compute_InputDist((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Compute_Cascade_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Compute_Cascade((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Compute_ClampNet_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Compute_ClampNet((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Compute_Clamp_NetAvg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Compute_Clamp_NetAvg((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Compute_Inhib_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Compute_Inhib((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_Compute_Active_K_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->Compute_Active_K();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_DecayEvent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->DecayEvent();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_DecayPhase_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->DecayPhase();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_DecayAE_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->DecayAE();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_CompToTarg_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->CompToTarg();
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_PostSettle_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->PostSettle((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelLayer_ResetSortBuf_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelLayer*)ths)->ResetSortBuf();
    return rval;}
BioBelMaxDa*		 TAI_BioBelMaxDa=NULL;
  static cssEl* cssElCFun_BioBelMaxDa_RecvCon_Run_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelMaxDa*)ths)->RecvCon_Run((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelMaxDa_SendCon_Run_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelMaxDa*)ths)->SendCon_Run((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_BioBelMaxDa_Unit_Stat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((BioBelMaxDa*)ths)->Unit_Stat((Unit*)(void*)*arg[1]);
    return rval;}
BioBelChannels*		 TAI_BioBelChannels=NULL;
VChanSpecs*		 TAI_VChanSpecs=NULL;
  static cssEl* cssElCFun_VChanSpecs_Compute_G_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((VChanSpecs*)ths)->Compute_G((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_VChanSpecs_UpdateBasis_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_0=(float)*arg[1];
    ((VChanSpecs*)ths)->UpdateBasis(refarg_0, (float)*arg[2]);
    *arg[1]=(Real)refarg_0;
    return rval;}
ActFunSpecs*		 TAI_ActFunSpecs=NULL;
taPtrList<BioBelUnit>*		 TAI_taPtrList_BioBelUnit_=NULL;
  static cssEl* cssElCFun_taPtrList_BioBelUnit__Find_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->Find((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__Remove_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->Remove((uint)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<BioBelUnit>*)ths)->El((uint)*arg[1]), 1, &TA_BioBelUnit);
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<BioBelUnit>*)ths)->FastEl((uint)*arg[1]), 1, &TA_BioBelUnit);
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<BioBelUnit>*)ths)->Edit_El((BioBelUnit*)(void*)*arg[1]), 1, &TA_BioBelUnit);
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taPtrList<BioBelUnit>*)ths)->FindName((const char*)*arg[1]), 1, &TA_BioBelUnit);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taPtrList<BioBelUnit>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_BioBelUnit);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<BioBelUnit>*)ths)->Pop(), 1, &TA_BioBelUnit);
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<BioBelUnit>*)ths)->Peek(), 1, &TA_BioBelUnit);
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<BioBelUnit>*)ths)->AddUniqNameOld((BioBelUnit*)(void*)*arg[1]), 1, &TA_BioBelUnit);
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<BioBelUnit>*)ths)->LinkUniqNameOld((BioBelUnit*)(void*)*arg[1]), 1, &TA_BioBelUnit);
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->FindEl((BioBelUnit*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__AddEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<BioBelUnit>*)ths)->AddEl((BioBelUnit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<BioBelUnit>*)ths)->Add((BioBelUnit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->AddUnique((BioBelUnit*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->AddUniqNameNew((BioBelUnit*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->Insert((BioBelUnit*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__Replace_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->Replace((uint)*arg[1], (BioBelUnit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->ReplaceEl((BioBelUnit*)(void*)*arg[1], (BioBelUnit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->ReplaceName((const char*)*arg[1], (BioBelUnit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->RemoveEl((BioBelUnit*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->DuplicateEl((BioBelUnit*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<BioBelUnit>*)ths)->Link((BioBelUnit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->LinkUnique((BioBelUnit*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->LinkUniqNameNew((BioBelUnit*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->InsertLink((BioBelUnit*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->InsertLink((BioBelUnit*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__ReplaceLink_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->ReplaceLink((uint)*arg[1], (BioBelUnit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->ReplaceLinkEl((BioBelUnit*)(void*)*arg[1], (BioBelUnit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->ReplaceLinkName((const char*)*arg[1], (BioBelUnit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<BioBelUnit>*)ths)->Push((BioBelUnit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->MoveEl((BioBelUnit*)(void*)*arg[1], (BioBelUnit*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_BioBelUnit__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<BioBelUnit>*)ths)->Transfer((BioBelUnit*)(void*)*arg[1]));
    return rval;}
BioBelSort*		 TAI_BioBelSort=NULL;
LayerLink*		 TAI_LayerLink=NULL;
taList<LayerLink>*		 TAI_taList_LayerLink_=NULL;
  static cssEl* cssElCFun_taList_LayerLink__El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<LayerLink>*)ths)->El((uint)*arg[1]), 1, &TA_LayerLink);
    return rval;}
  static cssEl* cssElCFun_taList_LayerLink__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<LayerLink>*)ths)->FastEl((uint)*arg[1]), 1, &TA_LayerLink);
    return rval;}
  static cssEl* cssElCFun_taList_LayerLink__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<LayerLink>*)ths)->DefaultEl(), 1, &TA_LayerLink);
    return rval;}
  static cssEl* cssElCFun_taList_LayerLink__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<LayerLink>*)ths)->Edit_El((LayerLink*)(void*)*arg[1]), 1, &TA_LayerLink);
    return rval;}
  static cssEl* cssElCFun_taList_LayerLink__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<LayerLink>*)ths)->FindName((const char*)*arg[1]), 1, &TA_LayerLink);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<LayerLink>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_LayerLink);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_LayerLink__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<LayerLink>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_LayerLink);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<LayerLink>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_LayerLink);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_LayerLink__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<LayerLink>*)ths)->Pop(), 1, &TA_LayerLink);
    return rval;}
  static cssEl* cssElCFun_taList_LayerLink__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<LayerLink>*)ths)->Peek(), 1, &TA_LayerLink);
    return rval;}
  static cssEl* cssElCFun_taList_LayerLink__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<LayerLink>*)ths)->AddUniqNameOld((LayerLink*)(void*)*arg[1]), 1, &TA_LayerLink);
    return rval;}
  static cssEl* cssElCFun_taList_LayerLink__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<LayerLink>*)ths)->LinkUniqNameOld((LayerLink*)(void*)*arg[1]), 1, &TA_LayerLink);
    return rval;}
LayerLink_List*		 TAI_LayerLink_List=NULL;
AvgMaxVals*		 TAI_AvgMaxVals=NULL;
BioBelDecays*		 TAI_BioBelDecays=NULL;
KWTASpec*		 TAI_KWTASpec=NULL;
KWTAVals*		 TAI_KWTAVals=NULL;
ActInhibSpec*		 TAI_ActInhibSpec=NULL;
InhibVals*		 TAI_InhibVals=NULL;
SpecPtr<BioBelLayerSpec>*		 TAI_SpecPtr_BioBelLayerSpec_=NULL;
  static cssEl* cssElCFun_SpecPtr_BioBelLayerSpec__SetDefaultSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SpecPtr<BioBelLayerSpec>*)ths)->SetDefaultSpec((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SpecPtr_BioBelLayerSpec__NewChild_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SpecPtr<BioBelLayerSpec>*)ths)->NewChild(), 1, &TA_BioBelLayerSpec);
    return rval;}
BioBelLayerSpec_SPtr*		 TAI_BioBelLayerSpec_SPtr=NULL;
LeabraCon*		 TAI_LeabraCon=NULL;
LeabraConSpec*		 TAI_LeabraConSpec=NULL;
  static cssEl* cssElCFun_LeabraConSpec_C_InitWtState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraConSpec*)ths)->C_InitWtState((Connection*)(void*)*arg[1], (Unit*)(void*)*arg[2], (Unit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_LeabraConSpec_C_InitWtDelta_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraConSpec*)ths)->C_InitWtDelta((Connection*)(void*)*arg[1], (Unit*)(void*)*arg[2], (Unit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_LeabraConSpec_C_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraConSpec*)ths)->C_Compute_dWt((LeabraCon*)(void*)*arg[1], (float)*arg[2], (float)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_LeabraConSpec_C_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraConSpec*)ths)->C_UpdateWeights((LeabraCon*)(void*)*arg[1], (LeabraUnit*)(void*)*arg[2], (LeabraUnit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_LeabraConSpec_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraConSpec*)ths)->UpdateWeights((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_LeabraConSpec_Compute_SAvgCor_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    float refarg_1=(float)*arg[2];
    rval=new cssReal((double)((LeabraConSpec*)ths)->Compute_SAvgCor((LeabraCon_Group*)(void*)*arg[1], refarg_1));
    *arg[2]=(Real)refarg_1;
    return rval;}
  static cssEl* cssElCFun_LeabraConSpec_C_Compute_Hebb_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((LeabraConSpec*)ths)->C_Compute_Hebb((LeabraCon*)(void*)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4], (float)*arg[5]));
    return rval;}
  static cssEl* cssElCFun_LeabraConSpec_C_Compute_Sig_Err_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((LeabraConSpec*)ths)->C_Compute_Sig_Err((LeabraCon*)(void*)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4], (float)*arg[5]));
    return rval;}
  static cssEl* cssElCFun_LeabraConSpec_C_Compute_GausSig_Err_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((LeabraConSpec*)ths)->C_Compute_GausSig_Err((LeabraCon*)(void*)*arg[1], (float)*arg[2], (float)*arg[3], (float)*arg[4], (float)*arg[5], (float)*arg[6], (float)*arg[7]));
    return rval;}
  static cssEl* cssElCFun_LeabraConSpec_Compute_Sig_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraConSpec*)ths)->Compute_Sig_dWt((LeabraCon_Group*)(void*)*arg[1], (LeabraUnit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_LeabraConSpec_Compute_GausSig_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraConSpec*)ths)->Compute_GausSig_dWt((LeabraCon_Group*)(void*)*arg[1], (LeabraUnit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_LeabraConSpec_B_Compute_dWt_Leak_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraConSpec*)ths)->B_Compute_dWt_Leak((LeabraCon*)(void*)*arg[1], (LeabraUnit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_LeabraConSpec_B_Compute_dWt_Netin_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraConSpec*)ths)->B_Compute_dWt_Netin((LeabraCon*)(void*)*arg[1], (LeabraUnit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_LeabraConSpec_B_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraConSpec*)ths)->B_UpdateWeights((LeabraCon*)(void*)*arg[1], (LeabraUnit*)(void*)*arg[2]);
    return rval;}
LeabraBiasSpec*		 TAI_LeabraBiasSpec=NULL;
LeabraCon_Group*		 TAI_LeabraCon_Group=NULL;
  static cssEl* cssElCFun_LeabraCon_Group_Compute_Sig_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraCon_Group*)ths)->Compute_Sig_dWt((LeabraUnit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_LeabraCon_Group_Compute_GausSig_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraCon_Group*)ths)->Compute_GausSig_dWt((LeabraUnit*)(void*)*arg[1]);
    return rval;}
LeabraUnitSpec*		 TAI_LeabraUnitSpec=NULL;
  static cssEl* cssElCFun_LeabraUnitSpec_InitWtState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraUnitSpec*)ths)->InitWtState((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_LeabraUnitSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraUnitSpec*)ths)->Compute_dWt((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_LeabraUnitSpec_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraUnitSpec*)ths)->UpdateWeights((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_LeabraUnitSpec_PhaseInit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraUnitSpec*)ths)->PhaseInit((BioBelUnit*)(void*)*arg[1], (BioBelLayer*)(void*)*arg[2], (int)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_LeabraUnitSpec_Compute_dWt_impl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraUnitSpec*)ths)->Compute_dWt_impl((LeabraUnit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_LeabraUnitSpec_Compute_dWt_post_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraUnitSpec*)ths)->Compute_dWt_post((LeabraUnit*)(void*)*arg[1], (LeabraLayer*)(void*)*arg[2]);
    return rval;}
LeabraUnit*		 TAI_LeabraUnit=NULL;
  static cssEl* cssElCFun_LeabraUnit_PhaseInit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraUnit*)ths)->PhaseInit((BioBelLayer*)(void*)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_LeabraUnit_Compute_dWt_post_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraUnit*)ths)->Compute_dWt_post((LeabraLayer*)(void*)*arg[1]);
    return rval;}
LeabraLayer*		 TAI_LeabraLayer=NULL;
  static cssEl* cssElCFun_LeabraLayer_PhaseInit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraLayer*)ths)->PhaseInit((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_LeabraLayer_Compute_dWt_post_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraLayer*)ths)->Compute_dWt_post();
    return rval;}
LeabraLayerSpec*		 TAI_LeabraLayerSpec=NULL;
  static cssEl* cssElCFun_LeabraLayerSpec_PhaseInit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraLayerSpec*)ths)->PhaseInit((BioBelLayer*)(void*)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_LeabraLayerSpec_Compute_dWt_post_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraLayerSpec*)ths)->Compute_dWt_post((LeabraLayer*)(void*)*arg[1]);
    return rval;}
LeabraCycle*		 TAI_LeabraCycle=NULL;
  static cssEl* cssElCFun_LeabraCycle_Compute_Net_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraCycle*)ths)->Compute_Net();
    return rval;}
  static cssEl* cssElCFun_LeabraCycle_Compute_Clamp_NetAvg_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraCycle*)ths)->Compute_Clamp_NetAvg();
    return rval;}
  static cssEl* cssElCFun_LeabraCycle_Compute_Inhib_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraCycle*)ths)->Compute_Inhib();
    return rval;}
  static cssEl* cssElCFun_LeabraCycle_Compute_Act_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraCycle*)ths)->Compute_Act();
    return rval;}
LeabraSettle*		 TAI_LeabraSettle=NULL;
  static cssEl* cssElCFun_LeabraSettle_Compute_Active_K_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraSettle*)ths)->Compute_Active_K();
    return rval;}
  static cssEl* cssElCFun_LeabraSettle_DecayEvent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraSettle*)ths)->DecayEvent();
    return rval;}
  static cssEl* cssElCFun_LeabraSettle_DecayPhase_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraSettle*)ths)->DecayPhase();
    return rval;}
  static cssEl* cssElCFun_LeabraSettle_DecayAE_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraSettle*)ths)->DecayAE();
    return rval;}
  static cssEl* cssElCFun_LeabraSettle_PhaseInit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraSettle*)ths)->PhaseInit();
    return rval;}
  static cssEl* cssElCFun_LeabraSettle_CompToTarg_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraSettle*)ths)->CompToTarg();
    return rval;}
  static cssEl* cssElCFun_LeabraSettle_ExtToComp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraSettle*)ths)->ExtToComp();
    return rval;}
  static cssEl* cssElCFun_LeabraSettle_Compute_HardClamp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraSettle*)ths)->Compute_HardClamp();
    return rval;}
  static cssEl* cssElCFun_LeabraSettle_Compute_InputDist_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraSettle*)ths)->Compute_InputDist();
    return rval;}
  static cssEl* cssElCFun_LeabraSettle_Compute_Cascade_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraSettle*)ths)->Compute_Cascade();
    return rval;}
  static cssEl* cssElCFun_LeabraSettle_Compute_ClampNet_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraSettle*)ths)->Compute_ClampNet();
    return rval;}
  static cssEl* cssElCFun_LeabraSettle_PostSettle_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraSettle*)ths)->PostSettle();
    return rval;}
  static cssEl* cssElCFun_LeabraSettle_Compute_dWt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraSettle*)ths)->Compute_dWt();
    return rval;}
LeabraTrial*		 TAI_LeabraTrial=NULL;
  static cssEl* cssElCFun_LeabraTrial_GenCntrLog_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraTrial*)ths)->GenCntrLog((LogData*)(void*)*arg[1], (bool)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_LeabraTrial_InitInhib_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraTrial*)ths)->InitInhib();
    return rval;}
  static cssEl* cssElCFun_LeabraTrial_InitState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraTrial*)ths)->InitState();
    return rval;}
  static cssEl* cssElCFun_LeabraTrial_DecayState_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraTrial*)ths)->DecayState();
    return rval;}
  static cssEl* cssElCFun_LeabraTrial_Compute_dWt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraTrial*)ths)->Compute_dWt();
    return rval;}
CascadeParams*		 TAI_CascadeParams=NULL;
LeabraAeSE_Stat*		 TAI_LeabraAeSE_Stat=NULL;
  static cssEl* cssElCFun_LeabraAeSE_Stat_Unit_Stat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraAeSE_Stat*)ths)->Unit_Stat((Unit*)(void*)*arg[1]);
    return rval;}
PhaseOrderEventSpec*		 TAI_PhaseOrderEventSpec=NULL;
LeabraHistUnit*		 TAI_LeabraHistUnit=NULL;
LeabraHistUnitSpec*		 TAI_LeabraHistUnitSpec=NULL;
  static cssEl* cssElCFun_LeabraHistUnitSpec_InitState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraHistUnitSpec*)ths)->InitState((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_LeabraHistUnitSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraHistUnitSpec*)ths)->Compute_dWt((Unit*)(void*)*arg[1]);
    return rval;}
LeabraHistConSpec*		 TAI_LeabraHistConSpec=NULL;
  static cssEl* cssElCFun_LeabraHistConSpec_C_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((LeabraHistConSpec*)ths)->C_Compute_dWt((LeabraCon*)(void*)*arg[1], (float)*arg[2], (float)*arg[3]);
    return rval;}

// Type Data

static int BioBelConSpec::* TA_BioBelConSpec_MbrOff;
static MemberDef_data TA_BioBelConSpec_MemberDef[]={
  {&TA_float,NULL,"wt_gain"," strength multiplier for each weight value","","",
    *((ta_memb_ptr*)&(TA_BioBelConSpec_MbrOff=(int BioBelConSpec::*)(&BioBelConSpec::wt_gain))),0,NULL,0},
  {&TA_float,NULL,"k_gaus"," multilplier for the Gaussian aspect of GausSig","","",
    *((ta_memb_ptr*)&(TA_BioBelConSpec_MbrOff=(int BioBelConSpec::*)(&BioBelConSpec::k_gaus))),0,NULL,0},
  NULL};
static MethodArgs_data TA_BioBelConSpec_C_Compute_Net_MethArgs[]={
  {&TA_Connection_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"na",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_BioBelConSpec_Compute_Net_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_BioBelConSpec_C_Send_Net_MethArgs[]={
  {&TA_Connection_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_BioBelConSpec_Send_Net_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_BioBelConSpec_C_Compute_GausSig_Net_MethArgs[]={
  {&TA_BioBelCon_ptr,NULL,"cn",""},
  {&TA_BioBelUnit_ptr,NULL,"na",""},
  {&TA_BioBelUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_BioBelConSpec_Compute_GausSig_Net_MethArgs[]={
  {&TA_BioBelCon_Group_ptr,NULL,"cg",""},
  {&TA_BioBelUnit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_BioBelConSpec_C_Send_GausSig_Net_MethArgs[]={
  {&TA_BioBelCon_ptr,NULL,"cn",""},
  {&TA_BioBelUnit_ptr,NULL,"na",""},
  {&TA_BioBelUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_BioBelConSpec_Send_GausSig_Net_MethArgs[]={
  {&TA_BioBelCon_Group_ptr,NULL,"cg",""},
  {&TA_BioBelUnit_ptr,NULL,"su",""},
  NULL};
static MethodDef_data TA_BioBelConSpec_MethodDef[]={
  {&TA_float,NULL,"C_Compute_Net","","","",
    1,3,-1,0,NULL,cssElCFun_BioBelConSpec_C_Compute_Net_stub,TA_BioBelConSpec_C_Compute_Net_MethArgs},
  {&TA_float,NULL,"Compute_Net"," compute net input for weights in this con group","","",
    1,2,-1,0,NULL,cssElCFun_BioBelConSpec_Compute_Net_stub,TA_BioBelConSpec_Compute_Net_MethArgs},
  {&TA_void,NULL,"C_Send_Net","","","",
    1,3,-1,0,NULL,cssElCFun_BioBelConSpec_C_Send_Net_stub,TA_BioBelConSpec_C_Send_Net_MethArgs},
  {&TA_void,NULL,"Send_Net"," sender-based net input for con group (send net input to receivers) standard sigmoidal","","",
    1,2,-1,0,NULL,cssElCFun_BioBelConSpec_Send_Net_stub,TA_BioBelConSpec_Send_Net_MethArgs},
  {&TA_float,NULL,"C_Compute_GausSig_Net","","","",
    0,3,-1,0,NULL,cssElCFun_BioBelConSpec_C_Compute_GausSig_Net_stub,TA_BioBelConSpec_C_Compute_GausSig_Net_MethArgs},
  {&TA_float,NULL,"Compute_GausSig_Net"," GausSig with act and weight-limited difference term, receiver based!","","",
    0,2,-1,0,NULL,cssElCFun_BioBelConSpec_Compute_GausSig_Net_stub,TA_BioBelConSpec_Compute_GausSig_Net_MethArgs},
  {&TA_void,NULL,"C_Send_GausSig_Net","","","",
    0,3,-1,0,NULL,cssElCFun_BioBelConSpec_C_Send_GausSig_Net_stub,TA_BioBelConSpec_C_Send_GausSig_Net_MethArgs},
  {&TA_void,NULL,"Send_GausSig_Net"," GausSig with act and weight-limited difference term, sender based","","",
    0,2,-1,0,NULL,cssElCFun_BioBelConSpec_Send_GausSig_Net_stub,TA_BioBelConSpec_Send_GausSig_Net_MethArgs},
  NULL};
static MethodArgs_data TA_BioBelCon_Group_Compute_GausSig_Net_MethArgs[]={
  {&TA_BioBelUnit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_BioBelCon_Group_Send_GausSig_Net_MethArgs[]={
  {&TA_BioBelUnit_ptr,NULL,"u",""},
  NULL};
static MethodDef_data TA_BioBelCon_Group_MethodDef[]={
  {&TA_float,NULL,"Compute_GausSig_Net","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelCon_Group_Compute_GausSig_Net_stub,TA_BioBelCon_Group_Compute_GausSig_Net_MethArgs},
  {&TA_void,NULL,"Send_GausSig_Net","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelCon_Group_Send_GausSig_Net_stub,TA_BioBelCon_Group_Send_GausSig_Net_MethArgs},
  NULL};
static EnumDef_data TA_BioBelUnitSpec_NetInFun[]={
  {"DOT_PRODUCT"," standard dot product net input","",0},
  {"GAUSSIG"," Gaussian-Sigmoid hybrid, weight & act limited diff","",1},
  {"GAUSSIG_SEND"," sender-based gaussian-sigmoid hybrid","",2},
  NULL};
static EnumDef_data TA_BioBelUnitSpec_ActFun[]={
  {"NOISY_XX1"," noisy version of x over x plus 1 (uses noise params)","",0},
  {"X_OVER_X_1"," x over x plus 1","",1},
  {"LINEAR"," simple linear output function ","",2},
  NULL};
static EnumDef_data TA_BioBelUnitSpec_BiasWts[]={
  {"BIAS_NETIN"," as an additive term in netinput","",0},
  {"BIAS_LEAK"," as a divisive term in the leak current","",1},
  NULL};
static EnumDef_data TA_BioBelUnitSpec_NoiseType[]={
  {"NO_NOISE"," no noise added to processing","",0},
  {"VM_NOISE"," noise in the value of v_m","",1},
  {"NETIN_NOISE"," noise in the net input (g_e)","",2},
  {"ACT_NOISE"," noise in the activations","",3},
  NULL};
static int BioBelUnitSpec::* TA_BioBelUnitSpec_MbrOff;
static MemberDef_data TA_BioBelUnitSpec_MemberDef[]={
  {NULL,"::NetInFun","netin_fun"," type of net input computation to use","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::netin_fun))),0,NULL,0},
  {NULL,"::NetInFun","learn_fun"," type of learning rule to use (appropriate for net in type)","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::learn_fun))),0,NULL,0},
  {NULL,"::ActFun","act_fun"," activation function to use","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::act_fun))),0,NULL,0},
  {NULL,"::BiasWts","bias_wts"," how to model the effect of bias weights","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::bias_wts))),0,NULL,0},
  {&TA_MinMaxRange,NULL,"vm_range"," membrane potential range","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::vm_range))),0,NULL,0},
  {&TA_Random,NULL,"v_m_init"," what to initialize the membrane potential to","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::v_m_init))),0,NULL,0},
  {&TA_float,NULL,"vm_dt"," step size to take in integrating the membrane potential","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::vm_dt))),0,NULL,0},
  {&TA_float,NULL,"net_dt"," step size to take in integrating the net input","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::net_dt))),0,NULL,0},
  {&TA_ActFunSpecs,NULL,"act"," specifications of the activation function","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::act))),0,NULL,0},
  {&TA_BioBelChannels,NULL,"g_bar"," scales value of conductances","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::g_bar))),0,NULL,0},
  {&TA_BioBelChannels,NULL,"e_rev"," reversal potential associated with each conductance","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::e_rev))),0,NULL,0},
  {&TA_VChanSpecs,NULL,"hyst"," hysteresis v-gated chan (Ca2+, NMDA)","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::hyst))),0,NULL,0},
  {&TA_VChanSpecs,NULL,"acc_f"," fast accomodation v-gated chan (delayed rectifier)","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::acc_f))),0,NULL,0},
  {&TA_VChanSpecs,NULL,"acc_s"," slow accomodation v-gated chan (Ca2+-dep K/GABA_b)","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::acc_s))),0,NULL,0},
  {&TA_float,NULL,"acc_s_gain"," relative gain of the acc_s term compared to acc_f","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::acc_s_gain))),0,NULL,0},
  {NULL,"::NoiseType","noise_type"," where to add noise in the processing","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::noise_type))),0,NULL,0},
  {&TA_Random,NULL,"noise"," what kind of noise?","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::noise))),0,NULL,0},
  {&TA_Schedule,NULL,"noise_sched"," schedule of noise variance over settling cycles","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::noise_sched))),0,NULL,0},
  {&TA_FunLookup,NULL,"nxx1_fun"," convolved gaussian and x/x+1 function as lookup table","HIDDEN NO_SAVE NO_INHERIT ","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::nxx1_fun))),0,NULL,0},
  {&TA_FunLookup,NULL,"noise_conv"," gaussian for convolution","HIDDEN NO_SAVE NO_INHERIT ","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::noise_conv))),0,NULL,0},
  {&TA_float,NULL,"send_thresh"," sending activity threshold (don't send act below this)","","",
    *((ta_memb_ptr*)&(TA_BioBelUnitSpec_MbrOff=(int BioBelUnitSpec::*)(&BioBelUnitSpec::send_thresh))),0,NULL,0},
  NULL};
static MethodArgs_data TA_BioBelUnitSpec_InitState_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_BioBelUnitSpec_Compute_Net_MethArgs[]={
  {&TA_BioBelUnit_ptr,NULL,"u",""},
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_BioBelUnitSpec_Compute_Act_MethArgs[]={
  {&TA_BioBelUnit_ptr,NULL,"u",""},
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_BioBelInhib_ptr,NULL,"thr",""},
  {&TA_int,NULL,"cycle",""},
  NULL};
static MethodArgs_data TA_BioBelUnitSpec_CompToTarg_MethArgs[]={
  {&TA_BioBelUnit_ptr,NULL,"u",""},
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_BioBelUnitSpec_Compute_ClampNet_MethArgs[]={
  {&TA_BioBelUnit_ptr,NULL,"u",""},
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_BioBelUnitSpec_Compute_NetAvg_MethArgs[]={
  {&TA_BioBelUnit_ptr,NULL,"u",""},
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_BioBelInhib_ptr,NULL,"thr",""},
  NULL};
static MethodArgs_data TA_BioBelUnitSpec_Compute_SoftClamp_MethArgs[]={
  {&TA_BioBelUnit_ptr,NULL,"u",""},
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_BioBelUnitSpec_Compute_IThresh_MethArgs[]={
  {&TA_BioBelUnit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_BioBelUnitSpec_DecayState_MethArgs[]={
  {&TA_BioBelUnit_ptr,NULL,"u",""},
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_float,NULL,"decay",""},
  NULL};
static MethodArgs_data TA_BioBelUnitSpec_PostSettle_MethArgs[]={
  {&TA_BioBelUnit_ptr,NULL,"u",""},
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_BioBelInhib_ptr,NULL,"thr",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodDef_data TA_BioBelUnitSpec_MethodDef[]={
  {&TA_void,NULL,"InitState"," initialize unit state variables","","",
    2,1,-1,0,NULL,cssElCFun_BioBelUnitSpec_InitState_stub,TA_BioBelUnitSpec_InitState_MethArgs},
  {&TA_void,NULL,"Compute_Net"," add ext input, send-based","","",
    2,2,-1,0,NULL,cssElCFun_BioBelUnitSpec_Compute_Net_stub,TA_BioBelUnitSpec_Compute_Net_MethArgs},
  {&TA_void,NULL,"Compute_Act"," compute the final activation","","",
    2,4,-1,0,NULL,cssElCFun_BioBelUnitSpec_Compute_Act_stub,TA_BioBelUnitSpec_Compute_Act_MethArgs},
  {&TA_void,NULL,"CompToTarg"," copy comparison external inputs to target ones","","",
    0,2,-1,0,NULL,cssElCFun_BioBelUnitSpec_CompToTarg_stub,TA_BioBelUnitSpec_CompToTarg_MethArgs},
  {&TA_void,NULL,"Compute_ClampNet"," compute net input from hard-clamped inputs","","",
    0,2,-1,0,NULL,cssElCFun_BioBelUnitSpec_Compute_ClampNet_stub,TA_BioBelUnitSpec_Compute_ClampNet_MethArgs},
  {&TA_void,NULL,"Compute_NetAvg"," compute netin average, also perform any post-avg netin increments (e.g. bias wts)","","",
    0,3,-1,0,NULL,cssElCFun_BioBelUnitSpec_Compute_NetAvg_stub,TA_BioBelUnitSpec_Compute_NetAvg_MethArgs},
  {&TA_bool,NULL,"Compute_SoftClamp"," soft-clamps unit, returns true if unit is not above .5","","",
    0,2,-1,0,NULL,cssElCFun_BioBelUnitSpec_Compute_SoftClamp_stub,TA_BioBelUnitSpec_Compute_SoftClamp_MethArgs},
  {&TA_float,NULL,"Compute_IThresh"," compute inhibitory value that would place unit directly at threshold","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnitSpec_Compute_IThresh_stub,TA_BioBelUnitSpec_Compute_IThresh_MethArgs},
  {&TA_void,NULL,"DecayState"," decay activation states towards initial values","","",
    0,3,-1,0,NULL,cssElCFun_BioBelUnitSpec_DecayState_stub,TA_BioBelUnitSpec_DecayState_MethArgs},
  {&TA_void,NULL,"PostSettle"," set stuff after settling is over (place holder)","","",
    0,4,-1,0,NULL,cssElCFun_BioBelUnitSpec_PostSettle_stub,TA_BioBelUnitSpec_PostSettle_MethArgs},
  {&TA_void,NULL,"CreateNXX1Fun"," create convolved gaussian and x/x+1 ","","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnitSpec_CreateNXX1Fun_stub,NULL},
  NULL};
static int BioBelUnit::* TA_BioBelUnit_MbrOff;
static MemberDef_data TA_BioBelUnit_MemberDef[]={
  {&TA_float,NULL,"clmp_net"," hard-clamp net input (no need to recompute)","NO_VIEW ","",
    *((ta_memb_ptr*)&(TA_BioBelUnit_MbrOff=(int BioBelUnit::*)(&BioBelUnit::clmp_net))),0,NULL,0},
  {&TA_float,NULL,"net_norm"," normalizer for netinput (number of conns)","NO_VIEW ","",
    *((ta_memb_ptr*)&(TA_BioBelUnit_MbrOff=(int BioBelUnit::*)(&BioBelUnit::net_norm))),0,NULL,0},
  {&TA_float,NULL,"prv_net"," previous net input (for time averaging)","NO_VIEW ","",
    *((ta_memb_ptr*)&(TA_BioBelUnit_MbrOff=(int BioBelUnit::*)(&BioBelUnit::prv_net))),0,NULL,0},
  {&TA_float,NULL,"v_m"," membrane potential","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_BioBelUnit_MbrOff=(int BioBelUnit::*)(&BioBelUnit::v_m))),0,NULL,0},
  {&TA_float,NULL,"da"," delta-activation (actually memb pot)","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_BioBelUnit_MbrOff=(int BioBelUnit::*)(&BioBelUnit::da))),0,NULL,0},
  {&TA_float,NULL,"hyst"," hysteresis basis variable","NO_VIEW ","",
    *((ta_memb_ptr*)&(TA_BioBelUnit_MbrOff=(int BioBelUnit::*)(&BioBelUnit::hyst))),0,NULL,0},
  {&TA_float,NULL,"acc_f"," fast accomodation basis variable","NO_VIEW ","",
    *((ta_memb_ptr*)&(TA_BioBelUnit_MbrOff=(int BioBelUnit::*)(&BioBelUnit::acc_f))),0,NULL,0},
  {&TA_float,NULL,"acc_s"," slow accomodation basis variable","NO_VIEW ","",
    *((ta_memb_ptr*)&(TA_BioBelUnit_MbrOff=(int BioBelUnit::*)(&BioBelUnit::acc_s))),0,NULL,0},
  {&TA_float,NULL,"g_l"," net leak conductance","NO_SAVE NO_VIEW ","",
    *((ta_memb_ptr*)&(TA_BioBelUnit_MbrOff=(int BioBelUnit::*)(&BioBelUnit::g_l))),0,NULL,0},
  {&TA_float,NULL,"g_i"," net inhibitory conductance","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_BioBelUnit_MbrOff=(int BioBelUnit::*)(&BioBelUnit::g_i))),0,NULL,0},
  {&TA_float,NULL,"g_h"," hysteresis conductance","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_BioBelUnit_MbrOff=(int BioBelUnit::*)(&BioBelUnit::g_h))),0,NULL,0},
  {&TA_float,NULL,"g_a"," net accomodation conductance","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_BioBelUnit_MbrOff=(int BioBelUnit::*)(&BioBelUnit::g_a))),0,NULL,0},
  NULL};
static MethodArgs_data TA_BioBelUnit_InitState_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Compute_Net_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Compute_Act_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_BioBelInhib_ptr,NULL,"thr",""},
  {&TA_int,NULL,"cycle",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_CompToTarg_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Compute_ClampNet_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Compute_NetAvg_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_BioBelInhib_ptr,NULL,"thr",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Compute_SoftClamp_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_DecayState_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_float,NULL,"decay",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_PostSettle_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_BioBelInhib_ptr,NULL,"thr",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodDef_data TA_BioBelUnit_MethodDef[]={
  {&TA_void,NULL,"InitState"," initialize unit state variables","MENU ","",
    1,1,-1,0,NULL,cssElCFun_BioBelUnit_InitState_stub,TA_BioBelUnit_InitState_MethArgs},
  {&TA_void,NULL,"Compute_Net","","","",
    1,1,-1,0,NULL,cssElCFun_BioBelUnit_Compute_Net_stub,TA_BioBelUnit_Compute_Net_MethArgs},
  {&TA_void,NULL,"Compute_Act","","","",
    1,3,-1,0,NULL,cssElCFun_BioBelUnit_Compute_Act_stub,TA_BioBelUnit_Compute_Act_MethArgs},
  {&TA_void,NULL,"CompToTarg","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_CompToTarg_stub,TA_BioBelUnit_CompToTarg_MethArgs},
  {&TA_void,NULL,"Compute_ClampNet","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Compute_ClampNet_stub,TA_BioBelUnit_Compute_ClampNet_MethArgs},
  {&TA_void,NULL,"Compute_NetAvg","","","",
    0,2,-1,0,NULL,cssElCFun_BioBelUnit_Compute_NetAvg_stub,TA_BioBelUnit_Compute_NetAvg_MethArgs},
  {&TA_bool,NULL,"Compute_SoftClamp","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Compute_SoftClamp_stub,TA_BioBelUnit_Compute_SoftClamp_MethArgs},
  {&TA_float,NULL,"Compute_IThresh","","","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Compute_IThresh_stub,NULL},
  {&TA_void,NULL,"DecayState","","","",
    0,2,-1,0,NULL,cssElCFun_BioBelUnit_DecayState_stub,TA_BioBelUnit_DecayState_MethArgs},
  {&TA_void,NULL,"PostSettle","","","",
    0,3,-1,0,NULL,cssElCFun_BioBelUnit_PostSettle_stub,TA_BioBelUnit_PostSettle_MethArgs},
  NULL};
static int BioBelInhib::* TA_BioBelInhib_MbrOff;
static MemberDef_data TA_BioBelInhib_MemberDef[]={
  {&TA_BioBelSort,NULL,"active_buf"," list of active units","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_BioBelInhib_MbrOff=(int BioBelInhib::*)(&BioBelInhib::active_buf))),0,NULL,0},
  {&TA_BioBelSort,NULL,"inact_buf"," list of inactive units","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_BioBelInhib_MbrOff=(int BioBelInhib::*)(&BioBelInhib::inact_buf))),0,NULL,0},
  {&TA_AvgMaxVals,NULL,"netin"," net input values for the layer","","",
    *((ta_memb_ptr*)&(TA_BioBelInhib_MbrOff=(int BioBelInhib::*)(&BioBelInhib::netin))),0,NULL,0},
  {&TA_AvgMaxVals,NULL,"acts"," activation values for the layer","","",
    *((ta_memb_ptr*)&(TA_BioBelInhib_MbrOff=(int BioBelInhib::*)(&BioBelInhib::acts))),0,NULL,0},
  {&TA_KWTAVals,NULL,"kwta"," values for kwta -- activity levels, etc","","",
    *((ta_memb_ptr*)&(TA_BioBelInhib_MbrOff=(int BioBelInhib::*)(&BioBelInhib::kwta))),0,NULL,0},
  {&TA_InhibVals,NULL,"i_val"," inhibitory values","","",
    *((ta_memb_ptr*)&(TA_BioBelInhib_MbrOff=(int BioBelInhib::*)(&BioBelInhib::i_val))),0,NULL,0},
  NULL};
static MethodArgs_data TA_BioBelInhib_Inhib_SetVals_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_BioBelInhib_Inhib_InitState_MethArgs[]={
  {&TA_BioBelLayerSpec_ptr,NULL,"lay",""},
  NULL};
static MethodDef_data TA_BioBelInhib_MethodDef[]={
  {&TA_void,NULL,"Inhib_SetVals","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelInhib_Inhib_SetVals_stub,TA_BioBelInhib_Inhib_SetVals_MethArgs},
  {&TA_void,NULL,"Inhib_ResetSortBuf","","","",
    0,0,-1,0,NULL,cssElCFun_BioBelInhib_Inhib_ResetSortBuf_stub,NULL},
  {&TA_void,NULL,"Inhib_InitState","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelInhib_Inhib_InitState_stub,TA_BioBelInhib_Inhib_InitState_MethArgs},
  {&TA_void,NULL,"Inhib_Initialize","","","",
    0,0,-1,0,NULL,cssElCFun_BioBelInhib_Inhib_Initialize_stub,NULL},
  NULL};
static EnumDef_data TA_BioBelLayerSpec_Compute_I[]={
  {"KWTA_INHIB"," set inhibition betwen thresholds of k and k+1th","",0},
  {"SACT_INHIB"," set inhibition from sending activation","",1},
  {"RACT_INHIB"," set inhibition from recurrent activation","",2},
  {"SRACT_INHIB"," set inhibition from sending and recurrent activation","",3},
  NULL};
static EnumDef_data TA_BioBelLayerSpec_LayerLinking[]={
  {"NO_LINK"," no linking","",0},
  {"LINK_INHIB"," link the inhibition","",1},
  NULL};
static int BioBelLayerSpec::* TA_BioBelLayerSpec_MbrOff;
static MemberDef_data TA_BioBelLayerSpec_MemberDef[]={
  {&TA_KWTASpec,NULL,"kwta"," how to calculate the desired activity level","","",
    *((ta_memb_ptr*)&(TA_BioBelLayerSpec_MbrOff=(int BioBelLayerSpec::*)(&BioBelLayerSpec::kwta))),0,NULL,0},
  {NULL,"::Compute_I","compute_i"," how to compute the inhibition","","",
    *((ta_memb_ptr*)&(TA_BioBelLayerSpec_MbrOff=(int BioBelLayerSpec::*)(&BioBelLayerSpec::compute_i))),0,NULL,0},
  {&TA_float,NULL,"i_kwta_pt"," point to place inhibition between k and k+1 for kwta","","",
    *((ta_memb_ptr*)&(TA_BioBelLayerSpec_MbrOff=(int BioBelLayerSpec::*)(&BioBelLayerSpec::i_kwta_pt))),0,NULL,0},
  {&TA_ActInhibSpec,NULL,"i_sact"," parameters for sending act based inhbition","","",
    *((ta_memb_ptr*)&(TA_BioBelLayerSpec_MbrOff=(int BioBelLayerSpec::*)(&BioBelLayerSpec::i_sact))),0,NULL,0},
  {&TA_ActInhibSpec,NULL,"i_ract"," parameters for recurrent act based inhbition","","",
    *((ta_memb_ptr*)&(TA_BioBelLayerSpec_MbrOff=(int BioBelLayerSpec::*)(&BioBelLayerSpec::i_ract))),0,NULL,0},
  {&TA_bool,NULL,"hard_clamp"," whether to hard clamp any inputs to this layer or not","","",
    *((ta_memb_ptr*)&(TA_BioBelLayerSpec_MbrOff=(int BioBelLayerSpec::*)(&BioBelLayerSpec::hard_clamp))),0,NULL,0},
  {&TA_MinMaxRange,NULL,"clamp_range"," range of clamp activation values","","",
    *((ta_memb_ptr*)&(TA_BioBelLayerSpec_MbrOff=(int BioBelLayerSpec::*)(&BioBelLayerSpec::clamp_range))),0,NULL,0},
  {&TA_float,NULL,"stm_gain"," minimum stimulus gain factor (when not hard clamping)","","",
    *((ta_memb_ptr*)&(TA_BioBelLayerSpec_MbrOff=(int BioBelLayerSpec::*)(&BioBelLayerSpec::stm_gain))),0,NULL,0},
  {&TA_float,NULL,"d_stm_gain"," delta to increase when target units not > .5","","",
    *((ta_memb_ptr*)&(TA_BioBelLayerSpec_MbrOff=(int BioBelLayerSpec::*)(&BioBelLayerSpec::d_stm_gain))),0,NULL,0},
  {&TA_BioBelDecays,NULL,"decay"," how much to decay the prior (towards initial_act)","","",
    *((ta_memb_ptr*)&(TA_BioBelLayerSpec_MbrOff=(int BioBelLayerSpec::*)(&BioBelLayerSpec::decay))),0,NULL,0},
  {NULL,"::LayerLinking","layer_link"," how to link the layers (if links exist)","","",
    *((ta_memb_ptr*)&(TA_BioBelLayerSpec_MbrOff=(int BioBelLayerSpec::*)(&BioBelLayerSpec::layer_link))),0,NULL,0},
  {&TA_float,NULL,"layer_link_gain"," gain of the layer linking function, how much layer's thresh depends on others","","",
    *((ta_memb_ptr*)&(TA_BioBelLayerSpec_MbrOff=(int BioBelLayerSpec::*)(&BioBelLayerSpec::layer_link_gain))),0,NULL,0},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_HardClamp_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_InputDist_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_Cascade_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_int,NULL,"phase",""},
  {&TA_int,NULL,"depth",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_ClampNet_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_Net_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_int,NULL,"cycle",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_Clamp_NetAvg_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_int,NULL,"cycle",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_NetAvg_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_Unit_Group_ptr,NULL,"ug",""},
  {&TA_BioBelInhib_ptr,NULL,"thr",""},
  {&TA_int,NULL,"cycle",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_sAct_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_int,NULL,"cycle",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_SoftClamp_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_int,NULL,"cycle",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_InitInhib_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_Inhib_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_int,NULL,"cycle",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_Inhib_impl_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_Unit_Group_ptr,NULL,"ug",""},
  {&TA_BioBelInhib_ptr,NULL,"thr",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_Inhib_kWTA_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_Unit_Group_ptr,NULL,"ug",""},
  {&TA_BioBelInhib_ptr,NULL,"thr",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_Inhib_sAct_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_Unit_Group_ptr,NULL,"ug",""},
  {&TA_BioBelInhib_ptr,NULL,"thr",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_Inhib_rAct_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_Unit_Group_ptr,NULL,"ug",""},
  {&TA_BioBelInhib_ptr,NULL,"thr",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_LinkInhib_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_Unit_Group_ptr,NULL,"ug",""},
  {&TA_BioBelInhib_ptr,NULL,"thr",""},
  {&TA_int,NULL,"cycle",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_Active_K_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_Active_K_impl_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_Unit_Group_ptr,NULL,"ug",""},
  {&TA_BioBelInhib_ptr,NULL,"thr",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_Pat_K_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_Unit_Group_ptr,NULL,"ug",""},
  {&TA_BioBelInhib_ptr,NULL,"thr",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_Act_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_int,NULL,"cycle",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_Compute_Act_impl_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_Unit_Group_ptr,NULL,"ug",""},
  {&TA_BioBelInhib_ptr,NULL,"thr",""},
  {&TA_int,NULL,"cycle",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_DecayEvent_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_DecayPhase_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_DecayAE_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_CompToTarg_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_BioBelLayerSpec_PostSettle_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodDef_data TA_BioBelLayerSpec_MethodDef[]={
  {&TA_void,NULL,"Compute_HardClamp"," prior to settling: hard-clamp inputs","","",
    0,2,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_HardClamp_stub,TA_BioBelLayerSpec_Compute_HardClamp_MethArgs},
  {&TA_int,NULL,"Compute_InputDist"," prior to settling: compute layer's distance from input","","",
    0,2,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_InputDist_stub,TA_BioBelLayerSpec_Compute_InputDist_MethArgs},
  {&TA_void,NULL,"Compute_Cascade"," compute cascading of activation based on target depth from input","","",
    0,3,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_Cascade_stub,TA_BioBelLayerSpec_Compute_Cascade_MethArgs},
  {&TA_void,NULL,"Compute_ClampNet"," prior to settling: compute netinput for all units from hard-clamped","","",
    0,2,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_ClampNet_stub,TA_BioBelLayerSpec_Compute_ClampNet_MethArgs},
  {&TA_void,NULL,"Compute_Net"," stage zero: compute net inputs","","",
    0,3,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_Net_stub,TA_BioBelLayerSpec_Compute_Net_MethArgs},
  {&TA_void,NULL,"Compute_Clamp_NetAvg"," stage one: clamp and compute averages of net inputs that were already computed","","",
    0,3,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_Clamp_NetAvg_stub,TA_BioBelLayerSpec_Compute_Clamp_NetAvg_MethArgs},
  {&TA_void,NULL,"Compute_NetAvg","","","",
    0,5,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_NetAvg_stub,TA_BioBelLayerSpec_Compute_NetAvg_MethArgs},
  {&TA_void,NULL,"Compute_sAct"," compute avg and max of sending activations into layer","","",
    0,3,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_sAct_stub,TA_BioBelLayerSpec_Compute_sAct_MethArgs},
  {&TA_void,NULL,"Compute_SoftClamp"," soft-clamp inputs by adding to net input","","",
    0,3,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_SoftClamp_stub,TA_BioBelLayerSpec_Compute_SoftClamp_MethArgs},
  {&TA_void,NULL,"InitInhib"," initialize the inhibitory state values","","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayerSpec_InitInhib_stub,TA_BioBelLayerSpec_InitInhib_MethArgs},
  {&TA_void,NULL,"Compute_Inhib"," stage two: compute the inhibition for layer","","",
    0,3,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_Inhib_stub,TA_BioBelLayerSpec_Compute_Inhib_MethArgs},
  {&TA_void,NULL,"Compute_Inhib_impl"," implementation of inhibition computation for either layer or unit group","","",
    0,3,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_Inhib_impl_stub,TA_BioBelLayerSpec_Compute_Inhib_impl_MethArgs},
  {&TA_void,NULL,"Compute_Inhib_kWTA"," implementation of max kwta inhibition computation","","",
    0,3,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_Inhib_kWTA_stub,TA_BioBelLayerSpec_Compute_Inhib_kWTA_MethArgs},
  {&TA_void,NULL,"Compute_Inhib_sAct"," implementation of sending activation based inhibition","","",
    0,3,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_Inhib_sAct_stub,TA_BioBelLayerSpec_Compute_Inhib_sAct_MethArgs},
  {&TA_void,NULL,"Compute_Inhib_rAct"," implementation of recurrent activation based inhibition","","",
    0,3,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_Inhib_rAct_stub,TA_BioBelLayerSpec_Compute_Inhib_rAct_MethArgs},
  {&TA_void,NULL,"Compute_LinkInhib"," compute inhibition after linkages with other layers are factored in","","",
    0,4,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_LinkInhib_stub,TA_BioBelLayerSpec_Compute_LinkInhib_MethArgs},
  {&TA_void,NULL,"Compute_Active_K","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_Active_K_stub,TA_BioBelLayerSpec_Compute_Active_K_MethArgs},
  {&TA_void,NULL,"Compute_Active_K_impl","","","",
    0,3,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_Active_K_impl_stub,TA_BioBelLayerSpec_Compute_Active_K_impl_MethArgs},
  {&TA_int,NULL,"Compute_Pat_K","","","",
    0,3,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_Pat_K_stub,TA_BioBelLayerSpec_Compute_Pat_K_MethArgs},
  {&TA_void,NULL,"Compute_Act"," stage three: compute final activation (including scaling)","","",
    0,3,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_Act_stub,TA_BioBelLayerSpec_Compute_Act_MethArgs},
  {&TA_void,NULL,"Compute_Act_impl","","","",
    0,5,-1,0,NULL,cssElCFun_BioBelLayerSpec_Compute_Act_impl_stub,TA_BioBelLayerSpec_Compute_Act_impl_MethArgs},
  {&TA_void,NULL,"DecayEvent","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayerSpec_DecayEvent_stub,TA_BioBelLayerSpec_DecayEvent_MethArgs},
  {&TA_void,NULL,"DecayPhase","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayerSpec_DecayPhase_stub,TA_BioBelLayerSpec_DecayPhase_MethArgs},
  {&TA_void,NULL,"DecayAE","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayerSpec_DecayAE_stub,TA_BioBelLayerSpec_DecayAE_MethArgs},
  {&TA_void,NULL,"CompToTarg"," change comparison external inputs into target external inputs","","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayerSpec_CompToTarg_stub,TA_BioBelLayerSpec_CompToTarg_MethArgs},
  {&TA_void,NULL,"PostSettle"," after settling, keep track of phase variables, etc.","","",
    0,2,-1,0,NULL,cssElCFun_BioBelLayerSpec_PostSettle_stub,TA_BioBelLayerSpec_PostSettle_MethArgs},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_UnSafeReplicate_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta"," ((void *)0) "},
  {&TA_TAPtr,NULL,"par_stop"," ((void *)0) "},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_New_MethArgs[]={
  {&TA_uint,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"typ"," ((void *)0) "},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par"," ((void *)0) "},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par"," ((void *)0) "},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par"," ((void *)0) "},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Edit_MethArgs[]={
  {&TA_bool,NULL,"wait","false"},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Alloc_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_BuildHashTable_MethArgs[]={
  {&TA_int,NULL,"n_buckets",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Remove_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_RemoveName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Move_MethArgs[]={
  {&TA_uint,NULL,"from",""},
  {&TA_uint,NULL,"to",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Swap_MethArgs[]={
  {&TA_uint,NULL,"pos1",""},
  {&TA_uint,NULL,"pos2",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Duplicate_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_DupeUniqNameNew_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_DupeUniqNameOld_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Stealth_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Borrow_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_BorrowUnique_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_BorrowUniqNameNew_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_BorrowUniqNameOld_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Copy_Common_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Copy_Duplicate_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Copy_Borrow_MethArgs[]={
  {&TA_const_taGroup_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_List_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm","cout"},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_FindEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_AddEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Add_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_AddUnique_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_AddUniqNameNew_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Insert_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  {&TA_int,NULL,"where",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Replace_MethArgs[]={
  {&TA_uint,NULL,"old_idx",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_ReplaceEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","old_it",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_RemoveEl_MethArgs[]={
  {&TA_TAPtr,NULL,"item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_DuplicateEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Link_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_LinkUnique_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_LinkUniqNameNew_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_InsertLink_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_ReplaceLink_MethArgs[]={
  {&TA_uint,NULL,"old_idx",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_ReplaceLinkEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","old_it",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Push_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_MoveEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","from",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","to",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Transfer_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Dump_Save_PathR_impl_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par"," ((void *)0) "},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_SetDefaultEl_MethArgs[]={
  {&TA_TAPtr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_SetDefaultElName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_SetDefaultElType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_EnforceSize_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_SetBaseType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_RemoveLeaf_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_RemoveLeafName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_RemoveLeafEl_MethArgs[]={
  {&TA_TAPtr,NULL,"item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_RemoveGp_MethArgs[]={
  {&TA_TAGPtr,NULL,"group",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_EnforceLeaves_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_FindLeaf_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_FindLeafEl_MethArgs[]={
  {&TA_TAPtr,NULL,"item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_El_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_FastEl_MethArgs[]={
  {&TA_uint,NULL,"i",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Edit_El_MethArgs[]={
  {NULL,"taGroup_Unit_::Unit_ptr","item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Gp_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_FastGp_MethArgs[]={
  {&TA_uint,NULL,"i",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Leaf_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_LeafGp_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_FirstEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_NextEl_MethArgs[]={
  {&TA_taLeafItr_ref,NULL,"lf",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_FirstGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_NextGp_MethArgs[]={
  {&TA_int_ref,NULL,"g",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_NewEl_MethArgs[]={
  {&TA_uint,NULL,"n_els","0"},
  {&TA_TypeDef_ptr,NULL,"typ"," ((void *)0) "},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_NewGp_MethArgs[]={
  {&TA_uint,NULL,"n_gps","0"},
  {&TA_TypeDef_ptr,NULL,"typ"," ((void *)0) "},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_FindName_MethArgs[]={
  {&TA_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_AddUniqNameOld_MethArgs[]={
  {NULL,"taGroup_Unit_::Unit_ptr","item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_LinkUniqNameOld_MethArgs[]={
  {NULL,"taGroup_Unit_::Unit_ptr","item",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_FindLeafName_MethArgs[]={
  {&TA_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_FindLeafType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_RedistributeUnits_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u"," ((void *)0) "},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_SetUnitSpec_MethArgs[]={
  {&TA_UnitSpec_ptr,NULL,"unitspec",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_SetConSpec_MethArgs[]={
  {&TA_ConSpec_ptr,NULL,"conspec",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Copy_Weights_MethArgs[]={
  {&TA_const_Unit_Group_ptr,NULL,"src",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_WriteWeights_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_ReadWeights_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_TransformWeights_MethArgs[]={
  {&TA_const_PreProcessVals_ref,NULL,"trans",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_AddNoiseToWeights_MethArgs[]={
  {&TA_const_Random_ref,NULL,"noise_spec",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_PruneCons_MethArgs[]={
  {&TA_const_PreProcessVals_ref,NULL,"pre_proc",""},
  {NULL,"CountParam::Relation","rel",""},
  {&TA_float,NULL,"cmp_val",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_LesionCons_MethArgs[]={
  {&TA_float,NULL,"p_lesion",""},
  {&TA_bool,NULL,"permute","true"},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_UnitValuesToArray_MethArgs[]={
  {&TA_float_RArray_ref,NULL,"ary",""},
  {&TA_const_char_ptr,NULL,"variable",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Inhib_SetVals_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_BioBelUnit_Group_Inhib_InitState_MethArgs[]={
  {&TA_BioBelLayerSpec_ptr,NULL,"lay",""},
  NULL};
static MethodDef_data TA_BioBelUnit_Group_MethodDef[]={
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_UnSafeCopy_stub,TA_BioBelUnit_Group_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"UnSafeReplicate","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_UnSafeReplicate_stub,TA_BioBelUnit_Group_UnSafeReplicate_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    2,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_GetOwner_stub,NULL},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_BioBelUnit_Group_GetPath_stub,TA_BioBelUnit_Group_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_BioBelUnit_Group_FindFromPath_stub,TA_BioBelUnit_Group_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," create n_objs new objects of given type","MENU MENU_ON_Object ARGC_0 UPDATE_MENUS ","",
    0,2,0,0,NULL,cssElCFun_BioBelUnit_Group_New_stub,TA_BioBelUnit_Group_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_UpdateAfterEdit_stub,NULL},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_InheritsFrom_stub,TA_BioBelUnit_Group_InheritsFrom_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_BioBelUnit_Group_Load_stub,TA_BioBelUnit_Group_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_BioBelUnit_Group_Save_stub,TA_BioBelUnit_Group_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_BioBelUnit_Group_SaveAs_stub,TA_BioBelUnit_Group_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object ","",
    0,1,0,0,NULL,cssElCFun_BioBelUnit_Group_Edit_stub,TA_BioBelUnit_Group_Edit_MethArgs},
  {&TA_void,NULL,"Close"," Close this object (remove from parent owner)","MENU CONFIRM NO_REVERT_AFTER ","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_Close_stub,NULL},
  {&TA_void,NULL,"CopyFrom"," Copy from given object into this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_CopyFrom_stub,TA_BioBelUnit_Group_CopyFrom_MethArgs},
  {&TA_void,NULL,"Alloc"," allocate a list big enough for given number of elements (or current size)","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Alloc_stub,TA_BioBelUnit_Group_Alloc_MethArgs},
  {&TA_void,NULL,"Reset"," reset the list (remove all elements)","","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_Reset_stub,NULL},
  {&TA_bool,NULL,"IsEmpty","","","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_IsEmpty_stub,NULL},
  {&TA_void,NULL,"BuildHashTable"," build a hash table with given number of buckets (not dynamic, so make it big)","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_BuildHashTable_stub,TA_BioBelUnit_Group_BuildHashTable_MethArgs},
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there) find element of given type","","",
    4,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Find_stub,TA_BioBelUnit_Group_Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove object at given index on list","","",
    10,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Remove_stub,TA_BioBelUnit_Group_Remove_MethArgs},
  {&TA_bool,NULL,"RemoveName"," remove given named element from list (if on list)","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_RemoveName_stub,TA_BioBelUnit_Group_RemoveName_MethArgs},
  {&TA_bool,NULL,"RemoveLast"," remove the last element on the list","","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_RemoveLast_stub,NULL},
  {&TA_void,NULL,"RemoveAll"," Remove all elements on the list","MENU MENU_ON_Edit CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_RemoveAll_stub,NULL},
  {&TA_bool,NULL,"Move"," Move element from (from) to position (to) in list","","",
    0,2,-1,0,NULL,cssElCFun_BioBelUnit_Group_Move_stub,TA_BioBelUnit_Group_Move_MethArgs},
  {&TA_bool,NULL,"Swap"," Swap the elements in the two given positions on the list","","",
    0,2,-1,0,NULL,cssElCFun_BioBelUnit_Group_Swap_stub,TA_BioBelUnit_Group_Swap_MethArgs},
  {&TA_void,NULL,"PopAll"," pop all elements off the stack","","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_PopAll_stub,NULL},
  {&TA_void,NULL,"Permute"," permute the items in the list into a random order","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_Permute_stub,NULL},
  {&TA_void,NULL,"Sort"," sort the items in the list in alpha order according to name (or El_Compare_)","MENU CONFIRM UPDATE_MENUS ","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_Sort_stub,NULL},
  {&TA_void,NULL,"Duplicate"," duplicate (clone & add) elements of given list into this one","","",
    1,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Duplicate_stub,TA_BioBelUnit_Group_Duplicate_MethArgs},
  {&TA_void,NULL,"DupeUniqNameNew"," duplicate so result is unique names, replacing with new ones where dupl","","",
    1,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_DupeUniqNameNew_stub,TA_BioBelUnit_Group_DupeUniqNameNew_MethArgs},
  {&TA_void,NULL,"DupeUniqNameOld"," duplicate so result is unique names, using old ones where dupl","","",
    1,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_DupeUniqNameOld_stub,TA_BioBelUnit_Group_DupeUniqNameOld_MethArgs},
  {&TA_void,NULL,"Stealth_Borrow"," borrow without referencing the borrowed elements (i.e. use AddEl_())","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Stealth_Borrow_stub,TA_BioBelUnit_Group_Stealth_Borrow_MethArgs},
  {&TA_void,NULL,"Borrow"," borrow (link) elements of given list into this one","","",
    1,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Borrow_stub,TA_BioBelUnit_Group_Borrow_MethArgs},
  {&TA_void,NULL,"BorrowUnique"," borrow so result is unique list","","",
    1,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_BorrowUnique_stub,TA_BioBelUnit_Group_BorrowUnique_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameNew"," borrow so result is unique names, replacing with new ones where dupl","","",
    1,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_BorrowUniqNameNew_stub,TA_BioBelUnit_Group_BorrowUniqNameNew_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameOld"," borrow so result is unique names, using old ones where dupl","","",
    1,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_BorrowUniqNameOld_stub,TA_BioBelUnit_Group_BorrowUniqNameOld_MethArgs},
  {&TA_void,NULL,"Copy_Common"," apply copy operator to only those items in common between the two lists","","",
    1,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Copy_Common_stub,TA_BioBelUnit_Group_Copy_Common_MethArgs},
  {&TA_void,NULL,"Copy_Duplicate"," apply copy operator to items, use duplicate to add new ones from cp (if necc)","","",
    1,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Copy_Duplicate_stub,TA_BioBelUnit_Group_Copy_Duplicate_MethArgs},
  {&TA_void,NULL,"Copy_Borrow"," apply copy operator to items, use borrow to add new ones from cp (if necc)","","",
    1,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Copy_Borrow_stub,TA_BioBelUnit_Group_Copy_Borrow_MethArgs},
  {&TA_void,NULL,"List"," List the group items","","",
    0,1,0,0,NULL,cssElCFun_BioBelUnit_Group_List_stub,TA_BioBelUnit_Group_List_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_FindEl_stub,TA_BioBelUnit_Group_FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_AddEl_stub,TA_BioBelUnit_Group_AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Add_stub,TA_BioBelUnit_Group_Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_AddUnique_stub,TA_BioBelUnit_Group_AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_AddUniqNameNew_stub,TA_BioBelUnit_Group_AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," insert element at index (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_BioBelUnit_Group_Insert_stub,TA_BioBelUnit_Group_Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_BioBelUnit_Group_Replace_stub,TA_BioBelUnit_Group_Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_BioBelUnit_Group_ReplaceEl_stub,TA_BioBelUnit_Group_ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_BioBelUnit_Group_ReplaceName_stub,TA_BioBelUnit_Group_ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list Remove given item from the list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    1,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_RemoveEl_stub,TA_BioBelUnit_Group_RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_DuplicateEl_stub,TA_BioBelUnit_Group_DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Link_stub,TA_BioBelUnit_Group_Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_LinkUnique_stub,TA_BioBelUnit_Group_LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_LinkUniqNameNew_stub,TA_BioBelUnit_Group_LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_BioBelUnit_Group_InsertLink_stub,TA_BioBelUnit_Group_InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_BioBelUnit_Group_ReplaceLink_stub,TA_BioBelUnit_Group_ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_BioBelUnit_Group_ReplaceLinkEl_stub,TA_BioBelUnit_Group_ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_BioBelUnit_Group_ReplaceLinkName_stub,TA_BioBelUnit_Group_ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Push_stub,TA_BioBelUnit_Group_Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_BioBelUnit_Group_MoveEl_stub,TA_BioBelUnit_Group_MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer element to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Transfer_stub,TA_BioBelUnit_Group_Transfer_MethArgs},
  {&TA_int,NULL,"Dump_Save_PathR_impl","","","",
    0,3,1,0,NULL,cssElCFun_BioBelUnit_Group_Dump_Save_PathR_impl_stub,TA_BioBelUnit_Group_Dump_Save_PathR_impl_MethArgs},
  {&TA_int,NULL,"SetDefaultEl"," set the default element to be given item","","",
    2,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_SetDefaultEl_stub,TA_BioBelUnit_Group_SetDefaultEl_MethArgs},
  {&TA_int,NULL,"SetDefaultElName"," set the default element to be item with given name","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_SetDefaultElName_stub,TA_BioBelUnit_Group_SetDefaultElName_MethArgs},
  {&TA_int,NULL,"SetDefaultElType"," set the default element to be item with given type","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_SetDefaultElType_stub,TA_BioBelUnit_Group_SetDefaultElType_MethArgs},
  {&TA_void,NULL,"EnforceSize"," add or remove elements to force list to be of given size","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_EnforceSize_stub,TA_BioBelUnit_Group_EnforceSize_MethArgs},
  {&TA_void,NULL,"EnforceType"," enforce current type (all elements have to be of this type)","","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_EnforceType_stub,NULL},
  {&TA_void,NULL,"SetBaseType"," set base (and default) type to given td","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_SetBaseType_stub,TA_BioBelUnit_Group_SetBaseType_MethArgs},
  {&TA_void,NULL,"InitLeafGp"," Initialize the leaf group","","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_InitLeafGp_stub,NULL},
  {&TA_bool,NULL,"RemoveLeaf"," remove given leaf element Remove leaf element at leaf index","","",
    2,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_RemoveLeaf_stub,TA_BioBelUnit_Group_RemoveLeaf_MethArgs},
  {&TA_bool,NULL,"RemoveLeafName"," remove given named leaf element ","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_RemoveLeafName_stub,TA_BioBelUnit_Group_RemoveLeafName_MethArgs},
  {&TA_bool,NULL,"RemoveLeafEl"," Remove given leaf element","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_RemoveLeafEl_stub,TA_BioBelUnit_Group_RemoveLeafEl_MethArgs},
  {&TA_bool,NULL,"RemoveGp"," remove group at given index remove given group ","MENU FROM_GROUP_gp MENU_ON_Edit UPDATE_MENUS ","",
    1,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_RemoveGp_stub,TA_BioBelUnit_Group_RemoveGp_MethArgs},
  {&TA_void,NULL,"EnforceLeaves"," ensure that sz leaves exits by adding new ones to top group and removing old ones from end","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_EnforceLeaves_stub,TA_BioBelUnit_Group_EnforceLeaves_MethArgs},
  {&TA_int,NULL,"FindLeaf"," find given leaf element (-1 = not here) find named leaf element","","",
    2,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_FindLeaf_stub,TA_BioBelUnit_Group_FindLeaf_MethArgs},
  {&TA_int,NULL,"FindLeafEl"," find given leaf element -1 = not here. ","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_FindLeafEl_stub,TA_BioBelUnit_Group_FindLeafEl_MethArgs},
  {NULL,"taGroup_Unit_::Unit_ptr","El"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_El_stub,TA_BioBelUnit_Group_El_MethArgs},
  {NULL,"taGroup_Unit_::Unit_ptr","FastEl"," fast element (no checking)","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_FastEl_stub,TA_BioBelUnit_Group_FastEl_MethArgs},
  {NULL,"taGroup_Unit_::Unit_ptr","DefaultEl"," returns the element specified as the default for this group","","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_DefaultEl_stub,NULL},
  {NULL,"taGroup_Unit_::Unit_ptr","Edit_El"," Edit given group item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Edit_El_stub,TA_BioBelUnit_Group_Edit_El_MethArgs},
  {&TA_taGroup_ptr,NULL,"Gp"," get group at index","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Gp_stub,TA_BioBelUnit_Group_Gp_MethArgs},
  {&TA_taGroup_ptr,NULL,"FastGp"," the sub group at index","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_FastGp_stub,TA_BioBelUnit_Group_FastGp_MethArgs},
  {NULL,"taGroup_Unit_::Unit_ptr","Leaf"," get leaf element at index","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Leaf_stub,TA_BioBelUnit_Group_Leaf_MethArgs},
  {&TA_taGroup_ptr,NULL,"LeafGp"," the group containing given leaf","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_LeafGp_stub,TA_BioBelUnit_Group_LeafGp_MethArgs},
  {NULL,"taGroup_Unit_::Unit_ptr","FirstEl"," returns first leaf element and inits indexes","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_FirstEl_stub,TA_BioBelUnit_Group_FirstEl_MethArgs},
  {NULL,"taGroup_Unit_::Unit_ptr","NextEl"," returns next leaf element and incs indexes","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_NextEl_stub,TA_BioBelUnit_Group_NextEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"FirstGp"," returns first leaf group and inits index","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_FirstGp_stub,TA_BioBelUnit_Group_FirstGp_MethArgs},
  {&TA_taGroup_ptr,NULL,"NextGp"," returns next leaf group and incs index","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_NextGp_stub,TA_BioBelUnit_Group_NextGp_MethArgs},
  {NULL,"taGroup_Unit_::Unit_ptr","NewEl"," Create and add (n_els) new element(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_BioBelUnit_Group_NewEl_stub,TA_BioBelUnit_Group_NewEl_MethArgs},
  {&TA_taGroup_ptr,NULL,"NewGp"," Create and add (n_gps) new group(s) of given type","","",
    0,2,0,0,NULL,cssElCFun_BioBelUnit_Group_NewGp_stub,TA_BioBelUnit_Group_NewGp_MethArgs},
  {NULL,"taGroup_Unit_::Unit_ptr","FindName"," Find element with given name (nm) (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_BioBelUnit_Group_FindName_stub,TA_BioBelUnit_Group_FindName_MethArgs},
  {NULL,"taGroup_Unit_::Unit_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_BioBelUnit_Group_FindType_stub,TA_BioBelUnit_Group_FindType_MethArgs},
  {NULL,"taGroup_Unit_::Unit_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_Pop_stub,NULL},
  {NULL,"taGroup_Unit_::Unit_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_Peek_stub,NULL},
  {NULL,"taGroup_Unit_::Unit_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_AddUniqNameOld_stub,TA_BioBelUnit_Group_AddUniqNameOld_MethArgs},
  {NULL,"taGroup_Unit_::Unit_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_LinkUniqNameOld_stub,TA_BioBelUnit_Group_LinkUniqNameOld_MethArgs},
  {NULL,"taGroup_Unit_::Unit_ptr","FindLeafName"," Find element with given name (el_nm) ","MENU MENU_ON_Edit USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_BioBelUnit_Group_FindLeafName_stub,TA_BioBelUnit_Group_FindLeafName_MethArgs},
  {NULL,"taGroup_Unit_::Unit_ptr","FindLeafType"," find given type leaf element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_BioBelUnit_Group_FindLeafType_stub,TA_BioBelUnit_Group_FindLeafType_MethArgs},
  {&TA_bool,NULL,"Build"," for subgroups: build units to specs (true if changed)","MENU MENU_ON_Actions ","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_Build_stub,NULL},
  {&TA_bool,NULL,"CheckBuild"," check if build needs to be performed (true if yes, false if no)","","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_CheckBuild_stub,NULL},
  {&TA_void,NULL,"RedistributeUnits"," for subgroups: redistribute units within the given geometry of the group","","",
    0,1,0,0,NULL,cssElCFun_BioBelUnit_Group_RedistributeUnits_stub,TA_BioBelUnit_Group_RedistributeUnits_MethArgs},
  {&TA_void,NULL,"RecomputeGeometry"," re compute geometry based on parent layer","","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_RecomputeGeometry_stub,NULL},
  {&TA_bool,NULL,"SetUnitSpec"," set for all units in group","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_SetUnitSpec_stub,TA_BioBelUnit_Group_SetUnitSpec_MethArgs},
  {&TA_bool,NULL,"SetConSpec"," set for all unit's connections in group","MENU ","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_SetConSpec_stub,TA_BioBelUnit_Group_SetConSpec_MethArgs},
  {&TA_void,NULL,"Copy_Weights"," copies weights from other unit group (incl wts assoc with unit bias member)","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Copy_Weights_stub,TA_BioBelUnit_Group_Copy_Weights_MethArgs},
  {&TA_void,NULL,"WriteWeights"," write weight values out in a simple ordered list of weights","MENU EXT_strm_wts ","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_WriteWeights_stub,TA_BioBelUnit_Group_WriteWeights_MethArgs},
  {&TA_void,NULL,"ReadWeights"," read weight values in from a simple ordered list of weights","MENU EXT_strm_wts ","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_ReadWeights_stub,TA_BioBelUnit_Group_ReadWeights_MethArgs},
  {&TA_void,NULL,"TransformWeights"," apply given transformation to weights","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_TransformWeights_stub,TA_BioBelUnit_Group_TransformWeights_MethArgs},
  {&TA_void,NULL,"AddNoiseToWeights"," add noise to weights using given noise specification","MENU ","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_AddNoiseToWeights_stub,TA_BioBelUnit_Group_AddNoiseToWeights_MethArgs},
  {&TA_int,NULL,"PruneCons"," remove weights that (after pre-proc) meet relation to compare val","MENU USE_RVAL ","",
    0,3,-1,0,NULL,cssElCFun_BioBelUnit_Group_PruneCons_stub,TA_BioBelUnit_Group_PruneCons_MethArgs},
  {&TA_int,NULL,"LesionCons"," remove weights with prob p_lesion (permute = fixed no. lesioned)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_BioBelUnit_Group_LesionCons_stub,TA_BioBelUnit_Group_LesionCons_MethArgs},
  {&TA_void,NULL,"UnitValuesToArray"," collects values of variable from the units into the given array","","",
    0,2,-1,0,NULL,cssElCFun_BioBelUnit_Group_UnitValuesToArray_stub,TA_BioBelUnit_Group_UnitValuesToArray_MethArgs},
  {&TA_void,NULL,"Inhib_SetVals","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Inhib_SetVals_stub,TA_BioBelUnit_Group_Inhib_SetVals_MethArgs},
  {&TA_void,NULL,"Inhib_ResetSortBuf","","","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_Inhib_ResetSortBuf_stub,NULL},
  {&TA_void,NULL,"Inhib_InitState","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelUnit_Group_Inhib_InitState_stub,TA_BioBelUnit_Group_Inhib_InitState_MethArgs},
  {&TA_void,NULL,"Inhib_Initialize","","","",
    0,0,-1,0,NULL,cssElCFun_BioBelUnit_Group_Inhib_Initialize_stub,NULL},
  NULL};
static int BioBelLayer::* TA_BioBelLayer_MbrOff;
static MemberDef_data TA_BioBelLayer_MemberDef[]={
  {&TA_AvgMaxVals,NULL,"sact"," sending activation values (avg and max, weighted by wt_gain)","","",
    *((ta_memb_ptr*)&(TA_BioBelLayer_MbrOff=(int BioBelLayer::*)(&BioBelLayer::sact))),0,NULL,0},
  {&TA_BioBelLayerSpec_SPtr,NULL,"spec"," the spec for this layer","","",
    *((ta_memb_ptr*)&(TA_BioBelLayer_MbrOff=(int BioBelLayer::*)(&BioBelLayer::spec))),0,NULL,0},
  {&TA_LayerLink_List,NULL,"layer_links"," list of layers to link inhibition with","","",
    *((ta_memb_ptr*)&(TA_BioBelLayer_MbrOff=(int BioBelLayer::*)(&BioBelLayer::layer_links))),0,NULL,0},
  {&TA_float,NULL,"stm_gain"," actual stim gain (failsafe stm_gain for soft clamping)","","",
    *((ta_memb_ptr*)&(TA_BioBelLayer_MbrOff=(int BioBelLayer::*)(&BioBelLayer::stm_gain))),0,NULL,0},
  {&TA_bool,NULL,"hard_clamped"," this layer is actually hard clamped","","",
    *((ta_memb_ptr*)&(TA_BioBelLayer_MbrOff=(int BioBelLayer::*)(&BioBelLayer::hard_clamped))),0,NULL,0},
  {&TA_int,NULL,"input_dist"," number of layers away from external input","","",
    *((ta_memb_ptr*)&(TA_BioBelLayer_MbrOff=(int BioBelLayer::*)(&BioBelLayer::input_dist))),0,NULL,0},
  NULL};
static MethodArgs_data TA_BioBelLayer_UnSafeCopy_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_UnSafeReplicate_MethArgs[]={
  {&TA_TAPtr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta"," ((void *)0) "},
  {&TA_TAPtr,NULL,"par_stop"," ((void *)0) "},
  NULL};
static MethodArgs_data TA_BioBelLayer_FindFromPath_MethArgs[]={
  {&TA_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_BioBelLayer_New_MethArgs[]={
  {&TA_uint,NULL,"n_objs","0"},
  {&TA_TypeDef_ptr,NULL,"type"," ((void *)0) "},
  NULL};
static MethodArgs_data TA_BioBelLayer_InheritsFrom_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_Load_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par"," ((void *)0) "},
  NULL};
static MethodArgs_data TA_BioBelLayer_Save_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par"," ((void *)0) "},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_BioBelLayer_SaveAs_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par"," ((void *)0) "},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_BioBelLayer_Edit_MethArgs[]={
  {&TA_bool,NULL,"wait","false"},
  NULL};
static MethodArgs_data TA_BioBelLayer_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_RedistributeUnits_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u"," ((void *)0) "},
  NULL};
static MethodArgs_data TA_BioBelLayer_Compute_Net_MethArgs[]={
  {&TA_int,NULL,"cycle",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_Compute_Act_MethArgs[]={
  {&TA_int,NULL,"cycle",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_Copy_Weights_MethArgs[]={
  {&TA_const_Layer_ptr,NULL,"src",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_WriteWeights_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_ReadWeights_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_TransformWeights_MethArgs[]={
  {&TA_const_PreProcessVals_ref,NULL,"trans",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_AddNoiseToWeights_MethArgs[]={
  {&TA_const_Random_ref,NULL,"noise_spec",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_PruneCons_MethArgs[]={
  {&TA_const_PreProcessVals_ref,NULL,"pre_proc",""},
  {NULL,"CountParam::Relation","rel",""},
  {&TA_float,NULL,"cmp_val",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_LesionCons_MethArgs[]={
  {&TA_float,NULL,"p_lesion",""},
  {&TA_bool,NULL,"permute","true"},
  NULL};
static MethodArgs_data TA_BioBelLayer_SetLayerSpec_MethArgs[]={
  {&TA_LayerSpec_ptr,NULL,"sp",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_SetUnitSpec_MethArgs[]={
  {&TA_UnitSpec_ptr,NULL,"unitspec",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_SetConSpec_MethArgs[]={
  {&TA_ConSpec_ptr,NULL,"conspec",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_SetExtFlag_MethArgs[]={
  {&TA_int,NULL,"flg",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_UnSetExtFlag_MethArgs[]={
  {&TA_int,NULL,"flg",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_Inhib_SetVals_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_Inhib_InitState_MethArgs[]={
  {&TA_BioBelLayerSpec_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_Compute_HardClamp_MethArgs[]={
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_Compute_InputDist_MethArgs[]={
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_Compute_Cascade_MethArgs[]={
  {&TA_int,NULL,"phase",""},
  {&TA_int,NULL,"depth",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_Compute_ClampNet_MethArgs[]={
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_Compute_Clamp_NetAvg_MethArgs[]={
  {&TA_int,NULL,"cycle",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_Compute_Inhib_MethArgs[]={
  {&TA_int,NULL,"cycle",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_BioBelLayer_PostSettle_MethArgs[]={
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodDef_data TA_BioBelLayer_MethodDef[]={
  {&TA_void,NULL,"UnSafeCopy","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_UnSafeCopy_stub,TA_BioBelLayer_UnSafeCopy_MethArgs},
  {&TA_void,NULL,"UnSafeReplicate","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_UnSafeReplicate_stub,TA_BioBelLayer_UnSafeReplicate_MethArgs},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,NULL,cssElCFun_BioBelLayer_GetOwner_stub,TA_BioBelLayer_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","","",
    0,2,0,0,NULL,cssElCFun_BioBelLayer_GetPath_stub,TA_BioBelLayer_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","","",
    0,3,1,0,NULL,cssElCFun_BioBelLayer_FindFromPath_stub,TA_BioBelLayer_FindFromPath_MethArgs},
  {&TA_TAPtr,NULL,"New"," Create n_objs objects of given type (type is optional)","","",
    0,2,0,0,NULL,cssElCFun_BioBelLayer_New_stub,TA_BioBelLayer_New_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_UpdateAfterEdit_stub,NULL},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type?","","",
    2,1,-1,0,NULL,cssElCFun_BioBelLayer_InheritsFrom_stub,TA_BioBelLayer_InheritsFrom_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from a file","MENU MENU_ON_Object ARGC_1 UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_BioBelLayer_Load_stub,TA_BioBelLayer_Load_MethArgs},
  {&TA_int,NULL,"Save"," Save object data to a file","MENU ARGC_1 QUICK_SAVE ","",
    0,3,1,0,NULL,cssElCFun_BioBelLayer_Save_stub,TA_BioBelLayer_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Save object data to a new file","MENU ARGC_1 ","",
    0,3,1,0,NULL,cssElCFun_BioBelLayer_SaveAs_stub,TA_BioBelLayer_SaveAs_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object ","",
    0,1,0,0,NULL,cssElCFun_BioBelLayer_Edit_stub,TA_BioBelLayer_Edit_MethArgs},
  {&TA_void,NULL,"Close"," Close this object (remove from parent owner)","MENU CONFIRM NO_REVERT_AFTER ","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_Close_stub,NULL},
  {&TA_void,NULL,"CopyFrom"," Copy from given object into this object","MENU TYPE_ON_this NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_CopyFrom_stub,TA_BioBelLayer_CopyFrom_MethArgs},
  {&TA_void,NULL,"Build"," build the units based on n_units, geom","MENU MENU_ON_Actions CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_Build_stub,NULL},
  {&TA_void,NULL,"RecomputeGeometry"," recompute the layer's geometry specifcations","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_RecomputeGeometry_stub,NULL},
  {&TA_void,NULL,"RedistributeUnits"," layout the units according to layer geometry","ARGC_0 ","",
    0,1,0,0,NULL,cssElCFun_BioBelLayer_RedistributeUnits_stub,TA_BioBelLayer_RedistributeUnits_MethArgs},
  {&TA_void,NULL,"Connect"," connect the layer","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_Connect_stub,NULL},
  {&TA_bool,NULL,"CheckBuild"," check if build needs to be performed (true if yes, false if no)","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_CheckBuild_stub,NULL},
  {&TA_bool,NULL,"CheckConnect"," check if connect needs to be performed (true if yes, false if no)","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_CheckConnect_stub,NULL},
  {&TA_void,NULL,"RemoveCons"," remove all connections in this layer","MENU CONFIRM MENU_SEP_BEFORE ","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_RemoveCons_stub,NULL},
  {&TA_void,NULL,"RemoveUnits"," remove all units in this layer (preserving groups)","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_RemoveUnits_stub,NULL},
  {&TA_void,NULL,"PreConnect"," prepare to connect the layer (create con_groups)","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_PreConnect_stub,NULL},
  {&TA_void,NULL,"DisConnect"," disconnect layer from all others","MENU CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_DisConnect_stub,NULL},
  {&TA_void,NULL,"InitExterns"," Initializes external and target inputs","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_InitExterns_stub,NULL},
  {&TA_void,NULL,"InitDelta"," Initialize the unit deltas","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_InitDelta_stub,NULL},
  {&TA_void,NULL,"InitState"," Initialize the unit state variables","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_InitState_stub,NULL},
  {&TA_void,NULL,"ModifyState"," Alters state in an algorithm-specific way","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_ModifyState_stub,NULL},
  {&TA_void,NULL,"InitWtDelta"," Initialize the deltas","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_InitWtDelta_stub,NULL},
  {&TA_void,NULL,"InitWtState"," Initialize the weights","MENU LABEL_Init_Weights CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_InitWtState_stub,NULL},
  {&TA_void,NULL,"Compute_Net"," Compute NetInput","","",
    1,2,-1,0,NULL,cssElCFun_BioBelLayer_Compute_Net_stub,TA_BioBelLayer_Compute_Net_MethArgs},
  {&TA_void,NULL,"Compute_Act"," Compute Activation","","",
    1,2,-1,0,NULL,cssElCFun_BioBelLayer_Compute_Act_stub,TA_BioBelLayer_Compute_Act_MethArgs},
  {&TA_void,NULL,"UpdateWeights"," update weights for whole layer","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_UpdateWeights_stub,NULL},
  {&TA_void,NULL,"Compute_dWt"," update weights for whole layer","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_Compute_dWt_stub,NULL},
  {&TA_void,NULL,"Copy_Weights"," copies weights from other layer (incl wts assoc with unit bias member)","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_Copy_Weights_stub,TA_BioBelLayer_Copy_Weights_MethArgs},
  {&TA_void,NULL,"WriteWeights"," write weight values out in a simple ordered list of weights","MENU EXT_strm_wts ","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_WriteWeights_stub,TA_BioBelLayer_WriteWeights_MethArgs},
  {&TA_void,NULL,"ReadWeights"," read weight values in from a simple ordered list of weights","MENU EXT_strm_wts ","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_ReadWeights_stub,TA_BioBelLayer_ReadWeights_MethArgs},
  {&TA_void,NULL,"TransformWeights"," apply given transformation to weights","MENU MENU_SEP_BEFORE ","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_TransformWeights_stub,TA_BioBelLayer_TransformWeights_MethArgs},
  {&TA_void,NULL,"AddNoiseToWeights"," add noise to weights using given noise specification","MENU ","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_AddNoiseToWeights_stub,TA_BioBelLayer_AddNoiseToWeights_MethArgs},
  {&TA_int,NULL,"PruneCons"," remove weights that (after pre-proc) meet relation to compare val","MENU USE_RVAL ","",
    0,3,-1,0,NULL,cssElCFun_BioBelLayer_PruneCons_stub,TA_BioBelLayer_PruneCons_MethArgs},
  {&TA_int,NULL,"LesionCons"," remove weights with prob p_lesion (permute = fixed no. lesioned)","MENU USE_RVAL ","",
    0,2,1,0,NULL,cssElCFun_BioBelLayer_LesionCons_stub,TA_BioBelLayer_LesionCons_MethArgs},
  {&TA_bool,NULL,"SetLayerSpec"," set the layer specification","MENU MENU_SEP_BEFORE ","",
    1,1,-1,0,NULL,cssElCFun_BioBelLayer_SetLayerSpec_stub,TA_BioBelLayer_SetLayerSpec_MethArgs},
  {&TA_LayerSpec_ptr,NULL,"GetLayerSpec","","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_GetLayerSpec_stub,NULL},
  {&TA_bool,NULL,"SetUnitSpec"," set for all units in layer","MENU ","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_SetUnitSpec_stub,TA_BioBelLayer_SetUnitSpec_MethArgs},
  {&TA_bool,NULL,"SetConSpec"," set for all unit's connections in layer","MENU ","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_SetConSpec_stub,TA_BioBelLayer_SetConSpec_MethArgs},
  {&TA_void,NULL,"SetExtFlag","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_SetExtFlag_stub,TA_BioBelLayer_SetExtFlag_MethArgs},
  {&TA_void,NULL,"UnSetExtFlag","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_UnSetExtFlag_stub,TA_BioBelLayer_UnSetExtFlag_MethArgs},
  {&TA_void,NULL,"Inhib_SetVals","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_Inhib_SetVals_stub,TA_BioBelLayer_Inhib_SetVals_MethArgs},
  {&TA_void,NULL,"Inhib_ResetSortBuf","","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_Inhib_ResetSortBuf_stub,NULL},
  {&TA_void,NULL,"Inhib_InitState","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_Inhib_InitState_stub,TA_BioBelLayer_Inhib_InitState_MethArgs},
  {&TA_void,NULL,"Inhib_Initialize","","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_Inhib_Initialize_stub,NULL},
  {&TA_void,NULL,"InitInhib"," initialize inhibitory state","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_InitInhib_stub,NULL},
  {&TA_void,NULL,"Compute_HardClamp","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_Compute_HardClamp_stub,TA_BioBelLayer_Compute_HardClamp_MethArgs},
  {&TA_int,NULL,"Compute_InputDist","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_Compute_InputDist_stub,TA_BioBelLayer_Compute_InputDist_MethArgs},
  {&TA_void,NULL,"Compute_Cascade","","","",
    0,2,-1,0,NULL,cssElCFun_BioBelLayer_Compute_Cascade_stub,TA_BioBelLayer_Compute_Cascade_MethArgs},
  {&TA_void,NULL,"Compute_ClampNet","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_Compute_ClampNet_stub,TA_BioBelLayer_Compute_ClampNet_MethArgs},
  {&TA_void,NULL,"Compute_Clamp_NetAvg","","","",
    0,2,-1,0,NULL,cssElCFun_BioBelLayer_Compute_Clamp_NetAvg_stub,TA_BioBelLayer_Compute_Clamp_NetAvg_MethArgs},
  {&TA_void,NULL,"Compute_Inhib","","","",
    0,2,-1,0,NULL,cssElCFun_BioBelLayer_Compute_Inhib_stub,TA_BioBelLayer_Compute_Inhib_MethArgs},
  {&TA_void,NULL,"Compute_Active_K","","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_Compute_Active_K_stub,NULL},
  {&TA_void,NULL,"DecayEvent"," decay between events","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_DecayEvent_stub,NULL},
  {&TA_void,NULL,"DecayPhase"," decay between phases","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_DecayPhase_stub,NULL},
  {&TA_void,NULL,"DecayAE"," decay for auto-encoder","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_DecayAE_stub,NULL},
  {&TA_void,NULL,"CompToTarg","","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_CompToTarg_stub,NULL},
  {&TA_void,NULL,"PostSettle","","","",
    0,1,-1,0,NULL,cssElCFun_BioBelLayer_PostSettle_stub,TA_BioBelLayer_PostSettle_MethArgs},
  {&TA_void,NULL,"ResetSortBuf","","","",
    0,0,-1,0,NULL,cssElCFun_BioBelLayer_ResetSortBuf_stub,NULL},
  NULL};
static int BioBelMaxDa::* TA_BioBelMaxDa_MbrOff;
static MemberDef_data TA_BioBelMaxDa_MemberDef[]={
  {&TA_LeabraSettle_ptr,NULL,"settle_proc"," the settle process","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_BioBelMaxDa_MbrOff=(int BioBelMaxDa::*)(&BioBelMaxDa::settle_proc))),0,NULL,0},
  {&TA_StatVal,NULL,"da"," delta-activation","","",
    *((ta_memb_ptr*)&(TA_BioBelMaxDa_MbrOff=(int BioBelMaxDa::*)(&BioBelMaxDa::da))),0,NULL,0},
  NULL};
static MethodArgs_data TA_BioBelMaxDa_RecvCon_Run_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_BioBelMaxDa_SendCon_Run_MethArgs[]={
  {&TA_Unit_ptr,NULL,"na",""},
  NULL};
static MethodArgs_data TA_BioBelMaxDa_Unit_Stat_MethArgs[]={
  {&TA_Unit_ptr,NULL,"unit",""},
  NULL};
static MethodDef_data TA_BioBelMaxDa_MethodDef[]={
  {&TA_void,NULL,"RecvCon_Run"," Compute over recv conns of a unit don't do these!","","",
    1,1,-1,0,NULL,cssElCFun_BioBelMaxDa_RecvCon_Run_stub,TA_BioBelMaxDa_RecvCon_Run_MethArgs},
  {&TA_void,NULL,"SendCon_Run"," Compute over send conns of a unit","","",
    1,1,-1,0,NULL,cssElCFun_BioBelMaxDa_SendCon_Run_stub,TA_BioBelMaxDa_SendCon_Run_MethArgs},
  {&TA_void,NULL,"Unit_Stat"," Compute statistic on a unit","","",
    1,1,-1,0,NULL,cssElCFun_BioBelMaxDa_Unit_Stat_stub,TA_BioBelMaxDa_Unit_Stat_MethArgs},
  NULL};
static int BioBelChannels::* TA_BioBelChannels_MbrOff;
static MemberDef_data TA_BioBelChannels_MemberDef[]={
  {&TA_float,NULL,"e"," excitatory","","",
    *((ta_memb_ptr*)&(TA_BioBelChannels_MbrOff=(int BioBelChannels::*)(&BioBelChannels::e))),0,NULL,0},
  {&TA_float,NULL,"l"," leak","","",
    *((ta_memb_ptr*)&(TA_BioBelChannels_MbrOff=(int BioBelChannels::*)(&BioBelChannels::l))),0,NULL,0},
  {&TA_float,NULL,"i"," inhibitory","","",
    *((ta_memb_ptr*)&(TA_BioBelChannels_MbrOff=(int BioBelChannels::*)(&BioBelChannels::i))),0,NULL,0},
  {&TA_float,NULL,"h"," hysteresis (Ca)","","",
    *((ta_memb_ptr*)&(TA_BioBelChannels_MbrOff=(int BioBelChannels::*)(&BioBelChannels::h))),0,NULL,0},
  {&TA_float,NULL,"a"," accomodation (k)","","",
    *((ta_memb_ptr*)&(TA_BioBelChannels_MbrOff=(int BioBelChannels::*)(&BioBelChannels::a))),0,NULL,0},
  NULL};
static EnumDef_data TA_VChanSpecs_VChanType[]={
  {"NO_CHAN"," no channel -- don't use","",0},
  {"LINEAR"," linear function of basis variable","",1},
  {"POWER"," power function of basis variable","",2},
  NULL};
static int VChanSpecs::* TA_VChanSpecs_MbrOff;
static MemberDef_data TA_VChanSpecs_MemberDef[]={
  {NULL,"::VChanType","type"," type of relationship between basis variable and current","","",
    *((ta_memb_ptr*)&(TA_VChanSpecs_MbrOff=(int VChanSpecs::*)(&VChanSpecs::type))),0,NULL,0},
  {&TA_float,NULL,"dt"," rate for accumulating the basis variable","","",
    *((ta_memb_ptr*)&(TA_VChanSpecs_MbrOff=(int VChanSpecs::*)(&VChanSpecs::dt))),0,NULL,0},
  {&TA_float,NULL,"thresh"," threshold for starting to accumulate basis variable","","",
    *((ta_memb_ptr*)&(TA_VChanSpecs_MbrOff=(int VChanSpecs::*)(&VChanSpecs::thresh))),0,NULL,0},
  {&TA_float,NULL,"power"," exponent for power function","","",
    *((ta_memb_ptr*)&(TA_VChanSpecs_MbrOff=(int VChanSpecs::*)(&VChanSpecs::power))),0,NULL,0},
  NULL};
static MethodArgs_data TA_VChanSpecs_Compute_G_MethArgs[]={
  {&TA_float,NULL,"basis",""},
  NULL};
static MethodArgs_data TA_VChanSpecs_UpdateBasis_MethArgs[]={
  {&TA_float_ref,NULL,"basis",""},
  {&TA_float,NULL,"v_m",""},
  NULL};
static MethodDef_data TA_VChanSpecs_MethodDef[]={
  {&TA_float,NULL,"Compute_G","","","",
    0,1,-1,0,NULL,cssElCFun_VChanSpecs_Compute_G_stub,TA_VChanSpecs_Compute_G_MethArgs},
  {&TA_void,NULL,"UpdateBasis","","","",
    0,2,-1,0,NULL,cssElCFun_VChanSpecs_UpdateBasis_stub,TA_VChanSpecs_UpdateBasis_MethArgs},
  NULL};
static int ActFunSpecs::* TA_ActFunSpecs_MbrOff;
static MemberDef_data TA_ActFunSpecs_MemberDef[]={
  {&TA_float,NULL,"thresh"," threshold","","",
    *((ta_memb_ptr*)&(TA_ActFunSpecs_MbrOff=(int ActFunSpecs::*)(&ActFunSpecs::thresh))),0,NULL,0},
  {&TA_float,NULL,"gain"," gain of the activation function","","",
    *((ta_memb_ptr*)&(TA_ActFunSpecs_MbrOff=(int ActFunSpecs::*)(&ActFunSpecs::gain))),0,NULL,0},
  {&TA_float,NULL,"v_m_rest"," resting membrane potential","","",
    *((ta_memb_ptr*)&(TA_ActFunSpecs_MbrOff=(int ActFunSpecs::*)(&ActFunSpecs::v_m_rest))),0,NULL,0},
  {&TA_float,NULL,"g_e_rest"," excitatory input needed to balance leak at rest","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_ActFunSpecs_MbrOff=(int ActFunSpecs::*)(&ActFunSpecs::g_e_rest))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__Find_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__Remove_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__El_MethArgs[]={
  {&TA_uint,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__FastEl_MethArgs[]={
  {&TA_uint,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__Edit_El_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__AddUniqNameOld_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__LinkUniqNameOld_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__FindEl_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__AddEl_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__Add_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__AddUnique_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__AddUniqNameNew_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__Insert_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__Replace_MethArgs[]={
  {&TA_uint,NULL,"old_idx",""},
  {NULL,"::BioBelUnit_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__ReplaceEl_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","old_it",""},
  {NULL,"::BioBelUnit_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__ReplaceName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::BioBelUnit_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__RemoveEl_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__DuplicateEl_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__Link_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__LinkUnique_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__LinkUniqNameNew_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__InsertLink_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__ReplaceLink_MethArgs[]={
  {&TA_uint,NULL,"old_idx",""},
  {NULL,"::BioBelUnit_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__ReplaceLinkEl_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","old_it",""},
  {NULL,"::BioBelUnit_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__ReplaceLinkName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"old_nm",""},
  {NULL,"::BioBelUnit_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__Push_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__MoveEl_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","from",""},
  {NULL,"::BioBelUnit_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_BioBelUnit__Transfer_MethArgs[]={
  {NULL,"::BioBelUnit_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_BioBelUnit__MethodDef[]={
  {&TA_int,NULL,"Find"," find named element in list find element in list (-1 if not there)","","",
    2,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__Find_stub,TA_taPtrList_BioBelUnit__Find_MethArgs},
  {&TA_bool,NULL,"Remove"," remove (and delete) element from list at index Remove element at given index","","",
    4,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__Remove_stub,TA_taPtrList_BioBelUnit__Remove_MethArgs},
  {NULL,"::BioBelUnit_ptr","El"," element at index","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__El_stub,TA_taPtrList_BioBelUnit__El_MethArgs},
  {NULL,"::BioBelUnit_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__FastEl_stub,TA_taPtrList_BioBelUnit__FastEl_MethArgs},
  {NULL,"::BioBelUnit_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__Edit_El_stub,TA_taPtrList_BioBelUnit__Edit_El_MethArgs},
  {NULL,"::BioBelUnit_ptr","FindName"," find given named element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taPtrList_BioBelUnit__FindName_stub,TA_taPtrList_BioBelUnit__FindName_MethArgs},
  {NULL,"::BioBelUnit_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__Pop_stub,NULL},
  {NULL,"::BioBelUnit_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__Peek_stub,NULL},
  {NULL,"::BioBelUnit_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__AddUniqNameOld_stub,TA_taPtrList_BioBelUnit__AddUniqNameOld_MethArgs},
  {NULL,"::BioBelUnit_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__LinkUniqNameOld_stub,TA_taPtrList_BioBelUnit__LinkUniqNameOld_MethArgs},
  {&TA_int,NULL,"FindEl"," find given element in list (-1 if not there)","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__FindEl_stub,TA_taPtrList_BioBelUnit__FindEl_MethArgs},
  {&TA_void,NULL,"AddEl"," append a new pointer to end of list","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__AddEl_stub,TA_taPtrList_BioBelUnit__AddEl_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__Add_stub,TA_taPtrList_BioBelUnit__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__AddUnique_stub,TA_taPtrList_BioBelUnit__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__AddUniqNameNew_stub,TA_taPtrList_BioBelUnit__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," Add or insert element at idx (-1 for end)","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__Insert_stub,TA_taPtrList_BioBelUnit__Insert_MethArgs},
  {&TA_bool,NULL,"Replace"," replace element at index with the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__Replace_stub,TA_taPtrList_BioBelUnit__Replace_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__ReplaceEl_stub,TA_taPtrList_BioBelUnit__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__ReplaceName_stub,TA_taPtrList_BioBelUnit__ReplaceName_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU LABEL_Remove ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__RemoveEl_stub,TA_taPtrList_BioBelUnit__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__DuplicateEl_stub,TA_taPtrList_BioBelUnit__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__Link_stub,TA_taPtrList_BioBelUnit__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__LinkUnique_stub,TA_taPtrList_BioBelUnit__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__LinkUniqNameNew_stub,TA_taPtrList_BioBelUnit__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU LABEL_Link UPDATE_MENUS ","",
    0,2,1,0,NULL,cssElCFun_taPtrList_BioBelUnit__InsertLink_stub,TA_taPtrList_BioBelUnit__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLink"," replace element with a link to the new one","","",
    2,2,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__ReplaceLink_stub,TA_taPtrList_BioBelUnit__ReplaceLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__ReplaceLinkEl_stub,TA_taPtrList_BioBelUnit__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__ReplaceLinkName_stub,TA_taPtrList_BioBelUnit__ReplaceLinkName_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__Push_stub,TA_taPtrList_BioBelUnit__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU LABEL_Move ARG_ON_OBJ UPDATE_MENUS ","",
    0,2,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__MoveEl_stub,TA_taPtrList_BioBelUnit__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer item to this list","MENU MENU_ON_Edit NO_SCOPE UPDATE_MENUS ","",
    0,1,-1,0,NULL,cssElCFun_taPtrList_BioBelUnit__Transfer_stub,TA_taPtrList_BioBelUnit__Transfer_MethArgs},
  NULL};
static int LayerLink::* TA_LayerLink_MbrOff;
static MemberDef_data TA_LayerLink_MemberDef[]={
  {&TA_BioBelLayer_ptr,NULL,"layer"," layer to link to","","",
    *((ta_memb_ptr*)&(TA_LayerLink_MbrOff=(int LayerLink::*)(&LayerLink::layer))),0,NULL,0},
  {&TA_float,NULL,"link_wt"," strength of the Link","","",
    *((ta_memb_ptr*)&(TA_LayerLink_MbrOff=(int LayerLink::*)(&LayerLink::link_wt))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taList_LayerLink__El_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_LayerLink__FastEl_MethArgs[]={
  {&TA_uint,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_LayerLink__Edit_El_MethArgs[]={
  {NULL,"::LayerLink_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_LayerLink__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_LayerLink__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_LayerLink__AddUniqNameOld_MethArgs[]={
  {NULL,"::LayerLink_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_LayerLink__LinkUniqNameOld_MethArgs[]={
  {NULL,"::LayerLink_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_LayerLink__MethodDef[]={
  {NULL,"::LayerLink_ptr","El"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_LayerLink__El_stub,TA_taList_LayerLink__El_MethArgs},
  {NULL,"::LayerLink_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_LayerLink__FastEl_stub,TA_taList_LayerLink__FastEl_MethArgs},
  {NULL,"::LayerLink_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_LayerLink__DefaultEl_stub,NULL},
  {NULL,"::LayerLink_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_LayerLink__Edit_El_stub,TA_taList_LayerLink__Edit_El_MethArgs},
  {NULL,"::LayerLink_ptr","FindName"," Find element with given name (item_nm) ","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_LayerLink__FindName_stub,TA_taList_LayerLink__FindName_MethArgs},
  {NULL,"::LayerLink_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_LayerLink__FindType_stub,TA_taList_LayerLink__FindType_MethArgs},
  {NULL,"::LayerLink_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_LayerLink__Pop_stub,NULL},
  {NULL,"::LayerLink_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_LayerLink__Peek_stub,NULL},
  {NULL,"::LayerLink_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_LayerLink__AddUniqNameOld_stub,TA_taList_LayerLink__AddUniqNameOld_MethArgs},
  {NULL,"::LayerLink_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_LayerLink__LinkUniqNameOld_stub,TA_taList_LayerLink__LinkUniqNameOld_MethArgs},
  NULL};
static int AvgMaxVals::* TA_AvgMaxVals_MbrOff;
static MemberDef_data TA_AvgMaxVals_MemberDef[]={
  {&TA_float,NULL,"avg"," average value","","",
    *((ta_memb_ptr*)&(TA_AvgMaxVals_MbrOff=(int AvgMaxVals::*)(&AvgMaxVals::avg))),0,NULL,0},
  {&TA_float,NULL,"max"," maximum value","","",
    *((ta_memb_ptr*)&(TA_AvgMaxVals_MbrOff=(int AvgMaxVals::*)(&AvgMaxVals::max))),0,NULL,0},
  NULL};
static int BioBelDecays::* TA_BioBelDecays_MbrOff;
static MemberDef_data TA_BioBelDecays_MemberDef[]={
  {&TA_float,NULL,"event"," how much to decay between events","","",
    *((ta_memb_ptr*)&(TA_BioBelDecays_MbrOff=(int BioBelDecays::*)(&BioBelDecays::event))),0,NULL,0},
  {&TA_float,NULL,"phase"," how much to decay between phases","","",
    *((ta_memb_ptr*)&(TA_BioBelDecays_MbrOff=(int BioBelDecays::*)(&BioBelDecays::phase))),0,NULL,0},
  {&TA_float,NULL,"ae"," how much to decay for auto-encoder mode (between plus and nothing phases)","","",
    *((ta_memb_ptr*)&(TA_BioBelDecays_MbrOff=(int BioBelDecays::*)(&BioBelDecays::ae))),0,NULL,0},
  NULL};
static EnumDef_data TA_KWTASpec_K_From[]={
  {"USE_K"," use the k specified directly","",0},
  {"USE_PCT"," use the percentage to compute the k","",1},
  {"USE_PAT_K"," use the activity level of the event pattern (>thresh)","",2},
  NULL};
static int KWTASpec::* TA_KWTASpec_MbrOff;
static MemberDef_data TA_KWTASpec_MemberDef[]={
  {NULL,"::K_From","k_from"," how is the active_k determined?","","",
    *((ta_memb_ptr*)&(TA_KWTASpec_MbrOff=(int KWTASpec::*)(&KWTASpec::k_from))),0,NULL,0},
  {&TA_int,NULL,"k"," number of active units in the layer","","",
    *((ta_memb_ptr*)&(TA_KWTASpec_MbrOff=(int KWTASpec::*)(&KWTASpec::k))),0,NULL,0},
  {&TA_float,NULL,"pct"," desired proportion of activity ","","",
    *((ta_memb_ptr*)&(TA_KWTASpec_MbrOff=(int KWTASpec::*)(&KWTASpec::pct))),0,NULL,0},
  {&TA_float,NULL,"pat_q"," threshold for pat_k based activity level","","",
    *((ta_memb_ptr*)&(TA_KWTASpec_MbrOff=(int KWTASpec::*)(&KWTASpec::pat_q))),0,NULL,0},
  NULL};
static int KWTAVals::* TA_KWTAVals_MbrOff;
static MemberDef_data TA_KWTAVals_MemberDef[]={
  {&TA_int,NULL,"k"," number of active units for this collection","","",
    *((ta_memb_ptr*)&(TA_KWTAVals_MbrOff=(int KWTAVals::*)(&KWTAVals::k))),0,NULL,0},
  {&TA_float,NULL,"pct"," actual percent activity in group","","",
    *((ta_memb_ptr*)&(TA_KWTAVals_MbrOff=(int KWTAVals::*)(&KWTAVals::pct))),0,NULL,0},
  {&TA_float,NULL,"pct_c"," complement of (1.0 - ) actual percent activity in group","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_KWTAVals_MbrOff=(int KWTAVals::*)(&KWTAVals::pct_c))),0,NULL,0},
  NULL};
static int ActInhibSpec::* TA_ActInhibSpec_MbrOff;
static MemberDef_data TA_ActInhibSpec_MemberDef[]={
  {&TA_float,NULL,"dt"," rate constant for integrating inhibition","","",
    *((ta_memb_ptr*)&(TA_ActInhibSpec_MbrOff=(int ActInhibSpec::*)(&ActInhibSpec::dt))),0,NULL,0},
  {&TA_float,NULL,"gain"," gain of activation to give inhibition","","",
    *((ta_memb_ptr*)&(TA_ActInhibSpec_MbrOff=(int ActInhibSpec::*)(&ActInhibSpec::gain))),0,NULL,0},
  NULL};
static int InhibVals::* TA_InhibVals_MbrOff;
static MemberDef_data TA_InhibVals_MemberDef[]={
  {&TA_float,NULL,"kwta"," inhibition due to kwta function","","",
    *((ta_memb_ptr*)&(TA_InhibVals_MbrOff=(int InhibVals::*)(&InhibVals::kwta))),0,NULL,0},
  {&TA_float,NULL,"sact"," inhibition due to sending activation","","",
    *((ta_memb_ptr*)&(TA_InhibVals_MbrOff=(int InhibVals::*)(&InhibVals::sact))),0,NULL,0},
  {&TA_float,NULL,"ract"," inhibition due to sending activation","","",
    *((ta_memb_ptr*)&(TA_InhibVals_MbrOff=(int InhibVals::*)(&InhibVals::ract))),0,NULL,0},
  {&TA_float,NULL,"g_i"," overall value of the inhibition","","",
    *((ta_memb_ptr*)&(TA_InhibVals_MbrOff=(int InhibVals::*)(&InhibVals::g_i))),0,NULL,0},
  {&TA_float,NULL,"g_i_orig"," original value of the inhibition (before linking)","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_InhibVals_MbrOff=(int InhibVals::*)(&InhibVals::g_i_orig))),0,NULL,0},
  NULL};
static int SpecPtr<BioBelLayerSpec>::* TA_SpecPtr_BioBelLayerSpec__MbrOff;
static MemberDef_data TA_SpecPtr_BioBelLayerSpec__MemberDef[]={
  {NULL,"::BioBelLayerSpec_ptr","spec"," the actual spec itself","","",
    *((ta_memb_ptr*)&(TA_SpecPtr_BioBelLayerSpec__MbrOff=(int SpecPtr<BioBelLayerSpec>::*)(&SpecPtr<BioBelLayerSpec>::spec))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SpecPtr_BioBelLayerSpec__SetDefaultSpec_MethArgs[]={
  {&TA_TAPtr,NULL,"ownr",""},
  NULL};
static MethodDef_data TA_SpecPtr_BioBelLayerSpec__MethodDef[]={
  {&TA_void,NULL,"SetDefaultSpec"," for class that owns ptr","","",
    1,1,-1,0,NULL,cssElCFun_SpecPtr_BioBelLayerSpec__SetDefaultSpec_stub,TA_SpecPtr_BioBelLayerSpec__SetDefaultSpec_MethArgs},
  {NULL,"::BioBelLayerSpec_ptr","NewChild","","","",
    0,0,-1,0,NULL,cssElCFun_SpecPtr_BioBelLayerSpec__NewChild_stub,NULL},
  NULL};
static int LeabraCon::* TA_LeabraCon_MbrOff;
static MemberDef_data TA_LeabraCon_MemberDef[]={
  {&TA_float,NULL,"dwt"," resulting net weight change","NO_VIEW NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_LeabraCon_MbrOff=(int LeabraCon::*)(&LeabraCon::dwt))),0,NULL,0},
  {&TA_float,NULL,"pdw"," previous delta-weight change (averaged if momentum..)","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_LeabraCon_MbrOff=(int LeabraCon::*)(&LeabraCon::pdw))),0,NULL,0},
  NULL};
static EnumDef_data TA_LeabraConSpec_SAvgSource[]={
  {"SLAYER_TRG_PCT","","",0},
  {"SLAYER_AVG_ACT","","",1},
  {"FIXED_SAVG","","",2},
  NULL};
static int LeabraConSpec::* TA_LeabraConSpec_MbrOff;
static MemberDef_data TA_LeabraConSpec_MemberDef[]={
  {&TA_float,NULL,"lrate"," learning rate","","",
    *((ta_memb_ptr*)&(TA_LeabraConSpec_MbrOff=(int LeabraConSpec::*)(&LeabraConSpec::lrate))),0,NULL,0},
  {&TA_float,NULL,"k_hebb"," proportion of learning due to hebbian component","","",
    *((ta_memb_ptr*)&(TA_LeabraConSpec_MbrOff=(int LeabraConSpec::*)(&LeabraConSpec::k_hebb))),0,NULL,0},
  {&TA_float,NULL,"k_err"," complementary proportion due to error-driven component","","",
    *((ta_memb_ptr*)&(TA_LeabraConSpec_MbrOff=(int LeabraConSpec::*)(&LeabraConSpec::k_err))),0,NULL,0},
  {NULL,"::SAvgSource","savg_src"," source of sending average act for correcting hebb rule","","",
    *((ta_memb_ptr*)&(TA_LeabraConSpec_MbrOff=(int LeabraConSpec::*)(&LeabraConSpec::savg_src))),0,NULL,0},
  {&TA_float,NULL,"fixed_savg"," parameter for fixed sending average act","","",
    *((ta_memb_ptr*)&(TA_LeabraConSpec_MbrOff=(int LeabraConSpec::*)(&LeabraConSpec::fixed_savg))),0,NULL,0},
  {&TA_float,NULL,"fx_inc_cor"," fixed increase correction","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_LeabraConSpec_MbrOff=(int LeabraConSpec::*)(&LeabraConSpec::fx_inc_cor))),0,NULL,0},
  {&TA_float,NULL,"fx_dec_cor"," fixed decrease correction","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_LeabraConSpec_MbrOff=(int LeabraConSpec::*)(&LeabraConSpec::fx_dec_cor))),0,NULL,0},
  NULL};
static MethodArgs_data TA_LeabraConSpec_C_InitWtState_MethArgs[]={
  {&TA_Connection_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_LeabraConSpec_C_InitWtDelta_MethArgs[]={
  {&TA_Connection_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_LeabraConSpec_C_Compute_dWt_MethArgs[]={
  {&TA_LeabraCon_ptr,NULL,"cn",""},
  {&TA_float,NULL,"heb",""},
  {&TA_float,NULL,"err",""},
  NULL};
static MethodArgs_data TA_LeabraConSpec_C_UpdateWeights_MethArgs[]={
  {&TA_LeabraCon_ptr,NULL,"cn",""},
  {&TA_LeabraUnit_ptr,NULL,"ru",""},
  {&TA_LeabraUnit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_LeabraConSpec_UpdateWeights_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_LeabraConSpec_Compute_SAvgCor_MethArgs[]={
  {&TA_LeabraCon_Group_ptr,NULL,"cg",""},
  {&TA_float_ref,NULL,"dec_cor",""},
  NULL};
static MethodArgs_data TA_LeabraConSpec_C_Compute_Hebb_MethArgs[]={
  {&TA_LeabraCon_ptr,NULL,"cn",""},
  {&TA_float,NULL,"ru_act",""},
  {&TA_float,NULL,"su_act",""},
  {&TA_float,NULL,"inc_cor",""},
  {&TA_float,NULL,"dec_cor",""},
  NULL};
static MethodArgs_data TA_LeabraConSpec_C_Compute_Sig_Err_MethArgs[]={
  {&TA_LeabraCon_ptr,NULL,"na",""},
  {&TA_float,NULL,"ru_act_p",""},
  {&TA_float,NULL,"ru_act_m",""},
  {&TA_float,NULL,"su_act_p",""},
  {&TA_float,NULL,"su_act_m",""},
  NULL};
static MethodArgs_data TA_LeabraConSpec_C_Compute_GausSig_Err_MethArgs[]={
  {&TA_LeabraCon_ptr,NULL,"cn",""},
  {&TA_float,NULL,"ru_act_p",""},
  {&TA_float,NULL,"ru_act_m",""},
  {&TA_float,NULL,"su_act_p",""},
  {&TA_float,NULL,"su_act_m",""},
  {&TA_float,NULL,"ru_act_dif",""},
  {&TA_float,NULL,"su_act_dif",""},
  NULL};
static MethodArgs_data TA_LeabraConSpec_Compute_Sig_dWt_MethArgs[]={
  {&TA_LeabraCon_Group_ptr,NULL,"cg",""},
  {&TA_LeabraUnit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_LeabraConSpec_Compute_GausSig_dWt_MethArgs[]={
  {&TA_LeabraCon_Group_ptr,NULL,"cg",""},
  {&TA_LeabraUnit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_LeabraConSpec_B_Compute_dWt_Leak_MethArgs[]={
  {&TA_LeabraCon_ptr,NULL,"cn",""},
  {&TA_LeabraUnit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_LeabraConSpec_B_Compute_dWt_Netin_MethArgs[]={
  {&TA_LeabraCon_ptr,NULL,"cn",""},
  {&TA_LeabraUnit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_LeabraConSpec_B_UpdateWeights_MethArgs[]={
  {&TA_LeabraCon_ptr,NULL,"cn",""},
  {&TA_LeabraUnit_ptr,NULL,"ru",""},
  NULL};
static MethodDef_data TA_LeabraConSpec_MethodDef[]={
  {&TA_void,NULL,"C_InitWtState","","","",
    1,3,-1,0,NULL,cssElCFun_LeabraConSpec_C_InitWtState_stub,TA_LeabraConSpec_C_InitWtState_MethArgs},
  {&TA_void,NULL,"C_InitWtDelta","","","",
    1,3,-1,0,NULL,cssElCFun_LeabraConSpec_C_InitWtDelta_stub,TA_LeabraConSpec_C_InitWtDelta_MethArgs},
  {&TA_void,NULL,"C_Compute_dWt"," combine associative and error-driven weight change, actually update dwt","","",
    1,3,-1,0,NULL,cssElCFun_LeabraConSpec_C_Compute_dWt_stub,TA_LeabraConSpec_C_Compute_dWt_MethArgs},
  {&TA_void,NULL,"C_UpdateWeights","","","",
    1,3,-1,0,NULL,cssElCFun_LeabraConSpec_C_UpdateWeights_stub,TA_LeabraConSpec_C_UpdateWeights_MethArgs},
  {&TA_void,NULL,"UpdateWeights"," update weights (ie. add delta-wt to wt, zero delta-wt)","","",
    1,2,-1,0,NULL,cssElCFun_LeabraConSpec_UpdateWeights_stub,TA_LeabraConSpec_UpdateWeights_MethArgs},
  {&TA_float,NULL,"Compute_SAvgCor"," compute hebb correction scaling terms for sending average act, returns inc cor, and dec cor","","",
    0,2,-1,0,NULL,cssElCFun_LeabraConSpec_Compute_SAvgCor_stub,TA_LeabraConSpec_Compute_SAvgCor_MethArgs},
  {&TA_float,NULL,"C_Compute_Hebb"," compute Hebbian associative learning","","",
    0,5,-1,0,NULL,cssElCFun_LeabraConSpec_C_Compute_Hebb_stub,TA_LeabraConSpec_C_Compute_Hebb_MethArgs},
  {&TA_float,NULL,"C_Compute_Sig_Err"," compute generec error term, sigmoid case","","",
    0,5,-1,0,NULL,cssElCFun_LeabraConSpec_C_Compute_Sig_Err_stub,TA_LeabraConSpec_C_Compute_Sig_Err_MethArgs},
  {&TA_float,NULL,"C_Compute_GausSig_Err"," compute generec error term, GausSig act and wt lim case","","",
    0,7,-1,0,NULL,cssElCFun_LeabraConSpec_C_Compute_GausSig_Err_stub,TA_LeabraConSpec_C_Compute_GausSig_Err_MethArgs},
  {&TA_void,NULL,"Compute_Sig_dWt"," compute weight change, sigmoidal units, rebel maxin","","",
    0,2,-1,0,NULL,cssElCFun_LeabraConSpec_Compute_Sig_dWt_stub,TA_LeabraConSpec_Compute_Sig_dWt_MethArgs},
  {&TA_void,NULL,"Compute_GausSig_dWt"," compute weight change, gaussig, rebel maxin","","",
    0,2,-1,0,NULL,cssElCFun_LeabraConSpec_Compute_GausSig_dWt_stub,TA_LeabraConSpec_Compute_GausSig_dWt_MethArgs},
  {&TA_void,NULL,"B_Compute_dWt_Leak"," compute bias weight change for leak model of bias weight","","",
    0,2,-1,0,NULL,cssElCFun_LeabraConSpec_B_Compute_dWt_Leak_stub,TA_LeabraConSpec_B_Compute_dWt_Leak_MethArgs},
  {&TA_void,NULL,"B_Compute_dWt_Netin"," compute bias weight change for netin model of bias weight","","",
    0,2,-1,0,NULL,cssElCFun_LeabraConSpec_B_Compute_dWt_Netin_stub,TA_LeabraConSpec_B_Compute_dWt_Netin_MethArgs},
  {&TA_void,NULL,"B_UpdateWeights","","","",
    0,2,-1,0,NULL,cssElCFun_LeabraConSpec_B_UpdateWeights_stub,TA_LeabraConSpec_B_UpdateWeights_MethArgs},
  NULL};
static int LeabraBiasSpec::* TA_LeabraBiasSpec_MbrOff;
static MemberDef_data TA_LeabraBiasSpec_MemberDef[]={
  {&TA_float,NULL,"dwt_thresh"," don't change wts if dwt < thresh (should be same as learn_thresh)","","",
    *((ta_memb_ptr*)&(TA_LeabraBiasSpec_MbrOff=(int LeabraBiasSpec::*)(&LeabraBiasSpec::dwt_thresh))),0,NULL,0},
  NULL};
static MethodArgs_data TA_LeabraCon_Group_Compute_Sig_dWt_MethArgs[]={
  {&TA_LeabraUnit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_LeabraCon_Group_Compute_GausSig_dWt_MethArgs[]={
  {&TA_LeabraUnit_ptr,NULL,"ru",""},
  NULL};
static MethodDef_data TA_LeabraCon_Group_MethodDef[]={
  {&TA_void,NULL,"Compute_Sig_dWt","","","",
    0,1,-1,0,NULL,cssElCFun_LeabraCon_Group_Compute_Sig_dWt_stub,TA_LeabraCon_Group_Compute_Sig_dWt_MethArgs},
  {&TA_void,NULL,"Compute_GausSig_dWt","","","",
    0,1,-1,0,NULL,cssElCFun_LeabraCon_Group_Compute_GausSig_dWt_stub,TA_LeabraCon_Group_Compute_GausSig_dWt_MethArgs},
  NULL};
static int LeabraUnitSpec::* TA_LeabraUnitSpec_MbrOff;
static MemberDef_data TA_LeabraUnitSpec_MemberDef[]={
  {&TA_float,NULL,"learn_thresh"," minimum receiver activity for learning","","",
    *((ta_memb_ptr*)&(TA_LeabraUnitSpec_MbrOff=(int LeabraUnitSpec::*)(&LeabraUnitSpec::learn_thresh))),0,NULL,0},
  NULL};
static MethodArgs_data TA_LeabraUnitSpec_InitWtState_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_LeabraUnitSpec_Compute_dWt_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_LeabraUnitSpec_UpdateWeights_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_LeabraUnitSpec_PhaseInit_MethArgs[]={
  {&TA_BioBelUnit_ptr,NULL,"u",""},
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_LeabraUnitSpec_Compute_dWt_impl_MethArgs[]={
  {&TA_LeabraUnit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_LeabraUnitSpec_Compute_dWt_post_MethArgs[]={
  {&TA_LeabraUnit_ptr,NULL,"u",""},
  {&TA_LeabraLayer_ptr,NULL,"lay",""},
  NULL};
static MethodDef_data TA_LeabraUnitSpec_MethodDef[]={
  {&TA_void,NULL,"InitWtState"," init weight state variables","","",
    1,1,-1,0,NULL,cssElCFun_LeabraUnitSpec_InitWtState_stub,TA_LeabraUnitSpec_InitWtState_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute change in weights","","",
    1,1,-1,0,NULL,cssElCFun_LeabraUnitSpec_Compute_dWt_stub,TA_LeabraUnitSpec_Compute_dWt_MethArgs},
  {&TA_void,NULL,"UpdateWeights"," update weights from deltas","","",
    1,1,-1,0,NULL,cssElCFun_LeabraUnitSpec_UpdateWeights_stub,TA_LeabraUnitSpec_UpdateWeights_MethArgs},
  {&TA_void,NULL,"PhaseInit"," initialize external input flags based on phase","","",
    0,3,-1,0,NULL,cssElCFun_LeabraUnitSpec_PhaseInit_stub,TA_LeabraUnitSpec_PhaseInit_MethArgs},
  {&TA_void,NULL,"Compute_dWt_impl"," actually do wt change","","",
    0,1,-1,0,NULL,cssElCFun_LeabraUnitSpec_Compute_dWt_impl_stub,TA_LeabraUnitSpec_Compute_dWt_impl_MethArgs},
  {&TA_void,NULL,"Compute_dWt_post"," after computing the weight changes (for recon delta)","","",
    0,2,-1,0,NULL,cssElCFun_LeabraUnitSpec_Compute_dWt_post_stub,TA_LeabraUnitSpec_Compute_dWt_post_MethArgs},
  NULL};
static int LeabraUnit::* TA_LeabraUnit_MbrOff;
static MemberDef_data TA_LeabraUnit_MemberDef[]={
  {&TA_float,NULL,"act_dif"," difference between plus and minus phase acts","","",
    *((ta_memb_ptr*)&(TA_LeabraUnit_MbrOff=(int LeabraUnit::*)(&LeabraUnit::act_dif))),0,NULL,0},
  {&TA_float,NULL,"act_m"," minus_phase activation","","",
    *((ta_memb_ptr*)&(TA_LeabraUnit_MbrOff=(int LeabraUnit::*)(&LeabraUnit::act_m))),0,NULL,0},
  {&TA_float,NULL,"act_p"," plus_phase activation","","",
    *((ta_memb_ptr*)&(TA_LeabraUnit_MbrOff=(int LeabraUnit::*)(&LeabraUnit::act_p))),0,NULL,0},
  NULL};
static MethodArgs_data TA_LeabraUnit_PhaseInit_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_LeabraUnit_Compute_dWt_post_MethArgs[]={
  {&TA_LeabraLayer_ptr,NULL,"lay",""},
  NULL};
static MethodDef_data TA_LeabraUnit_MethodDef[]={
  {&TA_void,NULL,"PhaseInit","","","",
    0,2,-1,0,NULL,cssElCFun_LeabraUnit_PhaseInit_stub,TA_LeabraUnit_PhaseInit_MethArgs},
  {&TA_void,NULL,"Compute_dWt_post","","","",
    0,1,-1,0,NULL,cssElCFun_LeabraUnit_Compute_dWt_post_stub,TA_LeabraUnit_Compute_dWt_post_MethArgs},
  NULL};
static int LeabraLayer::* TA_LeabraLayer_MbrOff;
static MemberDef_data TA_LeabraLayer_MemberDef[]={
  {&TA_AvgMaxVals,NULL,"acts_p"," plus-phase activation stats for the layer","","",
    *((ta_memb_ptr*)&(TA_LeabraLayer_MbrOff=(int LeabraLayer::*)(&LeabraLayer::acts_p))),0,NULL,0},
  {&TA_AvgMaxVals,NULL,"acts_m"," minus-phase activation stats for the layer","","",
    *((ta_memb_ptr*)&(TA_LeabraLayer_MbrOff=(int LeabraLayer::*)(&LeabraLayer::acts_m))),0,NULL,0},
  NULL};
static MethodArgs_data TA_LeabraLayer_PhaseInit_MethArgs[]={
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodDef_data TA_LeabraLayer_MethodDef[]={
  {&TA_void,NULL,"PhaseInit","","","",
    0,1,-1,0,NULL,cssElCFun_LeabraLayer_PhaseInit_stub,TA_LeabraLayer_PhaseInit_MethArgs},
  {&TA_void,NULL,"Compute_dWt_post","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraLayer_Compute_dWt_post_stub,NULL},
  NULL};
static MethodArgs_data TA_LeabraLayerSpec_PhaseInit_MethArgs[]={
  {&TA_BioBelLayer_ptr,NULL,"lay",""},
  {&TA_int,NULL,"phase",""},
  NULL};
static MethodArgs_data TA_LeabraLayerSpec_Compute_dWt_post_MethArgs[]={
  {&TA_LeabraLayer_ptr,NULL,"lay",""},
  NULL};
static MethodDef_data TA_LeabraLayerSpec_MethodDef[]={
  {&TA_void,NULL,"PhaseInit"," initialize start of a setting phase, set input flags appropriately, etc","","",
    0,2,-1,0,NULL,cssElCFun_LeabraLayerSpec_PhaseInit_stub,TA_LeabraLayerSpec_PhaseInit_MethArgs},
  {&TA_void,NULL,"Compute_dWt_post"," something to be done after the weights are changed (i.e. update history..)","","",
    0,1,-1,0,NULL,cssElCFun_LeabraLayerSpec_Compute_dWt_post_stub,TA_LeabraLayerSpec_Compute_dWt_post_MethArgs},
  NULL};
static int LeabraCycle::* TA_LeabraCycle_MbrOff;
static MemberDef_data TA_LeabraCycle_MemberDef[]={
  {&TA_LeabraSettle_ptr,NULL,"leabra_settle"," pointer to parent settle proc","NO_SUBTYPE READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_LeabraCycle_MbrOff=(int LeabraCycle::*)(&LeabraCycle::leabra_settle))),0,NULL,0},
  NULL};
static MethodDef_data TA_LeabraCycle_MethodDef[]={
  {&TA_void,NULL,"Compute_Net","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraCycle_Compute_Net_stub,NULL},
  {&TA_void,NULL,"Compute_Clamp_NetAvg","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraCycle_Compute_Clamp_NetAvg_stub,NULL},
  {&TA_void,NULL,"Compute_Inhib","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraCycle_Compute_Inhib_stub,NULL},
  {&TA_void,NULL,"Compute_Act","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraCycle_Compute_Act_stub,NULL},
  NULL};
static int LeabraSettle::* TA_LeabraSettle_MbrOff;
static MemberDef_data TA_LeabraSettle_MemberDef[]={
  {&TA_LeabraTrial_ptr,NULL,"leabra_trial"," pointer to parent phase trial","NO_SUBTYPE READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_LeabraSettle_MbrOff=(int LeabraSettle::*)(&LeabraSettle::leabra_trial))),0,NULL,0},
  {&TA_int,NULL,"min_cycles"," minimum number of cycles to settle for","","",
    *((ta_memb_ptr*)&(TA_LeabraSettle_MbrOff=(int LeabraSettle::*)(&LeabraSettle::min_cycles))),0,NULL,0},
  {&TA_bool,NULL,"use_cascade"," whether to use cascading activations or not","","",
    *((ta_memb_ptr*)&(TA_LeabraSettle_MbrOff=(int LeabraSettle::*)(&LeabraSettle::use_cascade))),0,NULL,0},
  {&TA_CascadeParams,NULL,"cascade"," parameters controling cascading of info through net","CONTROL_PANEL ","",
    *((ta_memb_ptr*)&(TA_LeabraSettle_MbrOff=(int LeabraSettle::*)(&LeabraSettle::cascade))),0,NULL,0},
  NULL};
static MethodDef_data TA_LeabraSettle_MethodDef[]={
  {&TA_void,NULL,"Compute_Active_K","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraSettle_Compute_Active_K_stub,NULL},
  {&TA_void,NULL,"DecayEvent","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraSettle_DecayEvent_stub,NULL},
  {&TA_void,NULL,"DecayPhase","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraSettle_DecayPhase_stub,NULL},
  {&TA_void,NULL,"DecayAE","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraSettle_DecayAE_stub,NULL},
  {&TA_void,NULL,"PhaseInit","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraSettle_PhaseInit_stub,NULL},
  {&TA_void,NULL,"CompToTarg"," move COMPARE to TARGET (for + phase)","","",
    0,0,-1,0,NULL,cssElCFun_LeabraSettle_CompToTarg_stub,NULL},
  {&TA_void,NULL,"ExtToComp"," move all env input to COMPARE (for final minus)","","",
    0,0,-1,0,NULL,cssElCFun_LeabraSettle_ExtToComp_stub,NULL},
  {&TA_void,NULL,"Compute_HardClamp","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraSettle_Compute_HardClamp_stub,NULL},
  {&TA_void,NULL,"Compute_InputDist","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraSettle_Compute_InputDist_stub,NULL},
  {&TA_void,NULL,"Compute_Cascade","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraSettle_Compute_Cascade_stub,NULL},
  {&TA_void,NULL,"Compute_ClampNet","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraSettle_Compute_ClampNet_stub,NULL},
  {&TA_void,NULL,"PostSettle","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraSettle_PostSettle_stub,NULL},
  {&TA_void,NULL,"Compute_dWt","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraSettle_Compute_dWt_stub,NULL},
  NULL};
static EnumDef_data TA_LeabraTrial_StateInit[]={
  {"DO_NOTHING"," do nothing","",0},
  {"INIT_STATE"," initialize state","",1},
  {"DECAY_STATE"," decay the state","",2},
  NULL};
static EnumDef_data TA_LeabraTrial_Phase[]={
  {"MINUS_PHASE"," minus phase","",0},
  {"PLUS_PHASE"," plus phase","",1},
  NULL};
static EnumDef_data TA_LeabraTrial_PhaseOrder[]={
  {"PLUS_ONLY"," only present the plus phase (associative-only)","",0},
  {"MINUS_PLUS"," standard minus-plus (err and assoc)","",1},
  {"MINUS_PLUS_NOTHING"," auto-encoder version with final 'nothing' minus phase","",2},
  NULL};
static int LeabraTrial::* TA_LeabraTrial_MbrOff;
static MemberDef_data TA_LeabraTrial_MemberDef[]={
  {NULL,"::PhaseOrder","phase_order"," number and order of phases to present","","",
    *((ta_memb_ptr*)&(TA_LeabraTrial_MbrOff=(int LeabraTrial::*)(&LeabraTrial::phase_order))),0,NULL,0},
  {&TA_Counter,NULL,"phase_no"," Current phase number","","",
    *((ta_memb_ptr*)&(TA_LeabraTrial_MbrOff=(int LeabraTrial::*)(&LeabraTrial::phase_no))),0,NULL,0},
  {NULL,"::Phase","phase"," state variable for phase","","",
    *((ta_memb_ptr*)&(TA_LeabraTrial_MbrOff=(int LeabraTrial::*)(&LeabraTrial::phase))),0,NULL,0},
  {NULL,"::StateInit","trial_init"," how to initialize network state at start of trial","","",
    *((ta_memb_ptr*)&(TA_LeabraTrial_MbrOff=(int LeabraTrial::*)(&LeabraTrial::trial_init))),0,NULL,0},
  {&TA_bool,NULL,"no_plus_stats"," don't do stats/logging in the plus phase","","",
    *((ta_memb_ptr*)&(TA_LeabraTrial_MbrOff=(int LeabraTrial::*)(&LeabraTrial::no_plus_stats))),0,NULL,0},
  {&TA_bool,NULL,"no_plus_test"," don't run the plus phase when testing","","",
    *((ta_memb_ptr*)&(TA_LeabraTrial_MbrOff=(int LeabraTrial::*)(&LeabraTrial::no_plus_test))),0,NULL,0},
  NULL};
static MethodArgs_data TA_LeabraTrial_GenCntrLog_MethArgs[]={
  {&TA_LogData_ptr,NULL,"ld",""},
  {&TA_bool,NULL,"gen",""},
  NULL};
static MethodDef_data TA_LeabraTrial_MethodDef[]={
  {&TA_void,NULL,"GenCntrLog"," generate log data for the counters","","",
    1,2,-1,0,NULL,cssElCFun_LeabraTrial_GenCntrLog_stub,TA_LeabraTrial_GenCntrLog_MethArgs},
  {&TA_void,NULL,"InitInhib"," initialize the inhibitory feedback parameters","BUTTON CONFIRM ","",
    0,0,-1,0,NULL,cssElCFun_LeabraTrial_InitInhib_stub,NULL},
  {&TA_void,NULL,"InitState","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraTrial_InitState_stub,NULL},
  {&TA_void,NULL,"DecayState","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraTrial_DecayState_stub,NULL},
  {&TA_void,NULL,"Compute_dWt","","","",
    0,0,-1,0,NULL,cssElCFun_LeabraTrial_Compute_dWt_stub,NULL},
  NULL};
static int CascadeParams::* TA_CascadeParams_MbrOff;
static MemberDef_data TA_CascadeParams_MemberDef[]={
  {&TA_int,NULL,"cycles"," number of cycles per cascade","","",
    *((ta_memb_ptr*)&(TA_CascadeParams_MbrOff=(int CascadeParams::*)(&CascadeParams::cycles))),0,NULL,0},
  {&TA_int,NULL,"depth"," depth of cascading of information through net","IV_READ_ONLY SHOW ","",
    *((ta_memb_ptr*)&(TA_CascadeParams_MbrOff=(int CascadeParams::*)(&CascadeParams::depth))),0,NULL,0},
  {&TA_int,NULL,"max"," maximum depth of network","","",
    *((ta_memb_ptr*)&(TA_CascadeParams_MbrOff=(int CascadeParams::*)(&CascadeParams::max))),0,NULL,0},
  NULL};
static int LeabraAeSE_Stat::* TA_LeabraAeSE_Stat_MbrOff;
static MemberDef_data TA_LeabraAeSE_Stat_MemberDef[]={
  {&TA_LeabraTrial_ptr,NULL,"trial_proc"," the trial process to get phase info","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_LeabraAeSE_Stat_MbrOff=(int LeabraAeSE_Stat::*)(&LeabraAeSE_Stat::trial_proc))),0,NULL,0},
  {NULL,"Unit::ExtType","targ_or_comp"," which unit values to compute SE of","","",
    *((ta_memb_ptr*)&(TA_LeabraAeSE_Stat_MbrOff=(int LeabraAeSE_Stat::*)(&LeabraAeSE_Stat::targ_or_comp))),0,NULL,0},
  NULL};
static MethodArgs_data TA_LeabraAeSE_Stat_Unit_Stat_MethArgs[]={
  {&TA_Unit_ptr,NULL,"unit",""},
  NULL};
static MethodDef_data TA_LeabraAeSE_Stat_MethodDef[]={
  {&TA_void,NULL,"Unit_Stat"," Compute statistic on a unit","","",
    1,1,-1,0,NULL,cssElCFun_LeabraAeSE_Stat_Unit_Stat_stub,TA_LeabraAeSE_Stat_Unit_Stat_MethArgs},
  NULL};
static EnumDef_data TA_PhaseOrderEventSpec_PhaseOrder[]={
  {"MINUS_PLUS"," minus phase, then plus phase","",0},
  {"PLUS_MINUS"," plus phase, then minus phase","",1},
  {"PREV_PLUS_MINUS"," use previous plus phase, only present minus","",2},
  {"PREV_MINUS_PLUS"," use previous minus phase, only present plus","",3},
  NULL};
static int PhaseOrderEventSpec::* TA_PhaseOrderEventSpec_MbrOff;
static MemberDef_data TA_PhaseOrderEventSpec_MemberDef[]={
  {NULL,"::PhaseOrder","phase_order"," order to present phases of stimuli to network","","",
    *((ta_memb_ptr*)&(TA_PhaseOrderEventSpec_MbrOff=(int PhaseOrderEventSpec::*)(&PhaseOrderEventSpec::phase_order))),0,NULL,0},
  NULL};
static int LeabraHistUnit::* TA_LeabraHistUnit_MbrOff;
static MemberDef_data TA_LeabraHistUnit_MemberDef[]={
  {&TA_float,NULL,"act_m_h"," minus phase activation history","NO_VIEW ","",
    *((ta_memb_ptr*)&(TA_LeabraHistUnit_MbrOff=(int LeabraHistUnit::*)(&LeabraHistUnit::act_m_h))),0,NULL,0},
  {&TA_float,NULL,"act_p_h"," plus phase activation history","NO_VIEW ","",
    *((ta_memb_ptr*)&(TA_LeabraHistUnit_MbrOff=(int LeabraHistUnit::*)(&LeabraHistUnit::act_p_h))),0,NULL,0},
  {&TA_int,NULL,"hist_cnt"," number of times history has been updated","","",
    *((ta_memb_ptr*)&(TA_LeabraHistUnit_MbrOff=(int LeabraHistUnit::*)(&LeabraHistUnit::hist_cnt))),0,NULL,0},
  NULL};
static MethodArgs_data TA_LeabraHistUnitSpec_InitState_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_LeabraHistUnitSpec_Compute_dWt_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodDef_data TA_LeabraHistUnitSpec_MethodDef[]={
  {&TA_void,NULL,"InitState"," initialize unit state variables","","",
    4,1,-1,0,NULL,cssElCFun_LeabraHistUnitSpec_InitState_stub,TA_LeabraHistUnitSpec_InitState_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute change in weights","","",
    1,1,-1,0,NULL,cssElCFun_LeabraHistUnitSpec_Compute_dWt_stub,TA_LeabraHistUnitSpec_Compute_dWt_MethArgs},
  NULL};
static int LeabraHistConSpec::* TA_LeabraHistConSpec_MbrOff;
static MemberDef_data TA_LeabraHistConSpec_MemberDef[]={
  {&TA_float,NULL,"hist_gain"," strength of the history component of learning","","",
    *((ta_memb_ptr*)&(TA_LeabraHistConSpec_MbrOff=(int LeabraHistConSpec::*)(&LeabraHistConSpec::hist_gain))),0,NULL,0},
  NULL};
static MethodArgs_data TA_LeabraHistConSpec_C_Compute_dWt_MethArgs[]={
  {&TA_LeabraCon_ptr,NULL,"cn",""},
  {&TA_float,NULL,"heb",""},
  {&TA_float,NULL,"err",""},
  NULL};
static MethodDef_data TA_LeabraHistConSpec_MethodDef[]={
  {&TA_void,NULL,"C_Compute_dWt"," combine associative and error-driven weight change, actually update dwt combine associative and error-driven weight change, actually update dwt","","",
    1,3,-1,0,NULL,cssElCFun_LeabraHistConSpec_C_Compute_dWt_stub,TA_LeabraHistConSpec_C_Compute_dWt_MethArgs},
  NULL};

// Init Function


static bool ta_Init_bleabra_done = false;

void ta_Init_bleabra() {
  TypeDef* sbt;

  if(ta_Init_bleabra_done) return;
  ta_Init_bleabra_done = true;

  ta_Init_ta();
  ta_Init_pdp();
  ta_Init_ta_misc();
  ta_Init_iv_graphic();

  taMisc::in_init = true;

  taMisc::types.Add(&TA_BioBelCon);
    TAI_BioBelCon = new BioBelCon;
    TA_BioBelCon.AddParFormal(&TA_class);
    TA_BioBelCon.AddParCache(&TA_taBase);
    TA_BioBelCon.AddClassPar(&TA_Connection,0);
  taMisc::types.Add(&TA_BioBelConSpec);
    TAI_BioBelConSpec = new BioBelConSpec;
    TA_BioBelConSpec.AddParFormal(&TA_class);
    TA_BioBelConSpec.AddParCache(&TA_taBase);
    TA_BioBelConSpec.AddClassPar(&TA_ConSpec,0);
    tac_AddMembers(TA_BioBelConSpec,TA_BioBelConSpec_MemberDef);
    tac_AddMethods(TA_BioBelConSpec,TA_BioBelConSpec_MethodDef);
  taMisc::types.Add(&TA_BioBelCon_Group);
    TAI_BioBelCon_Group = new BioBelCon_Group;
    TA_BioBelCon_Group.AddParFormal(&TA_class);
    TA_BioBelCon_Group.AddParCache(&TA_taBase);
    TA_BioBelCon_Group.AddClassPar(&TA_Con_Group,0);
    tac_AddMethods(TA_BioBelCon_Group,TA_BioBelCon_Group_MethodDef);
  taMisc::types.Add(&TA_BioBelUnitSpec);
    TAI_BioBelUnitSpec = new BioBelUnitSpec;
    TA_BioBelUnitSpec.AddParFormal(&TA_class);
    TA_BioBelUnitSpec.AddParCache(&TA_taBase);
    TA_BioBelUnitSpec.AddClassPar(&TA_UnitSpec,0);
    tac_AddEnum(TA_BioBelUnitSpec, "NetInFun", " type of net-input computation to use", "", "", "", TA_BioBelUnitSpec_NetInFun);
    tac_AddEnum(TA_BioBelUnitSpec, "ActFun", "", "", "", "", TA_BioBelUnitSpec_ActFun);
    tac_AddEnum(TA_BioBelUnitSpec, "BiasWts", "", "", "", "", TA_BioBelUnitSpec_BiasWts);
    tac_AddEnum(TA_BioBelUnitSpec, "NoiseType", "", "", "", "", TA_BioBelUnitSpec_NoiseType);
    tac_AddMembers(TA_BioBelUnitSpec,TA_BioBelUnitSpec_MemberDef);
    tac_AddMethods(TA_BioBelUnitSpec,TA_BioBelUnitSpec_MethodDef);
  taMisc::types.Add(&TA_BioBelUnit);
    TAI_BioBelUnit = new BioBelUnit;
    TA_BioBelUnit.AddParFormal(&TA_class);
    TA_BioBelUnit.AddParCache(&TA_taBase);
    TA_BioBelUnit.AddClassPar(&TA_Unit,0);
    tac_AddMembers(TA_BioBelUnit,TA_BioBelUnit_MemberDef);
    tac_AddMethods(TA_BioBelUnit,TA_BioBelUnit_MethodDef);
  taMisc::types.Add(&TA_BioBelInhib);
    TAI_BioBelInhib = new BioBelInhib;
    TA_BioBelInhib.AddParFormal(&TA_class);
    tac_AddMembers(TA_BioBelInhib,TA_BioBelInhib_MemberDef);
    tac_AddMethods(TA_BioBelInhib,TA_BioBelInhib_MethodDef);
  taMisc::types.Add(&TA_BioBelLayerSpec);
    TAI_BioBelLayerSpec = new BioBelLayerSpec;
    TA_BioBelLayerSpec.AddParFormal(&TA_class);
    TA_BioBelLayerSpec.AddParCache(&TA_taBase);
    TA_BioBelLayerSpec.AddClassPar(&TA_LayerSpec,0);
    tac_AddEnum(TA_BioBelLayerSpec, "Compute_I", " how to compute the inhibition", "", "", "", TA_BioBelLayerSpec_Compute_I);
    tac_AddEnum(TA_BioBelLayerSpec, "LayerLinking", "", "", "", "", TA_BioBelLayerSpec_LayerLinking);
    tac_AddMembers(TA_BioBelLayerSpec,TA_BioBelLayerSpec_MemberDef);
    tac_AddMethods(TA_BioBelLayerSpec,TA_BioBelLayerSpec_MethodDef);
  taMisc::types.Add(&TA_BioBelUnit_Group);
    TAI_BioBelUnit_Group = new BioBelUnit_Group;
    TA_BioBelUnit_Group.AddParFormal(&TA_class);
    TA_BioBelUnit_Group.AddParCache(&TA_taBase);
    TA_BioBelUnit_Group.AddClassPar(&TA_Unit_Group,(int)((unsigned long)((Unit_Group*)TAI_BioBelUnit_Group)-(unsigned long)TAI_BioBelUnit_Group), &TA_BioBelInhib,(int)((unsigned long)((BioBelInhib*)TAI_BioBelUnit_Group)-(unsigned long)TAI_BioBelUnit_Group));
    tac_AddMethods(TA_BioBelUnit_Group,TA_BioBelUnit_Group_MethodDef);
  taMisc::types.Add(&TA_BioBelLayer);
    TAI_BioBelLayer = new BioBelLayer;
    TA_BioBelLayer.AddParFormal(&TA_class);
    TA_BioBelLayer.AddParCache(&TA_taBase);
    TA_BioBelLayer.AddClassPar(&TA_Layer,(int)((unsigned long)((Layer*)TAI_BioBelLayer)-(unsigned long)TAI_BioBelLayer), &TA_BioBelInhib,(int)((unsigned long)((BioBelInhib*)TAI_BioBelLayer)-(unsigned long)TAI_BioBelLayer));
    tac_AddMembers(TA_BioBelLayer,TA_BioBelLayer_MemberDef);
    tac_AddMethods(TA_BioBelLayer,TA_BioBelLayer_MethodDef);
  taMisc::types.Add(&TA_BioBelMaxDa);
    TAI_BioBelMaxDa = new BioBelMaxDa;
    TA_BioBelMaxDa.AddParFormal(&TA_class);
    TA_BioBelMaxDa.AddParCache(&TA_taBase);
    TA_BioBelMaxDa.AddClassPar(&TA_Stat,0);
    tac_AddMembers(TA_BioBelMaxDa,TA_BioBelMaxDa_MemberDef);
    tac_AddMethods(TA_BioBelMaxDa,TA_BioBelMaxDa_MethodDef);
  taMisc::types.Add(&TA_const_BioBelCon);
    TA_const_BioBelCon.AddParents(&TA_const, &TA_BioBelCon);
  taMisc::types.Add(&TA_const_BioBelCon_ref);
    TA_const_BioBelCon_ref.AddParents(&TA_const_BioBelCon);
  taMisc::types.Add(&TA_BioBelCon_ptr);
    TA_BioBelCon_ptr.AddParents(&TA_BioBelCon);
  taMisc::types.Add(&TA_BioBelUnit_ptr);
    TA_BioBelUnit_ptr.AddParents(&TA_BioBelUnit);
  taMisc::types.Add(&TA_BioBelCon_Group_ptr);
    TA_BioBelCon_Group_ptr.AddParents(&TA_BioBelCon_Group);
  taMisc::types.Add(&TA_const_BioBelConSpec);
    TA_const_BioBelConSpec.AddParents(&TA_const, &TA_BioBelConSpec);
  taMisc::types.Add(&TA_const_BioBelConSpec_ref);
    TA_const_BioBelConSpec_ref.AddParents(&TA_const_BioBelConSpec);
  taMisc::types.Add(&TA_const_BioBelCon_Group);
    TA_const_BioBelCon_Group.AddParents(&TA_const, &TA_BioBelCon_Group);
  taMisc::types.Add(&TA_const_BioBelCon_Group_ref);
    TA_const_BioBelCon_Group_ref.AddParents(&TA_const_BioBelCon_Group);
  taMisc::types.Add(&TA_BioBelChannels);
    TAI_BioBelChannels = new BioBelChannels;
    TA_BioBelChannels.AddParFormal(&TA_class);
    TA_BioBelChannels.AddParCache(&TA_taBase);
    TA_BioBelChannels.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_BioBelChannels,TA_BioBelChannels_MemberDef);
  taMisc::types.Add(&TA_const_BioBelChannels);
    TA_const_BioBelChannels.AddParents(&TA_const, &TA_BioBelChannels);
  taMisc::types.Add(&TA_const_BioBelChannels_ref);
    TA_const_BioBelChannels_ref.AddParents(&TA_const_BioBelChannels);
  taMisc::types.Add(&TA_VChanSpecs);
    TAI_VChanSpecs = new VChanSpecs;
    TA_VChanSpecs.AddParFormal(&TA_class);
    TA_VChanSpecs.AddParCache(&TA_taBase);
    TA_VChanSpecs.AddClassPar(&TA_taBase,0);
    tac_AddEnum(TA_VChanSpecs, "VChanType", "", "", "", "", TA_VChanSpecs_VChanType);
    tac_AddMembers(TA_VChanSpecs,TA_VChanSpecs_MemberDef);
    tac_AddMethods(TA_VChanSpecs,TA_VChanSpecs_MethodDef);
  taMisc::types.Add(&TA_const_VChanSpecs);
    TA_const_VChanSpecs.AddParents(&TA_const, &TA_VChanSpecs);
  taMisc::types.Add(&TA_ActFunSpecs);
    TAI_ActFunSpecs = new ActFunSpecs;
    TA_ActFunSpecs.AddParFormal(&TA_class);
    TA_ActFunSpecs.AddParCache(&TA_taBase);
    TA_ActFunSpecs.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_ActFunSpecs,TA_ActFunSpecs_MemberDef);
  taMisc::types.Add(&TA_const_VChanSpecs_ref);
    TA_const_VChanSpecs_ref.AddParents(&TA_const_VChanSpecs);
  taMisc::types.Add(&TA_BioBelLayer_ptr);
    TA_BioBelLayer_ptr.AddParents(&TA_BioBelLayer);
  taMisc::types.Add(&TA_const_ActFunSpecs);
    TA_const_ActFunSpecs.AddParents(&TA_const, &TA_ActFunSpecs);
  taMisc::types.Add(&TA_BioBelInhib_ptr);
    TA_BioBelInhib_ptr.AddParents(&TA_BioBelInhib);
  taMisc::types.Add(&TA_const_ActFunSpecs_ref);
    TA_const_ActFunSpecs_ref.AddParents(&TA_const_ActFunSpecs);
  taMisc::types.Add(&TA_const_BioBelUnitSpec);
    TA_const_BioBelUnitSpec.AddParents(&TA_const, &TA_BioBelUnitSpec);
  taMisc::types.Add(&TA_const_BioBelUnitSpec_ref);
    TA_const_BioBelUnitSpec_ref.AddParents(&TA_const_BioBelUnitSpec);
  taMisc::types.Add(&TA_const_BioBelUnit);
    TA_const_BioBelUnit.AddParents(&TA_const, &TA_BioBelUnit);
  taMisc::types.Add(&TA_const_BioBelUnit_ref);
    TA_const_BioBelUnit_ref.AddParents(&TA_const_BioBelUnit);
  taMisc::types.Add(&TA_taPtrList_BioBelUnit_);
    TAI_taPtrList_BioBelUnit_ = new taPtrList<BioBelUnit>;
    TA_taPtrList_BioBelUnit_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_BioBelUnit_.AddClassPar(&TA_taPtrList,0);
    sbt = new TypeDef("BioBelUnit_ptr", 1, 1, 0);
    sbt->AddParents(&TA_BioBelUnit);
    TA_taPtrList_BioBelUnit_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_BioBelUnit_,TA_taPtrList_BioBelUnit__MethodDef);
  taMisc::types.Add(&TA_BioBelSort);
    TAI_BioBelSort = new BioBelSort;
    TA_BioBelSort.AddParFormal(&TA_class, &TA_templ_inst);
    TA_BioBelSort.AddClassPar(&TA_taPtrList_BioBelUnit_,0);
  taMisc::types.Add(&TA_LayerLink);
    TAI_LayerLink = new LayerLink;
    TA_LayerLink.AddParFormal(&TA_class);
    TA_LayerLink.AddParCache(&TA_taBase);
    TA_LayerLink.AddClassPar(&TA_taOBase,0);
    tac_AddMembers(TA_LayerLink,TA_LayerLink_MemberDef);
  taMisc::types.Add(&TA_taList_LayerLink_);
    TAI_taList_LayerLink_ = new taList<LayerLink>;
    TA_taList_LayerLink_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_LayerLink_.AddParCache(&TA_taBase);
    TA_taList_LayerLink_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_LayerLink_.sub_types.Add(sbt);
    sbt = new TypeDef("LayerLink_ptr", 1, 1, 0);
    sbt->AddParents(&TA_LayerLink);
    TA_taList_LayerLink_.sub_types.Add(sbt);
    tac_AddMethods(TA_taList_LayerLink_,TA_taList_LayerLink__MethodDef);
  taMisc::types.Add(&TA_const_LayerLink);
    TA_const_LayerLink.AddParents(&TA_const, &TA_LayerLink);
  taMisc::types.Add(&TA_const_LayerLink_ref);
    TA_const_LayerLink_ref.AddParents(&TA_const_LayerLink);
  taMisc::types.Add(&TA_LayerLink_List);
    TAI_LayerLink_List = new LayerLink_List;
    TA_LayerLink_List.AddParFormal(&TA_class);
    TA_LayerLink_List.AddParCache(&TA_taBase);
    TA_LayerLink_List.AddClassPar(&TA_taList_LayerLink_,0);
  taMisc::types.Add(&TA_const_LayerLink_List);
    TA_const_LayerLink_List.AddParents(&TA_const, &TA_LayerLink_List);
  taMisc::types.Add(&TA_AvgMaxVals);
    TAI_AvgMaxVals = new AvgMaxVals;
    TA_AvgMaxVals.AddParFormal(&TA_class);
    TA_AvgMaxVals.AddParCache(&TA_taBase);
    TA_AvgMaxVals.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_AvgMaxVals,TA_AvgMaxVals_MemberDef);
  taMisc::types.Add(&TA_const_LayerLink_List_ref);
    TA_const_LayerLink_List_ref.AddParents(&TA_const_LayerLink_List);
  taMisc::types.Add(&TA_const_AvgMaxVals);
    TA_const_AvgMaxVals.AddParents(&TA_const, &TA_AvgMaxVals);
  taMisc::types.Add(&TA_const_AvgMaxVals_ref);
    TA_const_AvgMaxVals_ref.AddParents(&TA_const_AvgMaxVals);
  taMisc::types.Add(&TA_BioBelDecays);
    TAI_BioBelDecays = new BioBelDecays;
    TA_BioBelDecays.AddParFormal(&TA_class);
    TA_BioBelDecays.AddParCache(&TA_taBase);
    TA_BioBelDecays.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_BioBelDecays,TA_BioBelDecays_MemberDef);
  taMisc::types.Add(&TA_const_BioBelDecays);
    TA_const_BioBelDecays.AddParents(&TA_const, &TA_BioBelDecays);
  taMisc::types.Add(&TA_const_BioBelDecays_ref);
    TA_const_BioBelDecays_ref.AddParents(&TA_const_BioBelDecays);
  taMisc::types.Add(&TA_KWTASpec);
    TAI_KWTASpec = new KWTASpec;
    TA_KWTASpec.AddParFormal(&TA_class);
    TA_KWTASpec.AddParCache(&TA_taBase);
    TA_KWTASpec.AddClassPar(&TA_taBase,0);
    tac_AddEnum(TA_KWTASpec, "K_From", "", "", "", "", TA_KWTASpec_K_From);
    tac_AddMembers(TA_KWTASpec,TA_KWTASpec_MemberDef);
  taMisc::types.Add(&TA_const_KWTASpec);
    TA_const_KWTASpec.AddParents(&TA_const, &TA_KWTASpec);
  taMisc::types.Add(&TA_const_KWTASpec_ref);
    TA_const_KWTASpec_ref.AddParents(&TA_const_KWTASpec);
  taMisc::types.Add(&TA_KWTAVals);
    TAI_KWTAVals = new KWTAVals;
    TA_KWTAVals.AddParFormal(&TA_class);
    TA_KWTAVals.AddParCache(&TA_taBase);
    TA_KWTAVals.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_KWTAVals,TA_KWTAVals_MemberDef);
  taMisc::types.Add(&TA_const_KWTAVals);
    TA_const_KWTAVals.AddParents(&TA_const, &TA_KWTAVals);
  taMisc::types.Add(&TA_const_KWTAVals_ref);
    TA_const_KWTAVals_ref.AddParents(&TA_const_KWTAVals);
  taMisc::types.Add(&TA_ActInhibSpec);
    TAI_ActInhibSpec = new ActInhibSpec;
    TA_ActInhibSpec.AddParFormal(&TA_class);
    TA_ActInhibSpec.AddParCache(&TA_taBase);
    TA_ActInhibSpec.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_ActInhibSpec,TA_ActInhibSpec_MemberDef);
  taMisc::types.Add(&TA_const_ActInhibSpec);
    TA_const_ActInhibSpec.AddParents(&TA_const, &TA_ActInhibSpec);
  taMisc::types.Add(&TA_const_ActInhibSpec_ref);
    TA_const_ActInhibSpec_ref.AddParents(&TA_const_ActInhibSpec);
  taMisc::types.Add(&TA_InhibVals);
    TAI_InhibVals = new InhibVals;
    TA_InhibVals.AddParFormal(&TA_class);
    TA_InhibVals.AddParCache(&TA_taBase);
    TA_InhibVals.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_InhibVals,TA_InhibVals_MemberDef);
  taMisc::types.Add(&TA_const_InhibVals);
    TA_const_InhibVals.AddParents(&TA_const, &TA_InhibVals);
  taMisc::types.Add(&TA_const_BioBelLayerSpec);
    TA_const_BioBelLayerSpec.AddParents(&TA_const, &TA_BioBelLayerSpec);
  taMisc::types.Add(&TA_const_InhibVals_ref);
    TA_const_InhibVals_ref.AddParents(&TA_const_InhibVals);
  taMisc::types.Add(&TA_const_BioBelLayerSpec_ref);
    TA_const_BioBelLayerSpec_ref.AddParents(&TA_const_BioBelLayerSpec);
  taMisc::types.Add(&TA_SpecPtr_BioBelLayerSpec_);
    TAI_SpecPtr_BioBelLayerSpec_ = new SpecPtr<BioBelLayerSpec>;
    TA_SpecPtr_BioBelLayerSpec_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_SpecPtr_BioBelLayerSpec_.AddParCache(&TA_taBase);
    TA_SpecPtr_BioBelLayerSpec_.AddClassPar(&TA_SpecPtr,0);
    sbt = new TypeDef("BioBelLayerSpec_ptr", 1, 1, 0);
    sbt->AddParents(&TA_BioBelLayerSpec);
    TA_SpecPtr_BioBelLayerSpec_.sub_types.Add(sbt);
    tac_AddMembers(TA_SpecPtr_BioBelLayerSpec_,TA_SpecPtr_BioBelLayerSpec__MemberDef);
    tac_AddMethods(TA_SpecPtr_BioBelLayerSpec_,TA_SpecPtr_BioBelLayerSpec__MethodDef);
  taMisc::types.Add(&TA_BioBelLayerSpec_SPtr);
    TAI_BioBelLayerSpec_SPtr = new BioBelLayerSpec_SPtr;
    TA_BioBelLayerSpec_SPtr.AddParFormal(&TA_class);
    TA_BioBelLayerSpec_SPtr.AddParCache(&TA_taBase);
    TA_BioBelLayerSpec_SPtr.AddClassPar(&TA_SpecPtr_BioBelLayerSpec_,0);
  taMisc::types.Add(&TA_BioBelLayerSpec_ptr);
    TA_BioBelLayerSpec_ptr.AddParents(&TA_BioBelLayerSpec);
  taMisc::types.Add(&TA_const_BioBelLayerSpec_SPtr);
    TA_const_BioBelLayerSpec_SPtr.AddParents(&TA_const, &TA_BioBelLayerSpec_SPtr);
  taMisc::types.Add(&TA_const_BioBelLayerSpec_SPtr_ref);
    TA_const_BioBelLayerSpec_SPtr_ref.AddParents(&TA_const_BioBelLayerSpec_SPtr);
  taMisc::types.Add(&TA_const_BioBelLayer);
    TA_const_BioBelLayer.AddParents(&TA_const, &TA_BioBelLayer);
  taMisc::types.Add(&TA_const_BioBelLayer_ref);
    TA_const_BioBelLayer_ref.AddParents(&TA_const_BioBelLayer);
  taMisc::types.Add(&TA_const_BioBelUnit_Group);
    TA_const_BioBelUnit_Group.AddParents(&TA_const, &TA_BioBelUnit_Group);
  taMisc::types.Add(&TA_const_BioBelUnit_Group_ref);
    TA_const_BioBelUnit_Group_ref.AddParents(&TA_const_BioBelUnit_Group);
  taMisc::types.Add(&TA_LeabraCon);
    TAI_LeabraCon = new LeabraCon;
    TA_LeabraCon.AddParFormal(&TA_class);
    TA_LeabraCon.AddParCache(&TA_taBase);
    TA_LeabraCon.AddClassPar(&TA_BioBelCon,0);
    tac_AddMembers(TA_LeabraCon,TA_LeabraCon_MemberDef);
  taMisc::types.Add(&TA_LeabraConSpec);
    TAI_LeabraConSpec = new LeabraConSpec;
    TA_LeabraConSpec.AddParFormal(&TA_class);
    TA_LeabraConSpec.AddParCache(&TA_taBase);
    TA_LeabraConSpec.AddClassPar(&TA_BioBelConSpec,0);
    tac_AddEnum(TA_LeabraConSpec, "SAvgSource", "", "", "", "", TA_LeabraConSpec_SAvgSource);
    tac_AddMembers(TA_LeabraConSpec,TA_LeabraConSpec_MemberDef);
    tac_AddMethods(TA_LeabraConSpec,TA_LeabraConSpec_MethodDef);
  taMisc::types.Add(&TA_LeabraBiasSpec);
    TAI_LeabraBiasSpec = new LeabraBiasSpec;
    TA_LeabraBiasSpec.AddParFormal(&TA_class);
    TA_LeabraBiasSpec.AddParCache(&TA_taBase);
    TA_LeabraBiasSpec.AddClassPar(&TA_LeabraConSpec,0);
    tac_AddMembers(TA_LeabraBiasSpec,TA_LeabraBiasSpec_MemberDef);
  taMisc::types.Add(&TA_LeabraCon_Group);
    TAI_LeabraCon_Group = new LeabraCon_Group;
    TA_LeabraCon_Group.AddParFormal(&TA_class);
    TA_LeabraCon_Group.AddParCache(&TA_taBase);
    TA_LeabraCon_Group.AddClassPar(&TA_BioBelCon_Group,0);
    tac_AddMethods(TA_LeabraCon_Group,TA_LeabraCon_Group_MethodDef);
  taMisc::types.Add(&TA_LeabraUnitSpec);
    TAI_LeabraUnitSpec = new LeabraUnitSpec;
    TA_LeabraUnitSpec.AddParFormal(&TA_class);
    TA_LeabraUnitSpec.AddParCache(&TA_taBase);
    TA_LeabraUnitSpec.AddClassPar(&TA_BioBelUnitSpec,0);
    tac_AddMembers(TA_LeabraUnitSpec,TA_LeabraUnitSpec_MemberDef);
    tac_AddMethods(TA_LeabraUnitSpec,TA_LeabraUnitSpec_MethodDef);
  taMisc::types.Add(&TA_LeabraUnit);
    TAI_LeabraUnit = new LeabraUnit;
    TA_LeabraUnit.AddParFormal(&TA_class);
    TA_LeabraUnit.AddParCache(&TA_taBase);
    TA_LeabraUnit.AddClassPar(&TA_BioBelUnit,0);
    tac_AddMembers(TA_LeabraUnit,TA_LeabraUnit_MemberDef);
    tac_AddMethods(TA_LeabraUnit,TA_LeabraUnit_MethodDef);
  taMisc::types.Add(&TA_LeabraLayer);
    TAI_LeabraLayer = new LeabraLayer;
    TA_LeabraLayer.AddParFormal(&TA_class);
    TA_LeabraLayer.AddParCache(&TA_taBase);
    TA_LeabraLayer.AddClassPar(&TA_BioBelLayer,0);
    tac_AddMembers(TA_LeabraLayer,TA_LeabraLayer_MemberDef);
    tac_AddMethods(TA_LeabraLayer,TA_LeabraLayer_MethodDef);
  taMisc::types.Add(&TA_LeabraLayerSpec);
    TAI_LeabraLayerSpec = new LeabraLayerSpec;
    TA_LeabraLayerSpec.AddParFormal(&TA_class);
    TA_LeabraLayerSpec.AddParCache(&TA_taBase);
    TA_LeabraLayerSpec.AddClassPar(&TA_BioBelLayerSpec,0);
    tac_AddMethods(TA_LeabraLayerSpec,TA_LeabraLayerSpec_MethodDef);
  taMisc::types.Add(&TA_LeabraCycle);
    TAI_LeabraCycle = new LeabraCycle;
    TA_LeabraCycle.AddParFormal(&TA_class);
    TA_LeabraCycle.AddParCache(&TA_taBase);
    TA_LeabraCycle.AddClassPar(&TA_CycleProcess,0);
    tac_AddMembers(TA_LeabraCycle,TA_LeabraCycle_MemberDef);
    tac_AddMethods(TA_LeabraCycle,TA_LeabraCycle_MethodDef);
  taMisc::types.Add(&TA_LeabraSettle);
    TAI_LeabraSettle = new LeabraSettle;
    TA_LeabraSettle.AddParFormal(&TA_class);
    TA_LeabraSettle.AddParCache(&TA_taBase);
    TA_LeabraSettle.AddClassPar(&TA_SettleProcess,0);
    tac_AddMembers(TA_LeabraSettle,TA_LeabraSettle_MemberDef);
    tac_AddMethods(TA_LeabraSettle,TA_LeabraSettle_MethodDef);
  taMisc::types.Add(&TA_LeabraTrial);
    TAI_LeabraTrial = new LeabraTrial;
    TA_LeabraTrial.AddParFormal(&TA_class);
    TA_LeabraTrial.AddParCache(&TA_taBase);
    TA_LeabraTrial.AddClassPar(&TA_TrialProcess,0);
    tac_AddEnum(TA_LeabraTrial, "StateInit", " ways of initializing the state of the network", "", "", "", TA_LeabraTrial_StateInit);
    tac_AddEnum(TA_LeabraTrial, "Phase", "", "", "", "", TA_LeabraTrial_Phase);
    tac_AddEnum(TA_LeabraTrial, "PhaseOrder", "", "", "", "", TA_LeabraTrial_PhaseOrder);
    tac_AddMembers(TA_LeabraTrial,TA_LeabraTrial_MemberDef);
    tac_AddMethods(TA_LeabraTrial,TA_LeabraTrial_MethodDef);
  taMisc::types.Add(&TA_const_LeabraCon);
    TA_const_LeabraCon.AddParents(&TA_const, &TA_LeabraCon);
  taMisc::types.Add(&TA_const_LeabraCon_ref);
    TA_const_LeabraCon_ref.AddParents(&TA_const_LeabraCon);
  taMisc::types.Add(&TA_LeabraCon_Group_ptr);
    TA_LeabraCon_Group_ptr.AddParents(&TA_LeabraCon_Group);
  taMisc::types.Add(&TA_LeabraCon_ptr);
    TA_LeabraCon_ptr.AddParents(&TA_LeabraCon);
  taMisc::types.Add(&TA_LeabraUnit_ptr);
    TA_LeabraUnit_ptr.AddParents(&TA_LeabraUnit);
  taMisc::types.Add(&TA_const_LeabraConSpec);
    TA_const_LeabraConSpec.AddParents(&TA_const, &TA_LeabraConSpec);
  taMisc::types.Add(&TA_const_LeabraConSpec_ref);
    TA_const_LeabraConSpec_ref.AddParents(&TA_const_LeabraConSpec);
  taMisc::types.Add(&TA_const_LeabraBiasSpec);
    TA_const_LeabraBiasSpec.AddParents(&TA_const, &TA_LeabraBiasSpec);
  taMisc::types.Add(&TA_const_LeabraBiasSpec_ref);
    TA_const_LeabraBiasSpec_ref.AddParents(&TA_const_LeabraBiasSpec);
  taMisc::types.Add(&TA_const_LeabraCon_Group);
    TA_const_LeabraCon_Group.AddParents(&TA_const, &TA_LeabraCon_Group);
  taMisc::types.Add(&TA_const_LeabraCon_Group_ref);
    TA_const_LeabraCon_Group_ref.AddParents(&TA_const_LeabraCon_Group);
  taMisc::types.Add(&TA_LeabraLayer_ptr);
    TA_LeabraLayer_ptr.AddParents(&TA_LeabraLayer);
  taMisc::types.Add(&TA_const_LeabraUnitSpec);
    TA_const_LeabraUnitSpec.AddParents(&TA_const, &TA_LeabraUnitSpec);
  taMisc::types.Add(&TA_const_LeabraUnitSpec_ref);
    TA_const_LeabraUnitSpec_ref.AddParents(&TA_const_LeabraUnitSpec);
  taMisc::types.Add(&TA_const_LeabraUnit);
    TA_const_LeabraUnit.AddParents(&TA_const, &TA_LeabraUnit);
  taMisc::types.Add(&TA_const_LeabraUnit_ref);
    TA_const_LeabraUnit_ref.AddParents(&TA_const_LeabraUnit);
  taMisc::types.Add(&TA_const_LeabraLayerSpec);
    TA_const_LeabraLayerSpec.AddParents(&TA_const, &TA_LeabraLayerSpec);
  taMisc::types.Add(&TA_const_LeabraLayerSpec_ref);
    TA_const_LeabraLayerSpec_ref.AddParents(&TA_const_LeabraLayerSpec);
  taMisc::types.Add(&TA_const_LeabraLayer);
    TA_const_LeabraLayer.AddParents(&TA_const, &TA_LeabraLayer);
  taMisc::types.Add(&TA_const_LeabraLayer_ref);
    TA_const_LeabraLayer_ref.AddParents(&TA_const_LeabraLayer);
  taMisc::types.Add(&TA_LeabraSettle_ptr);
    TA_LeabraSettle_ptr.AddParents(&TA_LeabraSettle);
  taMisc::types.Add(&TA_const_LeabraCycle);
    TA_const_LeabraCycle.AddParents(&TA_const, &TA_LeabraCycle);
  taMisc::types.Add(&TA_const_LeabraCycle_ref);
    TA_const_LeabraCycle_ref.AddParents(&TA_const_LeabraCycle);
  taMisc::types.Add(&TA_CascadeParams);
    TAI_CascadeParams = new CascadeParams;
    TA_CascadeParams.AddParFormal(&TA_class);
    TA_CascadeParams.AddParCache(&TA_taBase);
    TA_CascadeParams.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_CascadeParams,TA_CascadeParams_MemberDef);
  taMisc::types.Add(&TA_LeabraTrial_ptr);
    TA_LeabraTrial_ptr.AddParents(&TA_LeabraTrial);
  taMisc::types.Add(&TA_const_CascadeParams);
    TA_const_CascadeParams.AddParents(&TA_const, &TA_CascadeParams);
  taMisc::types.Add(&TA_const_LeabraSettle);
    TA_const_LeabraSettle.AddParents(&TA_const, &TA_LeabraSettle);
  taMisc::types.Add(&TA_const_CascadeParams_ref);
    TA_const_CascadeParams_ref.AddParents(&TA_const_CascadeParams);
  taMisc::types.Add(&TA_const_LeabraSettle_ref);
    TA_const_LeabraSettle_ref.AddParents(&TA_const_LeabraSettle);
  taMisc::types.Add(&TA_const_LeabraTrial);
    TA_const_LeabraTrial.AddParents(&TA_const, &TA_LeabraTrial);
  taMisc::types.Add(&TA_const_LeabraTrial_ref);
    TA_const_LeabraTrial_ref.AddParents(&TA_const_LeabraTrial);
  taMisc::types.Add(&TA_const_BioBelMaxDa);
    TA_const_BioBelMaxDa.AddParents(&TA_const, &TA_BioBelMaxDa);
  taMisc::types.Add(&TA_const_BioBelMaxDa_ref);
    TA_const_BioBelMaxDa_ref.AddParents(&TA_const_BioBelMaxDa);
  taMisc::types.Add(&TA_LeabraAeSE_Stat);
    TAI_LeabraAeSE_Stat = new LeabraAeSE_Stat;
    TA_LeabraAeSE_Stat.AddParFormal(&TA_class);
    TA_LeabraAeSE_Stat.AddParCache(&TA_taBase);
    TA_LeabraAeSE_Stat.AddClassPar(&TA_SE_Stat,0);
    tac_AddMembers(TA_LeabraAeSE_Stat,TA_LeabraAeSE_Stat_MemberDef);
    tac_AddMethods(TA_LeabraAeSE_Stat,TA_LeabraAeSE_Stat_MethodDef);
  taMisc::types.Add(&TA_const_LeabraAeSE_Stat);
    TA_const_LeabraAeSE_Stat.AddParents(&TA_const, &TA_LeabraAeSE_Stat);
  taMisc::types.Add(&TA_PhaseOrderEventSpec);
    TAI_PhaseOrderEventSpec = new PhaseOrderEventSpec;
    TA_PhaseOrderEventSpec.AddParFormal(&TA_class);
    TA_PhaseOrderEventSpec.AddParCache(&TA_taBase);
    TA_PhaseOrderEventSpec.AddClassPar(&TA_EventSpec,0);
    tac_AddEnum(TA_PhaseOrderEventSpec, "PhaseOrder", "", "", "", "", TA_PhaseOrderEventSpec_PhaseOrder);
    tac_AddMembers(TA_PhaseOrderEventSpec,TA_PhaseOrderEventSpec_MemberDef);
  taMisc::types.Add(&TA_const_LeabraAeSE_Stat_ref);
    TA_const_LeabraAeSE_Stat_ref.AddParents(&TA_const_LeabraAeSE_Stat);
  taMisc::types.Add(&TA_LeabraHistUnit);
    TAI_LeabraHistUnit = new LeabraHistUnit;
    TA_LeabraHistUnit.AddParFormal(&TA_class);
    TA_LeabraHistUnit.AddParCache(&TA_taBase);
    TA_LeabraHistUnit.AddClassPar(&TA_LeabraUnit,0);
    tac_AddMembers(TA_LeabraHistUnit,TA_LeabraHistUnit_MemberDef);
  taMisc::types.Add(&TA_const_PhaseOrderEventSpec);
    TA_const_PhaseOrderEventSpec.AddParents(&TA_const, &TA_PhaseOrderEventSpec);
  taMisc::types.Add(&TA_LeabraHistUnitSpec);
    TAI_LeabraHistUnitSpec = new LeabraHistUnitSpec;
    TA_LeabraHistUnitSpec.AddParFormal(&TA_class);
    TA_LeabraHistUnitSpec.AddParCache(&TA_taBase);
    TA_LeabraHistUnitSpec.AddClassPar(&TA_LeabraUnitSpec,0);
    tac_AddMethods(TA_LeabraHistUnitSpec,TA_LeabraHistUnitSpec_MethodDef);
  taMisc::types.Add(&TA_const_PhaseOrderEventSpec_ref);
    TA_const_PhaseOrderEventSpec_ref.AddParents(&TA_const_PhaseOrderEventSpec);
  taMisc::types.Add(&TA_LeabraHistConSpec);
    TAI_LeabraHistConSpec = new LeabraHistConSpec;
    TA_LeabraHistConSpec.AddParFormal(&TA_class);
    TA_LeabraHistConSpec.AddParCache(&TA_taBase);
    TA_LeabraHistConSpec.AddClassPar(&TA_LeabraConSpec,0);
    tac_AddMembers(TA_LeabraHistConSpec,TA_LeabraHistConSpec_MemberDef);
    tac_AddMethods(TA_LeabraHistConSpec,TA_LeabraHistConSpec_MethodDef);
  taMisc::types.Add(&TA_const_LeabraHistUnitSpec);
    TA_const_LeabraHistUnitSpec.AddParents(&TA_const, &TA_LeabraHistUnitSpec);
  taMisc::types.Add(&TA_const_LeabraHistConSpec);
    TA_const_LeabraHistConSpec.AddParents(&TA_const, &TA_LeabraHistConSpec);
  taMisc::types.Add(&TA_const_LeabraHistUnitSpec_ref);
    TA_const_LeabraHistUnitSpec_ref.AddParents(&TA_const_LeabraHistUnitSpec);
  taMisc::types.Add(&TA_const_LeabraHistConSpec_ref);
    TA_const_LeabraHistConSpec_ref.AddParents(&TA_const_LeabraHistConSpec);
  taMisc::types.Add(&TA_const_LeabraHistUnit);
    TA_const_LeabraHistUnit.AddParents(&TA_const, &TA_LeabraHistUnit);
  taMisc::types.Add(&TA_const_LeabraHistUnit_ref);
    TA_const_LeabraHistUnit_ref.AddParents(&TA_const_LeabraHistUnit);


  taMisc::in_init = false;
} 
