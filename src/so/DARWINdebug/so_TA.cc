// File Automatically Generated by MakeTA
// DO NOT EDIT


#include <ta/typea.h>
#include <ta/typea_constr.h>
#include <css/basic_types.h>
#include <css/c_ptr_types.h>
#include <css/ta_css.h>
#include <so.h>
#include <cl.h>
#include <som.h>
#include <zsh.h>
#include "so_TA_type.h"
#include "so_TA_inst.h"


// Types

TypeDef TA_SoCon("SoCon", " generic self-organizing algorithm connection", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(SoCon), (void**)&TAI_SoCon, 0, 0, 0,1);
TypeDef TA_SoConSpec("SoConSpec", " generic self-organizing algorithm connection specification", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU VIRT_BASE ", "", sizeof(SoConSpec), (void**)&TAI_SoConSpec, 1, 0, 0,1);
TypeDef TA_SoCon_Group("SoCon_Group", " self-organizing connection group", 
	"NO_UPDATE_AFTER ", "NO_UPDATE_AFTER ", "", sizeof(SoCon_Group), (void**)&TAI_SoCon_Group, 0, 0, 0,1);
TypeDef TA_SoUnit("SoUnit", " generic self-organizing unit", 
	"NO_UPDATE_AFTER DMEM_SHARE_SETS_3 ", "NO_UPDATE_AFTER DMEM_SHARE_SETS_3 ", "", sizeof(SoUnit), (void**)&TAI_SoUnit, 0, 0, 0,1);
TypeDef TA_SoUnitSpec("SoUnitSpec", " generic self-organizing unit spec: linear act of std dot-product netin", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(SoUnitSpec), (void**)&TAI_SoUnitSpec, 1, 0, 0,1);
TypeDef TA_SoLayer("SoLayer", " generic self-organizing layer", 
	"EXT_lay COMPRESS ", "EXT_lay COMPRESS ", "", sizeof(SoLayer), (void**)&TAI_SoLayer, 1, 0, 0,1);
TypeDef TA_SoLayerSpec("SoLayerSpec", " generic self-organizing layer specification", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(SoLayerSpec), (void**)&TAI_SoLayerSpec, 1, 0, 0,1);
TypeDef TA_const_SoCon("const_SoCon", 1, 0, 0, 0,1);
TypeDef TA_const_SoCon_ref("const_SoCon_ref", 1, 0, 1, 0,1);
TypeDef TA_SoCon_ptr("SoCon_ptr", 1, 1, 0, 0,1);
TypeDef TA_SoCon_Group_ptr("SoCon_Group_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_SoConSpec("const_SoConSpec", 1, 0, 0, 0,1);
TypeDef TA_const_SoConSpec_ref("const_SoConSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_const_SoCon_Group("const_SoCon_Group", 1, 0, 0, 0,1);
TypeDef TA_const_SoCon_Group_ref("const_SoCon_Group_ref", 1, 0, 1, 0,1);
TypeDef TA_const_SoUnitSpec("const_SoUnitSpec", 1, 0, 0, 0,1);
TypeDef TA_const_SoUnitSpec_ref("const_SoUnitSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_ThreshLinSoUnitSpec("ThreshLinSoUnitSpec", " threshold-linear self-org unit spec", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(ThreshLinSoUnitSpec), (void**)&TAI_ThreshLinSoUnitSpec, 1, 0, 0,1);
TypeDef TA_const_SoUnit("const_SoUnit", 1, 0, 0, 0,1);
TypeDef TA_const_ThreshLinSoUnitSpec("const_ThreshLinSoUnitSpec", 1, 0, 0, 0,1);
TypeDef TA_const_SoUnit_ref("const_SoUnit_ref", 1, 0, 1, 0,1);
TypeDef TA_const_ThreshLinSoUnitSpec_ref("const_ThreshLinSoUnitSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_SoUnit_ptr("SoUnit_ptr", 1, 1, 0, 0,1);
TypeDef TA_SoLayer_ptr("SoLayer_ptr", 1, 1, 0, 0,1);
TypeDef TA_const_SoLayerSpec("const_SoLayerSpec", 1, 0, 0, 0,1);
TypeDef TA_const_SoLayerSpec_ref("const_SoLayerSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_SpecPtr_SoLayerSpec_("SpecPtr_SoLayerSpec_", "", 
	"INLINE NO_UPDATE_AFTER ", "INLINE NO_UPDATE_AFTER ", "", sizeof(SpecPtr<SoLayerSpec>), (void**)&TAI_SpecPtr_SoLayerSpec_, 0, 0, 0,1);
TypeDef TA_SoLayerSpec_SPtr("SoLayerSpec_SPtr", "", 
	"INLINE NO_UPDATE_AFTER ", "INLINE NO_UPDATE_AFTER ", "", sizeof(SoLayerSpec_SPtr), (void**)&TAI_SoLayerSpec_SPtr, 0, 0, 0,1);
TypeDef TA_const_SoLayerSpec_SPtr("const_SoLayerSpec_SPtr", 1, 0, 0, 0,1);
TypeDef TA_const_SoLayer("const_SoLayer", 1, 0, 0, 0,1);
TypeDef TA_const_SoLayerSpec_SPtr_ref("const_SoLayerSpec_SPtr_ref", 1, 0, 1, 0,1);
TypeDef TA_const_SoLayer_ref("const_SoLayer_ref", 1, 0, 1, 0,1);
TypeDef TA_SoTrial("SoTrial", " one self-organizing trial step", 
	"EXT_proc MEMB_IN_GPMENU AGGOP_SUM ", "EXT_proc MEMB_IN_GPMENU AGGOP_SUM ", "", sizeof(SoTrial), (void**)&TAI_SoTrial, 1, 0, 0,1);
TypeDef TA_const_SoTrial("const_SoTrial", 1, 0, 0, 0,1);
TypeDef TA_HebbConSpec("HebbConSpec", " simple hebbian learning", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(HebbConSpec), (void**)&TAI_HebbConSpec, 1, 0, 0,1);
TypeDef TA_const_SoTrial_ref("const_SoTrial_ref", 1, 0, 1, 0,1);
TypeDef TA_const_HebbConSpec("const_HebbConSpec", 1, 0, 0, 0,1);
TypeDef TA_const_HebbConSpec_ref("const_HebbConSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_SoftMaxLayerSpec("SoftMaxLayerSpec", " soft competitive learning layer spec: does a softmax on the units", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(SoftMaxLayerSpec), (void**)&TAI_SoftMaxLayerSpec, 1, 0, 0,1);
TypeDef TA_ClConSpec("ClConSpec", " competitive learning connection spec (uses normalized input activation)", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(ClConSpec), (void**)&TAI_ClConSpec, 1, 0, 0,1);
TypeDef TA_const_SoftMaxLayerSpec("const_SoftMaxLayerSpec", 1, 0, 0, 0,1);
TypeDef TA_SoftClConSpec("SoftClConSpec", " soft competitive learning connection spec", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(SoftClConSpec), (void**)&TAI_SoftClConSpec, 1, 0, 0,1);
TypeDef TA_const_SoftMaxLayerSpec_ref("const_SoftMaxLayerSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_ClLayerSpec("ClLayerSpec", " competitive learning layer spec", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(ClLayerSpec), (void**)&TAI_ClLayerSpec, 1, 0, 0,1);
TypeDef TA_SoftClUnitSpec("SoftClUnitSpec", " soft competitive learning unit spec", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(SoftClUnitSpec), (void**)&TAI_SoftClUnitSpec, 1, 0, 0,1);
TypeDef TA_const_ClConSpec("const_ClConSpec", 1, 0, 0, 0,1);
TypeDef TA_const_ClConSpec_ref("const_ClConSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_const_SoftClConSpec("const_SoftClConSpec", 1, 0, 0, 0,1);
TypeDef TA_const_SoftClConSpec_ref("const_SoftClConSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_const_ClLayerSpec("const_ClLayerSpec", 1, 0, 0, 0,1);
TypeDef TA_const_ClLayerSpec_ref("const_ClLayerSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_const_SoftClUnitSpec("const_SoftClUnitSpec", 1, 0, 0, 0,1);
TypeDef TA_const_SoftClUnitSpec_ref("const_SoftClUnitSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_SoftClLayerSpec("SoftClLayerSpec", " soft competitive learning layer spec: does a softmax on the units", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(SoftClLayerSpec), (void**)&TAI_SoftClLayerSpec, 1, 0, 0,1);
TypeDef TA_const_SoftClLayerSpec("const_SoftClLayerSpec", 1, 0, 0, 0,1);
TypeDef TA_SomUnitSpec("SomUnitSpec", " self-organizing feature maps: net input is distance, not raw netin", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(SomUnitSpec), (void**)&TAI_SomUnitSpec, 1, 0, 0,1);
TypeDef TA_const_SoftClLayerSpec_ref("const_SoftClLayerSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_const_SomUnitSpec("const_SomUnitSpec", 1, 0, 0, 0,1);
TypeDef TA_const_SomUnitSpec_ref("const_SomUnitSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_NeighborEl("NeighborEl", " one element of a neighborhood function", 
	"", "NO_UPDATE_AFTER ", "", sizeof(NeighborEl), (void**)&TAI_NeighborEl, 0, 0, 0,1);
TypeDef TA_taList_NeighborEl_("taList_NeighborEl_", " ", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taList<NeighborEl>), (void**)&TAI_taList_NeighborEl_, 0, 0, 0,1);
TypeDef TA_const_NeighborEl("const_NeighborEl", 1, 0, 0, 0,1);
TypeDef TA_const_NeighborEl_ref("const_NeighborEl_ref", 1, 0, 1, 0,1);
TypeDef TA_NeighborEl_List("NeighborEl_List", " list of NeighborEl objects", 
	"", "NO_UPDATE_AFTER ", "", sizeof(NeighborEl_List), (void**)&TAI_NeighborEl_List, 0, 0, 0,1);
TypeDef TA_const_NeighborEl_List("const_NeighborEl_List", 1, 0, 0, 0,1);
TypeDef TA_const_NeighborEl_List_ref("const_NeighborEl_List_ref", 1, 0, 1, 0,1);
TypeDef TA_SomLayerSpec("SomLayerSpec", " self-organizing map activates a neighborhood of elements", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(SomLayerSpec), (void**)&TAI_SomLayerSpec, 1, 0, 0,1);
TypeDef TA_const_SomLayerSpec("const_SomLayerSpec", 1, 0, 0, 0,1);
TypeDef TA_const_SomLayerSpec_ref("const_SomLayerSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_ZshConSpec("ZshConSpec", " zero-sum-hebbian (subtractive normalization) learning", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(ZshConSpec), (void**)&TAI_ZshConSpec, 1, 0, 0,1);
TypeDef TA_const_ZshConSpec("const_ZshConSpec", 1, 0, 0, 0,1);
TypeDef TA_const_ZshConSpec_ref("const_ZshConSpec_ref", 1, 0, 1, 0,1);
TypeDef TA_MaxInConSpec("MaxInConSpec", " approximation to MaxIn (Zsh + SoftCl)", 
	"EXT_spec MEMB_IN_GPMENU ", "EXT_spec MEMB_IN_GPMENU ", "", sizeof(MaxInConSpec), (void**)&TAI_MaxInConSpec, 1, 0, 0,1);
TypeDef TA_const_MaxInConSpec("const_MaxInConSpec", 1, 0, 0, 0,1);
TypeDef TA_const_MaxInConSpec_ref("const_MaxInConSpec_ref", 1, 0, 1, 0,1);

// Instances

SoCon*		 TAI_SoCon=NULL;
SoConSpec*		 TAI_SoConSpec=NULL;
  static cssEl* cssElCFun_SoConSpec_C_InitWtState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoConSpec*)ths)->C_InitWtState((Con_Group*)(void*)*arg[1], (Connection*)(void*)*arg[2], (Unit*)(void*)*arg[3], (Unit*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_SoConSpec_C_InitWtDelta_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoConSpec*)ths)->C_InitWtDelta((Con_Group*)(void*)*arg[1], (Connection*)(void*)*arg[2], (Unit*)(void*)*arg[3], (Unit*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_SoConSpec_C_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoConSpec*)ths)->C_UpdateWeights((SoCon*)(void*)*arg[1], (Unit*)(void*)*arg[2], (Unit*)(void*)*arg[3]);
    return rval;}
  static cssEl* cssElCFun_SoConSpec_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoConSpec*)ths)->UpdateWeights((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_SoConSpec_Compute_AvgInAct_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoConSpec*)ths)->Compute_AvgInAct((SoCon_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
SoCon_Group*		 TAI_SoCon_Group=NULL;
  static cssEl* cssElCFun_SoCon_Group_Compute_AvgInAct_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoCon_Group*)ths)->Compute_AvgInAct((Unit*)(void*)*arg[1]);
    return rval;}
SoUnit*		 TAI_SoUnit=NULL;
  static cssEl* cssElCFun_SoUnit_Compute_AvgInAct_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SoUnit*)ths)->Compute_AvgInAct();
    return rval;}
SoUnitSpec*		 TAI_SoUnitSpec=NULL;
  static cssEl* cssElCFun_SoUnitSpec_InitState_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoUnitSpec*)ths)->InitState((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SoUnitSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoUnitSpec*)ths)->Compute_Act((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SoUnitSpec_Compute_AvgInAct_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoUnitSpec*)ths)->Compute_AvgInAct((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SoUnitSpec_GraphActFun_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((SoUnitSpec*)ths)->GraphActFun((GraphLog*)(void*)*arg[1]);}
    if(na == 2) {
      ((SoUnitSpec*)ths)->GraphActFun((GraphLog*)(void*)*arg[1], (float)*arg[2]);}
    if(na == 3) {
      ((SoUnitSpec*)ths)->GraphActFun((GraphLog*)(void*)*arg[1], (float)*arg[2], (float)*arg[3]);}
    return rval;}
SoLayer*		 TAI_SoLayer=NULL;
  static cssEl* cssElCFun_SoLayer_SetLayerSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SoLayer*)ths)->SetLayerSpec((LayerSpec*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_SoLayer_Compute_AvgAct_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SoLayer*)ths)->Compute_AvgAct();
    return rval;}
SoLayerSpec*		 TAI_SoLayerSpec=NULL;
  static cssEl* cssElCFun_SoLayerSpec_FindMaxNetIn_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SoLayerSpec*)ths)->FindMaxNetIn((SoLayer*)(void*)*arg[1]), 1, &TA_SoUnit);
    return rval;}
  static cssEl* cssElCFun_SoLayerSpec_FindMinNetIn_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SoLayerSpec*)ths)->FindMinNetIn((SoLayer*)(void*)*arg[1]), 1, &TA_SoUnit);
    return rval;}
  static cssEl* cssElCFun_SoLayerSpec_FindWinner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SoLayerSpec*)ths)->FindWinner((SoLayer*)(void*)*arg[1]), 1, &TA_SoUnit);
    return rval;}
  static cssEl* cssElCFun_SoLayerSpec_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoLayerSpec*)ths)->Compute_Net((SoLayer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SoLayerSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoLayerSpec*)ths)->Compute_Act((SoLayer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SoLayerSpec_Compute_AvgAct_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoLayerSpec*)ths)->Compute_AvgAct((SoLayer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SoLayerSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoLayerSpec*)ths)->Compute_dWt((SoLayer*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SoLayerSpec_UpdateWeights_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoLayerSpec*)ths)->UpdateWeights((SoLayer*)(void*)*arg[1]);
    return rval;}
ThreshLinSoUnitSpec*		 TAI_ThreshLinSoUnitSpec=NULL;
  static cssEl* cssElCFun_ThreshLinSoUnitSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ThreshLinSoUnitSpec*)ths)->Compute_Act((Unit*)(void*)*arg[1]);
    return rval;}
SpecPtr<SoLayerSpec>*		 TAI_SpecPtr_SoLayerSpec_=NULL;
  static cssEl* cssElCFun_SpecPtr_SoLayerSpec__SetDefaultSpec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SpecPtr<SoLayerSpec>*)ths)->SetDefaultSpec((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SpecPtr_SoLayerSpec__CheckSpec_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SpecPtr<SoLayerSpec>*)ths)->CheckSpec());
    return rval;}
  static cssEl* cssElCFun_SpecPtr_SoLayerSpec__NewChild_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((SpecPtr<SoLayerSpec>*)ths)->NewChild(), 1, &TA_SoLayerSpec);
    return rval;}
SoLayerSpec_SPtr*		 TAI_SoLayerSpec_SPtr=NULL;
SoTrial*		 TAI_SoTrial=NULL;
  static cssEl* cssElCFun_SoTrial_Compute_Act_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SoTrial*)ths)->Compute_Act();
    return rval;}
  static cssEl* cssElCFun_SoTrial_Compute_dWt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SoTrial*)ths)->Compute_dWt();
    return rval;}
HebbConSpec*		 TAI_HebbConSpec=NULL;
  static cssEl* cssElCFun_HebbConSpec_C_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((HebbConSpec*)ths)->C_Compute_dWt((SoCon*)(void*)*arg[1], (SoCon_Group*)(void*)*arg[2], (Unit*)(void*)*arg[3], (Unit*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_HebbConSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((HebbConSpec*)ths)->Compute_dWt((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
SoftMaxLayerSpec*		 TAI_SoftMaxLayerSpec=NULL;
ClConSpec*		 TAI_ClConSpec=NULL;
  static cssEl* cssElCFun_ClConSpec_C_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ClConSpec*)ths)->C_Compute_dWt((SoCon*)(void*)*arg[1], (SoCon_Group*)(void*)*arg[2], (Unit*)(void*)*arg[3], (Unit*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_ClConSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ClConSpec*)ths)->Compute_dWt((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
SoftClConSpec*		 TAI_SoftClConSpec=NULL;
  static cssEl* cssElCFun_SoftClConSpec_C_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoftClConSpec*)ths)->C_Compute_dWt((SoCon*)(void*)*arg[1], (SoCon_Group*)(void*)*arg[2], (Unit*)(void*)*arg[3], (Unit*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_SoftClConSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoftClConSpec*)ths)->Compute_dWt((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
ClLayerSpec*		 TAI_ClLayerSpec=NULL;
SoftClUnitSpec*		 TAI_SoftClUnitSpec=NULL;
  static cssEl* cssElCFun_SoftClUnitSpec_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoftClUnitSpec*)ths)->Compute_Net((Unit*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SoftClUnitSpec_Compute_Act_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SoftClUnitSpec*)ths)->Compute_Act((Unit*)(void*)*arg[1]);
    return rval;}
SoftClLayerSpec*		 TAI_SoftClLayerSpec=NULL;
SomUnitSpec*		 TAI_SomUnitSpec=NULL;
  static cssEl* cssElCFun_SomUnitSpec_Compute_Net_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SomUnitSpec*)ths)->Compute_Net((Unit*)(void*)*arg[1]);
    return rval;}
NeighborEl*		 TAI_NeighborEl=NULL;
taList<NeighborEl>*		 TAI_taList_NeighborEl_=NULL;
  static cssEl* cssElCFun_taList_NeighborEl__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<NeighborEl>*)ths)->MoveBefore((NeighborEl*)(void*)*arg[1], (NeighborEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_NeighborEl__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList<NeighborEl>*)ths)->MoveAfter((NeighborEl*)(void*)*arg[1], (NeighborEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_NeighborEl__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<NeighborEl>*)ths)->SafeEl((int)*arg[1]), 1, &TA_NeighborEl);
    return rval;}
  static cssEl* cssElCFun_taList_NeighborEl__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<NeighborEl>*)ths)->FastEl((int)*arg[1]), 1, &TA_NeighborEl);
    return rval;}
  static cssEl* cssElCFun_taList_NeighborEl__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<NeighborEl>*)ths)->DefaultEl(), 1, &TA_NeighborEl);
    return rval;}
  static cssEl* cssElCFun_taList_NeighborEl__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<NeighborEl>*)ths)->Edit_El((NeighborEl*)(void*)*arg[1]), 1, &TA_NeighborEl);
    return rval;}
  static cssEl* cssElCFun_taList_NeighborEl__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<NeighborEl>*)ths)->FindName((const char*)*arg[1]), 1, &TA_NeighborEl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<NeighborEl>*)ths)->FindName((const char*)*arg[1], refarg_1), 1, &TA_NeighborEl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_NeighborEl__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<NeighborEl>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_NeighborEl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<NeighborEl>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_NeighborEl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_NeighborEl__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<NeighborEl>*)ths)->Pop(), 1, &TA_NeighborEl);
    return rval;}
  static cssEl* cssElCFun_taList_NeighborEl__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<NeighborEl>*)ths)->Peek(), 1, &TA_NeighborEl);
    return rval;}
  static cssEl* cssElCFun_taList_NeighborEl__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<NeighborEl>*)ths)->AddUniqNameOld((NeighborEl*)(void*)*arg[1]), 1, &TA_NeighborEl);
    return rval;}
  static cssEl* cssElCFun_taList_NeighborEl__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<NeighborEl>*)ths)->LinkUniqNameOld((NeighborEl*)(void*)*arg[1]), 1, &TA_NeighborEl);
    return rval;}
NeighborEl_List*		 TAI_NeighborEl_List=NULL;
SomLayerSpec*		 TAI_SomLayerSpec=NULL;
  static cssEl* cssElCFun_SomLayerSpec_KernelEllipse_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SomLayerSpec*)ths)->KernelEllipse((int)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_SomLayerSpec_KernelRectangle_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SomLayerSpec*)ths)->KernelRectangle((int)*arg[1], (int)*arg[2], (int)*arg[3], (int)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_SomLayerSpec_KernelFromNetView_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SomLayerSpec*)ths)->KernelFromNetView((NetView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_SomLayerSpec_StepKernelActs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((SomLayerSpec*)ths)->StepKernelActs();}
    if(na == 1) {
      ((SomLayerSpec*)ths)->StepKernelActs((float)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_SomLayerSpec_LinearKernelActs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((SomLayerSpec*)ths)->LinearKernelActs();}
    if(na == 1) {
      ((SomLayerSpec*)ths)->LinearKernelActs((float)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_SomLayerSpec_GaussianKernelActs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((SomLayerSpec*)ths)->GaussianKernelActs();}
    if(na == 1) {
      ((SomLayerSpec*)ths)->GaussianKernelActs((float)*arg[1]);}
    if(na == 2) {
      ((SomLayerSpec*)ths)->GaussianKernelActs((float)*arg[1], (float)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_SomLayerSpec_WrapClip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((SomLayerSpec*)ths)->WrapClip((int)*arg[1], (int)*arg[2]));
    return rval;}
ZshConSpec*		 TAI_ZshConSpec=NULL;
  static cssEl* cssElCFun_ZshConSpec_C_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ZshConSpec*)ths)->C_Compute_dWt((SoCon*)(void*)*arg[1], (SoCon_Group*)(void*)*arg[2], (Unit*)(void*)*arg[3], (Unit*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_ZshConSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ZshConSpec*)ths)->Compute_dWt((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}
MaxInConSpec*		 TAI_MaxInConSpec=NULL;
  static cssEl* cssElCFun_MaxInConSpec_C_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MaxInConSpec*)ths)->C_Compute_dWt((SoCon*)(void*)*arg[1], (SoCon_Group*)(void*)*arg[2], (Unit*)(void*)*arg[3], (Unit*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_MaxInConSpec_Compute_dWt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((MaxInConSpec*)ths)->Compute_dWt((Con_Group*)(void*)*arg[1], (Unit*)(void*)*arg[2]);
    return rval;}

// Type Data

static int SoCon::* TA_SoCon_MbrOff;
static MemberDef_data TA_SoCon_MemberDef[]={
  {&TA_float,NULL,"dwt"," resulting net weight change","NO_VIEW NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SoCon_MbrOff=(int SoCon::*)(&SoCon::dwt))),0,NULL,0},
  {&TA_float,NULL,"pdw"," previous delta-weight change","NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_SoCon_MbrOff=(int SoCon::*)(&SoCon::pdw))),0,NULL,0},
  NULL};
static EnumDef_data TA_SoConSpec_AvgInActSource[]={
  {"LAYER_AVG_ACT"," from layer's average activation","",0},
  {"COMPUTE_AVG_ACT"," compute the avg_in_act directly from my inputs","",1},
  NULL};
static int SoConSpec::* TA_SoConSpec_MbrOff;
static MemberDef_data TA_SoConSpec_MemberDef[]={
  {&TA_float,NULL,"lrate"," learning rate","","",
    *((ta_memb_ptr*)&(TA_SoConSpec_MbrOff=(int SoConSpec::*)(&SoConSpec::lrate))),0,NULL,0},
  {NULL,"::AvgInActSource","avg_act_source"," source of average input actviation value","","",
    *((ta_memb_ptr*)&(TA_SoConSpec_MbrOff=(int SoConSpec::*)(&SoConSpec::avg_act_source))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SoConSpec_C_InitWtState_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Connection_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_SoConSpec_C_InitWtDelta_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Connection_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_SoConSpec_C_UpdateWeights_MethArgs[]={
  {&TA_SoCon_ptr,NULL,"cn",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_SoConSpec_UpdateWeights_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodArgs_data TA_SoConSpec_Compute_AvgInAct_MethArgs[]={
  {&TA_SoCon_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodDef_data TA_SoConSpec_MethodDef[]={
  {&TA_void,NULL,"C_InitWtState","","","",
    1,4,-1,0,NULL,cssElCFun_SoConSpec_C_InitWtState_stub,TA_SoConSpec_C_InitWtState_MethArgs},
  {&TA_void,NULL,"C_InitWtDelta","","","",
    1,4,-1,0,NULL,cssElCFun_SoConSpec_C_InitWtDelta_stub,TA_SoConSpec_C_InitWtDelta_MethArgs},
  {&TA_void,NULL,"C_UpdateWeights","","","",
    1,3,-1,0,NULL,cssElCFun_SoConSpec_C_UpdateWeights_stub,TA_SoConSpec_C_UpdateWeights_MethArgs},
  {&TA_void,NULL,"UpdateWeights"," update weights (ie. add delta-wt to wt, zero delta-wt)","","",
    1,2,-1,0,NULL,cssElCFun_SoConSpec_UpdateWeights_stub,TA_SoConSpec_UpdateWeights_MethArgs},
  {&TA_void,NULL,"Compute_AvgInAct"," compute the average input activation ","","",
    0,2,-1,0,NULL,cssElCFun_SoConSpec_Compute_AvgInAct_stub,TA_SoConSpec_Compute_AvgInAct_MethArgs},
  NULL};
static int SoCon_Group::* TA_SoCon_Group_MbrOff;
static MemberDef_data TA_SoCon_Group_MemberDef[]={
  {&TA_float,NULL,"avg_in_act"," average input activation","","",
    *((ta_memb_ptr*)&(TA_SoCon_Group_MbrOff=(int SoCon_Group::*)(&SoCon_Group::avg_in_act))),0,NULL,0},
  {&TA_float,NULL,"sum_in_act"," summed input activation","","",
    *((ta_memb_ptr*)&(TA_SoCon_Group_MbrOff=(int SoCon_Group::*)(&SoCon_Group::sum_in_act))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SoCon_Group_Compute_AvgInAct_MethArgs[]={
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodDef_data TA_SoCon_Group_MethodDef[]={
  {&TA_void,NULL,"Compute_AvgInAct"," compute the average (and sum) input activation","","",
    0,1,-1,0,NULL,cssElCFun_SoCon_Group_Compute_AvgInAct_stub,TA_SoCon_Group_Compute_AvgInAct_MethArgs},
  NULL};
static int SoUnit::* TA_SoUnit_MbrOff;
static MemberDef_data TA_SoUnit_MemberDef[]={
  {&TA_float,NULL,"act_i"," independent activation of the unit (before layer-level rescaling)","","",
    *((ta_memb_ptr*)&(TA_SoUnit_MbrOff=(int SoUnit::*)(&SoUnit::act_i))),0,NULL,0},
  NULL};
static MethodDef_data TA_SoUnit_MethodDef[]={
  {&TA_void,NULL,"Compute_AvgInAct","","","",
    0,0,-1,0,NULL,cssElCFun_SoUnit_Compute_AvgInAct_stub,NULL},
  NULL};
static MethodArgs_data TA_SoUnitSpec_InitState_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_SoUnitSpec_Compute_Act_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_SoUnitSpec_Compute_AvgInAct_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_SoUnitSpec_GraphActFun_MethArgs[]={
  {&TA_GraphLog_ptr,NULL,"graph_log",""},
  {&TA_float,NULL,"min"," -5.0"},
  {&TA_float,NULL,"max"," 5.0"},
  NULL};
static MethodDef_data TA_SoUnitSpec_MethodDef[]={
  {&TA_void,NULL,"InitState"," initialize unit state variables","","",
    1,1,-1,0,NULL,cssElCFun_SoUnitSpec_InitState_stub,TA_SoUnitSpec_InitState_MethArgs},
  {&TA_void,NULL,"Compute_Act","","","",
    1,1,-1,0,NULL,cssElCFun_SoUnitSpec_Compute_Act_stub,TA_SoUnitSpec_Compute_Act_MethArgs},
  {&TA_void,NULL,"Compute_AvgInAct","","","",
    0,1,-1,0,NULL,cssElCFun_SoUnitSpec_Compute_AvgInAct_stub,TA_SoUnitSpec_Compute_AvgInAct_MethArgs},
  {&TA_void,NULL,"GraphActFun"," graph the activation function (NULL = new graph log)","BUTTON NULL_OK ","",
    0,3,1,0,NULL,cssElCFun_SoUnitSpec_GraphActFun_stub,TA_SoUnitSpec_GraphActFun_MethArgs},
  NULL};
static int SoLayer::* TA_SoLayer_MbrOff;
static MemberDef_data TA_SoLayer_MemberDef[]={
  {&TA_SoLayerSpec_SPtr,NULL,"spec"," the spec for this layer","","",
    *((ta_memb_ptr*)&(TA_SoLayer_MbrOff=(int SoLayer::*)(&SoLayer::spec))),0,NULL,0},
  {&TA_float,NULL,"avg_act"," average activation over layer","","",
    *((ta_memb_ptr*)&(TA_SoLayer_MbrOff=(int SoLayer::*)(&SoLayer::avg_act))),0,NULL,0},
  {&TA_float,NULL,"sum_act"," summed activation over layer","","",
    *((ta_memb_ptr*)&(TA_SoLayer_MbrOff=(int SoLayer::*)(&SoLayer::sum_act))),0,NULL,0},
  {&TA_Unit_ptr,NULL,"winner"," winning unit","READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_SoLayer_MbrOff=(int SoLayer::*)(&SoLayer::winner))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SoLayer_SetLayerSpec_MethArgs[]={
  {&TA_LayerSpec_ptr,NULL,"sp",""},
  NULL};
static MethodDef_data TA_SoLayer_MethodDef[]={
  {&TA_bool,NULL,"SetLayerSpec"," set the layer specification","MENU MENU_SEP_BEFORE ","",
    1,1,-1,0,NULL,cssElCFun_SoLayer_SetLayerSpec_stub,TA_SoLayer_SetLayerSpec_MethArgs},
  {&TA_void,NULL,"Compute_AvgAct","","","",
    0,0,-1,0,NULL,cssElCFun_SoLayer_Compute_AvgAct_stub,NULL},
  NULL};
static EnumDef_data TA_SoLayerSpec_NetInType[]={
  {"MAX_NETIN_WINS"," maximum net input wins (like dot product)","",0},
  {"MIN_NETIN_WINS"," minimum net input wins (like distance)","",1},
  NULL};
static int SoLayerSpec::* TA_SoLayerSpec_MbrOff;
static MemberDef_data TA_SoLayerSpec_MemberDef[]={
  {NULL,"::NetInType","netin_type"," type of netinput measure for computing winner","","",
    *((ta_memb_ptr*)&(TA_SoLayerSpec_MbrOff=(int SoLayerSpec::*)(&SoLayerSpec::netin_type))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SoLayerSpec_FindMaxNetIn_MethArgs[]={
  {&TA_SoLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_SoLayerSpec_FindMinNetIn_MethArgs[]={
  {&TA_SoLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_SoLayerSpec_FindWinner_MethArgs[]={
  {&TA_SoLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_SoLayerSpec_Compute_Net_MethArgs[]={
  {&TA_SoLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_SoLayerSpec_Compute_Act_MethArgs[]={
  {&TA_SoLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_SoLayerSpec_Compute_AvgAct_MethArgs[]={
  {&TA_SoLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_SoLayerSpec_Compute_dWt_MethArgs[]={
  {&TA_SoLayer_ptr,NULL,"lay",""},
  NULL};
static MethodArgs_data TA_SoLayerSpec_UpdateWeights_MethArgs[]={
  {&TA_SoLayer_ptr,NULL,"lay",""},
  NULL};
static MethodDef_data TA_SoLayerSpec_MethodDef[]={
  {&TA_SoUnit_ptr,NULL,"FindMaxNetIn"," finds unit with the maximum net-input value in the layer (clears acts too)","","",
    0,1,-1,0,NULL,cssElCFun_SoLayerSpec_FindMaxNetIn_stub,TA_SoLayerSpec_FindMaxNetIn_MethArgs},
  {&TA_SoUnit_ptr,NULL,"FindMinNetIn"," finds unit with the minimum net-input value in the layer (clears acts too)","","",
    0,1,-1,0,NULL,cssElCFun_SoLayerSpec_FindMinNetIn_stub,TA_SoLayerSpec_FindMinNetIn_MethArgs},
  {&TA_SoUnit_ptr,NULL,"FindWinner"," finds the winning unit according to netin_type (clears acts too)","","",
    0,1,-1,0,NULL,cssElCFun_SoLayerSpec_FindWinner_stub,TA_SoLayerSpec_FindWinner_MethArgs},
  {&TA_void,NULL,"Compute_Net","","","",
    0,1,-1,0,NULL,cssElCFun_SoLayerSpec_Compute_Net_stub,TA_SoLayerSpec_Compute_Net_MethArgs},
  {&TA_void,NULL,"Compute_Act","","","",
    0,1,-1,0,NULL,cssElCFun_SoLayerSpec_Compute_Act_stub,TA_SoLayerSpec_Compute_Act_MethArgs},
  {&TA_void,NULL,"Compute_AvgAct","","","",
    0,1,-1,0,NULL,cssElCFun_SoLayerSpec_Compute_AvgAct_stub,TA_SoLayerSpec_Compute_AvgAct_MethArgs},
  {&TA_void,NULL,"Compute_dWt","","","",
    0,1,-1,0,NULL,cssElCFun_SoLayerSpec_Compute_dWt_stub,TA_SoLayerSpec_Compute_dWt_MethArgs},
  {&TA_void,NULL,"UpdateWeights","","","",
    0,1,-1,0,NULL,cssElCFun_SoLayerSpec_UpdateWeights_stub,TA_SoLayerSpec_UpdateWeights_MethArgs},
  NULL};
static int ThreshLinSoUnitSpec::* TA_ThreshLinSoUnitSpec_MbrOff;
static MemberDef_data TA_ThreshLinSoUnitSpec_MemberDef[]={
  {&TA_float,NULL,"threshold","","","",
    *((ta_memb_ptr*)&(TA_ThreshLinSoUnitSpec_MbrOff=(int ThreshLinSoUnitSpec::*)(&ThreshLinSoUnitSpec::threshold))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ThreshLinSoUnitSpec_Compute_Act_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodDef_data TA_ThreshLinSoUnitSpec_MethodDef[]={
  {&TA_void,NULL,"Compute_Act","","","",
    1,1,-1,0,NULL,cssElCFun_ThreshLinSoUnitSpec_Compute_Act_stub,TA_ThreshLinSoUnitSpec_Compute_Act_MethArgs},
  NULL};
static int SpecPtr<SoLayerSpec>::* TA_SpecPtr_SoLayerSpec__MbrOff;
static MemberDef_data TA_SpecPtr_SoLayerSpec__MemberDef[]={
  {NULL,"::SoLayerSpec_ptr","spec"," the actual spec itself","","",
    *((ta_memb_ptr*)&(TA_SpecPtr_SoLayerSpec__MbrOff=(int SpecPtr<SoLayerSpec>::*)(&SpecPtr<SoLayerSpec>::spec))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SpecPtr_SoLayerSpec__SetDefaultSpec_MethArgs[]={
  {&TA_TAPtr,NULL,"ownr",""},
  NULL};
static MethodDef_data TA_SpecPtr_SoLayerSpec__MethodDef[]={
  {&TA_void,NULL,"SetDefaultSpec"," for class that owns ptr","","",
    1,1,-1,0,NULL,cssElCFun_SpecPtr_SoLayerSpec__SetDefaultSpec_stub,TA_SpecPtr_SoLayerSpec__SetDefaultSpec_MethArgs},
  {&TA_bool,NULL,"CheckSpec","","","",
    1,0,-1,0,NULL,cssElCFun_SpecPtr_SoLayerSpec__CheckSpec_stub,NULL},
  {NULL,"::SoLayerSpec_ptr","NewChild","","","",
    0,0,-1,0,NULL,cssElCFun_SpecPtr_SoLayerSpec__NewChild_stub,NULL},
  NULL};
static MethodDef_data TA_SoTrial_MethodDef[]={
  {&TA_void,NULL,"Compute_Act","","","",
    0,0,-1,0,NULL,cssElCFun_SoTrial_Compute_Act_stub,NULL},
  {&TA_void,NULL,"Compute_dWt","","","",
    0,0,-1,0,NULL,cssElCFun_SoTrial_Compute_dWt_stub,NULL},
  NULL};
static MethodArgs_data TA_HebbConSpec_C_Compute_dWt_MethArgs[]={
  {&TA_SoCon_ptr,NULL,"cn",""},
  {&TA_SoCon_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_HebbConSpec_Compute_dWt_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodDef_data TA_HebbConSpec_MethodDef[]={
  {&TA_void,NULL,"C_Compute_dWt","","","",
    1,4,-1,0,NULL,cssElCFun_HebbConSpec_C_Compute_dWt_stub,TA_HebbConSpec_C_Compute_dWt_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute the delta-weight change compute weight change according to simple hebb function","","",
    1,2,-1,0,NULL,cssElCFun_HebbConSpec_Compute_dWt_stub,TA_HebbConSpec_Compute_dWt_MethArgs},
  NULL};
static int SoftMaxLayerSpec::* TA_SoftMaxLayerSpec_MbrOff;
static MemberDef_data TA_SoftMaxLayerSpec_MemberDef[]={
  {&TA_float,NULL,"softmax_gain"," gain of the softmax function","","",
    *((ta_memb_ptr*)&(TA_SoftMaxLayerSpec_MbrOff=(int SoftMaxLayerSpec::*)(&SoftMaxLayerSpec::softmax_gain))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ClConSpec_C_Compute_dWt_MethArgs[]={
  {&TA_SoCon_ptr,NULL,"cn",""},
  {&TA_SoCon_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_ClConSpec_Compute_dWt_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodDef_data TA_ClConSpec_MethodDef[]={
  {&TA_void,NULL,"C_Compute_dWt","","","",
    1,4,-1,0,NULL,cssElCFun_ClConSpec_C_Compute_dWt_stub,TA_ClConSpec_C_Compute_dWt_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute the delta-weight change compute weight change according to Cl function (normalized input acts)","","",
    1,2,-1,0,NULL,cssElCFun_ClConSpec_Compute_dWt_stub,TA_ClConSpec_Compute_dWt_MethArgs},
  NULL};
static MethodArgs_data TA_SoftClConSpec_C_Compute_dWt_MethArgs[]={
  {&TA_SoCon_ptr,NULL,"cn",""},
  {&TA_SoCon_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_SoftClConSpec_Compute_dWt_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodDef_data TA_SoftClConSpec_MethodDef[]={
  {&TA_void,NULL,"C_Compute_dWt","","","",
    1,4,-1,0,NULL,cssElCFun_SoftClConSpec_C_Compute_dWt_stub,TA_SoftClConSpec_C_Compute_dWt_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute the delta-weight change compute weight change according to soft Cl function","","",
    1,2,-1,0,NULL,cssElCFun_SoftClConSpec_Compute_dWt_stub,TA_SoftClConSpec_Compute_dWt_MethArgs},
  NULL};
static int SoftClUnitSpec::* TA_SoftClUnitSpec_MbrOff;
static MemberDef_data TA_SoftClUnitSpec_MemberDef[]={
  {&TA_float,NULL,"var"," variance of the Gaussian activation function","","",
    *((ta_memb_ptr*)&(TA_SoftClUnitSpec_MbrOff=(int SoftClUnitSpec::*)(&SoftClUnitSpec::var))),0,NULL,0},
  {&TA_float,NULL,"norm_const"," normalization const for Gaussian","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_SoftClUnitSpec_MbrOff=(int SoftClUnitSpec::*)(&SoftClUnitSpec::norm_const))),0,NULL,0},
  {&TA_float,NULL,"denom_const"," denominator const for Gaussian","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_SoftClUnitSpec_MbrOff=(int SoftClUnitSpec::*)(&SoftClUnitSpec::denom_const))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SoftClUnitSpec_Compute_Net_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodArgs_data TA_SoftClUnitSpec_Compute_Act_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodDef_data TA_SoftClUnitSpec_MethodDef[]={
  {&TA_void,NULL,"Compute_Net"," redefine to call compute_dist","","",
    1,1,-1,0,NULL,cssElCFun_SoftClUnitSpec_Compute_Net_stub,TA_SoftClUnitSpec_Compute_Net_MethArgs},
  {&TA_void,NULL,"Compute_Act"," activation is a gaussian function of the net input","","",
    1,1,-1,0,NULL,cssElCFun_SoftClUnitSpec_Compute_Act_stub,TA_SoftClUnitSpec_Compute_Act_MethArgs},
  NULL};
static MethodArgs_data TA_SomUnitSpec_Compute_Net_MethArgs[]={
  {&TA_Unit_ptr,NULL,"u",""},
  NULL};
static MethodDef_data TA_SomUnitSpec_MethodDef[]={
  {&TA_void,NULL,"Compute_Net"," redefine to call compute_dist","","",
    1,1,-1,0,NULL,cssElCFun_SomUnitSpec_Compute_Net_stub,TA_SomUnitSpec_Compute_Net_MethArgs},
  NULL};
static int NeighborEl::* TA_NeighborEl_MbrOff;
static MemberDef_data TA_NeighborEl_MemberDef[]={
  {&TA_TwoDCoord,NULL,"off"," offset from 'winning' unit","","",
    *((ta_memb_ptr*)&(TA_NeighborEl_MbrOff=(int NeighborEl::*)(&NeighborEl::off))),0,NULL,0},
  {&TA_float,NULL,"act_val"," activation value for this unit","","",
    *((ta_memb_ptr*)&(TA_NeighborEl_MbrOff=(int NeighborEl::*)(&NeighborEl::act_val))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taList_NeighborEl__MoveBefore_MethArgs[]={
  {NULL,"::NeighborEl_ptr","trg",""},
  {NULL,"::NeighborEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_NeighborEl__MoveAfter_MethArgs[]={
  {NULL,"::NeighborEl_ptr","trg",""},
  {NULL,"::NeighborEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_NeighborEl__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_NeighborEl__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_NeighborEl__Edit_El_MethArgs[]={
  {NULL,"::NeighborEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_NeighborEl__FindName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_NeighborEl__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","Idx"},
  NULL};
static MethodArgs_data TA_taList_NeighborEl__AddUniqNameOld_MethArgs[]={
  {NULL,"::NeighborEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_NeighborEl__LinkUniqNameOld_MethArgs[]={
  {NULL,"::NeighborEl_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_NeighborEl__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list move item so that it appears just before the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_NeighborEl__MoveBefore_stub,TA_taList_NeighborEl__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list move item so that it appears just after the target item trg in the list","","",
    1,2,-1,0,NULL,cssElCFun_taList_NeighborEl__MoveAfter_stub,TA_taList_NeighborEl__MoveAfter_MethArgs},
  {NULL,"::NeighborEl_ptr","SafeEl"," get element at index","","",
    0,1,-1,0,NULL,cssElCFun_taList_NeighborEl__SafeEl_stub,TA_taList_NeighborEl__SafeEl_MethArgs},
  {NULL,"::NeighborEl_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,NULL,cssElCFun_taList_NeighborEl__FastEl_stub,TA_taList_NeighborEl__FastEl_MethArgs},
  {NULL,"::NeighborEl_ptr","DefaultEl"," returns the element specified as the default for this list","","",
    0,0,-1,0,NULL,cssElCFun_taList_NeighborEl__DefaultEl_stub,NULL},
  {NULL,"::NeighborEl_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,NULL,cssElCFun_taList_NeighborEl__Edit_El_stub,TA_taList_NeighborEl__Edit_El_MethArgs},
  {NULL,"::NeighborEl_ptr","FindName"," Find element with given name (item_nm) ","MENU USE_RVAL ARGC_1 LABEL_Find ","",
    0,2,1,0,NULL,cssElCFun_taList_NeighborEl__FindName_stub,TA_taList_NeighborEl__FindName_MethArgs},
  {NULL,"::NeighborEl_ptr","FindType"," find given type element (NULL = not here), sets idx","","",
    0,2,1,0,NULL,cssElCFun_taList_NeighborEl__FindType_stub,TA_taList_NeighborEl__FindType_MethArgs},
  {NULL,"::NeighborEl_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_NeighborEl__Pop_stub,NULL},
  {NULL,"::NeighborEl_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,0,NULL,cssElCFun_taList_NeighborEl__Peek_stub,NULL},
  {NULL,"::NeighborEl_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_NeighborEl__AddUniqNameOld_stub,TA_taList_NeighborEl__AddUniqNameOld_MethArgs},
  {NULL,"::NeighborEl_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,0,NULL,cssElCFun_taList_NeighborEl__LinkUniqNameOld_stub,TA_taList_NeighborEl__LinkUniqNameOld_MethArgs},
  NULL};
static int SomLayerSpec::* TA_SomLayerSpec_MbrOff;
static MemberDef_data TA_SomLayerSpec_MemberDef[]={
  {&TA_NeighborEl_List,NULL,"neighborhood"," neighborhood kernel function (determines activations around max unit)","","",
    *((ta_memb_ptr*)&(TA_SomLayerSpec_MbrOff=(int SomLayerSpec::*)(&SomLayerSpec::neighborhood))),0,NULL,0},
  {&TA_bool,NULL,"wrap"," whether to wrap the neighborhood function around the output layer or not","","",
    *((ta_memb_ptr*)&(TA_SomLayerSpec_MbrOff=(int SomLayerSpec::*)(&SomLayerSpec::wrap))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SomLayerSpec_KernelEllipse_MethArgs[]={
  {&TA_int,NULL,"half_width",""},
  {&TA_int,NULL,"half_height",""},
  {&TA_int,NULL,"ctr_x",""},
  {&TA_int,NULL,"ctr_y",""},
  NULL};
static MethodArgs_data TA_SomLayerSpec_KernelRectangle_MethArgs[]={
  {&TA_int,NULL,"width",""},
  {&TA_int,NULL,"height",""},
  {&TA_int,NULL,"ctr_x",""},
  {&TA_int,NULL,"ctr_y",""},
  NULL};
static MethodArgs_data TA_SomLayerSpec_KernelFromNetView_MethArgs[]={
  {&TA_NetView_ptr,NULL,"view",""},
  NULL};
static MethodArgs_data TA_SomLayerSpec_StepKernelActs_MethArgs[]={
  {&TA_float,NULL,"val","1.0"},
  NULL};
static MethodArgs_data TA_SomLayerSpec_LinearKernelActs_MethArgs[]={
  {&TA_float,NULL,"scale","1.0"},
  NULL};
static MethodArgs_data TA_SomLayerSpec_GaussianKernelActs_MethArgs[]={
  {&TA_float,NULL,"scale","1.0"},
  {&TA_float,NULL,"sigma","1.0"},
  NULL};
static MethodArgs_data TA_SomLayerSpec_WrapClip_MethArgs[]={
  {&TA_int,NULL,"coord",""},
  {&TA_int,NULL,"max_coord",""},
  NULL};
static MethodDef_data TA_SomLayerSpec_MethodDef[]={
  {&TA_void,NULL,"KernelEllipse"," make a kernel in the form of an elipse","MENU_BUTTON MENU_ON_Kernel ","",
    0,4,-1,0,NULL,cssElCFun_SomLayerSpec_KernelEllipse_stub,TA_SomLayerSpec_KernelEllipse_MethArgs},
  {&TA_void,NULL,"KernelRectangle"," make a kernel in the form of a rectangle","MENU_BUTTON ","",
    0,4,-1,0,NULL,cssElCFun_SomLayerSpec_KernelRectangle_stub,TA_SomLayerSpec_KernelRectangle_MethArgs},
  {&TA_void,NULL,"KernelFromNetView"," make kernel from selected units in netview, first unit is center, then other positions","MENU_BUTTON ","",
    0,1,-1,0,NULL,cssElCFun_SomLayerSpec_KernelFromNetView_stub,TA_SomLayerSpec_KernelFromNetView_MethArgs},
  {&TA_void,NULL,"StepKernelActs"," kernel activations are 1.0, others are 0","MENU_BUTTON MENU_ON_Acts ","",
    0,1,0,0,NULL,cssElCFun_SomLayerSpec_StepKernelActs_stub,TA_SomLayerSpec_StepKernelActs_MethArgs},
  {&TA_void,NULL,"LinearKernelActs"," assign acts as a linear function of distance from center","MENU_BUTTON ","",
    0,1,0,0,NULL,cssElCFun_SomLayerSpec_LinearKernelActs_stub,TA_SomLayerSpec_LinearKernelActs_MethArgs},
  {&TA_void,NULL,"GaussianKernelActs"," assign kernel acts as a Gaussian function of distance from center","MENU_BUTTON ","",
    0,2,0,0,NULL,cssElCFun_SomLayerSpec_GaussianKernelActs_stub,TA_SomLayerSpec_GaussianKernelActs_MethArgs},
  {&TA_int,NULL,"WrapClip"," does coordinate wrapping","","",
    0,2,-1,0,NULL,cssElCFun_SomLayerSpec_WrapClip_stub,TA_SomLayerSpec_WrapClip_MethArgs},
  NULL};
static int ZshConSpec::* TA_ZshConSpec_MbrOff;
static MemberDef_data TA_ZshConSpec_MemberDef[]={
  {&TA_bool,NULL,"soft_wt_bound"," soft weight bounding *(1-wt) for inc, *wt for dec","","",
    *((ta_memb_ptr*)&(TA_ZshConSpec_MbrOff=(int ZshConSpec::*)(&ZshConSpec::soft_wt_bound))),0,NULL,0},
  NULL};
static MethodArgs_data TA_ZshConSpec_C_Compute_dWt_MethArgs[]={
  {&TA_SoCon_ptr,NULL,"cn",""},
  {&TA_SoCon_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_ZshConSpec_Compute_dWt_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodDef_data TA_ZshConSpec_MethodDef[]={
  {&TA_void,NULL,"C_Compute_dWt","","","",
    1,4,-1,0,NULL,cssElCFun_ZshConSpec_C_Compute_dWt_stub,TA_ZshConSpec_C_Compute_dWt_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute the delta-weight change compute weight change according to Zsh function","","",
    1,2,-1,0,NULL,cssElCFun_ZshConSpec_Compute_dWt_stub,TA_ZshConSpec_Compute_dWt_MethArgs},
  NULL};
static int MaxInConSpec::* TA_MaxInConSpec_MbrOff;
static MemberDef_data TA_MaxInConSpec_MemberDef[]={
  {&TA_float,NULL,"k_scl"," strength of the soft-competitive learning component","","",
    *((ta_memb_ptr*)&(TA_MaxInConSpec_MbrOff=(int MaxInConSpec::*)(&MaxInConSpec::k_scl))),0,NULL,0},
  NULL};
static MethodArgs_data TA_MaxInConSpec_C_Compute_dWt_MethArgs[]={
  {&TA_SoCon_ptr,NULL,"cn",""},
  {&TA_SoCon_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  {&TA_Unit_ptr,NULL,"su",""},
  NULL};
static MethodArgs_data TA_MaxInConSpec_Compute_dWt_MethArgs[]={
  {&TA_Con_Group_ptr,NULL,"cg",""},
  {&TA_Unit_ptr,NULL,"ru",""},
  NULL};
static MethodDef_data TA_MaxInConSpec_MethodDef[]={
  {&TA_void,NULL,"C_Compute_dWt","","","",
    1,4,-1,0,NULL,cssElCFun_MaxInConSpec_C_Compute_dWt_stub,TA_MaxInConSpec_C_Compute_dWt_MethArgs},
  {&TA_void,NULL,"Compute_dWt"," compute the delta-weight change compute weight change according to Zsh function compute weight change according to approximate MaxIn function","","",
    1,2,-1,0,NULL,cssElCFun_MaxInConSpec_Compute_dWt_stub,TA_MaxInConSpec_Compute_dWt_MethArgs},
  NULL};

// Init Function


static bool ta_Init_so_done = false;

void ta_Init_so() {
  TypeDef* sbt;

  if(ta_Init_so_done) return;
  ta_Init_so_done = true;

  ta_Init_ta();
  ta_Init_pdp();
  ta_Init_ta_misc();
  ta_Init_iv_graphic();

  taMisc::in_init = true;

  taMisc::types.Add(&TA_SoCon);
    TAI_SoCon = new SoCon;
    TA_SoCon.AddParFormal(&TA_class);
    TA_SoCon.AddParCache(&TA_taBase);
    TA_SoCon.AddClassPar(&TA_Connection,0);
    tac_AddMembers(TA_SoCon,TA_SoCon_MemberDef);
  taMisc::types.Add(&TA_SoConSpec);
    TAI_SoConSpec = new SoConSpec;
    TA_SoConSpec.AddParFormal(&TA_class);
    TA_SoConSpec.AddParCache(&TA_taBase);
    TA_SoConSpec.AddClassPar(&TA_ConSpec,0);
    tac_AddEnum(TA_SoConSpec, "AvgInActSource", "", "", "", "", TA_SoConSpec_AvgInActSource);
    tac_AddMembers(TA_SoConSpec,TA_SoConSpec_MemberDef);
    tac_AddMethods(TA_SoConSpec,TA_SoConSpec_MethodDef);
  taMisc::types.Add(&TA_SoCon_Group);
    TAI_SoCon_Group = new SoCon_Group;
    TA_SoCon_Group.AddParFormal(&TA_class);
    TA_SoCon_Group.AddParCache(&TA_taBase);
    TA_SoCon_Group.AddClassPar(&TA_Con_Group,0);
    tac_AddMembers(TA_SoCon_Group,TA_SoCon_Group_MemberDef);
    tac_AddMethods(TA_SoCon_Group,TA_SoCon_Group_MethodDef);
  taMisc::types.Add(&TA_SoUnit);
    TAI_SoUnit = new SoUnit;
    TA_SoUnit.AddParFormal(&TA_class);
    TA_SoUnit.AddParCache(&TA_taBase);
    TA_SoUnit.AddClassPar(&TA_Unit,0);
    tac_AddMembers(TA_SoUnit,TA_SoUnit_MemberDef);
    tac_AddMethods(TA_SoUnit,TA_SoUnit_MethodDef);
  taMisc::types.Add(&TA_SoUnitSpec);
    TAI_SoUnitSpec = new SoUnitSpec;
    TA_SoUnitSpec.AddParFormal(&TA_class);
    TA_SoUnitSpec.AddParCache(&TA_taBase);
    TA_SoUnitSpec.AddClassPar(&TA_UnitSpec,0);
    tac_AddMethods(TA_SoUnitSpec,TA_SoUnitSpec_MethodDef);
  taMisc::types.Add(&TA_SoLayer);
    TAI_SoLayer = new SoLayer;
    TA_SoLayer.AddParFormal(&TA_class);
    TA_SoLayer.AddParCache(&TA_taBase);
    TA_SoLayer.AddClassPar(&TA_Layer,0);
    tac_AddMembers(TA_SoLayer,TA_SoLayer_MemberDef);
    tac_AddMethods(TA_SoLayer,TA_SoLayer_MethodDef);
  taMisc::types.Add(&TA_SoLayerSpec);
    TAI_SoLayerSpec = new SoLayerSpec;
    TA_SoLayerSpec.AddParFormal(&TA_class);
    TA_SoLayerSpec.AddParCache(&TA_taBase);
    TA_SoLayerSpec.AddClassPar(&TA_LayerSpec,0);
    tac_AddEnum(TA_SoLayerSpec, "NetInType", " type of netinput measure unit has", "", "", "", TA_SoLayerSpec_NetInType);
    tac_AddMembers(TA_SoLayerSpec,TA_SoLayerSpec_MemberDef);
    tac_AddMethods(TA_SoLayerSpec,TA_SoLayerSpec_MethodDef);
  taMisc::types.Add(&TA_const_SoCon);
    TA_const_SoCon.AddParents(&TA_const, &TA_SoCon);
  taMisc::types.Add(&TA_const_SoCon_ref);
    TA_const_SoCon_ref.AddParents(&TA_const_SoCon);
  taMisc::types.Add(&TA_SoCon_ptr);
    TA_SoCon_ptr.AddParents(&TA_SoCon);
  taMisc::types.Add(&TA_SoCon_Group_ptr);
    TA_SoCon_Group_ptr.AddParents(&TA_SoCon_Group);
  taMisc::types.Add(&TA_const_SoConSpec);
    TA_const_SoConSpec.AddParents(&TA_const, &TA_SoConSpec);
  taMisc::types.Add(&TA_const_SoConSpec_ref);
    TA_const_SoConSpec_ref.AddParents(&TA_const_SoConSpec);
  taMisc::types.Add(&TA_const_SoCon_Group);
    TA_const_SoCon_Group.AddParents(&TA_const, &TA_SoCon_Group);
  taMisc::types.Add(&TA_const_SoCon_Group_ref);
    TA_const_SoCon_Group_ref.AddParents(&TA_const_SoCon_Group);
  taMisc::types.Add(&TA_const_SoUnitSpec);
    TA_const_SoUnitSpec.AddParents(&TA_const, &TA_SoUnitSpec);
  taMisc::types.Add(&TA_const_SoUnitSpec_ref);
    TA_const_SoUnitSpec_ref.AddParents(&TA_const_SoUnitSpec);
  taMisc::types.Add(&TA_ThreshLinSoUnitSpec);
    TAI_ThreshLinSoUnitSpec = new ThreshLinSoUnitSpec;
    TA_ThreshLinSoUnitSpec.AddParFormal(&TA_class);
    TA_ThreshLinSoUnitSpec.AddParCache(&TA_taBase);
    TA_ThreshLinSoUnitSpec.AddClassPar(&TA_SoUnitSpec,0);
    tac_AddMembers(TA_ThreshLinSoUnitSpec,TA_ThreshLinSoUnitSpec_MemberDef);
    tac_AddMethods(TA_ThreshLinSoUnitSpec,TA_ThreshLinSoUnitSpec_MethodDef);
  taMisc::types.Add(&TA_const_SoUnit);
    TA_const_SoUnit.AddParents(&TA_const, &TA_SoUnit);
  taMisc::types.Add(&TA_const_ThreshLinSoUnitSpec);
    TA_const_ThreshLinSoUnitSpec.AddParents(&TA_const, &TA_ThreshLinSoUnitSpec);
  taMisc::types.Add(&TA_const_SoUnit_ref);
    TA_const_SoUnit_ref.AddParents(&TA_const_SoUnit);
  taMisc::types.Add(&TA_const_ThreshLinSoUnitSpec_ref);
    TA_const_ThreshLinSoUnitSpec_ref.AddParents(&TA_const_ThreshLinSoUnitSpec);
  taMisc::types.Add(&TA_SoUnit_ptr);
    TA_SoUnit_ptr.AddParents(&TA_SoUnit);
  taMisc::types.Add(&TA_SoLayer_ptr);
    TA_SoLayer_ptr.AddParents(&TA_SoLayer);
  taMisc::types.Add(&TA_const_SoLayerSpec);
    TA_const_SoLayerSpec.AddParents(&TA_const, &TA_SoLayerSpec);
  taMisc::types.Add(&TA_const_SoLayerSpec_ref);
    TA_const_SoLayerSpec_ref.AddParents(&TA_const_SoLayerSpec);
  taMisc::types.Add(&TA_SpecPtr_SoLayerSpec_);
    TAI_SpecPtr_SoLayerSpec_ = new SpecPtr<SoLayerSpec>;
    TA_SpecPtr_SoLayerSpec_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_SpecPtr_SoLayerSpec_.AddParCache(&TA_taBase);
    TA_SpecPtr_SoLayerSpec_.AddClassPar(&TA_SpecPtr,0);
    sbt = new TypeDef("SoLayerSpec_ptr", 1, 1, 0);
    sbt->AddParents(&TA_SoLayerSpec);
    TA_SpecPtr_SoLayerSpec_.sub_types.Add(sbt);
    tac_AddMembers(TA_SpecPtr_SoLayerSpec_,TA_SpecPtr_SoLayerSpec__MemberDef);
    tac_AddMethods(TA_SpecPtr_SoLayerSpec_,TA_SpecPtr_SoLayerSpec__MethodDef);
  taMisc::types.Add(&TA_SoLayerSpec_SPtr);
    TAI_SoLayerSpec_SPtr = new SoLayerSpec_SPtr;
    TA_SoLayerSpec_SPtr.AddParFormal(&TA_class);
    TA_SoLayerSpec_SPtr.AddParCache(&TA_taBase);
    TA_SoLayerSpec_SPtr.AddClassPar(&TA_SpecPtr_SoLayerSpec_,0);
  taMisc::types.Add(&TA_const_SoLayerSpec_SPtr);
    TA_const_SoLayerSpec_SPtr.AddParents(&TA_const, &TA_SoLayerSpec_SPtr);
  taMisc::types.Add(&TA_const_SoLayer);
    TA_const_SoLayer.AddParents(&TA_const, &TA_SoLayer);
  taMisc::types.Add(&TA_const_SoLayerSpec_SPtr_ref);
    TA_const_SoLayerSpec_SPtr_ref.AddParents(&TA_const_SoLayerSpec_SPtr);
  taMisc::types.Add(&TA_const_SoLayer_ref);
    TA_const_SoLayer_ref.AddParents(&TA_const_SoLayer);
  taMisc::types.Add(&TA_SoTrial);
    TAI_SoTrial = new SoTrial;
    TA_SoTrial.AddParFormal(&TA_class);
    TA_SoTrial.AddParCache(&TA_taBase);
    TA_SoTrial.AddClassPar(&TA_TrialProcess,0);
    tac_AddMethods(TA_SoTrial,TA_SoTrial_MethodDef);
  taMisc::types.Add(&TA_const_SoTrial);
    TA_const_SoTrial.AddParents(&TA_const, &TA_SoTrial);
  taMisc::types.Add(&TA_HebbConSpec);
    TAI_HebbConSpec = new HebbConSpec;
    TA_HebbConSpec.AddParFormal(&TA_class);
    TA_HebbConSpec.AddParCache(&TA_taBase);
    TA_HebbConSpec.AddClassPar(&TA_SoConSpec,0);
    tac_AddMethods(TA_HebbConSpec,TA_HebbConSpec_MethodDef);
  taMisc::types.Add(&TA_const_SoTrial_ref);
    TA_const_SoTrial_ref.AddParents(&TA_const_SoTrial);
  taMisc::types.Add(&TA_const_HebbConSpec);
    TA_const_HebbConSpec.AddParents(&TA_const, &TA_HebbConSpec);
  taMisc::types.Add(&TA_const_HebbConSpec_ref);
    TA_const_HebbConSpec_ref.AddParents(&TA_const_HebbConSpec);
  taMisc::types.Add(&TA_SoftMaxLayerSpec);
    TAI_SoftMaxLayerSpec = new SoftMaxLayerSpec;
    TA_SoftMaxLayerSpec.AddParFormal(&TA_class);
    TA_SoftMaxLayerSpec.AddParCache(&TA_taBase);
    TA_SoftMaxLayerSpec.AddClassPar(&TA_SoLayerSpec,0);
    tac_AddMembers(TA_SoftMaxLayerSpec,TA_SoftMaxLayerSpec_MemberDef);
  taMisc::types.Add(&TA_ClConSpec);
    TAI_ClConSpec = new ClConSpec;
    TA_ClConSpec.AddParFormal(&TA_class);
    TA_ClConSpec.AddParCache(&TA_taBase);
    TA_ClConSpec.AddClassPar(&TA_SoConSpec,0);
    tac_AddMethods(TA_ClConSpec,TA_ClConSpec_MethodDef);
  taMisc::types.Add(&TA_const_SoftMaxLayerSpec);
    TA_const_SoftMaxLayerSpec.AddParents(&TA_const, &TA_SoftMaxLayerSpec);
  taMisc::types.Add(&TA_SoftClConSpec);
    TAI_SoftClConSpec = new SoftClConSpec;
    TA_SoftClConSpec.AddParFormal(&TA_class);
    TA_SoftClConSpec.AddParCache(&TA_taBase);
    TA_SoftClConSpec.AddClassPar(&TA_SoConSpec,0);
    tac_AddMethods(TA_SoftClConSpec,TA_SoftClConSpec_MethodDef);
  taMisc::types.Add(&TA_const_SoftMaxLayerSpec_ref);
    TA_const_SoftMaxLayerSpec_ref.AddParents(&TA_const_SoftMaxLayerSpec);
  taMisc::types.Add(&TA_ClLayerSpec);
    TAI_ClLayerSpec = new ClLayerSpec;
    TA_ClLayerSpec.AddParFormal(&TA_class);
    TA_ClLayerSpec.AddParCache(&TA_taBase);
    TA_ClLayerSpec.AddClassPar(&TA_SoLayerSpec,0);
  taMisc::types.Add(&TA_SoftClUnitSpec);
    TAI_SoftClUnitSpec = new SoftClUnitSpec;
    TA_SoftClUnitSpec.AddParFormal(&TA_class);
    TA_SoftClUnitSpec.AddParCache(&TA_taBase);
    TA_SoftClUnitSpec.AddClassPar(&TA_SoUnitSpec,0);
    tac_AddMembers(TA_SoftClUnitSpec,TA_SoftClUnitSpec_MemberDef);
    tac_AddMethods(TA_SoftClUnitSpec,TA_SoftClUnitSpec_MethodDef);
  taMisc::types.Add(&TA_const_ClConSpec);
    TA_const_ClConSpec.AddParents(&TA_const, &TA_ClConSpec);
  taMisc::types.Add(&TA_const_ClConSpec_ref);
    TA_const_ClConSpec_ref.AddParents(&TA_const_ClConSpec);
  taMisc::types.Add(&TA_const_SoftClConSpec);
    TA_const_SoftClConSpec.AddParents(&TA_const, &TA_SoftClConSpec);
  taMisc::types.Add(&TA_const_SoftClConSpec_ref);
    TA_const_SoftClConSpec_ref.AddParents(&TA_const_SoftClConSpec);
  taMisc::types.Add(&TA_const_ClLayerSpec);
    TA_const_ClLayerSpec.AddParents(&TA_const, &TA_ClLayerSpec);
  taMisc::types.Add(&TA_const_ClLayerSpec_ref);
    TA_const_ClLayerSpec_ref.AddParents(&TA_const_ClLayerSpec);
  taMisc::types.Add(&TA_const_SoftClUnitSpec);
    TA_const_SoftClUnitSpec.AddParents(&TA_const, &TA_SoftClUnitSpec);
  taMisc::types.Add(&TA_const_SoftClUnitSpec_ref);
    TA_const_SoftClUnitSpec_ref.AddParents(&TA_const_SoftClUnitSpec);
  taMisc::types.Add(&TA_SoftClLayerSpec);
    TAI_SoftClLayerSpec = new SoftClLayerSpec;
    TA_SoftClLayerSpec.AddParFormal(&TA_class);
    TA_SoftClLayerSpec.AddParCache(&TA_taBase);
    TA_SoftClLayerSpec.AddClassPar(&TA_SoLayerSpec,0);
  taMisc::types.Add(&TA_const_SoftClLayerSpec);
    TA_const_SoftClLayerSpec.AddParents(&TA_const, &TA_SoftClLayerSpec);
  taMisc::types.Add(&TA_SomUnitSpec);
    TAI_SomUnitSpec = new SomUnitSpec;
    TA_SomUnitSpec.AddParFormal(&TA_class);
    TA_SomUnitSpec.AddParCache(&TA_taBase);
    TA_SomUnitSpec.AddClassPar(&TA_SoUnitSpec,0);
    tac_AddMethods(TA_SomUnitSpec,TA_SomUnitSpec_MethodDef);
  taMisc::types.Add(&TA_const_SoftClLayerSpec_ref);
    TA_const_SoftClLayerSpec_ref.AddParents(&TA_const_SoftClLayerSpec);
  taMisc::types.Add(&TA_const_SomUnitSpec);
    TA_const_SomUnitSpec.AddParents(&TA_const, &TA_SomUnitSpec);
  taMisc::types.Add(&TA_const_SomUnitSpec_ref);
    TA_const_SomUnitSpec_ref.AddParents(&TA_const_SomUnitSpec);
  taMisc::types.Add(&TA_NeighborEl);
    TAI_NeighborEl = new NeighborEl;
    TA_NeighborEl.AddParFormal(&TA_class);
    TA_NeighborEl.AddParCache(&TA_taBase);
    TA_NeighborEl.AddClassPar(&TA_taOBase,0);
    tac_AddMembers(TA_NeighborEl,TA_NeighborEl_MemberDef);
  taMisc::types.Add(&TA_taList_NeighborEl_);
    TAI_taList_NeighborEl_ = new taList<NeighborEl>;
    TA_taList_NeighborEl_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_NeighborEl_.AddParCache(&TA_taBase);
    TA_taList_NeighborEl_.AddClassPar(&TA_taList,0);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_NeighborEl_.sub_types.Add(sbt);
    sbt = new TypeDef("NeighborEl_ptr", 1, 1, 0);
    sbt->AddParents(&TA_NeighborEl);
    TA_taList_NeighborEl_.sub_types.Add(sbt);
    tac_AddMethods(TA_taList_NeighborEl_,TA_taList_NeighborEl__MethodDef);
  taMisc::types.Add(&TA_const_NeighborEl);
    TA_const_NeighborEl.AddParents(&TA_const, &TA_NeighborEl);
  taMisc::types.Add(&TA_const_NeighborEl_ref);
    TA_const_NeighborEl_ref.AddParents(&TA_const_NeighborEl);
  taMisc::types.Add(&TA_NeighborEl_List);
    TAI_NeighborEl_List = new NeighborEl_List;
    TA_NeighborEl_List.AddParFormal(&TA_class);
    TA_NeighborEl_List.AddParCache(&TA_taBase);
    TA_NeighborEl_List.AddClassPar(&TA_taList_NeighborEl_,0);
  taMisc::types.Add(&TA_const_NeighborEl_List);
    TA_const_NeighborEl_List.AddParents(&TA_const, &TA_NeighborEl_List);
  taMisc::types.Add(&TA_const_NeighborEl_List_ref);
    TA_const_NeighborEl_List_ref.AddParents(&TA_const_NeighborEl_List);
  taMisc::types.Add(&TA_SomLayerSpec);
    TAI_SomLayerSpec = new SomLayerSpec;
    TA_SomLayerSpec.AddParFormal(&TA_class);
    TA_SomLayerSpec.AddParCache(&TA_taBase);
    TA_SomLayerSpec.AddClassPar(&TA_SoLayerSpec,0);
    tac_AddMembers(TA_SomLayerSpec,TA_SomLayerSpec_MemberDef);
    tac_AddMethods(TA_SomLayerSpec,TA_SomLayerSpec_MethodDef);
  taMisc::types.Add(&TA_const_SomLayerSpec);
    TA_const_SomLayerSpec.AddParents(&TA_const, &TA_SomLayerSpec);
  taMisc::types.Add(&TA_const_SomLayerSpec_ref);
    TA_const_SomLayerSpec_ref.AddParents(&TA_const_SomLayerSpec);
  taMisc::types.Add(&TA_ZshConSpec);
    TAI_ZshConSpec = new ZshConSpec;
    TA_ZshConSpec.AddParFormal(&TA_class);
    TA_ZshConSpec.AddParCache(&TA_taBase);
    TA_ZshConSpec.AddClassPar(&TA_SoConSpec,0);
    tac_AddMembers(TA_ZshConSpec,TA_ZshConSpec_MemberDef);
    tac_AddMethods(TA_ZshConSpec,TA_ZshConSpec_MethodDef);
  taMisc::types.Add(&TA_const_ZshConSpec);
    TA_const_ZshConSpec.AddParents(&TA_const, &TA_ZshConSpec);
  taMisc::types.Add(&TA_const_ZshConSpec_ref);
    TA_const_ZshConSpec_ref.AddParents(&TA_const_ZshConSpec);
  taMisc::types.Add(&TA_MaxInConSpec);
    TAI_MaxInConSpec = new MaxInConSpec;
    TA_MaxInConSpec.AddParFormal(&TA_class);
    TA_MaxInConSpec.AddParCache(&TA_taBase);
    TA_MaxInConSpec.AddClassPar(&TA_ZshConSpec,0);
    tac_AddMembers(TA_MaxInConSpec,TA_MaxInConSpec_MemberDef);
    tac_AddMethods(TA_MaxInConSpec,TA_MaxInConSpec_MethodDef);
  taMisc::types.Add(&TA_const_MaxInConSpec);
    TA_const_MaxInConSpec.AddParents(&TA_const, &TA_MaxInConSpec);
  taMisc::types.Add(&TA_const_MaxInConSpec_ref);
    TA_const_MaxInConSpec_ref.AddParents(&TA_const_MaxInConSpec);


  taMisc::in_init = false;
} 
