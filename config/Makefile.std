#####################################
# everything below here is standard..
#

# This makefile requires the availability of pattern rules to work properly
# though some are defined in suffix form, and you might be able to get by
# with just suffix rules if you don't mind recompiling things twice...

# the Makefile.in must supply:

# LIBS		libraries to include for the executable
# DEBUGLIBS	debugging versions of libraries to include for the executable
# EXTERNAL_LIBS needed libraries external to this directory
# PROJNAME	name of the project (for typea scanning)
# PROJDIR	name of the directory included (default is PROJNAME)
# PDPDIR	directory path to pdp library stuff (default is PROJNAME)
# VPATH		directory path to source code (default is $(TOP)/$(PROJDIR))
# EXE		name of the executable (default is PROJNAME)
# LIB		name of the library (default is libPROJNAME.LIB_EXT)
# IN_FLAGS	misc compilation flags
# MAKETA_FLAGS	flags for the maketa program
# TAHEADS	header files to be processed by typea
# HEADS		all of the header files (include TAHEADS & _TA_xxx_.h, if relevant)
# SRCS		all source files
# OBJS		all object files for the library 
# EXEOBJS	all object files for the executable
# DEPS		dependency files
# default	what to make by default (Lib, Bin, optLib, optBin)

# 'cmp' based touching of automatically-generated files:
# the .hx and .ccx files are automatically generated files that are produced
# whenever their source (typically a .y file or from 'maketa') is touched
# however, they can produce the same result even if the source has changed
# so they are compared with the corresponding .h or .cc file before these
# are updated with the new .hx or .ccx version (nothing is touched if not
# different).  This saves some compile time..

.SUFFIXES: .cc .hx .ccx .d

chkcpu:
	@if [ -z "$(CPU)" ];\
	then (echo "ERROR: CPU variable must be set!"; exit 1;) \
	fi

BasicFiles:	chkcpu
	@if [ ! -f NoMakeTA ];\
	then (if [ ! -f $(PROJNAME)_TA_type.h ]; then $(MAKE) force_ta ; fi;\
	if [ ! -f $(CPU)/$(PROJNAME)_TA.d -a ! -f $(PROJNAME)_TA.d ]; \
	then $(MAKE) depend ; fi; ) fi

lib:	Lib

Lib:	BasicFiles
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU); $(MAKE)  $(LIB) )\
	else $(MAKE)  $(LIB); fi

lib_pass2: LibPass2

LibPass2: BasicFiles
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU); $(MAKE)  LibPass2_impl )\
	else $(MAKE)  LibPass2_impl; fi

bin:	Bin

Bin:	BasicFiles
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU); $(MAKE)  $(EXE) )\
	else $(MAKE)  $(EXE); fi

re_bin:	ReBin

ReBin:	BasicFiles
	@if [ -d $(CPU) ]; then ($(CD) $(CPU); $(RM) $(EXE);$(MAKE)  $(EXE) )\
	else ($(RM) $(EXE); $(MAKE)  $(EXE)); fi

re_lib:	ReLib

ReLib:	BasicFiles
	@if [ -d $(CPU) ]; then ($(CD) $(CPU); $(RM) $(LIB);$(MAKE)  Lib )\
	else ($(RM) $(LIB); $(MAKE)  Lib); fi

opt_lib:     optLib

optLib:	BasicFiles
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU);	$(MAKE) optLib_impl)\
	else $(MAKE) optLib_impl; fi

opt_bin:     optBin

optBin:	BasicFiles
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU);	$(MAKE) optBin_impl)\
	else $(MAKE) optBin_impl; fi

opt_re_bin:  optReBin

optReBin: BasicFiles
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU);	$(RM) $(EXE); $(MAKE) optBin_impl)\
	else ($(RM) $(EXE); $(MAKE)  optBin_impl); fi

optBin_impl:
	$(MAKE)  $(EXE) 'OPT_DEBUG=$(OPT_FLAGS)'

optLib_impl:
	$(MAKE)  $(LIB) 'OPT_DEBUG=$(OPT_FLAGS)'

dbg_lib:	 dbgLib

dbgLib:	BasicFiles
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU);	$(MAKE) dbgLib_impl)\
	else $(MAKE) dbgLib_impl; fi

dbg_bin:     dbgBin

dbgBin:	BasicFiles
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU);	$(MAKE) dbgBin_impl)\
	else $(MAKE) dbgBin_impl; fi

dbgBin_impl:
	$(MAKE)  $(EXE) 'OPT_DEBUG=$(DEBUG_FLAGS)'


iv_dbg_bin:	 ivdbgBin

ivdbgBin:	BasicFiles
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU);	$(MAKE) ivdbgBin_impl)\
	else $(MAKE) ivdbgBin_impl; fi

ivdbgBin_impl:
	- $(RM) $(EXE)
	$(MAKE)  $(EXE) 'OPT_DEBUG=$(DEBUG_FLAGS)' 'IV_LIB=-lIVd'

dbgLib_impl:
	$(MAKE)  $(LIB) 'OPT_DEBUG=$(DEBUG_FLAGS)'

proof_bin:	 proofBin

proofBin:	BasicFiles
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU);\
	$(MAKE)  proofBin_impl)\
	else $(MAKE)  proofBin_impl; fi

proofBin_impl:
	$(MAKE)  proof$(EXE) 'OPT_DEBUG=$(DEBUG_FLAGS)'

dist_bin:	 distBin

distBin:	BasicFiles
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU);\
	$(MAKE)  distBin_impl)\
	else $(MAKE)  distBin_impl; fi

distBin_impl:	      
	@echo "Making distribution Binary: " $(DIST_EXE) " of bin: " $(EXE)
	@echo $(DIST_EXE) " is now the default executable produced! "
#	- $(CP) $(EXE) $(DIST_EXE)

strip_bin:	stripBin

stripBin:	BasicFiles
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU); $(MAKE)  stripBin_impl)\
	else $(MAKE)  stripBin_impl; fi

stripBin_impl:	      chkcpu 
	@echo "stripping binary: " $(EXE)
	- strip $(EXE)

proof$(EXE): $(EXEOBJS) $(VT_INST_OBJ) $(TI_INST_OBJ)
	$(PROOF) $(BIN_CXX)  -o $@ $(FLAGS) $(IN_FLAGS) $(LDIRS) $(IDIRS) $(EXEOBJS) $(VT_INST_OBJ)\
		$(TI_INST_OBJ) $(LIBS)

debug_bin:	DebugBin

DebugBin:	BasicFiles
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU); $(MAKE)  debug$(EXE) )\
	else $(MAKE)  debug$(EXE); fi

re_debug_bin:	      ReDebugBin

ReDebugBin:	BasicFiles
	@if [ -d $(CPU) ]; then ($(CD) $(CPU); $(RM) $(EXE); $(MAKE)  debug$(EXE) )\
	else ($(RM) $(EXE); $(MAKE)  debug$(EXE)); fi

re_opt_bin:  ReOptBin

ReOptBin:	BasicFiles
	@if [ -d $(CPU) ]; then ($(CD) $(CPU); $(RM) $(EXE); $(MAKE)  opt$(EXE) )\
	else ($(RM) $(EXE); $(MAKE)  opt$(EXE));	fi

.cc.d:
	@$(DEP_CXX) $(DEP_FLAG) $(IDIRS) $(CCFLAGS) $< > $(MAKEDEP_TMP_FILE)
	@$(CAT) `echo $@ | $(SED) 's/\.d/.u/g'`  | $(SED) 's/$*\.o/& $@/g' > $@
	@$(RM)  `echo $@ | $(SED) 's/\.d/.u/g'`

.c.d:
	@$(DEP_CC) $(DEP_FLAG) $(IDIRS) $(CCFLAGS) $< > $(MAKEDEP_TMP_FILE)
	@$(CAT) `echo $@ | $(SED) 's/\.d/.u/g'`  | $(SED) 's/$*\.o/& $@/g' > $@
	@$(RM)  `echo $@ | $(SED) 's/\.d/.u/g'`

.c.o:
	@echo ""
	@echo  "Compiling: " $< "on"  `hostname | awk -F. '{printf $$1}'` in directory `pwd`  at `date`
	$(CC) -o $@ $(IDIRS) $(CFLAGS) -c $<

.cc.o:
	@echo ""
	@echo  "Compiling: " $< "on"  `hostname | awk -F. '{printf $$1}'`  in directory `pwd` at `date`
	$(CXX) -o $@ $(IDIRS) $(CCFLAGS) -c $< 

# _vt is the virtual table instantiation file that includes all headers
# and is compiled with the "build external vtables" flag
# (ie. cfront +e1).
# this file is typically named $(PROJNAME)_vt.cc (or empty if not used).
$(VT_INST_FILE).o:	$(VT_INST_FILE).cc
	$(CXX) -o $@ $(IDIRS) $(TA_CCFLAGS) $(VT_INST_FLAG) -c $< 

# why do we do this here?, it always erases any vt already there!
# $(VT_INST_FILE).cc:
# 	@echo "Creating a new virtual template instantiation file"
# 	@echo "// -*- C++ -*-" > $(VPATH)/$@
# 	@echo "// virtual table instantiation file" >> $(VPATH)/$@
# 	@echo " " >> $(VPATH)/$@
# 	@echo "// please include relevant files here.. " >> $(VPATH)/$@

# _ti is the template instantiation file that explicitly instantiates
# all templates used in the software. this is required by g++2.6.3
# this file is typically named $(PROJNAME)_ti.cc (or empty if not used).
$(TI_INST_FILE).o:	$(TI_INST_FILE).cc
	$(CXX) -o $@ $(IDIRS) $(CCFLAGS) $(TI_INST_FLAG) -c $< 

$(TI_INST_FILE).cc:
	echo "// -*- C++ -*-" > $(VPATH)/$@
	echo "// template instantiation file" >> $(VPATH)/$@
	echo " " >> $(VPATH)/$@
	echo "// please include relevant files and instantiate templates here.. " >> $(VPATH)/$@

# these two pattern dependencies are necessary to make the files in the
# source directory depend on auto-generated files in the local directory
$(SRC_INC)/%.hx : %.hx
	@echo ".hx reduction"

$(VPATH)/%.hx : %.hx
	@echo ".hx reduction"

.hx.h:
	@- $(CMP) $(<F) $(@F) || ($(CP) $(<F) $(@F))
	@- $(CMP) $(<F) $(VPATH)/$(<F) || ($(CP) $(<F) $(VPATH)/$(<F))
	@- $(CMP) $(@F) $(VPATH)/$(@F) || ($(CP) $(@F) $(VPATH)/$(@F))

.ccx.cc:
	@- $(CMP) $(<F) $(@F) || ($(CP) $(<F) $(@F))
	@- $(CMP) $(<F) $(VPATH)/$(<F) || ($(CP) $(<F) $(VPATH)/$(<F))
	@- $(CMP) $(@F) $(VPATH)/$(@F) || ($(CP) $(@F) $(VPATH)/$(@F))

# cancel the direct route
.y.o:

.y.cc:
	$(YACC) $(YFLAGS) $<
	$(MV) y.tab.c $(*F).cc
	$(MV) y.tab.h $(*F).hx
	- $(MV) y.output $(*F).output
	$(SED) -e "s/union/struct/g" $(*F).cc >ttt.uts;\
	$(RM) $(*F).cc; $(MV) ttt.uts $(*F).cc;
	$(SED) -e "s/union/struct/g" $(*F).hx >ttt.uts;\
	 $(RM) $(*F).hx; $(MV) ttt.uts $(*F).hx;
	- $(CP) $(*F).cc $(VPATH)/$(*F).cc
	- $(CP) $(*F).hx $(VPATH)/$(*F).hx

$(LIB): $(OBJS) $(TI_INST_OBJ)
	$(RM) $@
	@- $(AR_PRE_CMD) $(OBJS)
	$(AR_CMD) $@ $(OBJS) $(TI_INST_OBJ)
	- $(RANLIB_CMD) $@
	- if [ $(LIB_EXT) != a ]; then $(MV) lib_include/$@ lib_include/$@.OLD.$$$$; fi
	$(CP) $@ lib_include
	- $(RANLIB_CMD) -t lib_include/$@
	for i in $(HEADS);\
	  do $(CMP) $(VPATH)/$$i lib_include/$$i || $(CP) $(VPATH)/$$i lib_include;\
	done

LibPass2_impl: $(OBJS) $(TI_INST_OBJ)
	$(LIB_PASS2_CMD)

clean_libs:	chkcpu 
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU); $(MAKE)  clean_libs_impl )\
	else $(MAKE)  clean_libs_impl; fi

clean_libs_impl: chkcpu clean_old_libs_impl
	- $(RM) lib*.a lib*.s[ol]* lib_include/lib*.a \
	lib_include/lib*.s[ol]*

clean_old_libs:	chkcpu 
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU); $(MAKE)  clean_old_libs_impl )\
	else $(MAKE)  clean_old_libs_impl; fi

clean_old_libs_impl:  chkcpu 
	- $(RM) lib_include/lib*.OLD*

new_lib_h:	chkcpu 
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU); $(MAKE)  new_lib_h_impl )\
	else $(MAKE)  new_lib_h_impl; fi

new_lib_h_impl:	      chkcpu 
	for i in $(HEADS);\
	  do $(CMP) $(VPATH)/$$i lib_include/$$i || $(CP) $(VPATH)/$$i lib_include;\
	done

$(EXE): $(EXEOBJS) $(VT_INST_OBJ) $(TI_INST_OBJ) $(EXE_DEPENDS)
	@echo ""
	@echo "Compiling: " $(EXE) "on"  `hostname | awk -F. '{printf $$1}'`  in directory `pwd` at `date`
	- $(RM) -rf ptrepository
	$(BIN_CXX) -o $@ $(CCFLAGS) $(LDIRS) $(IDIRS) $(EXEOBJS) $(VT_INST_OBJ) \
		$(TI_INST_OBJ) $(LIBS)

debug$(EXE): $(EXEOBJS) $(VT_INST_OBJ) $(TI_INST_OBJ) $(EXE_DEPENDS)
	@echo ""
	@echo "Compiling: " Debug version $(EXE) "on" `hostname | awk -F. '{printf $$1}'`  in directory `pwd` at `date`
	$(BIN_CXX) -o $(EXE) $(CCFLAGS) $(LDIRS) $(IDIRS) $(EXEOBJS) $(VT_INST_OBJ) \
		$(TI_INST_OBJ) $(DEBUGLIBS)

ta:		chkcpu 
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU);	$(MAKE)  ta_impl )\
	else $(MAKE)  ta_impl; fi

ta_impl: $(VPATH)/$(PROJNAME)_TA_type.h $(PROJNAME)_TA.cc $(VPATH)/$(PROJNAME)_TA_inst.h
	- touch $(OBJS)
	- rm  $(PROJNAME)_TA.o

force_ta: chkcpu 
	@if [ ! -f NoMakeTA ];\
	then ( if [ -d $(CPU) ]; then ( $(CD) $(CPU); $(MAKE)  force_ta_impl )\
	else $(MAKE)  force_ta_impl; fi); fi

force_ta_impl:	      chkcpu 
	- $(MAKETA) $(MAKETA_FLAGS_XX) $(IDIRS) $(PROJNAME) $(TAHEADS)
	- $(CP) $(PROJNAME)_TA_type.hx $(PROJNAME)_TA.ccx $(PROJNAME)_TA_inst.hx $(VPATH)
	- $(MAKE)  $(PROJNAME)_TA_type.h
	- $(MAKE)  $(PROJNAME)_TA_inst.h
	- $(MAKE)  $(PROJNAME)_TA.cc

no_ta:	chkcpu 
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU);	$(MAKE)  no_ta_impl )\
	else $(MAKE)  no_ta_impl; fi

no_ta_impl:  chkcpu 
	- touch $(VPATH)/$(PROJNAME)_TA_type.hx $(VPATH)/$(PROJNAME)_TA.ccx $(VPATH)/$(PROJNAME)_TA_inst.hx
	- touch $(PROJNAME)_TA_type.hx $(PROJNAME)_TA.ccx $(PROJNAME)_TA_inst.hx

$(PROJNAME)_TA_type.hx $(PROJNAME)_TA.ccx $(PROJNAME)_TA_inst.hx: $(TAHEADS)
	$(MAKETA) $(MAKETA_FLAGS_XX) $(IDIRS) $(PROJNAME) $(TAHEADS)
	- $(CP) $(PROJNAME)_TA_type.hx $(PROJNAME)_TA.ccx $(PROJNAME)_TA_inst.hx $(VPATH)

# this has to compile without optimization or symbols
$(PROJNAME)_TA.o: 	$(PROJNAME)_TA.cc
	@echo ""
	@echo "Compiling: " $< on  `hostname | awk -F. '{printf $$1}'` in directory `pwd`  in directory `pwd` at `date`
	$(CXX) -o $(PROJNAME)_TA.o $(IDIRS) $(TA_CCFLAGS) -c $(PROJNAME)_TA.cc 

src_tar:	chkcpu 
	@echo " "
	@echo "** Making source distribution tar file **"
	@echo " "
	- $(RM) $(PROJNAME)_src.tar*
	$(CD) ..;\
	$(TAR) -cf $(PROJDIR)/$(PROJNAME)_src.tar.gz -z --ignore-failed-read \
		$(PROJDIR)/*.h $(PROJDIR)/*.hx $(PROJDIR)/*.ccx \
		$(PROJDIR)/*.cc $(PROJDIR)/*.css $(PROJDIR)/Makefile.in \
		$(PROJDIR)/Makefile $(PROJDIR)/*.def
	@echo " "
	@echo "** Make $@ successfully completed! **"
	@echo " "

bin_tar:	chkcpu 
	@echo " "
	@echo "** Making binary distribution tar file **"
	@echo " "
	- $(RM) $(PROJNAME)_bin_$(CPU).tar.gz
	$(CD) ..;\
	$(TAR) -cf $(PROJDIR)/$(PROJNAME)_bin_$(CPU).tar.gz -z --ignore-failed-read \
		$(PROJDIR)/$(CPU)/$(EXE) $(PROJDIR)/*.def
	@echo " "
	@echo "** Make $@ successfully completed! **"
	@echo " "

install_bin:	chkcpu
	@echo " "
	@echo "** Make links in BIN_DIR for executable ($@) **"
	@echo " "
	$(CD) $(BIN_DIR);\
	$(RM) $(EXE);\
	$(LN) $(VPATH)/$(CPU)/$(EXE) $(EXE)
	@echo " "
	@echo "** Make $@ successfully completed! **"
	@echo " "

install_dbg_bin:	chkcpu
	@echo " "
	@echo "** Make links in BIN_DIR for executable with dbg_ prefix ($@) **"
	@echo " "
	$(CD) $(BIN_DIR);\
	$(RM) dbg_$(EXE);\
	$(LN) $(VPATH)/$(CPU)/$(EXE) dbg_$(EXE)
	@echo " "
	@echo "** Make $@ successfully completed! **"
	@echo " "

backup:		chkcpu 
	@echo "Backing up the directory"
	-@ $(MKDIR) oldcode
	-@ $(MKDIR) `date "+oldcode/%H-%d-%h-%y"`
	-@ $(RM) oldcode/mostrecent
	-@ $(CD) oldcode; $(LN) `date "+%H-%d-%h-%y"` mostrecent
	- $(CP) *.cc oldcode/mostrecent
	- $(CP) *.h oldcode/mostrecent
	- $(CP) *.y oldcode/mostrecent
	- $(CP) *.css oldcode/mostrecent
	- $(CP) *.def oldcode/mostrecent
	- $(CP) *akefile* oldcode/mostrecent
	- $(CP) .*rc oldcode/mostrecent
	-@ $(COMPRESS) oldcode/mostrecent/* &

clean:	chkcpu clean_impl
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU); $(MAKE)  clean_impl )\
	else $(MAKE)  clean_impl; fi

clean_impl:  chkcpu 
	- $(RM) *.o *~ #* core *.output PDP++Recover.*.proj.gz

real_clean:	chkcpu 
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU); $(MAKE)  real_clean_impl )\
	else $(MAKE)  real_clean_impl; fi

real_clean_impl: chkcpu clean_impl
	- $(RM) *.ccx *.d

dist_clean:	chkcpu clean_impl
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU); $(MAKE)  dist_clean_impl )\
	else $(MAKE)  dist_clean_impl; fi

dist_clean_impl: chkcpu real_clean_impl
	- $(RM) lib*.$(LIB_EXT) $(EXE) $(EXE).old $(EXE).new

src_clean:	chkcpu clean_impl

wipe:  chkcpu
	- $(RM) *~ #* *%

touch:	chkcpu
	- $(TOUCH) $(HEADS) $(SRCS)

touch_objs:	chkcpu
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU); $(MAKE)  touch_objs_impl )\
	else $(MAKE)  touch_objs_impl; fi

touch_objs_impl: chkcpu
	- $(TOUCH) $(OBJS) $(EXEOBJS) $(VT_INST_OBJ) $(TI_INST_OBJ)

make_depend:	   MakeDepend

MakeDepend:	chkcpu cpu_dir depend

new_make_depend:       NewMakeDepend

NewMakeDepend:	chkcpu Makefiles depend

makefiles:	Makefiles

# note the following should not be used when make will not allow a new makefile
# to be run from within the old one!
# in this case, you must make 'NewMakefile' and then 'cpu_dir' in two stages
Makefiles:	chkcpu
	-@$(MAKE)  NewMakefile; $(MAKE)  cpu_dir

new_makefile:	   NewMakefile

NewMakefile: chkcpu
	-@ $(CP) Makefile Makefile.bak;\
	$(CAT) $(PDPDIR)/config/Makefile.defs $(PDPDIR)/config/Makefile.$(CPU) \
	  $(TOP)/Makefile.user Makefile.in $(PDPDIR)/config/Makefile.std >Makefile

cpu_dir:	chkcpu
	-@$(MKDIR) src_include 1>/dev/null 2>&1;\
	$(CD) src_include; $(LN) ../ $(PROJDIR) 1>/dev/null 2>&1;\
	$(CD) ..;\
	$(MKDIR) $(CPU) 1>/dev/null 2>&1;\
	$(CD) $(CPU);\
	$(RM) Makefile 1>/dev/null 2>&1;\
	$(CP) $(VPATH)/Makefile .;\
	$(RM) src_include;\
	$(LN) $(VPATH)/src_include src_include ;\
	$(RM) $(VPATH)/src_include/src_include 1>/dev/null 2>&1;\
	$(MKDIR) lib_include 1>/dev/null 2>&1;\
	for i in $(HEADS);\
	  do $(CMP) $(VPATH)/$$i lib_include/$$i || $(CP) $(VPATH)/$$i lib_include;\
	done;\
	if [ ! -f $(VPATH)/NoMakeTA ];\
	then ($(CMP) $(VPATH)/$(PROJNAME)_TA_type.hx $(PROJNAME)_TA_type.hx \
	 || ($(RM) $(PROJNAME)_TA_type.hx $(PROJNAME)_TA_type.h ;\
	     $(CP) $(VPATH)/$(PROJNAME)_TA_type.hx $(PROJNAME)_TA_type.hx ;\
	     $(CP) $(VPATH)/$(PROJNAME)_TA_type.h $(PROJNAME)_TA_type.h ) ;\
	$(CMP) $(VPATH)/$(PROJNAME)_TA_inst.hx $(PROJNAME)_TA_inst.hx \
	 || ($(RM) $(PROJNAME)_TA_inst.hx $(PROJNAME)_TA_inst.h ;\
	     $(CP) $(VPATH)/$(PROJNAME)_TA_inst.hx $(PROJNAME)_TA_inst.hx ;\
	     $(CP) $(VPATH)/$(PROJNAME)_TA_inst.h $(PROJNAME)_TA_inst.h );\
	$(CMP) $(VPATH)/$(PROJNAME)_TA.ccx $(PROJNAME)_TA.ccx \
	 || ($(RM) $(PROJNAME)_TA.ccx $(PROJNAME)_TA.cc ;\
	     $(CP) $(VPATH)/$(PROJNAME)_TA.ccx $(PROJNAME)_TA.ccx ;\
	     $(CP) $(VPATH)/$(PROJNAME)_TA.cc $(PROJNAME)_TA.cc ) )\
	fi;\
	if [ -f $(VPATH)/$(EXTRA_HX_FILE).hx ];\
	then ($(CMP) $(VPATH)/$(EXTRA_HX_FILE).hx $(EXTRA_HX_FILE).hx \
	 || ($(RM) $(EXTRA_HX_FILE).hx $(EXTRA_HX_FILE).h ;\
	     $(CP) $(VPATH)/$(EXTRA_HX_FILE).hx $(EXTRA_HX_FILE).hx ;\
	     $(CP) $(VPATH)/$(EXTRA_HX_FILE).h $(EXTRA_HX_FILE).h ) ) fi;\
	if [ -f $(VPATH)/$(EXTRA_CPU_FILE) ];\
	then ( $(CP) $(VPATH)/$(EXTRA_CPU_FILE) $(EXTRA_CPU_FILE) ) fi

local_cpu_dir: chkcpu
	-@$(MKDIR) $(LOC_OBJS)/$(PROJNAME) 1>/dev/null 2>&1;\
	$(CD) $(LOC_OBJS)/$(PROJNAME);\
	$(CAT) $(PDPDIR)/config/Makefile.defs $(PDPDIR)/config/Makefile.$(CPU) \
	  $(PDPDIR)/config/Makefile.init > Makefile;\
	$(CP) $(TOP)/$(PROJNAME)/Makefile.in Makefile.in;\
	$(MKDIR) $(CPU) 1>/dev/null 2>&1;\
	$(CD) $(TOP)/$(PROJNAME);\
	$(RM) -r $(CPU);\
	$(LN) $(LOC_OBJS)/$(PROJNAME)/$(CPU) $(CPU) 1>/dev/null 2>&1;\
	$(CD) $(LOC_OBJS)/$(PROJNAME);\
	$(LN) $(TOP)/$(PROJNAME)/src_include src_include 1>/dev/null 2>&1;\
	$(CD) $(TOP)/$(PROJNAME);\
	$(MAKE)  Makefiles

rm_cpu_dir:	chkcpu
	- $(RM) -r $(CPU)
	- $(RM) -r $(LOC_OBJS)/$(PROJNAME)/$(CPU)

depend:	chkcpu
	@echo "Making Dependencies"
	@if [ -d $(CPU) ]; then ( $(CD) $(CPU); $(RM) *.d; $(MAKE)  depend_impl )\
	else ( $(RM) *.d; $(MAKE)  depend_impl ) fi

# this is much easier, but not guaranteed to work..
#depend_impl:
#	makedepend -f Makefile $(IDIRS) $(VPATH)/*.cc

# this works always..
depend_impl:	$(DEPS_XX)
	@echo '/^# DO NOT DELETE THIS LINE/+1,$$d' >eddep
	@echo 'w' >>eddep
	@$(CP) Makefile Makefile.bak
	@$(ED) - Makefile < eddep
	@$(CAT) $(DEPS_XX) >>Makefile
#	@$(RM) eddep
	@if [ ! -f $(PROJNAME)_TA.d ]; then echo "# no dependencies" >$(PROJNAME)_TA.d ; fi

# DO NOT DELETE THIS LINE -- make depend depends on it.

